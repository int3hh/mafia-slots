// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
    Module.finishedDataFileDownloads = 0;
  }
  Module.expectedDataFileDownloads++;
  (function() {
   var loadPackage = function(metadata) {
  
      var PACKAGE_PATH;
      if (typeof window === 'object') {
        PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
      } else if (typeof location !== 'undefined') {
        // worker
        PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
      } else {
        throw 'using preloaded data can only be done on a web page or in a web worker';
      }
      var PACKAGE_NAME = 'mafia-slots.data';
      var REMOTE_PACKAGE_BASE = 'mafia-slots.data';
      if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
        Module['locateFile'] = Module['locateFilePackage'];
        err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
      }
      var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
    
      var REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];
      var PACKAGE_UUID = metadata['package_uuid'];
    
      function fetchRemotePackage(packageName, packageSize, callback, errback) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', packageName, true);
        xhr.responseType = 'arraybuffer';
        xhr.onprogress = function(event) {
          var url = packageName;
          var size = packageSize;
          if (event.total) size = event.total;
          if (event.loaded) {
            if (!xhr.addedTotal) {
              xhr.addedTotal = true;
              if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
              Module.dataFileDownloads[url] = {
                loaded: event.loaded,
                total: size
              };
            } else {
              Module.dataFileDownloads[url].loaded = event.loaded;
            }
            var total = 0;
            var loaded = 0;
            var num = 0;
            for (var download in Module.dataFileDownloads) {
            var data = Module.dataFileDownloads[download];
              total += data.total;
              loaded += data.loaded;
              num++;
            }
            total = Math.ceil(total * Module.expectedDataFileDownloads/num);
            if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
          } else if (!Module.dataFileDownloads) {
            if (Module['setStatus']) Module['setStatus']('Downloading data...');
          }
        };
        xhr.onerror = function(event) {
          throw new Error("NetworkError for: " + packageName);
        }
        xhr.onload = function(event) {
          if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            var packageData = xhr.response;
            callback(packageData);
          } else {
            throw new Error(xhr.statusText + " : " + xhr.responseURL);
          }
        };
        xhr.send(null);
      };

      function handleError(error) {
        console.error('package error:', error);
      };
    
        var fetchedCallback = null;
        var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

        if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
          if (fetchedCallback) {
            fetchedCallback(data);
            fetchedCallback = null;
          } else {
            fetched = data;
          }
        }, handleError);
      
    function runWithFS() {
  
      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
  Module['FS_createPath']('/', 'assets', true, true);
Module['FS_createPath']('/assets', 'images', true, true);
Module['FS_createPath']('/assets', 'fonts', true, true);
Module['FS_createPath']('/assets', 'sounds', true, true);

      function DataRequest(start, end, audio) {
        this.start = start;
        this.end = end;
        this.audio = audio;
      }
      DataRequest.prototype = {
        requests: {},
        open: function(mode, name) {
          this.name = name;
          this.requests[name] = this;
          Module['addRunDependency']('fp ' + this.name);
        },
        send: function() {},
        onload: function() {
          var byteArray = this.byteArray.subarray(this.start, this.end);
          this.finish(byteArray);
        },
        finish: function(byteArray) {
          var that = this;
  
          Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
          Module['removeRunDependency']('fp ' + that.name);
  
          this.requests[this.name] = null;
        }
      };
  
          var files = metadata['files'];
          for (var i = 0; i < files.length; ++i) {
            new DataRequest(files[i]['start'], files[i]['end'], files[i]['audio']).open('GET', files[i]['filename']);
          }
  
    
      function processPackageData(arrayBuffer) {
        Module.finishedDataFileDownloads++;
        assert(arrayBuffer, 'Loading data file failed.');
        assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        
          // Reuse the bytearray from the XHR as the source for file reads.
          DataRequest.prototype.byteArray = byteArray;
    
            var files = metadata['files'];
            for (var i = 0; i < files.length; ++i) {
              DataRequest.prototype.requests[files[i].filename].onload();
            }
                Module['removeRunDependency']('datafile_mafia-slots.data');

      };
      Module['addRunDependency']('datafile_mafia-slots.data');
    
      if (!Module.preloadResults) Module.preloadResults = {};
    
        Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
        if (fetched) {
          processPackageData(fetched);
          fetched = null;
        } else {
          fetchedCallback = processPackageData;
        }
      
    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }
  
   }
   loadPackage({"files": [{"start": 0, "audio": 0, "end": 24951, "filename": "/assets/images/money_20.png"}, {"start": 24951, "audio": 0, "end": 50574, "filename": "/assets/images/hustler_8.png"}, {"start": 50574, "audio": 0, "end": 74246, "filename": "/assets/images/scatter_17.png"}, {"start": 74246, "audio": 0, "end": 98066, "filename": "/assets/images/wild_11.png"}, {"start": 98066, "audio": 0, "end": 121676, "filename": "/assets/images/wild_12.png"}, {"start": 121676, "audio": 0, "end": 145098, "filename": "/assets/images/a_8.png"}, {"start": 145098, "audio": 0, "end": 160132, "filename": "/assets/images/k_4.png"}, {"start": 160132, "audio": 0, "end": 170332, "filename": "/assets/images/sside_1.png"}, {"start": 170332, "audio": 0, "end": 186605, "filename": "/assets/images/j_16.png"}, {"start": 186605, "audio": 0, "end": 199966, "filename": "/assets/images/bomb_14.png"}, {"start": 199966, "audio": 0, "end": 228011, "filename": "/assets/images/rat_16.png"}, {"start": 228011, "audio": 0, "end": 249271, "filename": "/assets/images/k_20.png"}, {"start": 249271, "audio": 0, "end": 278067, "filename": "/assets/images/boss_12.png"}, {"start": 278067, "audio": 0, "end": 297431, "filename": "/assets/images/k_13.png"}, {"start": 297431, "audio": 0, "end": 332115, "filename": "/assets/images/wild_24.png"}, {"start": 332115, "audio": 0, "end": 356992, "filename": "/assets/images/money_6.png"}, {"start": 356992, "audio": 0, "end": 378040, "filename": "/assets/images/k_11.png"}, {"start": 378040, "audio": 0, "end": 401238, "filename": "/assets/images/scatter_9.png"}, {"start": 401238, "audio": 0, "end": 421327, "filename": "/assets/images/q_9.png"}, {"start": 421327, "audio": 0, "end": 441735, "filename": "/assets/images/k_5.png"}, {"start": 441735, "audio": 0, "end": 895697, "filename": "/assets/images/backgroundoff.png"}, {"start": 895697, "audio": 0, "end": 923499, "filename": "/assets/images/hustler_1.png"}, {"start": 923499, "audio": 0, "end": 948447, "filename": "/assets/images/hustler_0.png"}, {"start": 948447, "audio": 0, "end": 969541, "filename": "/assets/images/a_2.png"}, {"start": 969541, "audio": 0, "end": 1001756, "filename": "/assets/images/scatter_1.png"}, {"start": 1001756, "audio": 0, "end": 1023520, "filename": "/assets/images/scatter_12.png"}, {"start": 1023520, "audio": 0, "end": 1052698, "filename": "/assets/images/boss_0.png"}, {"start": 1052698, "audio": 0, "end": 1065508, "filename": "/assets/images/bomb_9.png"}, {"start": 1065508, "audio": 0, "end": 1090426, "filename": "/assets/images/money_19.png"}, {"start": 1090426, "audio": 0, "end": 1113751, "filename": "/assets/images/ten_5.png"}, {"start": 1113751, "audio": 0, "end": 1139029, "filename": "/assets/images/money_17.png"}, {"start": 1139029, "audio": 0, "end": 1152073, "filename": "/assets/images/bomb_12.png"}, {"start": 1152073, "audio": 0, "end": 1165638, "filename": "/assets/images/k_3.png"}, {"start": 1165638, "audio": 0, "end": 1190756, "filename": "/assets/images/money_18.png"}, {"start": 1190756, "audio": 0, "end": 1210338, "filename": "/assets/images/q_8.png"}, {"start": 1210338, "audio": 0, "end": 1234415, "filename": "/assets/images/a_17.png"}, {"start": 1234415, "audio": 0, "end": 1253461, "filename": "/assets/images/k_14.png"}, {"start": 1253461, "audio": 0, "end": 1278746, "filename": "/assets/images/money_13.png"}, {"start": 1278746, "audio": 0, "end": 1300364, "filename": "/assets/images/ten_14.png"}, {"start": 1300364, "audio": 0, "end": 1317726, "filename": "/assets/images/q_13.png"}, {"start": 1317726, "audio": 0, "end": 1342889, "filename": "/assets/images/hustler_13.png"}, {"start": 1342889, "audio": 0, "end": 1361903, "filename": "/assets/images/j_9.png"}, {"start": 1361903, "audio": 0, "end": 1384438, "filename": "/assets/images/a_3.png"}, {"start": 1384438, "audio": 0, "end": 1412045, "filename": "/assets/images/hustler_22.png"}, {"start": 1412045, "audio": 0, "end": 1443562, "filename": "/assets/images/wild_6.png"}, {"start": 1443562, "audio": 0, "end": 1463007, "filename": "/assets/images/q_20.png"}, {"start": 1463007, "audio": 0, "end": 1491795, "filename": "/assets/images/boss_17.png"}, {"start": 1491795, "audio": 0, "end": 1505815, "filename": "/assets/images/q_3.png"}, {"start": 1505815, "audio": 0, "end": 1528945, "filename": "/assets/images/k_22.png"}, {"start": 1528945, "audio": 0, "end": 1552980, "filename": "/assets/images/a_14.png"}, {"start": 1552980, "audio": 0, "end": 1583371, "filename": "/assets/images/rat_21.png"}, {"start": 1583371, "audio": 0, "end": 1613965, "filename": "/assets/images/rat_4.png"}, {"start": 1613965, "audio": 0, "end": 1645771, "filename": "/assets/images/boss_5.png"}, {"start": 1645771, "audio": 0, "end": 1671619, "filename": "/assets/images/hustler_17.png"}, {"start": 1671619, "audio": 0, "end": 1686520, "filename": "/assets/images/j_4.png"}, {"start": 1686520, "audio": 0, "end": 1706487, "filename": "/assets/images/k_12.png"}, {"start": 1706487, "audio": 0, "end": 1732448, "filename": "/assets/images/money_11.png"}, {"start": 1732448, "audio": 0, "end": 1756982, "filename": "/assets/images/ten_8.png"}, {"start": 1756982, "audio": 0, "end": 1784860, "filename": "/assets/images/wild_8.png"}, {"start": 1784860, "audio": 0, "end": 1819268, "filename": "/assets/images/wild_3.png"}, {"start": 1819268, "audio": 0, "end": 1845728, "filename": "/assets/images/hustler_18.png"}, {"start": 1845728, "audio": 0, "end": 1870122, "filename": "/assets/images/a_19.png"}, {"start": 1870122, "audio": 0, "end": 1895678, "filename": "/assets/images/hustler_16.png"}, {"start": 1895678, "audio": 0, "end": 1917646, "filename": "/assets/images/scenter_gold.png"}, {"start": 1917646, "audio": 0, "end": 1945526, "filename": "/assets/images/rat_10.png"}, {"start": 1945526, "audio": 0, "end": 1969429, "filename": "/assets/images/wild_15.png"}, {"start": 1969429, "audio": 0, "end": 1996038, "filename": "/assets/images/wild_0.png"}, {"start": 1996038, "audio": 0, "end": 2018516, "filename": "/assets/images/ten_12.png"}, {"start": 2018516, "audio": 0, "end": 2046269, "filename": "/assets/images/hustler_2.png"}, {"start": 2046269, "audio": 0, "end": 2077430, "filename": "/assets/images/rat_2.png"}, {"start": 2077430, "audio": 0, "end": 2097435, "filename": "/assets/images/q_10.png"}, {"start": 2097435, "audio": 0, "end": 2120541, "filename": "/assets/images/k_9.png"}, {"start": 2120541, "audio": 0, "end": 2148618, "filename": "/assets/images/rat_9.png"}, {"start": 2148618, "audio": 0, "end": 2165632, "filename": "/assets/images/q_15.png"}, {"start": 2165632, "audio": 0, "end": 2193266, "filename": "/assets/images/hustler_23.png"}, {"start": 2193266, "audio": 0, "end": 2217275, "filename": "/assets/images/money_5.png"}, {"start": 2217275, "audio": 0, "end": 2240233, "filename": "/assets/images/a_4.png"}, {"start": 2240233, "audio": 0, "end": 2253254, "filename": "/assets/images/bomb_13.png"}, {"start": 2253254, "audio": 0, "end": 2281419, "filename": "/assets/images/wild_18.png"}, {"start": 2281419, "audio": 0, "end": 2674105, "filename": "/assets/images/bonusbkgd.png"}, {"start": 2674105, "audio": 0, "end": 2690370, "filename": "/assets/images/bomb_0.png"}, {"start": 2690370, "audio": 0, "end": 2716904, "filename": "/assets/images/money_10.png"}, {"start": 2716904, "audio": 0, "end": 2739387, "filename": "/assets/images/scatter_15.png"}, {"start": 2739387, "audio": 0, "end": 2763343, "filename": "/assets/images/ten_10.png"}, {"start": 2763343, "audio": 0, "end": 2776673, "filename": "/assets/images/bomb_8.png"}, {"start": 2776673, "audio": 0, "end": 2790134, "filename": "/assets/images/bomb_5.png"}, {"start": 2790134, "audio": 0, "end": 2817385, "filename": "/assets/images/logo.png"}, {"start": 2817385, "audio": 0, "end": 2830153, "filename": "/assets/images/bomb_18.png"}, {"start": 2830153, "audio": 0, "end": 2862226, "filename": "/assets/images/wild_20.png"}, {"start": 2862226, "audio": 0, "end": 2882881, "filename": "/assets/images/j_8.png"}, {"start": 2882881, "audio": 0, "end": 2906873, "filename": "/assets/images/a_16.png"}, {"start": 2906873, "audio": 0, "end": 2936962, "filename": "/assets/images/scatter_21.png"}, {"start": 2936962, "audio": 0, "end": 2965061, "filename": "/assets/images/boss_14.png"}, {"start": 2965061, "audio": 0, "end": 2978201, "filename": "/assets/images/bomb_21.png"}, {"start": 2978201, "audio": 0, "end": 2997132, "filename": "/assets/images/k_15.png"}, {"start": 2997132, "audio": 0, "end": 3015918, "filename": "/assets/images/j_21.png"}, {"start": 3015918, "audio": 0, "end": 3046925, "filename": "/assets/images/boss_21.png"}, {"start": 3046925, "audio": 0, "end": 3075362, "filename": "/assets/images/boss_16.png"}, {"start": 3075362, "audio": 0, "end": 3087675, "filename": "/assets/images/bomb_1.png"}, {"start": 3087675, "audio": 0, "end": 3112725, "filename": "/assets/images/a_11.png"}, {"start": 3112725, "audio": 0, "end": 3131687, "filename": "/assets/images/k_17.png"}, {"start": 3131687, "audio": 0, "end": 3145294, "filename": "/assets/images/bomb_23.png"}, {"start": 3145294, "audio": 0, "end": 3169571, "filename": "/assets/images/a_18.png"}, {"start": 3169571, "audio": 0, "end": 3196424, "filename": "/assets/images/hustler_19.png"}, {"start": 3196424, "audio": 0, "end": 3385631, "filename": "/assets/images/megawin.png"}, {"start": 3385631, "audio": 0, "end": 3411716, "filename": "/assets/images/hustler_7.png"}, {"start": 3411716, "audio": 0, "end": 3423478, "filename": "/assets/images/ten_1.png"}, {"start": 3423478, "audio": 0, "end": 3449833, "filename": "/assets/images/scatter_0.png"}, {"start": 3449833, "audio": 0, "end": 3482443, "filename": "/assets/images/boss_3.png"}, {"start": 3482443, "audio": 0, "end": 3507675, "filename": "/assets/images/ten_23.png"}, {"start": 3507675, "audio": 0, "end": 3542120, "filename": "/assets/images/wild_23.png"}, {"start": 3542120, "audio": 0, "end": 3565432, "filename": "/assets/images/a_7.png"}, {"start": 3565432, "audio": 0, "end": 3589305, "filename": "/assets/images/money_4.png"}, {"start": 3589305, "audio": 0, "end": 3620307, "filename": "/assets/images/rat_23.png"}, {"start": 3620307, "audio": 0, "end": 3650311, "filename": "/assets/images/rat_5.png"}, {"start": 3650311, "audio": 0, "end": 3670645, "filename": "/assets/images/q_21.png"}, {"start": 3670645, "audio": 0, "end": 3681765, "filename": "/assets/images/q_1.png"}, {"start": 3681765, "audio": 0, "end": 3704196, "filename": "/assets/images/q_6.png"}, {"start": 3704196, "audio": 0, "end": 3728226, "filename": "/assets/images/a_15.png"}, {"start": 3728226, "audio": 0, "end": 3751981, "filename": "/assets/images/ten_7.png"}, {"start": 3751981, "audio": 0, "end": 3774920, "filename": "/assets/images/a_6.png"}, {"start": 3774920, "audio": 0, "end": 3799868, "filename": "/assets/images/a_20.png"}, {"start": 3799868, "audio": 0, "end": 3821256, "filename": "/assets/images/ten_17.png"}, {"start": 3821256, "audio": 0, "end": 3845951, "filename": "/assets/images/ten_22.png"}, {"start": 3845951, "audio": 0, "end": 3858708, "filename": "/assets/images/bomb_2.png"}, {"start": 3858708, "audio": 0, "end": 3884048, "filename": "/assets/images/money_12.png"}, {"start": 3884048, "audio": 0, "end": 3915639, "filename": "/assets/images/boss_22.png"}, {"start": 3915639, "audio": 0, "end": 3929565, "filename": "/assets/images/bomb_6.png"}, {"start": 3929565, "audio": 0, "end": 3959007, "filename": "/assets/images/boss_11.png"}, {"start": 3959007, "audio": 0, "end": 3986144, "filename": "/assets/images/rat_0.png"}, {"start": 3986144, "audio": 0, "end": 4011099, "filename": "/assets/images/wild_10.png"}, {"start": 4011099, "audio": 0, "end": 4036376, "filename": "/assets/images/hustler_9.png"}, {"start": 4036376, "audio": 0, "end": 4061541, "filename": "/assets/images/money_14.png"}, {"start": 4061541, "audio": 0, "end": 4094904, "filename": "/assets/images/wild_5.png"}, {"start": 4094904, "audio": 0, "end": 4096796, "filename": "/assets/images/nomusic.png"}, {"start": 4096796, "audio": 0, "end": 4113773, "filename": "/assets/images/j_12.png"}, {"start": 4113773, "audio": 0, "end": 4127640, "filename": "/assets/images/bomb_7.png"}, {"start": 4127640, "audio": 0, "end": 4141347, "filename": "/assets/images/j_3.png"}, {"start": 4141347, "audio": 0, "end": 4171138, "filename": "/assets/images/scatter_5.png"}, {"start": 4171138, "audio": 0, "end": 4198911, "filename": "/assets/images/rat_11.png"}, {"start": 4198911, "audio": 0, "end": 4229464, "filename": "/assets/images/scatter_4.png"}, {"start": 4229464, "audio": 0, "end": 4252273, "filename": "/assets/images/scatter_16.png"}, {"start": 4252273, "audio": 0, "end": 4281217, "filename": "/assets/images/rat_18.png"}, {"start": 4281217, "audio": 0, "end": 4298692, "filename": "/assets/images/q_5.png"}, {"start": 4298692, "audio": 0, "end": 4322441, "filename": "/assets/images/wild_14.png"}, {"start": 4322441, "audio": 0, "end": 4341491, "filename": "/assets/images/k_18.png"}, {"start": 4341491, "audio": 0, "end": 4375558, "filename": "/assets/images/wild_22.png"}, {"start": 4375558, "audio": 0, "end": 4399985, "filename": "/assets/images/j_6.png"}, {"start": 4399985, "audio": 0, "end": 4417254, "filename": "/assets/images/q_0.png"}, {"start": 4417254, "audio": 0, "end": 4445305, "filename": "/assets/images/boss_15.png"}, {"start": 4445305, "audio": 0, "end": 4459224, "filename": "/assets/images/scenter_closed.png"}, {"start": 4459224, "audio": 0, "end": 4482881, "filename": "/assets/images/money_22.png"}, {"start": 4482881, "audio": 0, "end": 4517177, "filename": "/assets/images/wild_4.png"}, {"start": 4517177, "audio": 0, "end": 4542612, "filename": "/assets/images/scatter_18.png"}, {"start": 4542612, "audio": 0, "end": 4571872, "filename": "/assets/images/rat_19.png"}, {"start": 4571872, "audio": 0, "end": 4582091, "filename": "/assets/images/spining.png"}, {"start": 4582091, "audio": 0, "end": 4605370, "filename": "/assets/images/ten_20.png"}, {"start": 4605370, "audio": 0, "end": 4618034, "filename": "/assets/images/q_2.png"}, {"start": 4618034, "audio": 0, "end": 4637001, "filename": "/assets/images/k_16.png"}, {"start": 4637001, "audio": 0, "end": 4665864, "filename": "/assets/images/rat_7.png"}, {"start": 4665864, "audio": 0, "end": 4679051, "filename": "/assets/images/bomb_20.png"}, {"start": 4679051, "audio": 0, "end": 4702676, "filename": "/assets/images/wild_13.png"}, {"start": 4702676, "audio": 0, "end": 4733823, "filename": "/assets/images/scatter_23.png"}, {"start": 4733823, "audio": 0, "end": 4756537, "filename": "/assets/images/money_23.png"}, {"start": 4756537, "audio": 0, "end": 4771573, "filename": "/assets/images/q_4.png"}, {"start": 4771573, "audio": 0, "end": 4799735, "filename": "/assets/images/boss_13.png"}, {"start": 4799735, "audio": 0, "end": 4824750, "filename": "/assets/images/money_15.png"}, {"start": 4824750, "audio": 0, "end": 4842215, "filename": "/assets/images/k_0.png"}, {"start": 4842215, "audio": 0, "end": 4853451, "filename": "/assets/images/scenter_empty.png"}, {"start": 4853451, "audio": 0, "end": 4876217, "filename": "/assets/images/money_3.png"}, {"start": 4876217, "audio": 0, "end": 4902887, "filename": "/assets/images/wild_17.png"}, {"start": 4902887, "audio": 0, "end": 4930215, "filename": "/assets/images/hustler_4.png"}, {"start": 4930215, "audio": 0, "end": 4953722, "filename": "/assets/images/k_6.png"}, {"start": 4953722, "audio": 0, "end": 4983314, "filename": "/assets/images/boss_9.png"}, {"start": 4983314, "audio": 0, "end": 4995622, "filename": "/assets/images/j_2.png"}, {"start": 4995622, "audio": 0, "end": 5008508, "filename": "/assets/images/bomb_10.png"}, {"start": 5008508, "audio": 0, "end": 5039226, "filename": "/assets/images/scatter_22.png"}, {"start": 5039226, "audio": 0, "end": 5068507, "filename": "/assets/images/boss_18.png"}, {"start": 5068507, "audio": 0, "end": 5090837, "filename": "/assets/images/sside_gold.png"}, {"start": 5090837, "audio": 0, "end": 5114056, "filename": "/assets/images/ten_11.png"}, {"start": 5114056, "audio": 0, "end": 5131752, "filename": "/assets/images/q_7.png"}, {"start": 5131752, "audio": 0, "end": 5166393, "filename": "/assets/images/wild_2.png"}, {"start": 5166393, "audio": 0, "end": 5192125, "filename": "/assets/images/money_9.png"}, {"start": 5192125, "audio": 0, "end": 5209234, "filename": "/assets/images/q_16.png"}, {"start": 5209234, "audio": 0, "end": 5231596, "filename": "/assets/images/scatter_11.png"}, {"start": 5231596, "audio": 0, "end": 5256940, "filename": "/assets/images/hustler_15.png"}, {"start": 5256940, "audio": 0, "end": 5276759, "filename": "/assets/images/k_19.png"}, {"start": 5276759, "audio": 0, "end": 5291519, "filename": "/assets/images/j_0.png"}, {"start": 5291519, "audio": 0, "end": 5315393, "filename": "/assets/images/a_5.png"}, {"start": 5315393, "audio": 0, "end": 5333272, "filename": "/assets/images/j_10.png"}, {"start": 5333272, "audio": 0, "end": 5353530, "filename": "/assets/images/money_1.png"}, {"start": 5353530, "audio": 0, "end": 5375581, "filename": "/assets/images/k_10.png"}, {"start": 5375581, "audio": 0, "end": 5393797, "filename": "/assets/images/q_19.png"}, {"start": 5393797, "audio": 0, "end": 5419114, "filename": "/assets/images/money_16.png"}, {"start": 5419114, "audio": 0, "end": 5432934, "filename": "/assets/images/sside_empty.png"}, {"start": 5432934, "audio": 0, "end": 5454765, "filename": "/assets/images/scatter_14.png"}, {"start": 5454765, "audio": 0, "end": 5479777, "filename": "/assets/images/a_9.png"}, {"start": 5479777, "audio": 0, "end": 5507466, "filename": "/assets/images/rat_12.png"}, {"start": 5507466, "audio": 0, "end": 5535856, "filename": "/assets/images/rat_8.png"}, {"start": 5535856, "audio": 0, "end": 5563366, "filename": "/assets/images/hustler_21.png"}, {"start": 5563366, "audio": 0, "end": 5579191, "filename": "/assets/images/a_0.png"}, {"start": 5579191, "audio": 0, "end": 5580943, "filename": "/assets/images/nosfx.png"}, {"start": 5580943, "audio": 0, "end": 5603207, "filename": "/assets/images/ten_19.png"}, {"start": 5603207, "audio": 0, "end": 5627919, "filename": "/assets/images/a_12.png"}, {"start": 5627919, "audio": 0, "end": 5652723, "filename": "/assets/images/scatter_8.png"}, {"start": 5652723, "audio": 0, "end": 5676358, "filename": "/assets/images/k_23.png"}, {"start": 5676358, "audio": 0, "end": 5695820, "filename": "/assets/images/j_23.png"}, {"start": 5695820, "audio": 0, "end": 5716986, "filename": "/assets/images/q_22.png"}, {"start": 5716986, "audio": 0, "end": 5742285, "filename": "/assets/images/hustler_14.png"}, {"start": 5742285, "audio": 0, "end": 5773245, "filename": "/assets/images/rat_3.png"}, {"start": 5773245, "audio": 0, "end": 5807846, "filename": "/assets/images/wild_1.png"}, {"start": 5807846, "audio": 0, "end": 5824472, "filename": "/assets/images/j_18.png"}, {"start": 5824472, "audio": 0, "end": 5834738, "filename": "/assets/images/scenter_1.png"}, {"start": 5834738, "audio": 0, "end": 5862544, "filename": "/assets/images/rat_14.png"}, {"start": 5862544, "audio": 0, "end": 5875437, "filename": "/assets/images/bomb_19.png"}, {"start": 5875437, "audio": 0, "end": 6351639, "filename": "/assets/images/background.png"}, {"start": 6351639, "audio": 0, "end": 6370305, "filename": "/assets/images/j_5.png"}, {"start": 6370305, "audio": 0, "end": 6383344, "filename": "/assets/images/bomb_4.png"}, {"start": 6383344, "audio": 0, "end": 6394861, "filename": "/assets/images/k_1.png"}, {"start": 6394861, "audio": 0, "end": 6425592, "filename": "/assets/images/rat_22.png"}, {"start": 6425592, "audio": 0, "end": 6454009, "filename": "/assets/images/rat_17.png"}, {"start": 6454009, "audio": 0, "end": 6470357, "filename": "/assets/images/j_17.png"}, {"start": 6470357, "audio": 0, "end": 6495980, "filename": "/assets/images/money_7.png"}, {"start": 6495980, "audio": 0, "end": 6523091, "filename": "/assets/images/hustler_20.png"}, {"start": 6523091, "audio": 0, "end": 6544810, "filename": "/assets/images/scatter_13.png"}, {"start": 6544810, "audio": 0, "end": 6570202, "filename": "/assets/images/hustler_12.png"}, {"start": 6570202, "audio": 0, "end": 6601272, "filename": "/assets/images/scatter_3.png"}, {"start": 6601272, "audio": 0, "end": 6618445, "filename": "/assets/images/q_17.png"}, {"start": 6618445, "audio": 0, "end": 6639823, "filename": "/assets/images/ten_16.png"}, {"start": 6639823, "audio": 0, "end": 6670302, "filename": "/assets/images/boss_20.png"}, {"start": 6670302, "audio": 0, "end": 6701704, "filename": "/assets/images/scatter_2.png"}, {"start": 6701704, "audio": 0, "end": 6731290, "filename": "/assets/images/boss_10.png"}, {"start": 6731290, "audio": 0, "end": 6761414, "filename": "/assets/images/boss_8.png"}, {"start": 6761414, "audio": 0, "end": 6794646, "filename": "/assets/images/boss_1.png"}, {"start": 6794646, "audio": 0, "end": 6812816, "filename": "/assets/images/j_20.png"}, {"start": 6812816, "audio": 0, "end": 6834209, "filename": "/assets/images/ten_18.png"}, {"start": 6834209, "audio": 0, "end": 6860870, "filename": "/assets/images/scatter_7.png"}, {"start": 6860870, "audio": 0, "end": 6889163, "filename": "/assets/images/bonus.png"}, {"start": 6889163, "audio": 0, "end": 6915726, "filename": "/assets/images/hustler_6.png"}, {"start": 6915726, "audio": 0, "end": 6940812, "filename": "/assets/images/hustler_10.png"}, {"start": 6940812, "audio": 0, "end": 6954769, "filename": "/assets/images/ten_3.png"}, {"start": 6954769, "audio": 0, "end": 6976651, "filename": "/assets/images/money_2.png"}, {"start": 6976651, "audio": 0, "end": 6994340, "filename": "/assets/images/money_0.png"}, {"start": 6994340, "audio": 0, "end": 7007510, "filename": "/assets/images/bomb_11.png"}, {"start": 7007510, "audio": 0, "end": 7033963, "filename": "/assets/images/wild_9.png"}, {"start": 7033963, "audio": 0, "end": 7050419, "filename": "/assets/images/ten_4.png"}, {"start": 7050419, "audio": 0, "end": 7079369, "filename": "/assets/images/scatter_20.png"}, {"start": 7079369, "audio": 0, "end": 7095927, "filename": "/assets/images/j_13.png"}, {"start": 7095927, "audio": 0, "end": 7129478, "filename": "/assets/images/wild_21.png"}, {"start": 7129478, "audio": 0, "end": 7151369, "filename": "/assets/images/k_7.png"}, {"start": 7151369, "audio": 0, "end": 7175412, "filename": "/assets/images/ten_21.png"}, {"start": 7175412, "audio": 0, "end": 7202444, "filename": "/assets/images/hustler_5.png"}, {"start": 7202444, "audio": 0, "end": 7215555, "filename": "/assets/images/bomb_17.png"}, {"start": 7215555, "audio": 0, "end": 7239216, "filename": "/assets/images/j_7.png"}, {"start": 7239216, "audio": 0, "end": 7257754, "filename": "/assets/images/q_11.png"}, {"start": 7257754, "audio": 0, "end": 7274126, "filename": "/assets/images/j_14.png"}, {"start": 7274126, "audio": 0, "end": 7299347, "filename": "/assets/images/hustler_11.png"}, {"start": 7299347, "audio": 0, "end": 7324937, "filename": "/assets/images/money_8.png"}, {"start": 7324937, "audio": 0, "end": 7357214, "filename": "/assets/images/scatter_24.png"}, {"start": 7357214, "audio": 0, "end": 7381499, "filename": "/assets/images/a_13.png"}, {"start": 7381499, "audio": 0, "end": 7408443, "filename": "/assets/images/scatter_19.png"}, {"start": 7408443, "audio": 0, "end": 7422167, "filename": "/assets/images/bomb_15.png"}, {"start": 7422167, "audio": 0, "end": 7444486, "filename": "/assets/images/scatter_10.png"}, {"start": 7444486, "audio": 0, "end": 7457770, "filename": "/assets/images/k_2.png"}, {"start": 7457770, "audio": 0, "end": 7485480, "filename": "/assets/images/rat_13.png"}, {"start": 7485480, "audio": 0, "end": 7502618, "filename": "/assets/images/q_14.png"}, {"start": 7502618, "audio": 0, "end": 7525508, "filename": "/assets/images/k_8.png"}, {"start": 7525508, "audio": 0, "end": 7542834, "filename": "/assets/images/j_11.png"}, {"start": 7542834, "audio": 0, "end": 7572516, "filename": "/assets/images/wild_7.png"}, {"start": 7572516, "audio": 0, "end": 7585846, "filename": "/assets/images/bomb_22.png"}, {"start": 7585846, "audio": 0, "end": 7618722, "filename": "/assets/images/boss_2.png"}, {"start": 7618722, "audio": 0, "end": 7648401, "filename": "/assets/images/boss_19.png"}, {"start": 7648401, "audio": 0, "end": 7673754, "filename": "/assets/images/wild_16.png"}, {"start": 7673754, "audio": 0, "end": 7692921, "filename": "/assets/images/a_1.png"}, {"start": 7692921, "audio": 0, "end": 7706970, "filename": "/assets/images/sside_closed.png"}, {"start": 7706970, "audio": 0, "end": 7724657, "filename": "/assets/images/q_12.png"}, {"start": 7724657, "audio": 0, "end": 7734968, "filename": "/assets/images/j_1.png"}, {"start": 7734968, "audio": 0, "end": 7764703, "filename": "/assets/images/rat_20.png"}, {"start": 7764703, "audio": 0, "end": 7792302, "filename": "/assets/images/hustler_3.png"}, {"start": 7792302, "audio": 0, "end": 7821912, "filename": "/assets/images/rat_6.png"}, {"start": 7821912, "audio": 0, "end": 7853804, "filename": "/assets/images/boss_23.png"}, {"start": 7853804, "audio": 0, "end": 7875465, "filename": "/assets/images/q_23.png"}, {"start": 7875465, "audio": 0, "end": 7907722, "filename": "/assets/images/boss_4.png"}, {"start": 7907722, "audio": 0, "end": 7925028, "filename": "/assets/images/j_19.png"}, {"start": 7925028, "audio": 0, "end": 7938612, "filename": "/assets/images/bomb_16.png"}, {"start": 7938612, "audio": 0, "end": 7962968, "filename": "/assets/images/money_21.png"}, {"start": 7962968, "audio": 0, "end": 7988403, "filename": "/assets/images/a_23.png"}, {"start": 7988403, "audio": 0, "end": 8019602, "filename": "/assets/images/rat_1.png"}, {"start": 8019602, "audio": 0, "end": 8035871, "filename": "/assets/images/j_15.png"}, {"start": 8035871, "audio": 0, "end": 8061054, "filename": "/assets/images/a_21.png"}, {"start": 8061054, "audio": 0, "end": 8083320, "filename": "/assets/images/k_21.png"}, {"start": 8083320, "audio": 0, "end": 8109344, "filename": "/assets/images/ten_6.png"}, {"start": 8109344, "audio": 0, "end": 8135333, "filename": "/assets/images/sside_money.png"}, {"start": 8135333, "audio": 0, "end": 8152702, "filename": "/assets/images/q_18.png"}, {"start": 8152702, "audio": 0, "end": 8177832, "filename": "/assets/images/a_10.png"}, {"start": 8177832, "audio": 0, "end": 8199852, "filename": "/assets/images/ten_13.png"}, {"start": 8199852, "audio": 0, "end": 8213505, "filename": "/assets/images/ten_2.png"}, {"start": 8213505, "audio": 0, "end": 8234852, "filename": "/assets/images/ten_15.png"}, {"start": 8234852, "audio": 0, "end": 8265001, "filename": "/assets/images/wild_19.png"}, {"start": 8265001, "audio": 0, "end": 8295645, "filename": "/assets/images/boss_7.png"}, {"start": 8295645, "audio": 0, "end": 8323858, "filename": "/assets/images/scatter_6.png"}, {"start": 8323858, "audio": 0, "end": 8348839, "filename": "/assets/images/scenter_money.png"}, {"start": 8348839, "audio": 0, "end": 8368050, "filename": "/assets/images/j_22.png"}, {"start": 8368050, "audio": 0, "end": 8393019, "filename": "/assets/images/ten_9.png"}, {"start": 8393019, "audio": 0, "end": 8412542, "filename": "/assets/images/ten_0.png"}, {"start": 8412542, "audio": 0, "end": 8440344, "filename": "/assets/images/rat_15.png"}, {"start": 8440344, "audio": 0, "end": 8465685, "filename": "/assets/images/a_22.png"}, {"start": 8465685, "audio": 0, "end": 8478772, "filename": "/assets/images/bomb_3.png"}, {"start": 8478772, "audio": 0, "end": 8510041, "filename": "/assets/images/boss_6.png"}, {"start": 8510041, "audio": 0, "end": 8555929, "filename": "/assets/fonts/gangster.ttf"}, {"start": 8555929, "audio": 1, "end": 8716333, "filename": "/assets/sounds/megawin.ogg"}, {"start": 8716333, "audio": 1, "end": 8730394, "filename": "/assets/sounds/bet.ogg"}, {"start": 8730394, "audio": 1, "end": 8750099, "filename": "/assets/sounds/honk.ogg"}, {"start": 8750099, "audio": 1, "end": 16288993, "filename": "/assets/sounds/soundtrack.wav"}, {"start": 16288993, "audio": 1, "end": 16815994, "filename": "/assets/sounds/bonustrack.ogg"}, {"start": 16815994, "audio": 1, "end": 16830112, "filename": "/assets/sounds/win.ogg"}, {"start": 16830112, "audio": 1, "end": 16892399, "filename": "/assets/sounds/lose.ogg"}, {"start": 16892399, "audio": 1, "end": 17182463, "filename": "/assets/sounds/soundtrack.ogg"}, {"start": 17182463, "audio": 1, "end": 17219081, "filename": "/assets/sounds/bonus.ogg"}, {"start": 17219081, "audio": 1, "end": 17578741, "filename": "/assets/sounds/bet.wav"}, {"start": 17578741, "audio": 1, "end": 17597695, "filename": "/assets/sounds/glass.ogg"}, {"start": 17597695, "audio": 1, "end": 17637126, "filename": "/assets/sounds/spin.ogg"}], "remote_package_size": 17637126, "package_uuid": "49686338-93e7-4d5e-a317-6a38ff13c18e"});
  
  })();
  


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';


  read_ = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };


} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 420,
  'maximum': 420,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state) {
    assert(opts && opts.async, 'The call to ' + ident + ' is running asynchronously. If this was intended, add the async option to the ccall/cwrap call.');
    assert(!EmterpreterAsync.restartFunc, 'Cannot have multiple async ccalls in flight at once');
    return new Promise(function(resolve) {
      EmterpreterAsync.restartFunc = func;
      EmterpreterAsync.asyncFinalizers.push(function(ret) {
        if (stack !== 0) stackRestore(stack);
        resolve(convertReturnValue(ret));
      });
    });
  }

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  // If this is an async ccall, ensure we return a promise
  if (opts && opts.async) return Promise.resolve(ret);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 178448,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5421328,
    DYNAMIC_BASE = 5421328,
    DYNAMICTOP_PTR = 178256;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');


function abortStackOverflowEmterpreter() {
  abort("Emterpreter stack overflow! Decrease the recursion level or increase EMT_STACK_MAX in tools/emterpretify.py (current value " + EMT_STACK_MAX + ").");
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'mafia-slots.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
    ,
    'global': {
      'NaN': NaN,
      'Infinity': Infinity
    },
    'global.Math': Math,
    'asm2wasm': asm2wasmImports
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

Module['asm'] = createWasm;

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [function($0) { return (navigator.mediaDevices !== undefined && navigator.mediaDevices.getUserMedia !== undefined); },
 function($0) { try { var temp = new (window.AudioContext || window.webkitAudioContext)(); var sampleRate = temp.sampleRate; temp.close(); return sampleRate; } catch(e) { return 0; } },
 function($0, $1) { var device = miniaudio.get_device_by_index($0); if (device.scriptNode !== undefined) { device.scriptNode.onaudioprocess = function(e) {}; device.scriptNode.disconnect(); device.scriptNode = undefined; } if (device.streamNode !== undefined) { device.streamNode.disconnect(); device.streamNode = undefined; } device.webaudio.close(); device.webaudio = undefined; if (device.intermediaryBuffer !== undefined) { Module._free(device.intermediaryBuffer); device.intermediaryBuffer = undefined; device.intermediaryBufferView = undefined; device.intermediaryBufferSizeInBytes = undefined; } miniaudio.untrack_device_by_index($0); },
 function($0, $1, $2, $3, $4) { var channels = $0; var sampleRate = $1; var bufferSize = $2; var isCapture = $3; var pDevice = $4; if (typeof(miniaudio) === 'undefined') { return -1; } var device = {}; device.webaudio = new (window.AudioContext || window.webkitAudioContext)({sampleRate:sampleRate}); device.webaudio.suspend(); device.intermediaryBufferSizeInBytes = channels * bufferSize * 4; device.intermediaryBuffer = Module._malloc(device.intermediaryBufferSizeInBytes); device.intermediaryBufferView = new Float32Array(Module.HEAPF32.buffer, device.intermediaryBuffer, device.intermediaryBufferSizeInBytes); device.scriptNode = device.webaudio.createScriptProcessor(bufferSize, channels, channels); if (isCapture) { device.scriptNode.onaudioprocess = function(e) { if (device.intermediaryBuffer === undefined) { return; } for (var iChannel = 0; iChannel < e.outputBuffer.numberOfChannels; ++iChannel) { e.outputBuffer.getChannelData(iChannel).fill(0.0); } var sendSilence = false; if (device.streamNode === undefined) { sendSilence = true; } if (e.inputBuffer.numberOfChannels != channels) { console.log("Capture: Channel count mismatch. " + e.inputBufer.numberOfChannels + " != " + channels + ". Sending silence."); sendSilence = true; } var totalFramesProcessed = 0; while (totalFramesProcessed < e.inputBuffer.length) { var framesRemaining = e.inputBuffer.length - totalFramesProcessed; var framesToProcess = framesRemaining; if (framesToProcess > (device.intermediaryBufferSizeInBytes/channels/4)) { framesToProcess = (device.intermediaryBufferSizeInBytes/channels/4); } if (sendSilence) { device.intermediaryBufferView.fill(0.0); } else { for (var iFrame = 0; iFrame < framesToProcess; ++iFrame) { for (var iChannel = 0; iChannel < e.inputBuffer.numberOfChannels; ++iChannel) { device.intermediaryBufferView[iFrame*channels + iChannel] = e.inputBuffer.getChannelData(iChannel)[totalFramesProcessed + iFrame]; } } } ccall("ma_device_process_pcm_frames_capture__webaudio", "undefined", ["number", "number", "number"], [pDevice, framesToProcess, device.intermediaryBuffer]); totalFramesProcessed += framesToProcess; } }; navigator.mediaDevices.getUserMedia({audio:true, video:false}) .then(function(stream) { device.streamNode = device.webaudio.createMediaStreamSource(stream); device.streamNode.connect(device.scriptNode); device.scriptNode.connect(device.webaudio.destination); }) .catch(function(error) { device.scriptNode.connect(device.webaudio.destination); }); } else { device.scriptNode.onaudioprocess = function(e) { if (device.intermediaryBuffer === undefined) { return; } var outputSilence = false; if (e.outputBuffer.numberOfChannels != channels) { console.log("Playback: Channel count mismatch. " + e.outputBufer.numberOfChannels + " != " + channels + ". Outputting silence."); outputSilence = true; return; } var totalFramesProcessed = 0; while (totalFramesProcessed < e.outputBuffer.length) { var framesRemaining = e.outputBuffer.length - totalFramesProcessed; var framesToProcess = framesRemaining; if (framesToProcess > (device.intermediaryBufferSizeInBytes/channels/4)) { framesToProcess = (device.intermediaryBufferSizeInBytes/channels/4); } ccall("ma_device_process_pcm_frames_playback__webaudio", "undefined", ["number", "number", "number"], [pDevice, framesToProcess, device.intermediaryBuffer]); if (outputSilence) { for (var iChannel = 0; iChannel < e.outputBuffer.numberOfChannels; ++iChannel) { e.outputBuffer.getChannelData(iChannel).fill(0.0); } } else { for (var iChannel = 0; iChannel < e.outputBuffer.numberOfChannels; ++iChannel) { for (var iFrame = 0; iFrame < framesToProcess; ++iFrame) { e.outputBuffer.getChannelData(iChannel)[totalFramesProcessed + iFrame] = device.intermediaryBufferView[iFrame*channels + iChannel]; } } } totalFramesProcessed += framesToProcess; } }; device.scriptNode.connect(device.webaudio.destination); } return miniaudio.track_device(device); },
 function($0) { return miniaudio.get_device_by_index($0).webaudio.sampleRate; },
 function($0) { miniaudio.get_device_by_index($0).webaudio.resume(); },
 function($0) { miniaudio.get_device_by_index($0).webaudio.suspend(); },
 function($0) { if ((window.AudioContext || window.webkitAudioContext) === undefined) { return 0; } if (typeof(miniaudio) === 'undefined') { miniaudio = {}; miniaudio.devices = []; miniaudio.track_device = function(device) { for (var iDevice = 0; iDevice < miniaudio.devices.length; ++iDevice) { if (miniaudio.devices[iDevice] == null) { miniaudio.devices[iDevice] = device; return iDevice; } } miniaudio.devices.push(device); return miniaudio.devices.length - 1; }; miniaudio.untrack_device_by_index = function(deviceIndex) { miniaudio.devices[deviceIndex] = null; while (miniaudio.devices.length > 0) { if (miniaudio.devices[miniaudio.devices.length-1] == null) { miniaudio.devices.pop(); } else { break; } } }; miniaudio.untrack_device = function(device) { for (var iDevice = 0; iDevice < miniaudio.devices.length; ++iDevice) { if (miniaudio.devices[iDevice] == device) { return miniaudio.untrack_device_by_index(iDevice); } } }; miniaudio.get_device_by_index = function(deviceIndex) { return miniaudio.devices[deviceIndex]; }; } return 1; }];

function _emscripten_asm_const_ii(code, a0) {
  assert(typeof EmterpreterAsync !== 'object' || EmterpreterAsync.state !== 2, 'cannot have an EM_ASM on the stack when emterpreter pauses/resumes - the JS is not emterpreted, so we would end up running it again from the start');
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  assert(typeof EmterpreterAsync !== 'object' || EmterpreterAsync.state !== 2, 'cannot have an EM_ASM on the stack when emterpreter pauses/resumes - the JS is not emterpreted, so we would end up running it again from the start');
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iii(code, a0, a1) {
  assert(typeof EmterpreterAsync !== 'object' || EmterpreterAsync.state !== 2, 'cannot have an EM_ASM on the stack when emterpreter pauses/resumes - the JS is not emterpreted, so we would end up running it again from the start');
  return ASM_CONSTS[code](a0, a1);
}




// STATICTOP = STATIC_BASE + 177424;
/* global initializers */ /*__ATINIT__.push();*/








/* no memory initializer */
var tempDoublePtr = 178432;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___lock() {}

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            // FIXME: this is inefficient as the file packager may have
            //        copied the data into memory already - we may want to
            //        integrate more there and let the file packager loading
            //        code be able to query if memory growth is on or off.
            if (canOwn) {
              warnOnce('file packager has copied file data into memory, but in memory growth we are forced to copy it again (see --no-heap-copy)');
            }
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function(fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
      x = x | 0;
      return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
    }  

  function ___unlock() {}

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close(
  ) {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read(
  ) {
  return _fd_read.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek(
  ) {
  return _fd_seek.apply(null, arguments)
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write(
  ) {
  return _fd_write.apply(null, arguments)
  }

   

   

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      noExitRuntime = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          warnOnce('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'unwind';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function() {
        abort('Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)');
      },exitFullscreen:function() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function(func) {
        if (typeof requestAnimationFrame === 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeCallback:function(func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function() {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function() { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function(func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function(func, timeout) {
        noExitRuntime = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function(func, timeout) {
        noExitRuntime = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch(event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        readAsync(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,contextAttributes:{alpha:false,depth:false,stencil:false,antialias:false},stringCache:{},setErrorCode:function(code) {
        EGL.errorCode = code;
      },chooseConfig:function(display, attribList, config, config_size, numConfigs) {
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
  
        if (attribList) {
          // read attribList if it is non-null
          for(;;) {
            var param = HEAP32[((attribList)>>2)];
            if (param == 0x3021 /*EGL_ALPHA_SIZE*/) {
              var alphaSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.alpha = (alphaSize > 0);
            } else if (param == 0x3025 /*EGL_DEPTH_SIZE*/) {
              var depthSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.depth = (depthSize > 0);
            } else if (param == 0x3026 /*EGL_STENCIL_SIZE*/) {
              var stencilSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.stencil = (stencilSize > 0);
            } else if (param == 0x3031 /*EGL_SAMPLES*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples > 0);
            } else if (param == 0x3032 /*EGL_SAMPLE_BUFFERS*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples == 1);
            } else if (param == 0x3100 /*EGL_CONTEXT_PRIORITY_LEVEL_IMG*/) {
              var requestedPriority = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.lowLatency = (requestedPriority != 0x3103 /*EGL_CONTEXT_PRIORITY_LOW_IMG*/);
            } else if (param == 0x3038 /*EGL_NONE*/) {
                break;
            }
            attribList += 8;
          }
        }
  
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002;
        }
  
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  var _emscripten_asm_const_int=true;

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function() {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],removeAllHandlersOnTarget:function(target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled
        // Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitFullscreenEnabled.
        // TODO: If Safari at some point ships with unprefixed version, update the version check above.
        || document.webkitFullscreenEnabled
         ;
      }};
  
  function __requestPointerLock(target) {
      if (target.requestPointerLock) {
        target.requestPointerLock();
      } else if (target.msRequestPointerLock) {
        target.msRequestPointerLock();
      } else {
        // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
        // or if the whole browser just doesn't support the feature.
        if (document.body.requestPointerLock
          || document.body.msRequestPointerLock
          ) {
          return -3;
        } else {
          return -1;
        }
      }
      return 0;
    }function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(__requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  
  function __fillGamepadEventData(eventStruct, e) {
      HEAPF64[((eventStruct)>>3)]=e.timestamp;
      for(var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
        } else {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
        }
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
        } else {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
        }
      }
      HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
      HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
      HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
      HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1304, 64);
      stringToUTF8(e.mapping, eventStruct + 1368, 64);
    }function _emscripten_get_gamepad_status(index, gamepadState) {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      __fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_get_num_gamepads() {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    }

  
  function __fillPointerlockChangeEventData(eventStruct, e) {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      HEAP32[((eventStruct)>>2)]=isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
      stringToUTF8(nodeName, eventStruct + 4, 128);
      stringToUTF8(id, eventStruct + 132, 128);
    }function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) __fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }

   

  
  
  function __webgl_acquireInstancedArraysExtension(ctx) {
      // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('ANGLE_instanced_arrays');
      if (ext) {
        ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
        ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
        ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
      }
    }
  
  function __webgl_acquireVertexArrayObjectExtension(ctx) {
      // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('OES_vertex_array_object');
      if (ext) {
        ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
        ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
        ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
        ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
      }
    }
  
  function __webgl_acquireDrawBuffersExtension(ctx) {
      // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('WEBGL_draw_buffers');
      if (ext) {
        ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
      }
    }var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,init:function() {
        var miniTempFloatBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferFloatViews[i] = miniTempFloatBuffer.subarray(0, i+1);
        }
  
        var miniTempIntBuffer = new Int32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferIntViews[i] = miniTempIntBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBufferFloatViews:[0],miniTempBufferIntViews:[0],getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(canvas, webGLContextAttributes) {
  
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes)
            // https://caniuse.com/#feat=webgl
            );
  
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
  
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          __webgl_acquireInstancedArraysExtension(GLctx);
          __webgl_acquireVertexArrayObjectExtension(GLctx);
          __webgl_acquireDrawBuffersExtension(GLctx);
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2",
                                               // Old style prefixed forms of extensions (but still currently used on e.g. iPhone Xs as
                                               // tested on iOS 12.4.1):
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        exts.forEach(function(ext) {
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.timerQueriesEXT[id]);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _emscripten_glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _emscripten_glBindVertexArrayOES(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.timerQueriesEXT[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.timerQueriesEXT[id] = null;
      }
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArraysOES(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  
  var __tempFixedLengthArray=[];function _emscripten_glDrawBuffersWEBGL(n, bufs) {
  
      var bufArray = __tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _emscripten_glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    }

  function _emscripten_glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.timerQueriesEXT);
        query.name = id;
        GL.timerQueriesEXT[id] = query;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _emscripten_glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _emscripten_glGenVertexArraysOES(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      var numBytesWrittenExclNull = (bufSize > 0 && name) ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      var numBytesWrittenExclNull = (bufSize > 0 && name) ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 4: HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x500); // GL_INVALID_ENUM
            err('GL_INVALID_ENUM in glGet' + type + 'v: Native code calling glGet' + type + 'v(' + name_ + ') and it returns ' + result + ' of type ' + typeof(result) + '!');
            return;
        }
      }
  
      switch (type) {
        case 1: (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 0: HEAP32[((p)>>2)]=ret;    break;
        case 2:   HEAPF32[((p)>>2)]=ret;  break;
        case 4: HEAP8[((p)>>0)]=ret ? 1 : 0; break;
      }
    }function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 4);
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryivEXT(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(0x1F02 /*GL_VERSION*/);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(0x8B8C /*GL_SHADING_LANGUAGE_VERSION*/);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)]=data; break;
          case 2: HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 2);
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 0);
    }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)]=data; break;
          case 2: HEAPF32[((params)>>2)]=data; break;
          case 5: HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 5: HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glIsQueryEXT(id) {
      var query = GL.timerQueriesEXT[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    }

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glIsTexture(id) {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glIsVertexArrayOES(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0xCF5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _emscripten_glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.timerQueriesEXT[id], target);
    }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  function __colorChannelsInGlTextureFormat(format) {
      // Micro-optimizations for size: map format to size by subtracting smallest enum value (0x1902) from all values first.
      // Also omit the most common size value (1) from the list, which is assumed by formats not on the list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
      };
      return colorChannels[format - 0x1902]||1;
    }
  
  function __heapObjectForWebGLType(type) {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
  
      if (type == 1) return HEAPU8;
  
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        )
        return HEAPU32;
  
      return HEAPU16;
    }
  
  function __heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = __heapObjectForWebGLType(type);
      var shift = __heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1<<shift;
      var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferIntViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferIntViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferIntViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAP32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferIntViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAP32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAP32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      warnOnce('Rules for selecting event targets in HTML5 API are changing: instead of using document.getElementById() that only can refer to elements by their DOM ID, new event target selection mechanism uses the more flexible function document.querySelector() that can look up element names, classes, and complex CSS selectors. Build with -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1 to change to the new lookup rules. See https://github.com/emscripten-core/emscripten/pull/7977 for more details.');
      try {
        // The sensible "default" target varies between events, but use window as the default
        // since DOM events mostly can default to that. Specific callback registrations
        // override their own defaults.
        if (!target) return window;
        if (typeof target === "number") target = __specialEventTargets[target] || UTF8ToString(target);
        if (target === '#window') return window;
        else if (target === '#document') return document;
        else if (target === '#screen') return screen;
        else if (target === '#canvas') return Module['canvas'];
        return (typeof target === 'string') ? document.getElementById(target) : target;
      } catch(e) {
        // In Web Workers, some objects above, such as '#document' do not exist. Gracefully
        // return null for them.
        return null;
      }
    }function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = __findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock
        && !target.msRequestPointerLock
        ) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(__requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return __requestPointerLock(target);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
    }function _emscripten_resize_heap(requestedSize) {
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
  
      var PAGE_MULTIPLE = 65536;
  
      // Memory resize rules:
      // 1. When resizing, always produce a resized heap that is at least 16MB (to avoid tiny heap sizes receiving lots of repeated resizes at startup)
      // 2. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 3a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 3b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 4. Max size for the heap is capped at 2048MB-PAGE_MULTIPLE, or by WASM_MEM_MAX, or by ASAN limit, depending on which is smallest
      // 5. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      var maxHeapSize = 2147483648 - PAGE_MULTIPLE;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      var minHeapSize = 16777216;
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for(var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  function _emscripten_run_script(ptr) {
      eval(UTF8ToString(ptr));
    }

  function _emscripten_sample_gamepad_data() {
      return (JSEvents.lastGamepadState = (navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null)))
        ? 0 : -1;
    }

  
  
  
  function __getBoundingClientRect(e) {
      return e.getBoundingClientRect();
    }function __fillMouseEventData(eventStruct, e, target) {
      HEAP32[((eventStruct)>>2)]=e.screenX;
      HEAP32[(((eventStruct)+(4))>>2)]=e.screenY;
      HEAP32[(((eventStruct)+(8))>>2)]=e.clientX;
      HEAP32[(((eventStruct)+(12))>>2)]=e.clientY;
      HEAP32[(((eventStruct)+(16))>>2)]=e.ctrlKey;
      HEAP32[(((eventStruct)+(20))>>2)]=e.shiftKey;
      HEAP32[(((eventStruct)+(24))>>2)]=e.altKey;
      HEAP32[(((eventStruct)+(28))>>2)]=e.metaKey;
      HEAP16[(((eventStruct)+(32))>>1)]=e.button;
      HEAP16[(((eventStruct)+(34))>>1)]=e.buttons;
      var movementX = e["movementX"]
        || (e.screenX-JSEvents.previousScreenX)
        ;
      var movementY = e["movementY"]
        || (e.screenY-JSEvents.previousScreenY)
        ;
  
      HEAP32[(((eventStruct)+(36))>>2)]=movementX;
      HEAP32[(((eventStruct)+(40))>>2)]=movementY;
  
      if (Module['canvas']) {
        var rect = __getBoundingClientRect(Module['canvas']);
        HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;
      } else { // Canvas is not initialized, return 0.
        HEAP32[(((eventStruct)+(52))>>2)]=0;
        HEAP32[(((eventStruct)+(56))>>2)]=0;
      }
      var rect = __specialEventTargets.indexOf(target) < 0 ? __getBoundingClientRect(target) : {'left':0,'top':0};
      HEAP32[(((eventStruct)+(44))>>2)]=e.clientX - rect.left;
      HEAP32[(((eventStruct)+(48))>>2)]=e.clientY - rect.top;
  
      // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/emscripten-core/emscripten/pull/4997
      // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
      if (e.type !== 'wheel' && e.type !== 'mousewheel') {
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      }
    }function __registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 64 );
      target = __findEventTarget(target);
  
      var mouseEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        __fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_click_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click", targetThread);
      return 0;
    }

  
  
  function __fillFullscreenChangeEventData(eventStruct, e) {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      HEAP32[((eventStruct)>>2)]=isFullscreen;
      HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
      stringToUTF8(nodeName, eventStruct + 8, 128);
      stringToUTF8(id, eventStruct + 136, 128);
      HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
      HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
      HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
      HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    }function __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc( 280 );
  
      var fullscreenChangeEventhandlerFunc = function(ev) {
        var e = ev || event;
  
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        __fillFullscreenChangeEventData(fullscreenChangeEvent, e);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = target ? __findEventTarget(target) : __specialEventTargets[1];
      if (!target) return -4;
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
  
  
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
  
      return 0;
    }

  
  function __registerGamepadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc( 1432 );
  
      var gamepadEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var gamepadEvent = JSEvents.gamepadEvent;
        __fillGamepadEventData(gamepadEvent, e["gamepad"]);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
      return 0;
    }

  
  function __registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc( 164 );
  
      var keyEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var keyEventData = JSEvents.keyEvent;
        stringToUTF8(e.key ? e.key : "", keyEventData + 0, 32);
        stringToUTF8(e.code ? e.code : "", keyEventData + 32, 32);
        HEAP32[(((keyEventData)+(64))>>2)]=e.location;
        HEAP32[(((keyEventData)+(68))>>2)]=e.ctrlKey;
        HEAP32[(((keyEventData)+(72))>>2)]=e.shiftKey;
        HEAP32[(((keyEventData)+(76))>>2)]=e.altKey;
        HEAP32[(((keyEventData)+(80))>>2)]=e.metaKey;
        HEAP32[(((keyEventData)+(84))>>2)]=e.repeat;
        stringToUTF8(e.locale ? e.locale : "", keyEventData + 88, 32);
        stringToUTF8(e.char ? e.char : "", keyEventData + 120, 32);
        HEAP32[(((keyEventData)+(152))>>2)]=e.charCode;
        HEAP32[(((keyEventData)+(156))>>2)]=e.keyCode;
        HEAP32[(((keyEventData)+(160))>>2)]=e.which;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
      return 0;
    }


  
  function __registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1684 );
  
      target = __findEventTarget(target);
  
      var touchEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var touches = {};
        for(var i = 0; i < e.touches.length; ++i) {
          var touch = e.touches[i];
          touch.changed = false;
          touches[touch.identifier] = touch;
        }
        for(var i = 0; i < e.changedTouches.length; ++i) {
          var touch = e.changedTouches[i];
          touches[touch.identifier] = touch;
          touch.changed = true;
        }
        for(var i = 0; i < e.targetTouches.length; ++i) {
          var touch = e.targetTouches[i];
          touches[touch.identifier].onTarget = true;
        }
  
        var touchEvent = JSEvents.touchEvent;
        var ptr = touchEvent;
        HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
        HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
        HEAP32[(((ptr)+(12))>>2)]=e.altKey;
        HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
        ptr += 20; // Advance to the start of the touch array.
        var canvasRect = Module['canvas'] ? __getBoundingClientRect(Module['canvas']) : undefined;
        var targetRect = __getBoundingClientRect(target);
        var numTouches = 0;
        for(var i in touches) {
          var t = touches[i];
          HEAP32[((ptr)>>2)]=t.identifier;
          HEAP32[(((ptr)+(4))>>2)]=t.screenX;
          HEAP32[(((ptr)+(8))>>2)]=t.screenY;
          HEAP32[(((ptr)+(12))>>2)]=t.clientX;
          HEAP32[(((ptr)+(16))>>2)]=t.clientY;
          HEAP32[(((ptr)+(20))>>2)]=t.pageX;
          HEAP32[(((ptr)+(24))>>2)]=t.pageY;
          HEAP32[(((ptr)+(28))>>2)]=t.changed;
          HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
          if (canvasRect) {
            HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
            HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
          } else {
            HEAP32[(((ptr)+(44))>>2)]=0;
            HEAP32[(((ptr)+(48))>>2)]=0;            
          }
          HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
          HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
  
          ptr += 52;
  
          if (++numTouches >= 32) {
            break;
          }
        }
        HEAP32[((touchEvent)>>2)]=numTouches;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(0x1F02 /*GL_VERSION*/);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(0x8B8C /*GL_SHADING_LANGUAGE_VERSION*/);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0xCF5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  var GLFW={Window:function(id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function(id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function(keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
  
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function(win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function(event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        dynCall_vii(GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function(keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        dynCall_viiiii(GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function(event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function(event) {
        GLFW.refreshJoysticks();
      },onKeydown:function(event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function(event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function(event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function(event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        dynCall_vidd(GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function(event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function(event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        dynCall_viiii(GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function(event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        dynCall_vidd(GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function(width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        dynCall_viii(GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        dynCall_viii(GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },getTime:function() {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function(winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function(cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function() {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.keyFunc;
        win.keyFunc = cbfun;
        return prevcbfun;
      },setCharCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.charFunc;
        win.charFunc = cbfun;
        return prevcbfun;
      },setMouseButtonCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.mouseButtonFunc;
        win.mouseButtonFunc = cbfun;
        return prevcbfun;
      },setCursorPosCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.cursorPosFunc;
        win.cursorPosFunc = cbfun;
        return prevcbfun;
      },setScrollCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.scrollFunc;
        win.scrollFunc = cbfun;
        return prevcbfun;
      },setDropCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.dropFunc;
        win.dropFunc = cbfun;
        return prevcbfun;
      },onDrop:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              dynCall_viii(GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowSizeFunc;
        win.windowSizeFunc = cbfun;
  
  
        return prevcbfun;
      },setWindowCloseCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowCloseFunc;
        win.windowCloseFunc = cbfun;
        return prevcbfun;
      },setWindowRefreshCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowRefreshFunc;
        win.windowRefreshFunc = cbfun;
        return prevcbfun;
      },onClickRequestPointerLock:function(e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function(winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function(winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function(winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function(winid, x, y) {
      },getWindowPos:function(winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function(winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function(winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function(winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            Browser.requestFullscreen();
          } else {
            Browser.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        dynCall_viii(win.windowSizeFunc, win.id, width, height);
      },createWindow:function(width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          Browser.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function(winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          dynCall_vi(win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function(winid) {
      },GLFW2ParamToGLFW3Param:function(param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetVideoModes(monitor, count) {
      setValue(count, 0, 'i32');
      return 0;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwSetCharCallback(winid, cbfun) {
      return GLFW.setCharCallback(winid, cbfun);
    }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.cursorEnterFunc;
      win.cursorEnterFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      return GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetDropCallback(winid, cbfun) {
      return GLFW.setDropCallback(winid, cbfun);
    }

  function _glfwSetErrorCallback(cbfun) {
      var prevcbfun = GLFW.errorFunc;
      GLFW.errorFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      return GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      return GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      return GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.windowIconifyFunc;
      win.windowIconifyFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      return GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }



  var _llvm_cos_f32=Math_cos;

  var _llvm_cos_f64=Math_cos;

  
   

  var _llvm_sin_f32=Math_sin;

  var _llvm_sin_f64=Math_sin;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      if (rqtp === 0) {
        ___setErrNo(28);
        return -1;
      }
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
        ___setErrNo(28);
        return -1;
      }
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function _pthread_attr_destroy(attr) {
      /* int pthread_attr_destroy(pthread_attr_t *attr); */
      //FIXME: should destroy the pthread_attr_t struct
      return 0;
    }

  function _pthread_attr_init(attr) {
      /* int pthread_attr_init(pthread_attr_t *attr); */
      //FIXME: should allocate a pthread_attr_t
      return 0;
    }

  function _pthread_cond_destroy() { return 0; }

  function _pthread_cond_init() { return 0; }

  function _pthread_create() {
      return 6;
    }

  function _pthread_join() {}

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullScreen"] = function Module_requestFullScreen() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() { return performance['now'](); };
  ;
var GLctx; GL.init();
for (var i = 0; i < 32; i++) __tempFixedLengthArray.push(new Array(i));;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Math_floor,Math_ceil,Int8Array,Int32Array

function nullFunc_ff(x) { abortFnPtrError(x, 'ff'); }
function nullFunc_fff(x) { abortFnPtrError(x, 'fff'); }
function nullFunc_i(x) { abortFnPtrError(x, 'i'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_iiiiii(x) { abortFnPtrError(x, 'iiiiii'); }
function nullFunc_v(x) { abortFnPtrError(x, 'v'); }
function nullFunc_vf(x) { abortFnPtrError(x, 'vf'); }
function nullFunc_vff(x) { abortFnPtrError(x, 'vff'); }
function nullFunc_vffff(x) { abortFnPtrError(x, 'vffff'); }
function nullFunc_vfi(x) { abortFnPtrError(x, 'vfi'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_vidd(x) { abortFnPtrError(x, 'vidd'); }
function nullFunc_vif(x) { abortFnPtrError(x, 'vif'); }
function nullFunc_viff(x) { abortFnPtrError(x, 'viff'); }
function nullFunc_vifff(x) { abortFnPtrError(x, 'vifff'); }
function nullFunc_viffff(x) { abortFnPtrError(x, 'viffff'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }
function nullFunc_viif(x) { abortFnPtrError(x, 'viif'); }
function nullFunc_viii(x) { abortFnPtrError(x, 'viii'); }
function nullFunc_viiii(x) { abortFnPtrError(x, 'viiii'); }
function nullFunc_viiiii(x) { abortFnPtrError(x, 'viiiii'); }
function nullFunc_viiiiii(x) { abortFnPtrError(x, 'viiiiii'); }
function nullFunc_viiiiiii(x) { abortFnPtrError(x, 'viiiiiii'); }
function nullFunc_viiiiiiii(x) { abortFnPtrError(x, 'viiiiiiii'); }
function nullFunc_viiiiiiiii(x) { abortFnPtrError(x, 'viiiiiiiii'); }

var asmGlobalArg = {};

var asmLibraryArg = { "EMTSTACKTOP": EMTSTACKTOP, "EMT_STACK_MAX": EMT_STACK_MAX, "___assert_fail": ___assert_fail, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___unlock": ___unlock, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__colorChannelsInGlTextureFormat": __colorChannelsInGlTextureFormat, "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize, "__fillFullscreenChangeEventData": __fillFullscreenChangeEventData, "__fillGamepadEventData": __fillGamepadEventData, "__fillMouseEventData": __fillMouseEventData, "__fillPointerlockChangeEventData": __fillPointerlockChangeEventData, "__findEventTarget": __findEventTarget, "__getBoundingClientRect": __getBoundingClientRect, "__glGenObject": __glGenObject, "__heapAccessShiftForWebGLHeap": __heapAccessShiftForWebGLHeap, "__heapObjectForWebGLType": __heapObjectForWebGLType, "__memory_base": 1024, "__registerFullscreenChangeEventCallback": __registerFullscreenChangeEventCallback, "__registerGamepadEventCallback": __registerGamepadEventCallback, "__registerKeyEventCallback": __registerKeyEventCallback, "__registerMouseEventCallback": __registerMouseEventCallback, "__registerTouchEventCallback": __registerTouchEventCallback, "__requestPointerLock": __requestPointerLock, "__table_base": 0, "__webgl_acquireDrawBuffersExtension": __webgl_acquireDrawBuffersExtension, "__webgl_acquireInstancedArraysExtension": __webgl_acquireInstancedArraysExtension, "__webgl_acquireVertexArrayObjectExtension": __webgl_acquireVertexArrayObjectExtension, "_eglGetProcAddress": _eglGetProcAddress, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE, "_emscripten_glDrawBuffersWEBGL": _emscripten_glDrawBuffersWEBGL, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT, "_emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT, "_emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT, "_emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT, "_emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glIsVertexArrayOES": _emscripten_glIsVertexArrayOES, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_emscripten_resize_heap": _emscripten_resize_heap, "_emscripten_run_script": _emscripten_run_script, "_emscripten_sample_gamepad_data": _emscripten_sample_gamepad_data, "_emscripten_set_click_callback_on_thread": _emscripten_set_click_callback_on_thread, "_emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread, "_emscripten_set_gamepadconnected_callback_on_thread": _emscripten_set_gamepadconnected_callback_on_thread, "_emscripten_set_gamepaddisconnected_callback_on_thread": _emscripten_set_gamepaddisconnected_callback_on_thread, "_emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread, "_emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread, "_emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread, "_emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread, "_exit": _exit, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindAttribLocation": _glBindAttribLocation, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBlendFunc": _glBlendFunc, "_glBufferData": _glBufferData, "_glBufferSubData": _glBufferSubData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glClearDepthf": _glClearDepthf, "_glCompileShader": _glCompileShader, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glCullFace": _glCullFace, "_glDeleteBuffers": _glDeleteBuffers, "_glDeleteProgram": _glDeleteProgram, "_glDeleteShader": _glDeleteShader, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_glDetachShader": _glDetachShader, "_glDisable": _glDisable, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_glDrawArrays": _glDrawArrays, "_glDrawElements": _glDrawElements, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glFrontFace": _glFrontFace, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGetAttribLocation": _glGetAttribLocation, "_glGetFloatv": _glGetFloatv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetString": _glGetString, "_glGetUniformLocation": _glGetUniformLocation, "_glLinkProgram": _glLinkProgram, "_glPixelStorei": _glPixelStorei, "_glReadPixels": _glReadPixels, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameterf": _glTexParameterf, "_glTexParameteri": _glTexParameteri, "_glUniform1i": _glUniform1i, "_glUniform4f": _glUniform4f, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_glfwCreateWindow": _glfwCreateWindow, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_glfwDestroyWindow": _glfwDestroyWindow, "_glfwGetCursorPos": _glfwGetCursorPos, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_glfwGetTime": _glfwGetTime, "_glfwGetVideoModes": _glfwGetVideoModes, "_glfwInit": _glfwInit, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glfwSetCharCallback": _glfwSetCharCallback, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_glfwSetDropCallback": _glfwSetDropCallback, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwSwapInterval": _glfwSwapInterval, "_glfwTerminate": _glfwTerminate, "_glfwWindowHint": _glfwWindowHint, "_llvm_cos_f32": _llvm_cos_f32, "_llvm_cos_f64": _llvm_cos_f64, "_llvm_cttz_i32": _llvm_cttz_i32, "_llvm_sin_f32": _llvm_sin_f32, "_llvm_sin_f64": _llvm_sin_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_nanosleep": _nanosleep, "_pthread_attr_destroy": _pthread_attr_destroy, "_pthread_attr_init": _pthread_attr_init, "_pthread_cond_destroy": _pthread_cond_destroy, "_pthread_cond_init": _pthread_cond_init, "_pthread_create": _pthread_create, "_pthread_join": _pthread_join, "_time": _time, "_usleep": _usleep, "abort": abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "abortStackOverflowEmterpreter": abortStackOverflowEmterpreter, "demangle": demangle, "demangleAll": demangleAll, "eb": eb, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "emscripten_realloc_buffer": emscripten_realloc_buffer, "getTempRet0": getTempRet0, "jsStackTrace": jsStackTrace, "memory": wasmMemory, "nullFunc_ff": nullFunc_ff, "nullFunc_fff": nullFunc_fff, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vf": nullFunc_vf, "nullFunc_vff": nullFunc_vff, "nullFunc_vffff": nullFunc_vffff, "nullFunc_vfi": nullFunc_vfi, "nullFunc_vi": nullFunc_vi, "nullFunc_vidd": nullFunc_vidd, "nullFunc_vif": nullFunc_vif, "nullFunc_viff": nullFunc_viff, "nullFunc_vifff": nullFunc_vifff, "nullFunc_viffff": nullFunc_viffff, "nullFunc_vii": nullFunc_vii, "nullFunc_viif": nullFunc_viif, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "setTempRet0": setTempRet0, "stackTrace": stackTrace, "stringToNewUTF8": stringToNewUTF8, "table": wasmTable, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var tempDoublePtr=env.tempDoublePtr|0;
  var EMTSTACKTOP=env.EMTSTACKTOP|0;
  var EMT_STACK_MAX=env.EMT_STACK_MAX|0;
  var eb=env.eb|0;
var __THREW__ = 0;
var threwValue = 0;
var setjmpId = 0;
var tempInt = 0;
var tempBigInt = 0;
var tempBigIntS = 0;
var tempValue = 0;
var tempDouble = 0.0;
var nan = global.NaN;
var inf = global.Infinity;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortStackOverflow=env.abortStackOverflow;
  var abortStackOverflowEmterpreter=env.abortStackOverflowEmterpreter;
  var nullFunc_ff=env.nullFunc_ff;
  var nullFunc_fff=env.nullFunc_fff;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iidiiii=env.nullFunc_iidiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vf=env.nullFunc_vf;
  var nullFunc_vff=env.nullFunc_vff;
  var nullFunc_vffff=env.nullFunc_vffff;
  var nullFunc_vfi=env.nullFunc_vfi;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_vif=env.nullFunc_vif;
  var nullFunc_viff=env.nullFunc_viff;
  var nullFunc_vifff=env.nullFunc_vifff;
  var nullFunc_viffff=env.nullFunc_viffff;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viif=env.nullFunc_viif;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var ___assert_fail=env.___assert_fail;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___wasi_fd_close=env.___wasi_fd_close;
  var ___wasi_fd_read=env.___wasi_fd_read;
  var ___wasi_fd_seek=env.___wasi_fd_seek;
  var ___wasi_fd_write=env.___wasi_fd_write;
  var __colorChannelsInGlTextureFormat=env.__colorChannelsInGlTextureFormat;
  var __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize;
  var __fillFullscreenChangeEventData=env.__fillFullscreenChangeEventData;
  var __fillGamepadEventData=env.__fillGamepadEventData;
  var __fillMouseEventData=env.__fillMouseEventData;
  var __fillPointerlockChangeEventData=env.__fillPointerlockChangeEventData;
  var __findEventTarget=env.__findEventTarget;
  var __getBoundingClientRect=env.__getBoundingClientRect;
  var __glGenObject=env.__glGenObject;
  var __heapAccessShiftForWebGLHeap=env.__heapAccessShiftForWebGLHeap;
  var __heapObjectForWebGLType=env.__heapObjectForWebGLType;
  var __registerFullscreenChangeEventCallback=env.__registerFullscreenChangeEventCallback;
  var __registerGamepadEventCallback=env.__registerGamepadEventCallback;
  var __registerKeyEventCallback=env.__registerKeyEventCallback;
  var __registerMouseEventCallback=env.__registerMouseEventCallback;
  var __registerTouchEventCallback=env.__registerTouchEventCallback;
  var __requestPointerLock=env.__requestPointerLock;
  var __webgl_acquireDrawBuffersExtension=env.__webgl_acquireDrawBuffersExtension;
  var __webgl_acquireInstancedArraysExtension=env.__webgl_acquireInstancedArraysExtension;
  var __webgl_acquireVertexArrayObjectExtension=env.__webgl_acquireVertexArrayObjectExtension;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_exit_pointerlock=env._emscripten_exit_pointerlock;
  var _emscripten_get_gamepad_status=env._emscripten_get_gamepad_status;
  var _emscripten_get_heap_size=env._emscripten_get_heap_size;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_get_num_gamepads=env._emscripten_get_num_gamepads;
  var _emscripten_get_pointerlock_status=env._emscripten_get_pointerlock_status;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _emscripten_glBeginQueryEXT=env._emscripten_glBeginQueryEXT;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _emscripten_glBindVertexArrayOES=env._emscripten_glBindVertexArrayOES;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glClear=env._emscripten_glClear;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteQueriesEXT=env._emscripten_glDeleteQueriesEXT;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _emscripten_glDeleteVertexArraysOES=env._emscripten_glDeleteVertexArraysOES;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glDrawArraysInstancedANGLE=env._emscripten_glDrawArraysInstancedANGLE;
  var _emscripten_glDrawBuffersWEBGL=env._emscripten_glDrawBuffersWEBGL;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_glDrawElementsInstancedANGLE=env._emscripten_glDrawElementsInstancedANGLE;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _emscripten_glEndQueryEXT=env._emscripten_glEndQueryEXT;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _emscripten_glGenQueriesEXT=env._emscripten_glGenQueriesEXT;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glGenVertexArraysOES=env._emscripten_glGenVertexArraysOES;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glGetQueryObjecti64vEXT=env._emscripten_glGetQueryObjecti64vEXT;
  var _emscripten_glGetQueryObjectivEXT=env._emscripten_glGetQueryObjectivEXT;
  var _emscripten_glGetQueryObjectui64vEXT=env._emscripten_glGetQueryObjectui64vEXT;
  var _emscripten_glGetQueryObjectuivEXT=env._emscripten_glGetQueryObjectuivEXT;
  var _emscripten_glGetQueryivEXT=env._emscripten_glGetQueryivEXT;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _emscripten_glHint=env._emscripten_glHint;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_glIsQueryEXT=env._emscripten_glIsQueryEXT;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _emscripten_glIsVertexArrayOES=env._emscripten_glIsVertexArrayOES;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glQueryCounterEXT=env._emscripten_glQueryCounterEXT;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _emscripten_glVertexAttribDivisorANGLE=env._emscripten_glVertexAttribDivisorANGLE;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_request_pointerlock=env._emscripten_request_pointerlock;
  var _emscripten_resize_heap=env._emscripten_resize_heap;
  var _emscripten_run_script=env._emscripten_run_script;
  var _emscripten_sample_gamepad_data=env._emscripten_sample_gamepad_data;
  var _emscripten_set_click_callback_on_thread=env._emscripten_set_click_callback_on_thread;
  var _emscripten_set_fullscreenchange_callback_on_thread=env._emscripten_set_fullscreenchange_callback_on_thread;
  var _emscripten_set_gamepadconnected_callback_on_thread=env._emscripten_set_gamepadconnected_callback_on_thread;
  var _emscripten_set_gamepaddisconnected_callback_on_thread=env._emscripten_set_gamepaddisconnected_callback_on_thread;
  var _emscripten_set_keypress_callback_on_thread=env._emscripten_set_keypress_callback_on_thread;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_set_touchcancel_callback_on_thread=env._emscripten_set_touchcancel_callback_on_thread;
  var _emscripten_set_touchend_callback_on_thread=env._emscripten_set_touchend_callback_on_thread;
  var _emscripten_set_touchmove_callback_on_thread=env._emscripten_set_touchmove_callback_on_thread;
  var _emscripten_set_touchstart_callback_on_thread=env._emscripten_set_touchstart_callback_on_thread;
  var _exit=env._exit;
  var _fd_close=env._fd_close;
  var _fd_read=env._fd_read;
  var _fd_seek=env._fd_seek;
  var _fd_write=env._fd_write;
  var _glActiveTexture=env._glActiveTexture;
  var _glAttachShader=env._glAttachShader;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _glBindBuffer=env._glBindBuffer;
  var _glBindTexture=env._glBindTexture;
  var _glBlendFunc=env._glBlendFunc;
  var _glBufferData=env._glBufferData;
  var _glBufferSubData=env._glBufferSubData;
  var _glClear=env._glClear;
  var _glClearColor=env._glClearColor;
  var _glClearDepthf=env._glClearDepthf;
  var _glCompileShader=env._glCompileShader;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _glCreateProgram=env._glCreateProgram;
  var _glCreateShader=env._glCreateShader;
  var _glCullFace=env._glCullFace;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glDeleteProgram=env._glDeleteProgram;
  var _glDeleteShader=env._glDeleteShader;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glDepthFunc=env._glDepthFunc;
  var _glDetachShader=env._glDetachShader;
  var _glDisable=env._glDisable;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _glDrawArrays=env._glDrawArrays;
  var _glDrawElements=env._glDrawElements;
  var _glEnable=env._glEnable;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _glFrontFace=env._glFrontFace;
  var _glGenBuffers=env._glGenBuffers;
  var _glGenTextures=env._glGenTextures;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glGetFloatv=env._glGetFloatv;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glGetString=env._glGetString;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glLinkProgram=env._glLinkProgram;
  var _glPixelStorei=env._glPixelStorei;
  var _glReadPixels=env._glReadPixels;
  var _glShaderSource=env._glShaderSource;
  var _glTexImage2D=env._glTexImage2D;
  var _glTexParameterf=env._glTexParameterf;
  var _glTexParameteri=env._glTexParameteri;
  var _glUniform1i=env._glUniform1i;
  var _glUniform4f=env._glUniform4f;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _glUseProgram=env._glUseProgram;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glViewport=env._glViewport;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _glfwDefaultWindowHints=env._glfwDefaultWindowHints;
  var _glfwDestroyWindow=env._glfwDestroyWindow;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _glfwGetPrimaryMonitor=env._glfwGetPrimaryMonitor;
  var _glfwGetTime=env._glfwGetTime;
  var _glfwGetVideoModes=env._glfwGetVideoModes;
  var _glfwInit=env._glfwInit;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback;
  var _glfwSetCursorPosCallback=env._glfwSetCursorPosCallback;
  var _glfwSetDropCallback=env._glfwSetDropCallback;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _glfwSetWindowIconifyCallback=env._glfwSetWindowIconifyCallback;
  var _glfwSetWindowShouldClose=env._glfwSetWindowShouldClose;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _glfwSwapInterval=env._glfwSwapInterval;
  var _glfwTerminate=env._glfwTerminate;
  var _glfwWindowHint=env._glfwWindowHint;
  var _llvm_cos_f32=env._llvm_cos_f32;
  var _llvm_cos_f64=env._llvm_cos_f64;
  var _llvm_cttz_i32=env._llvm_cttz_i32;
  var _llvm_sin_f32=env._llvm_sin_f32;
  var _llvm_sin_f64=env._llvm_sin_f64;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _nanosleep=env._nanosleep;
  var _pthread_attr_destroy=env._pthread_attr_destroy;
  var _pthread_attr_init=env._pthread_attr_init;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_create=env._pthread_create;
  var _pthread_join=env._pthread_join;
  var _time=env._time;
  var _usleep=env._usleep;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var demangle=env.demangle;
  var demangleAll=env.demangleAll;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var emscripten_realloc_buffer=env.emscripten_realloc_buffer;
  var jsStackTrace=env.jsStackTrace;
  var stackTrace=env.stackTrace;
  var stringToNewUTF8=env.stringToNewUTF8;
  var STACKTOP = 178448;
  var STACK_MAX = 5421328;
  var tempFloat = Math_fround(0);
  var asyncState = 0;
  const f0 = Math_fround(0);

function _emscripten_replace_memory(newBuffer) {
  HEAP8 = new Int8Array(newBuffer);
  HEAPU8 = new Uint8Array(newBuffer);
  HEAP16 = new Int16Array(newBuffer);
  HEAPU16 = new Uint16Array(newBuffer);
  HEAP32 = new Int32Array(newBuffer);
  HEAPU32 = new Uint32Array(newBuffer);
  HEAPF32 = new Float32Array(newBuffer);
  HEAPF64 = new Float64Array(newBuffer);

  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function _stbv_start_decoder(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, f67 = f0;
 i66 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 1312 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1312);
 i65 = i1 + 1284 | 0;
 i64 = i1 + 1280 | 0;
 i5 = i1 + 1292 | 0;
 i31 = i1 + 1291 | 0;
 i26 = i1 + 1290 | 0;
 i6 = i1 + 1276 | 0;
 i52 = i1 + 1272 | 0;
 i50 = i1 + 1268 | 0;
 i46 = i1 + 1264 | 0;
 i49 = i1 + 1260 | 0;
 i53 = i1 + 1256 | 0;
 i3 = i1 + 1252 | 0;
 i4 = i1 + 1248 | 0;
 i30 = i1 + 1244 | 0;
 i17 = i1 + 1240 | 0;
 i21 = i1 + 1236 | 0;
 i23 = i1 + 1232 | 0;
 i13 = i1 + 1228 | 0;
 i28 = i1 + 1224 | 0;
 i7 = i1 + 1220 | 0;
 i8 = i1 + 1216 | 0;
 i14 = i1 + 1212 | 0;
 i15 = i1 + 1208 | 0;
 i18 = i1 + 1204 | 0;
 i20 = i1 + 1200 | 0;
 i29 = i1 + 1196 | 0;
 i19 = i1 + 1192 | 0;
 i12 = i1 + 1188 | 0;
 i22 = i1 + 1184 | 0;
 i10 = i1 + 1180 | 0;
 i27 = i1 + 1176 | 0;
 i9 = i1 + 1172 | 0;
 i16 = i1 + 1168 | 0;
 i24 = i1 + 1164 | 0;
 i11 = i1 + 1160 | 0;
 i25 = i1 + 1156 | 0;
 i32 = i1 + 1152 | 0;
 i39 = i1 + 1148 | 0;
 i38 = i1 + 64 | 0;
 i34 = i1 + 1144 | 0;
 i37 = i1 + 1140 | 0;
 i33 = i1 + 1136 | 0;
 i36 = i1 + 1132 | 0;
 i35 = i1 + 1128 | 0;
 i44 = i1;
 i43 = i1 + 1124 | 0;
 i41 = i1 + 1289 | 0;
 i42 = i1 + 1288 | 0;
 i40 = i1 + 1120 | 0;
 i45 = i1 + 1116 | 0;
 i47 = i1 + 1112 | 0;
 i48 = i1 + 1108 | 0;
 i51 = i1 + 1104 | 0;
 i58 = i1 + 1100 | 0;
 i56 = i1 + 1096 | 0;
 i57 = i1 + 1092 | 0;
 i61 = i1 + 1088 | 0;
 i63 = i1 + 1084 | 0;
 i55 = i1 + 1080 | 0;
 i59 = i1 + 1076 | 0;
 i60 = i1 + 1072 | 0;
 i62 = i1 + 1068 | 0;
 i54 = i1 + 1064 | 0;
 HEAP32[i64 >> 2] = i2;
 HEAP32[i49 >> 2] = 0;
 HEAP32[i53 >> 2] = 0;
 if (!(_stbv_start_page(HEAP32[i64 >> 2] | 0) | 0)) {
  HEAP32[i65 >> 2] = 0;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i1 = HEAP32[i64 >> 2] | 0;
 if (!(HEAPU8[(HEAP32[i64 >> 2] | 0) + 1375 >> 0] & 2)) {
  i64 = _stbv_error(i1, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i2 = HEAP32[i64 >> 2] | 0;
 if (HEAPU8[i1 + 1375 >> 0] & 4 | 0) {
  i64 = _stbv_error(i2, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i1 = HEAP32[i64 >> 2] | 0;
 if (HEAPU8[i2 + 1375 >> 0] & 1 | 0) {
  i64 = _stbv_error(i1, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i2 = HEAP32[i64 >> 2] | 0;
 if ((HEAP32[i1 + 1116 >> 2] | 0) != 1) {
  i64 = _stbv_error(i2, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i1 = HEAP32[i64 >> 2] | 0;
 if ((HEAPU8[i2 + 1120 >> 0] | 0) != 30) {
  i64 = _stbv_error(i1, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i2 = ((_stbv_get8(i1) | 0) & 255 | 0) != 1;
 i1 = HEAP32[i64 >> 2] | 0;
 if (i2) {
  i64 = _stbv_error(i1, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 if (!(_stbv_getn(i1, i5, 6) | 0)) {
  i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 10) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i2 = (_stbv_vorbis_validate(i5) | 0) != 0;
 i1 = HEAP32[i64 >> 2] | 0;
 if (!i2) {
  i64 = _stbv_error(i1, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i2 = (_stbv_get32(i1) | 0) != 0;
 i1 = HEAP32[i64 >> 2] | 0;
 if (i2) {
  i64 = _stbv_error(i1, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i1 = (_stbv_get8(i1) | 0) & 255;
 HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] = i1;
 i1 = HEAP32[i64 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] | 0)) {
  i64 = _stbv_error(i1, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i2 = HEAP32[i64 >> 2] | 0;
 if ((HEAP32[i1 + 4 >> 2] | 0) > 16) {
  i64 = _stbv_error(i2, 5) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i1 = _stbv_get32(i2) | 0;
 HEAP32[HEAP32[i64 >> 2] >> 2] = i1;
 i1 = HEAP32[i64 >> 2] | 0;
 if (!(HEAP32[HEAP32[i64 >> 2] >> 2] | 0)) {
  i64 = _stbv_error(i1, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 _stbv_get32(i1) | 0;
 _stbv_get32(HEAP32[i64 >> 2] | 0) | 0;
 _stbv_get32(HEAP32[i64 >> 2] | 0) | 0;
 i2 = _stbv_get8(HEAP32[i64 >> 2] | 0) | 0;
 HEAP8[i31 >> 0] = i2;
 HEAP32[i3 >> 2] = HEAPU8[i31 >> 0] & 15;
 HEAP32[i4 >> 2] = HEAPU8[i31 >> 0] >> 4;
 HEAP32[(HEAP32[i64 >> 2] | 0) + 112 >> 2] = 1 << HEAP32[i3 >> 2];
 HEAP32[(HEAP32[i64 >> 2] | 0) + 116 >> 2] = 1 << HEAP32[i4 >> 2];
 if ((HEAP32[i3 >> 2] | 0) < 6 | (HEAP32[i3 >> 2] | 0) > 13) {
  i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 if ((HEAP32[i4 >> 2] | 0) < 6 | (HEAP32[i4 >> 2] | 0) > 13) {
  i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i1 = HEAP32[i64 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) > (HEAP32[i4 >> 2] | 0)) {
  i64 = _stbv_error(i1, 20) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i1 = _stbv_get8(i1) | 0;
 HEAP8[i31 >> 0] = i1;
 i1 = HEAP32[i64 >> 2] | 0;
 if (!(HEAPU8[i31 >> 0] & 1)) {
  i64 = _stbv_error(i1, 34) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 if (!(_stbv_start_page(i1) | 0)) {
  HEAP32[i65 >> 2] = 0;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 if (!(_stbv_start_packet(HEAP32[i64 >> 2] | 0) | 0)) {
  HEAP32[i65 >> 2] = 0;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 do {
  i4 = _stbv_next_segment(HEAP32[i64 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = i4;
  _stbv_skip(HEAP32[i64 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  HEAP8[(HEAP32[i64 >> 2] | 0) + 1376 >> 0] = 0;
 } while ((HEAP32[i6 >> 2] | 0) != 0);
 if (!(_stbv_start_packet(HEAP32[i64 >> 2] | 0) | 0)) {
  HEAP32[i65 >> 2] = 0;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 do if (HEAP8[(HEAP32[i64 >> 2] | 0) + 48 >> 0] | 0) {
  if (_stbv_is_whole_packet_present(HEAP32[i64 >> 2] | 0, 1) | 0) break;
  if ((HEAP32[(HEAP32[i64 >> 2] | 0) + 100 >> 2] | 0) == 21) HEAP32[(HEAP32[i64 >> 2] | 0) + 100 >> 2] = 20;
  HEAP32[i65 >> 2] = 0;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 } while (0);
 _stbv_crc32_init();
 if ((_stbv_get8_packet(HEAP32[i64 >> 2] | 0) | 0) != 5) {
  i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 HEAP32[i52 >> 2] = 0;
 while (1) {
  if ((HEAP32[i52 >> 2] | 0) >= 6) break;
  i6 = (_stbv_get8_packet(HEAP32[i64 >> 2] | 0) | 0) & 255;
  HEAP8[i5 + (HEAP32[i52 >> 2] | 0) >> 0] = i6;
  HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
 }
 i6 = (_stbv_vorbis_validate(i5) | 0) != 0;
 i1 = HEAP32[i64 >> 2] | 0;
 if (!i6) {
  i64 = _stbv_error(i1, 20) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i1 = (_stbv_get_bits(i1, 8) | 0) + 1 | 0;
 HEAP32[(HEAP32[i64 >> 2] | 0) + 120 >> 2] = i1;
 i1 = HEAP32[i64 >> 2] | 0;
 i1 = _stbv_setup_malloc(i1 | 0, (HEAP32[i1 + 120 >> 2] | 0) * 2096 | 0) | 0;
 HEAP32[(HEAP32[i64 >> 2] | 0) + 124 >> 2] = i1;
 i1 = HEAP32[i64 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i64 >> 2] | 0) + 124 >> 2] | 0)) {
  i64 = _stbv_error(i1, 3) | 0;
  HEAP32[i65 >> 2] = i64;
  i65 = HEAP32[i65 >> 2] | 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 _memset(HEAP32[i1 + 124 >> 2] | 0, 0, (HEAP32[(HEAP32[i64 >> 2] | 0) + 120 >> 2] | 0) * 2096 | 0) | 0;
 HEAP32[i52 >> 2] = 0;
 L108 : while (1) {
  if ((HEAP32[i52 >> 2] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 120 >> 2] | 0)) {
   i3 = 179;
   break;
  }
  HEAP32[i23 >> 2] = 0;
  HEAP32[i28 >> 2] = (HEAP32[(HEAP32[i64 >> 2] | 0) + 124 >> 2] | 0) + ((HEAP32[i52 >> 2] | 0) * 2096 | 0);
  i1 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
  HEAP8[i31 >> 0] = i1;
  i1 = HEAP32[i64 >> 2] | 0;
  if ((HEAPU8[i31 >> 0] | 0) != 66) {
   i3 = 60;
   break;
  }
  i1 = (_stbv_get_bits(i1, 8) | 0) & 255;
  HEAP8[i31 >> 0] = i1;
  i1 = HEAP32[i64 >> 2] | 0;
  if ((HEAPU8[i31 >> 0] | 0) != 67) {
   i3 = 62;
   break;
  }
  i1 = (_stbv_get_bits(i1, 8) | 0) & 255;
  HEAP8[i31 >> 0] = i1;
  i1 = HEAP32[i64 >> 2] | 0;
  if ((HEAPU8[i31 >> 0] | 0) != 86) {
   i3 = 64;
   break;
  }
  i6 = (_stbv_get_bits(i1, 8) | 0) & 255;
  HEAP8[i31 >> 0] = i6;
  i6 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) << 8;
  HEAP32[HEAP32[i28 >> 2] >> 2] = i6 + (HEAPU8[i31 >> 0] | 0);
  i6 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
  HEAP8[i31 >> 0] = i6;
  i6 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
  HEAP8[i26 >> 0] = i6;
  i6 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) << 16;
  HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] = i6 + (HEAPU8[i26 >> 0] << 8) + (HEAPU8[i31 >> 0] | 0);
  i6 = _stbv_get_bits(HEAP32[i64 >> 2] | 0, 1) | 0;
  HEAP32[i17 >> 2] = i6;
  if (HEAP32[i17 >> 2] | 0) i1 = 0; else i1 = _stbv_get_bits(HEAP32[i64 >> 2] | 0, 1) | 0;
  HEAP8[(HEAP32[i28 >> 2] | 0) + 23 >> 0] = i1;
  if (!(HEAP32[HEAP32[i28 >> 2] >> 2] | 0)) if (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0) {
   i3 = 69;
   break;
  }
  i1 = HEAP32[i64 >> 2] | 0;
  i2 = HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0;
  if (HEAP8[(HEAP32[i28 >> 2] | 0) + 23 >> 0] | 0) {
   i6 = _stbv_setup_temp_malloc(i1, i2) | 0;
   HEAP32[i13 >> 2] = i6;
  } else {
   i6 = _stbv_setup_malloc(i1, i2) | 0;
   HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] = i6;
   HEAP32[i13 >> 2] = i6;
  }
  if (!(HEAP32[i13 >> 2] | 0)) {
   i3 = 74;
   break;
  }
  L125 : do if (HEAP32[i17 >> 2] | 0) {
   HEAP32[i7 >> 2] = 0;
   i6 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 5) | 0) + 1 | 0;
   HEAP32[i8 >> 2] = i6;
   while (1) {
    if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0)) break L125;
    HEAP32[i14 >> 2] = (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
    i6 = HEAP32[i64 >> 2] | 0;
    i6 = _stbv_get_bits(i6, _stbv_ilog(HEAP32[i14 >> 2] | 0) | 0) | 0;
    HEAP32[i15 >> 2] = i6;
    if (((HEAP32[i7 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0) > (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0)) {
     i3 = 79;
     break L108;
    }
    _memset((HEAP32[i13 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i8 >> 2] & 255 | 0, HEAP32[i15 >> 2] | 0) | 0;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
  } else {
   HEAP32[i50 >> 2] = 0;
   while (1) {
    if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0)) break L125;
    if (HEAPU8[(HEAP32[i28 >> 2] | 0) + 23 >> 0] | 0) i1 = _stbv_get_bits(HEAP32[i64 >> 2] | 0, 1) | 0; else i1 = 1;
    HEAP32[i18 >> 2] = i1;
    if (HEAP32[i18 >> 2] | 0) {
     i6 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 5) | 0) + 1 & 255;
     HEAP8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i50 >> 2] | 0) >> 0] = i6;
     HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
     if ((HEAPU8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i50 >> 2] | 0) >> 0] | 0) == 32) {
      i3 = 87;
      break L108;
     }
    } else HEAP8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i50 >> 2] | 0) >> 0] = -1;
    HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
   }
  } while (0);
  do if (HEAPU8[(HEAP32[i28 >> 2] | 0) + 23 >> 0] | 0) {
   if ((HEAP32[i23 >> 2] | 0) < (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] >> 2 | 0)) break;
   if ((HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0) > (HEAP32[(HEAP32[i64 >> 2] | 0) + 16 >> 2] | 0)) HEAP32[(HEAP32[i64 >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2];
   i6 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] = i6;
   if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0)) {
    i3 = 95;
    break L108;
   }
   i6 = HEAP32[i28 >> 2] | 0;
   _memcpy(HEAP32[i6 + 8 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0) | 0;
   _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0);
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2];
   HEAP8[(HEAP32[i28 >> 2] | 0) + 23 >> 0] = 0;
  } while (0);
  L151 : do if (HEAP8[(HEAP32[i28 >> 2] | 0) + 23 >> 0] | 0) HEAP32[i21 >> 2] = HEAP32[i23 >> 2]; else {
   HEAP32[i21 >> 2] = 0;
   HEAP32[i50 >> 2] = 0;
   while (1) {
    if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0)) break L151;
    do if ((HEAPU8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i50 >> 2] | 0) >> 0] | 0) > 10) {
     if ((HEAPU8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i50 >> 2] | 0) >> 0] | 0) == 255) break;
     HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
    } while (0);
    HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] = HEAP32[i21 >> 2];
  HEAP32[i30 >> 2] = 0;
  do if (HEAP8[(HEAP32[i28 >> 2] | 0) + 23 >> 0] | 0) {
   if (HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] | 0) {
    i1 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] | 0) | 0;
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] = i1;
    i1 = HEAP32[i64 >> 2] | 0;
    if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0)) {
     i3 = 110;
     break L108;
    }
    i1 = _stbv_setup_temp_malloc(i1, HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] << 2) | 0;
    HEAP32[(HEAP32[i28 >> 2] | 0) + 32 >> 2] = i1;
    i1 = HEAP32[i64 >> 2] | 0;
    if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 32 >> 2] | 0)) {
     i3 = 112;
     break L108;
    }
    i6 = _stbv_setup_temp_malloc(i1, HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] << 2) | 0;
    HEAP32[i30 >> 2] = i6;
    if (!(HEAP32[i30 >> 2] | 0)) {
     i3 = 114;
     break L108;
    }
   }
   i6 = HEAP32[i28 >> 2] | 0;
   HEAP32[i20 >> 2] = (HEAP32[i6 + 4 >> 2] | 0) + (HEAP32[i6 + 2092 >> 2] << 3);
   if ((HEAP32[i20 >> 2] | 0) >>> 0 <= (HEAP32[(HEAP32[i64 >> 2] | 0) + 16 >> 2] | 0) >>> 0) break;
   HEAP32[(HEAP32[i64 >> 2] | 0) + 16 >> 2] = HEAP32[i20 >> 2];
  } else {
   i6 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] << 2) | 0;
   HEAP32[(HEAP32[i28 >> 2] | 0) + 32 >> 2] = i6;
   if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 32 >> 2] | 0)) {
    i3 = 107;
    break L108;
   }
  } while (0);
  i6 = HEAP32[i28 >> 2] | 0;
  i6 = (_stbv_compute_codewords(i6 | 0, HEAP32[i13 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, HEAP32[i30 >> 2] | 0) | 0) != 0;
  i1 = HEAP32[i28 >> 2] | 0;
  if (!i6) {
   i3 = 118;
   break;
  }
  if (HEAP32[i1 + 2092 >> 2] | 0) {
   i1 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, (HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] | 0) + 1 << 2) | 0;
   HEAP32[(HEAP32[i28 >> 2] | 0) + 2084 >> 2] = i1;
   i1 = HEAP32[i64 >> 2] | 0;
   if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 2084 >> 2] | 0)) {
    i3 = 123;
    break;
   }
   i6 = _stbv_setup_malloc(i1, (HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] | 0) + 1 << 2) | 0;
   HEAP32[(HEAP32[i28 >> 2] | 0) + 2088 >> 2] = i6;
   if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 2088 >> 2] | 0)) {
    i3 = 125;
    break;
   }
   i6 = (HEAP32[i28 >> 2] | 0) + 2088 | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 4;
   HEAP32[(HEAP32[(HEAP32[i28 >> 2] | 0) + 2088 >> 2] | 0) + -4 >> 2] = -1;
   _stbv_compute_sorted_huffman(HEAP32[i28 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i30 >> 2] | 0);
  }
  if (HEAP8[(HEAP32[i28 >> 2] | 0) + 23 >> 0] | 0) {
   _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i30 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] << 2);
   i6 = HEAP32[i28 >> 2] | 0;
   _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i6 + 32 >> 2] | 0, HEAP32[i6 + 2092 >> 2] << 2);
   _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0);
   HEAP32[(HEAP32[i28 >> 2] | 0) + 32 >> 2] = 0;
  }
  _stbv_compute_accelerated_huffman(HEAP32[i28 >> 2] | 0);
  i6 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 4) | 0) & 255;
  HEAP8[(HEAP32[i28 >> 2] | 0) + 21 >> 0] = i6;
  if ((HEAPU8[(HEAP32[i28 >> 2] | 0) + 21 >> 0] | 0) > 2) {
   i3 = 130;
   break;
  }
  if ((HEAPU8[(HEAP32[i28 >> 2] | 0) + 21 >> 0] | 0) > 0) {
   f67 = Math_fround(_stbv_float32_unpack(_stbv_get_bits(HEAP32[i64 >> 2] | 0, 32) | 0));
   HEAPF32[(HEAP32[i28 >> 2] | 0) + 12 >> 2] = f67;
   f67 = Math_fround(_stbv_float32_unpack(_stbv_get_bits(HEAP32[i64 >> 2] | 0, 32) | 0));
   HEAPF32[(HEAP32[i28 >> 2] | 0) + 16 >> 2] = f67;
   i1 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 4) | 0) + 1 & 255;
   HEAP8[(HEAP32[i28 >> 2] | 0) + 20 >> 0] = i1;
   i1 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 1) | 0) & 255;
   HEAP8[(HEAP32[i28 >> 2] | 0) + 22 >> 0] = i1;
   i1 = HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0;
   i2 = HEAP32[HEAP32[i28 >> 2] >> 2] | 0;
   if ((HEAPU8[(HEAP32[i28 >> 2] | 0) + 21 >> 0] | 0) == 1) {
    i6 = _stbv_lookup1_values(i1, i2) | 0;
    HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] = i6;
   } else {
    i6 = Math_imul(i1, i2) | 0;
    HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] = i6;
   }
   i1 = HEAP32[i64 >> 2] | 0;
   if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] | 0)) {
    i3 = 136;
    break;
   }
   i6 = _stbv_setup_temp_malloc(i1, HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] << 1) | 0;
   HEAP32[i29 >> 2] = i6;
   if (!(HEAP32[i29 >> 2] | 0)) {
    i3 = 138;
    break;
   }
   HEAP32[i50 >> 2] = 0;
   while (1) {
    if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] | 0)) break;
    i6 = _stbv_get_bits(HEAP32[i64 >> 2] | 0, HEAPU8[(HEAP32[i28 >> 2] | 0) + 20 >> 0] | 0) | 0;
    HEAP32[i19 >> 2] = i6;
    if ((HEAP32[i19 >> 2] | 0) == -1) {
     i3 = 142;
     break L108;
    }
    HEAP16[(HEAP32[i29 >> 2] | 0) + (HEAP32[i50 >> 2] << 1) >> 1] = HEAP32[i19 >> 2];
    HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
   }
   L195 : do if ((HEAPU8[(HEAP32[i28 >> 2] | 0) + 21 >> 0] | 0) == 1) {
    HEAP32[i22 >> 2] = HEAPU8[(HEAP32[i28 >> 2] | 0) + 23 >> 0];
    HEAPF32[i10 >> 2] = Math_fround(0.0);
    if (HEAP32[i22 >> 2] | 0) {
     if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] | 0)) break;
     i6 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, Math_imul(HEAP32[(HEAP32[i28 >> 2] | 0) + 2092 >> 2] << 2, HEAP32[HEAP32[i28 >> 2] >> 2] | 0) | 0) | 0;
     HEAP32[(HEAP32[i28 >> 2] | 0) + 28 >> 2] = i6;
    } else {
     i6 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, Math_imul(HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] << 2, HEAP32[HEAP32[i28 >> 2] >> 2] | 0) | 0) | 0;
     HEAP32[(HEAP32[i28 >> 2] | 0) + 28 >> 2] = i6;
    }
    if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 28 >> 2] | 0)) {
     i3 = 150;
     break L108;
    }
    i1 = HEAP32[i28 >> 2] | 0;
    if (HEAP32[i22 >> 2] | 0) i1 = HEAP32[i1 + 2092 >> 2] | 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
    HEAP32[i12 >> 2] = i1;
    HEAP32[i50 >> 2] = 0;
    while (1) {
     if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
     if (HEAP32[i22 >> 2] | 0) i1 = HEAP32[(HEAP32[(HEAP32[i28 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i50 >> 2] << 2) >> 2] | 0; else i1 = HEAP32[i50 >> 2] | 0;
     HEAP32[i27 >> 2] = i1;
     HEAP32[i9 >> 2] = 1;
     HEAP32[i46 >> 2] = 0;
     while (1) {
      if ((HEAP32[i46 >> 2] | 0) >= (HEAP32[HEAP32[i28 >> 2] >> 2] | 0)) break;
      HEAP32[i16 >> 2] = ((((HEAP32[i27 >> 2] | 0) >>> 0) / ((HEAP32[i9 >> 2] | 0) >>> 0) | 0) >>> 0) % ((HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] | 0) >>> 0) | 0;
      f67 = Math_fround(HEAPU16[(HEAP32[i29 >> 2] | 0) + (HEAP32[i16 >> 2] << 1) >> 1] | 0);
      HEAPF32[i24 >> 2] = f67;
      f67 = Math_fround(HEAPU16[(HEAP32[i29 >> 2] | 0) + (HEAP32[i16 >> 2] << 1) >> 1] | 0);
      f67 = Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i28 >> 2] | 0) + 16 >> 2]));
      f67 = Math_fround(f67 + Math_fround(HEAPF32[(HEAP32[i28 >> 2] | 0) + 12 >> 2]));
      f67 = Math_fround(f67 + Math_fround(HEAPF32[i10 >> 2]));
      HEAPF32[i24 >> 2] = f67;
      f67 = Math_fround(HEAPF32[i24 >> 2]);
      i6 = Math_imul(HEAP32[i50 >> 2] | 0, HEAP32[HEAP32[i28 >> 2] >> 2] | 0) | 0;
      HEAPF32[(HEAP32[(HEAP32[i28 >> 2] | 0) + 28 >> 2] | 0) + (i6 + (HEAP32[i46 >> 2] | 0) << 2) >> 2] = f67;
      if (HEAP8[(HEAP32[i28 >> 2] | 0) + 22 >> 0] | 0) {
       f67 = Math_fround(HEAPF32[i24 >> 2]);
       HEAPF32[i10 >> 2] = f67;
      }
      if (((HEAP32[i46 >> 2] | 0) + 1 | 0) < (HEAP32[HEAP32[i28 >> 2] >> 2] | 0)) {
       if ((HEAP32[i9 >> 2] | 0) >>> 0 > (4294967295 / ((HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] | 0) >>> 0) | 0) >>> 0) {
        i3 = 165;
        break L108;
       }
       i6 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] | 0) | 0;
       HEAP32[i9 >> 2] = i6;
      }
      HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + 1;
     }
     HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
    }
    HEAP8[(HEAP32[i28 >> 2] | 0) + 21 >> 0] = 2;
   } else {
    HEAPF32[i11 >> 2] = Math_fround(0.0);
    i6 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] << 2) | 0;
    HEAP32[(HEAP32[i28 >> 2] | 0) + 28 >> 2] = i6;
    if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 28 >> 2] | 0)) {
     i3 = 171;
     break L108;
    }
    HEAP32[i50 >> 2] = 0;
    while (1) {
     if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] | 0)) break L195;
     f67 = Math_fround(HEAPU16[(HEAP32[i29 >> 2] | 0) + (HEAP32[i50 >> 2] << 1) >> 1] | 0);
     f67 = Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i28 >> 2] | 0) + 16 >> 2]));
     f67 = Math_fround(f67 + Math_fround(HEAPF32[(HEAP32[i28 >> 2] | 0) + 12 >> 2]));
     f67 = Math_fround(f67 + Math_fround(HEAPF32[i11 >> 2]));
     HEAPF32[i25 >> 2] = f67;
     f67 = Math_fround(HEAPF32[i25 >> 2]);
     HEAPF32[(HEAP32[(HEAP32[i28 >> 2] | 0) + 28 >> 2] | 0) + (HEAP32[i50 >> 2] << 2) >> 2] = f67;
     if (HEAP8[(HEAP32[i28 >> 2] | 0) + 22 >> 0] | 0) {
      f67 = Math_fround(HEAPF32[i25 >> 2]);
      HEAPF32[i11 >> 2] = f67;
     }
     HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
    }
   } while (0);
   _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] << 1);
  }
  HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
 }
 switch (i3 | 0) {
 case 60:
  {
   i64 = _stbv_error(i1, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 62:
  {
   i64 = _stbv_error(i1, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 64:
  {
   i64 = _stbv_error(i1, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 69:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 74:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 79:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 87:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 95:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 107:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 110:
  {
   i64 = _stbv_error(i1, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 112:
  {
   i64 = _stbv_error(i1, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 114:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 118:
  {
   if (HEAP8[i1 + 23 >> 0] | 0) _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i30 >> 2] | 0, 0);
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 123:
  {
   i64 = _stbv_error(i1, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 125:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 130:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 136:
  {
   i64 = _stbv_error(i1, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 138:
  {
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 142:
  {
   _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] << 1);
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 150:
  {
   _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] << 1);
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 165:
  {
   _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] << 1);
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 171:
  {
   _stbv_setup_temp_free(HEAP32[i64 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 24 >> 2] << 1);
   i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
   HEAP32[i65 >> 2] = i64;
   i65 = HEAP32[i65 >> 2] | 0;
   STACKTOP = i66;
   return i65 | 0;
  }
 case 179:
  {
   i30 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 6) | 0) + 1 & 255;
   HEAP8[i31 >> 0] = i30;
   HEAP32[i52 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i64 >> 2] | 0;
    if ((HEAP32[i52 >> 2] | 0) >= (HEAPU8[i31 >> 0] | 0)) break;
    i30 = _stbv_get_bits(i1, 16) | 0;
    HEAP32[i32 >> 2] = i30;
    if (HEAP32[i32 >> 2] | 0) {
     i3 = 182;
     break;
    }
    HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
   }
   if ((i3 | 0) == 182) {
    i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
    HEAP32[i65 >> 2] = i64;
    i65 = HEAP32[i65 >> 2] | 0;
    STACKTOP = i66;
    return i65 | 0;
   }
   i32 = (_stbv_get_bits(i1, 6) | 0) + 1 | 0;
   HEAP32[(HEAP32[i64 >> 2] | 0) + 128 >> 2] = i32;
   i32 = HEAP32[i64 >> 2] | 0;
   i32 = _stbv_setup_malloc(i32 | 0, (HEAP32[i32 + 128 >> 2] | 0) * 1596 | 0) | 0;
   HEAP32[(HEAP32[i64 >> 2] | 0) + 260 >> 2] = i32;
   if (!(HEAP32[(HEAP32[i64 >> 2] | 0) + 260 >> 2] | 0)) {
    i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
    HEAP32[i65 >> 2] = i64;
    i65 = HEAP32[i65 >> 2] | 0;
    STACKTOP = i66;
    return i65 | 0;
   }
   HEAP32[i52 >> 2] = 0;
   L250 : while (1) {
    i1 = HEAP32[i64 >> 2] | 0;
    if ((HEAP32[i52 >> 2] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 128 >> 2] | 0)) {
     i3 = 229;
     break;
    }
    i1 = (_stbv_get_bits(i1, 16) | 0) & 65535;
    HEAP16[(HEAP32[i64 >> 2] | 0) + 132 + (HEAP32[i52 >> 2] << 1) >> 1] = i1;
    i1 = HEAP32[i64 >> 2] | 0;
    if ((HEAPU16[(HEAP32[i64 >> 2] | 0) + 132 + (HEAP32[i52 >> 2] << 1) >> 1] | 0) > 1) {
     i3 = 189;
     break;
    }
    i2 = (HEAP32[(HEAP32[i64 >> 2] | 0) + 260 >> 2] | 0) + ((HEAP32[i52 >> 2] | 0) * 1596 | 0) | 0;
    if (!(HEAPU16[i1 + 132 + (HEAP32[i52 >> 2] << 1) >> 1] | 0)) {
     i3 = 191;
     break;
    }
    HEAP32[i34 >> 2] = i2;
    HEAP32[i37 >> 2] = -1;
    i32 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 5) | 0) & 255;
    HEAP8[HEAP32[i34 >> 2] >> 0] = i32;
    HEAP32[i50 >> 2] = 0;
    while (1) {
     if ((HEAP32[i50 >> 2] | 0) >= (HEAPU8[HEAP32[i34 >> 2] >> 0] | 0)) break;
     i32 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 4) | 0) & 255;
     HEAP8[(HEAP32[i34 >> 2] | 0) + 1 + (HEAP32[i50 >> 2] | 0) >> 0] = i32;
     if ((HEAPU8[(HEAP32[i34 >> 2] | 0) + 1 + (HEAP32[i50 >> 2] | 0) >> 0] | 0) > (HEAP32[i37 >> 2] | 0)) HEAP32[i37 >> 2] = HEAPU8[(HEAP32[i34 >> 2] | 0) + 1 + (HEAP32[i50 >> 2] | 0) >> 0];
     HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
    }
    HEAP32[i50 >> 2] = 0;
    while (1) {
     i1 = HEAP32[i64 >> 2] | 0;
     if ((HEAP32[i50 >> 2] | 0) > (HEAP32[i37 >> 2] | 0)) break;
     i32 = (_stbv_get_bits(i1, 3) | 0) + 1 & 255;
     HEAP8[(HEAP32[i34 >> 2] | 0) + 33 + (HEAP32[i50 >> 2] | 0) >> 0] = i32;
     i32 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 2) | 0) & 255;
     HEAP8[(HEAP32[i34 >> 2] | 0) + 49 + (HEAP32[i50 >> 2] | 0) >> 0] = i32;
     if (HEAP8[(HEAP32[i34 >> 2] | 0) + 49 + (HEAP32[i50 >> 2] | 0) >> 0] | 0) {
      i32 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
      HEAP8[(HEAP32[i34 >> 2] | 0) + 65 + (HEAP32[i50 >> 2] | 0) >> 0] = i32;
      if ((HEAPU8[(HEAP32[i34 >> 2] | 0) + 65 + (HEAP32[i50 >> 2] | 0) >> 0] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 120 >> 2] | 0)) {
       i3 = 204;
       break L250;
      }
     }
     HEAP32[i46 >> 2] = 0;
     while (1) {
      if ((HEAP32[i46 >> 2] | 0) >= (1 << HEAPU8[(HEAP32[i34 >> 2] | 0) + 49 + (HEAP32[i50 >> 2] | 0) >> 0] | 0)) break;
      i32 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) - 1 & 65535;
      HEAP16[(HEAP32[i34 >> 2] | 0) + 82 + (HEAP32[i50 >> 2] << 4) + (HEAP32[i46 >> 2] << 1) >> 1] = i32;
      if ((HEAP16[(HEAP32[i34 >> 2] | 0) + 82 + (HEAP32[i50 >> 2] << 4) + (HEAP32[i46 >> 2] << 1) >> 1] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 120 >> 2] | 0)) {
       i3 = 208;
       break L250;
      }
      HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + 1;
     }
     HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
    }
    i32 = (_stbv_get_bits(i1, 2) | 0) + 1 & 255;
    HEAP8[(HEAP32[i34 >> 2] | 0) + 1588 >> 0] = i32;
    i32 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 4) | 0) & 255;
    HEAP8[(HEAP32[i34 >> 2] | 0) + 1589 >> 0] = i32;
    HEAP16[(HEAP32[i34 >> 2] | 0) + 338 >> 1] = 0;
    i32 = HEAP32[i34 >> 2] | 0;
    HEAP16[i32 + 338 + 2 >> 1] = 1 << HEAPU8[i32 + 1589 >> 0];
    HEAP32[(HEAP32[i34 >> 2] | 0) + 1592 >> 2] = 2;
    HEAP32[i50 >> 2] = 0;
    while (1) {
     if ((HEAP32[i50 >> 2] | 0) >= (HEAPU8[HEAP32[i34 >> 2] >> 0] | 0)) break;
     HEAP32[i33 >> 2] = HEAPU8[(HEAP32[i34 >> 2] | 0) + 1 + (HEAP32[i50 >> 2] | 0) >> 0];
     HEAP32[i46 >> 2] = 0;
     while (1) {
      if ((HEAP32[i46 >> 2] | 0) >= (HEAPU8[(HEAP32[i34 >> 2] | 0) + 33 + (HEAP32[i33 >> 2] | 0) >> 0] | 0)) break;
      i31 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, HEAPU8[(HEAP32[i34 >> 2] | 0) + 1589 >> 0] | 0) | 0) & 65535;
      i32 = HEAP32[i34 >> 2] | 0;
      HEAP16[i32 + 338 + (HEAP32[i32 + 1592 >> 2] << 1) >> 1] = i31;
      i32 = (HEAP32[i34 >> 2] | 0) + 1592 | 0;
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
      HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + 1;
     }
     HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
    }
    HEAP32[i50 >> 2] = 0;
    while (1) {
     if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[i34 >> 2] | 0) + 1592 >> 2] | 0)) break;
     HEAP16[i38 + (HEAP32[i50 >> 2] << 2) >> 1] = HEAP16[(HEAP32[i34 >> 2] | 0) + 338 + (HEAP32[i50 >> 2] << 1) >> 1] | 0;
     HEAP16[i38 + (HEAP32[i50 >> 2] << 2) + 2 >> 1] = HEAP32[i50 >> 2];
     HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
    }
    _qsort(i38, HEAP32[(HEAP32[i34 >> 2] | 0) + 1592 >> 2] | 0, 4, 5);
    HEAP32[i50 >> 2] = 0;
    while (1) {
     if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[i34 >> 2] | 0) + 1592 >> 2] | 0)) break;
     HEAP8[(HEAP32[i34 >> 2] | 0) + 838 + (HEAP32[i50 >> 2] | 0) >> 0] = HEAP16[i38 + (HEAP32[i50 >> 2] << 2) + 2 >> 1];
     HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
    }
    HEAP32[i50 >> 2] = 2;
    while (1) {
     i1 = HEAP32[i34 >> 2] | 0;
     if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[i34 >> 2] | 0) + 1592 >> 2] | 0)) break;
     _stbv_neighbors(i1 + 338 | 0, HEAP32[i50 >> 2] | 0, i36, i35);
     HEAP8[(HEAP32[i34 >> 2] | 0) + 1088 + (HEAP32[i50 >> 2] << 1) >> 0] = HEAP32[i36 >> 2];
     HEAP8[(HEAP32[i34 >> 2] | 0) + 1088 + (HEAP32[i50 >> 2] << 1) + 1 >> 0] = HEAP32[i35 >> 2];
     HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
    }
    if ((HEAP32[i1 + 1592 >> 2] | 0) > (HEAP32[i53 >> 2] | 0)) HEAP32[i53 >> 2] = HEAP32[(HEAP32[i34 >> 2] | 0) + 1592 >> 2];
    HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
   }
   if ((i3 | 0) == 189) {
    i64 = _stbv_error(i1, 20) | 0;
    HEAP32[i65 >> 2] = i64;
    i65 = HEAP32[i65 >> 2] | 0;
    STACKTOP = i66;
    return i65 | 0;
   } else if ((i3 | 0) == 191) {
    HEAP32[i39 >> 2] = i2;
    i63 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
    HEAP8[HEAP32[i39 >> 2] >> 0] = i63;
    i63 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 16) | 0) & 65535;
    HEAP16[(HEAP32[i39 >> 2] | 0) + 2 >> 1] = i63;
    i63 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 16) | 0) & 65535;
    HEAP16[(HEAP32[i39 >> 2] | 0) + 4 >> 1] = i63;
    i63 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 6) | 0) & 255;
    HEAP8[(HEAP32[i39 >> 2] | 0) + 6 >> 0] = i63;
    i63 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
    HEAP8[(HEAP32[i39 >> 2] | 0) + 7 >> 0] = i63;
    i63 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 4) | 0) + 1 & 255;
    HEAP8[(HEAP32[i39 >> 2] | 0) + 8 >> 0] = i63;
    HEAP32[i50 >> 2] = 0;
    while (1) {
     i1 = HEAP32[i64 >> 2] | 0;
     if ((HEAP32[i50 >> 2] | 0) >= (HEAPU8[(HEAP32[i39 >> 2] | 0) + 8 >> 0] | 0)) break;
     i63 = (_stbv_get_bits(i1, 8) | 0) & 255;
     HEAP8[(HEAP32[i39 >> 2] | 0) + 9 + (HEAP32[i50 >> 2] | 0) >> 0] = i63;
     HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
    }
    i64 = _stbv_error(i1, 4) | 0;
    HEAP32[i65 >> 2] = i64;
    i65 = HEAP32[i65 >> 2] | 0;
    STACKTOP = i66;
    return i65 | 0;
   } else if ((i3 | 0) == 204) {
    i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
    HEAP32[i65 >> 2] = i64;
    i65 = HEAP32[i65 >> 2] | 0;
    STACKTOP = i66;
    return i65 | 0;
   } else if ((i3 | 0) == 208) {
    i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
    HEAP32[i65 >> 2] = i64;
    i65 = HEAP32[i65 >> 2] | 0;
    STACKTOP = i66;
    return i65 | 0;
   } else if ((i3 | 0) == 229) {
    i1 = (_stbv_get_bits(i1, 6) | 0) + 1 | 0;
    HEAP32[(HEAP32[i64 >> 2] | 0) + 264 >> 2] = i1;
    i1 = HEAP32[i64 >> 2] | 0;
    i1 = _stbv_setup_malloc(i1 | 0, (HEAP32[i1 + 264 >> 2] | 0) * 24 | 0) | 0;
    HEAP32[(HEAP32[i64 >> 2] | 0) + 396 >> 2] = i1;
    i1 = HEAP32[i64 >> 2] | 0;
    if (!(HEAP32[(HEAP32[i64 >> 2] | 0) + 396 >> 2] | 0)) {
     i64 = _stbv_error(i1, 3) | 0;
     HEAP32[i65 >> 2] = i64;
     i65 = HEAP32[i65 >> 2] | 0;
     STACKTOP = i66;
     return i65 | 0;
    }
    _memset(HEAP32[i1 + 396 >> 2] | 0, 0, (HEAP32[(HEAP32[i64 >> 2] | 0) + 264 >> 2] | 0) * 24 | 0) | 0;
    HEAP32[i52 >> 2] = 0;
    L303 : while (1) {
     i1 = HEAP32[i64 >> 2] | 0;
     if ((HEAP32[i52 >> 2] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 264 >> 2] | 0)) {
      i3 = 267;
      break;
     }
     HEAP32[i43 >> 2] = (HEAP32[i1 + 396 >> 2] | 0) + ((HEAP32[i52 >> 2] | 0) * 24 | 0);
     i1 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 16) | 0) & 65535;
     HEAP16[(HEAP32[i64 >> 2] | 0) + 268 + (HEAP32[i52 >> 2] << 1) >> 1] = i1;
     i1 = HEAP32[i64 >> 2] | 0;
     if ((HEAPU16[(HEAP32[i64 >> 2] | 0) + 268 + (HEAP32[i52 >> 2] << 1) >> 1] | 0) > 2) {
      i3 = 234;
      break;
     }
     i1 = _stbv_get_bits(i1, 24) | 0;
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i1 = _stbv_get_bits(HEAP32[i64 >> 2] | 0, 24) | 0;
     HEAP32[(HEAP32[i43 >> 2] | 0) + 4 >> 2] = i1;
     i1 = HEAP32[i64 >> 2] | 0;
     if ((HEAP32[(HEAP32[i43 >> 2] | 0) + 4 >> 2] | 0) >>> 0 < (HEAP32[HEAP32[i43 >> 2] >> 2] | 0) >>> 0) {
      i3 = 236;
      break;
     }
     i39 = (_stbv_get_bits(i1, 24) | 0) + 1 | 0;
     HEAP32[(HEAP32[i43 >> 2] | 0) + 8 >> 2] = i39;
     i39 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 6) | 0) + 1 & 255;
     HEAP8[(HEAP32[i43 >> 2] | 0) + 12 >> 0] = i39;
     i39 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
     HEAP8[(HEAP32[i43 >> 2] | 0) + 13 >> 0] = i39;
     if ((HEAPU8[(HEAP32[i43 >> 2] | 0) + 13 >> 0] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 120 >> 2] | 0)) {
      i3 = 238;
      break;
     }
     HEAP32[i50 >> 2] = 0;
     while (1) {
      if ((HEAP32[i50 >> 2] | 0) >= (HEAPU8[(HEAP32[i43 >> 2] | 0) + 12 >> 0] | 0)) break;
      HEAP8[i41 >> 0] = 0;
      i39 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 3) | 0) & 255;
      HEAP8[i42 >> 0] = i39;
      if (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 1) | 0) {
       i39 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 5) | 0) & 255;
       HEAP8[i41 >> 0] = i39;
      }
      HEAP8[i44 + (HEAP32[i50 >> 2] | 0) >> 0] = (HEAPU8[i41 >> 0] << 3) + (HEAPU8[i42 >> 0] | 0);
      HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
     }
     i39 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, HEAPU8[(HEAP32[i43 >> 2] | 0) + 12 >> 0] << 4) | 0;
     HEAP32[(HEAP32[i43 >> 2] | 0) + 20 >> 2] = i39;
     if (!(HEAP32[(HEAP32[i43 >> 2] | 0) + 20 >> 2] | 0)) {
      i3 = 245;
      break;
     }
     HEAP32[i50 >> 2] = 0;
     while (1) {
      if ((HEAP32[i50 >> 2] | 0) >= (HEAPU8[(HEAP32[i43 >> 2] | 0) + 12 >> 0] | 0)) break;
      HEAP32[i46 >> 2] = 0;
      while (1) {
       i1 = HEAP32[i50 >> 2] | 0;
       if ((HEAP32[i46 >> 2] | 0) >= 8) break;
       if (HEAPU8[i44 + i1 >> 0] & 1 << HEAP32[i46 >> 2] | 0) {
        i39 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 65535;
        HEAP16[(HEAP32[(HEAP32[i43 >> 2] | 0) + 20 >> 2] | 0) + (HEAP32[i50 >> 2] << 4) + (HEAP32[i46 >> 2] << 1) >> 1] = i39;
        if ((HEAP16[(HEAP32[(HEAP32[i43 >> 2] | 0) + 20 >> 2] | 0) + (HEAP32[i50 >> 2] << 4) + (HEAP32[i46 >> 2] << 1) >> 1] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 120 >> 2] | 0)) {
         i3 = 252;
         break L303;
        }
       } else HEAP16[(HEAP32[(HEAP32[i43 >> 2] | 0) + 20 >> 2] | 0) + (HEAP32[i50 >> 2] << 4) + (HEAP32[i46 >> 2] << 1) >> 1] = -1;
       HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + 1;
      }
      HEAP32[i50 >> 2] = i1 + 1;
     }
     i39 = HEAP32[i64 >> 2] | 0;
     i39 = _stbv_setup_malloc(i39 | 0, HEAP32[(HEAP32[i39 + 124 >> 2] | 0) + ((HEAPU8[(HEAP32[i43 >> 2] | 0) + 13 >> 0] | 0) * 2096 | 0) + 4 >> 2] << 2) | 0;
     HEAP32[(HEAP32[i43 >> 2] | 0) + 16 >> 2] = i39;
     if (!(HEAP32[(HEAP32[i43 >> 2] | 0) + 16 >> 2] | 0)) {
      i3 = 257;
      break;
     }
     i39 = HEAP32[i43 >> 2] | 0;
     _memset(HEAP32[i39 + 16 >> 2] | 0, 0, HEAP32[(HEAP32[(HEAP32[i64 >> 2] | 0) + 124 >> 2] | 0) + ((HEAPU8[i39 + 13 >> 0] | 0) * 2096 | 0) + 4 >> 2] << 2 | 0) | 0;
     HEAP32[i50 >> 2] = 0;
     while (1) {
      if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[(HEAP32[i64 >> 2] | 0) + 124 >> 2] | 0) + ((HEAPU8[(HEAP32[i43 >> 2] | 0) + 13 >> 0] | 0) * 2096 | 0) + 4 >> 2] | 0)) break;
      HEAP32[i40 >> 2] = HEAP32[(HEAP32[(HEAP32[i64 >> 2] | 0) + 124 >> 2] | 0) + ((HEAPU8[(HEAP32[i43 >> 2] | 0) + 13 >> 0] | 0) * 2096 | 0) >> 2];
      HEAP32[i45 >> 2] = HEAP32[i50 >> 2];
      i39 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, HEAP32[i40 >> 2] | 0) | 0;
      HEAP32[(HEAP32[(HEAP32[i43 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i50 >> 2] << 2) >> 2] = i39;
      if (!(HEAP32[(HEAP32[(HEAP32[i43 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i50 >> 2] << 2) >> 2] | 0)) {
       i3 = 261;
       break L303;
      }
      HEAP32[i46 >> 2] = (HEAP32[i40 >> 2] | 0) - 1;
      while (1) {
       if ((HEAP32[i46 >> 2] | 0) < 0) break;
       i39 = HEAP32[i43 >> 2] | 0;
       HEAP8[(HEAP32[(HEAP32[i39 + 16 >> 2] | 0) + (HEAP32[i50 >> 2] << 2) >> 2] | 0) + (HEAP32[i46 >> 2] | 0) >> 0] = (HEAP32[i45 >> 2] | 0) % (HEAPU8[i39 + 12 >> 0] | 0) | 0;
       HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) / (HEAPU8[(HEAP32[i43 >> 2] | 0) + 12 >> 0] | 0) | 0;
       HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + -1;
      }
      HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
     }
     HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
    }
    if ((i3 | 0) == 234) {
     i64 = _stbv_error(i1, 20) | 0;
     HEAP32[i65 >> 2] = i64;
     i65 = HEAP32[i65 >> 2] | 0;
     STACKTOP = i66;
     return i65 | 0;
    } else if ((i3 | 0) == 236) {
     i64 = _stbv_error(i1, 20) | 0;
     HEAP32[i65 >> 2] = i64;
     i65 = HEAP32[i65 >> 2] | 0;
     STACKTOP = i66;
     return i65 | 0;
    } else if ((i3 | 0) == 238) {
     i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
     HEAP32[i65 >> 2] = i64;
     i65 = HEAP32[i65 >> 2] | 0;
     STACKTOP = i66;
     return i65 | 0;
    } else if ((i3 | 0) == 245) {
     i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
     HEAP32[i65 >> 2] = i64;
     i65 = HEAP32[i65 >> 2] | 0;
     STACKTOP = i66;
     return i65 | 0;
    } else if ((i3 | 0) == 252) {
     i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
     HEAP32[i65 >> 2] = i64;
     i65 = HEAP32[i65 >> 2] | 0;
     STACKTOP = i66;
     return i65 | 0;
    } else if ((i3 | 0) == 257) {
     i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
     HEAP32[i65 >> 2] = i64;
     i65 = HEAP32[i65 >> 2] | 0;
     STACKTOP = i66;
     return i65 | 0;
    } else if ((i3 | 0) == 261) {
     i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
     HEAP32[i65 >> 2] = i64;
     i65 = HEAP32[i65 >> 2] | 0;
     STACKTOP = i66;
     return i65 | 0;
    } else if ((i3 | 0) == 267) {
     i1 = (_stbv_get_bits(i1, 6) | 0) + 1 | 0;
     HEAP32[(HEAP32[i64 >> 2] | 0) + 400 >> 2] = i1;
     i1 = HEAP32[i64 >> 2] | 0;
     i1 = _stbv_setup_malloc(i1 | 0, (HEAP32[i1 + 400 >> 2] | 0) * 40 | 0) | 0;
     HEAP32[(HEAP32[i64 >> 2] | 0) + 404 >> 2] = i1;
     i1 = HEAP32[i64 >> 2] | 0;
     if (!(HEAP32[(HEAP32[i64 >> 2] | 0) + 404 >> 2] | 0)) {
      i64 = _stbv_error(i1, 3) | 0;
      HEAP32[i65 >> 2] = i64;
      i65 = HEAP32[i65 >> 2] | 0;
      STACKTOP = i66;
      return i65 | 0;
     }
     _memset(HEAP32[i1 + 404 >> 2] | 0, 0, (HEAP32[(HEAP32[i64 >> 2] | 0) + 400 >> 2] | 0) * 40 | 0) | 0;
     HEAP32[i52 >> 2] = 0;
     L345 : while (1) {
      i1 = HEAP32[i64 >> 2] | 0;
      if ((HEAP32[i52 >> 2] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 400 >> 2] | 0)) {
       i3 = 310;
       break;
      }
      HEAP32[i47 >> 2] = (HEAP32[i1 + 404 >> 2] | 0) + ((HEAP32[i52 >> 2] | 0) * 40 | 0);
      i1 = _stbv_get_bits(HEAP32[i64 >> 2] | 0, 16) | 0;
      HEAP32[i48 >> 2] = i1;
      i1 = HEAP32[i64 >> 2] | 0;
      if (HEAP32[i48 >> 2] | 0) {
       i3 = 272;
       break;
      }
      i1 = _stbv_setup_malloc(i1, (HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] | 0) * 3 | 0) | 0;
      HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] = i1;
      i1 = HEAP32[i64 >> 2] | 0;
      if (!(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0)) {
       i3 = 274;
       break;
      }
      if (_stbv_get_bits(i1, 1) | 0) {
       i45 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 4) | 0) + 1 & 255;
       HEAP8[(HEAP32[i47 >> 2] | 0) + 8 >> 0] = i45;
      } else HEAP8[(HEAP32[i47 >> 2] | 0) + 8 >> 0] = 1;
      if ((HEAPU8[(HEAP32[i47 >> 2] | 0) + 8 >> 0] | 0) > (HEAP32[i49 >> 2] | 0)) HEAP32[i49 >> 2] = HEAPU8[(HEAP32[i47 >> 2] | 0) + 8 >> 0];
      L357 : do if (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 1) | 0) {
       i45 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) + 1 & 65535;
       HEAP16[HEAP32[i47 >> 2] >> 1] = i45;
       HEAP32[i46 >> 2] = 0;
       while (1) {
        if ((HEAP32[i46 >> 2] | 0) >= (HEAPU16[HEAP32[i47 >> 2] >> 1] | 0)) break L357;
        i45 = HEAP32[i64 >> 2] | 0;
        i45 = (_stbv_get_bits(i45, _stbv_ilog((HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] | 0) - 1 | 0) | 0) | 0) & 255;
        HEAP8[(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) * 3 | 0) >> 0] = i45;
        i45 = HEAP32[i64 >> 2] | 0;
        i45 = (_stbv_get_bits(i45, _stbv_ilog((HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] | 0) - 1 | 0) | 0) | 0) & 255;
        HEAP8[(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) * 3 | 0) + 1 >> 0] = i45;
        if ((HEAPU8[(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) * 3 | 0) >> 0] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] | 0)) {
         i3 = 284;
         break L345;
        }
        if ((HEAPU8[(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) * 3 | 0) + 1 >> 0] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] | 0)) {
         i3 = 286;
         break L345;
        }
        if ((HEAPU8[(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) * 3 | 0) >> 0] | 0) == (HEAPU8[(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) * 3 | 0) + 1 >> 0] | 0)) {
         i3 = 288;
         break L345;
        }
        HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + 1;
       }
      } else HEAP16[HEAP32[i47 >> 2] >> 1] = 0; while (0);
      if (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 2) | 0) {
       i3 = 292;
       break;
      }
      i45 = (HEAPU8[(HEAP32[i47 >> 2] | 0) + 8 >> 0] | 0) > 1;
      HEAP32[i50 >> 2] = 0;
      L368 : do if (i45) while (1) {
       if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] | 0)) break L368;
       i45 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 4) | 0) & 255;
       HEAP8[(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i50 >> 2] | 0) * 3 | 0) + 2 >> 0] = i45;
       if ((HEAPU8[(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i50 >> 2] | 0) * 3 | 0) + 2 >> 0] | 0) >= (HEAPU8[(HEAP32[i47 >> 2] | 0) + 8 >> 0] | 0)) {
        i3 = 297;
        break L345;
       }
       HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
      } else while (1) {
       if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] | 0)) break L368;
       HEAP8[(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i50 >> 2] | 0) * 3 | 0) + 2 >> 0] = 0;
       HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
      } while (0);
      HEAP32[i50 >> 2] = 0;
      while (1) {
       if ((HEAP32[i50 >> 2] | 0) >= (HEAPU8[(HEAP32[i47 >> 2] | 0) + 8 >> 0] | 0)) break;
       _stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0;
       i45 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
       HEAP8[(HEAP32[i47 >> 2] | 0) + 9 + (HEAP32[i50 >> 2] | 0) >> 0] = i45;
       i45 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
       HEAP8[(HEAP32[i47 >> 2] | 0) + 24 + (HEAP32[i50 >> 2] | 0) >> 0] = i45;
       if ((HEAPU8[(HEAP32[i47 >> 2] | 0) + 9 + (HEAP32[i50 >> 2] | 0) >> 0] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 128 >> 2] | 0)) {
        i3 = 305;
        break L345;
       }
       if ((HEAPU8[(HEAP32[i47 >> 2] | 0) + 24 + (HEAP32[i50 >> 2] | 0) >> 0] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 264 >> 2] | 0)) {
        i3 = 307;
        break L345;
       }
       HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
      }
      HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
     }
     switch (i3 | 0) {
     case 272:
      {
       i64 = _stbv_error(i1, 20) | 0;
       HEAP32[i65 >> 2] = i64;
       i65 = HEAP32[i65 >> 2] | 0;
       STACKTOP = i66;
       return i65 | 0;
      }
     case 274:
      {
       i64 = _stbv_error(i1, 3) | 0;
       HEAP32[i65 >> 2] = i64;
       i65 = HEAP32[i65 >> 2] | 0;
       STACKTOP = i66;
       return i65 | 0;
      }
     case 284:
      {
       i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
       HEAP32[i65 >> 2] = i64;
       i65 = HEAP32[i65 >> 2] | 0;
       STACKTOP = i66;
       return i65 | 0;
      }
     case 286:
      {
       i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
       HEAP32[i65 >> 2] = i64;
       i65 = HEAP32[i65 >> 2] | 0;
       STACKTOP = i66;
       return i65 | 0;
      }
     case 288:
      {
       i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
       HEAP32[i65 >> 2] = i64;
       i65 = HEAP32[i65 >> 2] | 0;
       STACKTOP = i66;
       return i65 | 0;
      }
     case 292:
      {
       i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
       HEAP32[i65 >> 2] = i64;
       i65 = HEAP32[i65 >> 2] | 0;
       STACKTOP = i66;
       return i65 | 0;
      }
     case 297:
      {
       i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
       HEAP32[i65 >> 2] = i64;
       i65 = HEAP32[i65 >> 2] | 0;
       STACKTOP = i66;
       return i65 | 0;
      }
     case 305:
      {
       i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
       HEAP32[i65 >> 2] = i64;
       i65 = HEAP32[i65 >> 2] | 0;
       STACKTOP = i66;
       return i65 | 0;
      }
     case 307:
      {
       i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
       HEAP32[i65 >> 2] = i64;
       i65 = HEAP32[i65 >> 2] | 0;
       STACKTOP = i66;
       return i65 | 0;
      }
     case 310:
      {
       i50 = (_stbv_get_bits(i1, 6) | 0) + 1 | 0;
       HEAP32[(HEAP32[i64 >> 2] | 0) + 408 >> 2] = i50;
       HEAP32[i52 >> 2] = 0;
       while (1) {
        i1 = HEAP32[i64 >> 2] | 0;
        if ((HEAP32[i52 >> 2] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 408 >> 2] | 0)) {
         i3 = 319;
         break;
        }
        HEAP32[i51 >> 2] = i1 + 412 + ((HEAP32[i52 >> 2] | 0) * 6 | 0);
        i50 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 1) | 0) & 255;
        HEAP8[HEAP32[i51 >> 2] >> 0] = i50;
        i50 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 16) | 0) & 65535;
        HEAP16[(HEAP32[i51 >> 2] | 0) + 2 >> 1] = i50;
        i50 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 16) | 0) & 65535;
        HEAP16[(HEAP32[i51 >> 2] | 0) + 4 >> 1] = i50;
        i50 = (_stbv_get_bits(HEAP32[i64 >> 2] | 0, 8) | 0) & 255;
        HEAP8[(HEAP32[i51 >> 2] | 0) + 1 >> 0] = i50;
        if (HEAPU16[(HEAP32[i51 >> 2] | 0) + 2 >> 1] | 0) {
         i3 = 313;
         break;
        }
        if (HEAPU16[(HEAP32[i51 >> 2] | 0) + 4 >> 1] | 0) {
         i3 = 315;
         break;
        }
        if ((HEAPU8[(HEAP32[i51 >> 2] | 0) + 1 >> 0] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 400 >> 2] | 0)) {
         i3 = 317;
         break;
        }
        HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
       }
       if ((i3 | 0) == 313) {
        i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
        HEAP32[i65 >> 2] = i64;
        i65 = HEAP32[i65 >> 2] | 0;
        STACKTOP = i66;
        return i65 | 0;
       } else if ((i3 | 0) == 315) {
        i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
        HEAP32[i65 >> 2] = i64;
        i65 = HEAP32[i65 >> 2] | 0;
        STACKTOP = i66;
        return i65 | 0;
       } else if ((i3 | 0) == 317) {
        i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 20) | 0;
        HEAP32[i65 >> 2] = i64;
        i65 = HEAP32[i65 >> 2] | 0;
        STACKTOP = i66;
        return i65 | 0;
       } else if ((i3 | 0) == 319) {
        _stbv_flush_packet(i1);
        HEAP32[(HEAP32[i64 >> 2] | 0) + 992 >> 2] = 0;
        HEAP32[i52 >> 2] = 0;
        while (1) {
         i2 = HEAP32[i64 >> 2] | 0;
         i1 = i2 | 0;
         i2 = i2 | 0;
         if ((HEAP32[i52 >> 2] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 4 >> 2] | 0)) break;
         i51 = _stbv_setup_malloc(i1, HEAP32[i2 + 116 >> 2] << 2) | 0;
         HEAP32[(HEAP32[i64 >> 2] | 0) + 800 + (HEAP32[i52 >> 2] << 2) >> 2] = i51;
         i51 = HEAP32[i64 >> 2] | 0;
         i51 = _stbv_setup_malloc(i51 | 0, (HEAP32[i51 + 116 >> 2] << 2 >>> 0) / 2 | 0) | 0;
         HEAP32[(HEAP32[i64 >> 2] | 0) + 928 + (HEAP32[i52 >> 2] << 2) >> 2] = i51;
         i51 = _stbv_setup_malloc(HEAP32[i64 >> 2] | 0, HEAP32[i53 >> 2] << 1) | 0;
         HEAP32[(HEAP32[i64 >> 2] | 0) + 996 + (HEAP32[i52 >> 2] << 2) >> 2] = i51;
         if (!(HEAP32[(HEAP32[i64 >> 2] | 0) + 800 + (HEAP32[i52 >> 2] << 2) >> 2] | 0)) {
          i3 = 324;
          break;
         }
         if (!(HEAP32[(HEAP32[i64 >> 2] | 0) + 928 + (HEAP32[i52 >> 2] << 2) >> 2] | 0)) {
          i3 = 324;
          break;
         }
         if (!(HEAP32[(HEAP32[i64 >> 2] | 0) + 996 + (HEAP32[i52 >> 2] << 2) >> 2] | 0)) {
          i3 = 324;
          break;
         }
         i51 = HEAP32[i64 >> 2] | 0;
         _memset(HEAP32[i51 + 800 + (HEAP32[i52 >> 2] << 2) >> 2] | 0, 0, HEAP32[i51 + 116 >> 2] << 2 | 0) | 0;
         HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
        }
        if ((i3 | 0) == 324) {
         i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
         HEAP32[i65 >> 2] = i64;
         i65 = HEAP32[i65 >> 2] | 0;
         STACKTOP = i66;
         return i65 | 0;
        }
        if (!(_stbv_init_blocksize(i1, 0, HEAP32[i2 + 112 >> 2] | 0) | 0)) {
         HEAP32[i65 >> 2] = 0;
         i65 = HEAP32[i65 >> 2] | 0;
         STACKTOP = i66;
         return i65 | 0;
        }
        if (!(_stbv_init_blocksize(HEAP32[i64 >> 2] | 0, 1, HEAP32[(HEAP32[i64 >> 2] | 0) + 116 >> 2] | 0) | 0)) {
         HEAP32[i65 >> 2] = 0;
         i65 = HEAP32[i65 >> 2] | 0;
         STACKTOP = i66;
         return i65 | 0;
        }
        i53 = HEAP32[i64 >> 2] | 0;
        HEAP32[i53 + 104 >> 2] = HEAP32[i53 + 112 >> 2];
        i53 = HEAP32[i64 >> 2] | 0;
        HEAP32[i53 + 104 + 4 >> 2] = HEAP32[i53 + 116 >> 2];
        HEAP32[i58 >> 2] = HEAP32[(HEAP32[i64 >> 2] | 0) + 116 >> 2] << 2 >>> 1;
        HEAP32[i61 >> 2] = 0;
        HEAP32[i57 >> 2] = 0;
        while (1) {
         i1 = HEAP32[i64 >> 2] | 0;
         if ((HEAP32[i57 >> 2] | 0) >= (HEAP32[(HEAP32[i64 >> 2] | 0) + 264 >> 2] | 0)) break;
         HEAP32[i63 >> 2] = (HEAP32[i1 + 396 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 24 | 0);
         HEAP32[i55 >> 2] = (HEAP32[(HEAP32[i64 >> 2] | 0) + 116 >> 2] | 0) / 2 | 0;
         if ((HEAP32[HEAP32[i63 >> 2] >> 2] | 0) >>> 0 < (HEAP32[i55 >> 2] | 0) >>> 0) i1 = HEAP32[HEAP32[i63 >> 2] >> 2] | 0; else i1 = HEAP32[i55 >> 2] | 0;
         HEAP32[i59 >> 2] = i1;
         if ((HEAP32[(HEAP32[i63 >> 2] | 0) + 4 >> 2] | 0) >>> 0 < (HEAP32[i55 >> 2] | 0) >>> 0) i1 = HEAP32[(HEAP32[i63 >> 2] | 0) + 4 >> 2] | 0; else i1 = HEAP32[i55 >> 2] | 0;
         HEAP32[i60 >> 2] = i1;
         HEAP32[i62 >> 2] = (HEAP32[i60 >> 2] | 0) - (HEAP32[i59 >> 2] | 0);
         HEAP32[i54 >> 2] = ((HEAP32[i62 >> 2] | 0) >>> 0) / ((HEAP32[(HEAP32[i63 >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0;
         if ((HEAP32[i54 >> 2] | 0) > (HEAP32[i61 >> 2] | 0)) HEAP32[i61 >> 2] = HEAP32[i54 >> 2];
         HEAP32[i57 >> 2] = (HEAP32[i57 >> 2] | 0) + 1;
        }
        i63 = Math_imul(HEAP32[i1 + 4 >> 2] | 0, 4 + (HEAP32[i61 >> 2] << 2) | 0) | 0;
        HEAP32[i56 >> 2] = i63;
        HEAP32[(HEAP32[i64 >> 2] | 0) + 12 >> 2] = HEAP32[i56 >> 2];
        if ((HEAP32[i58 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[i64 >> 2] | 0) + 12 >> 2] | 0) >>> 0) HEAP32[(HEAP32[i64 >> 2] | 0) + 12 >> 2] = HEAP32[i58 >> 2];
        HEAP8[(HEAP32[i64 >> 2] | 0) + 1377 >> 0] = 1;
        do if (HEAP32[(HEAP32[i64 >> 2] | 0) + 80 >> 2] | 0) {
         if ((HEAP32[(HEAP32[i64 >> 2] | 0) + 92 >> 2] | 0) != (HEAP32[(HEAP32[i64 >> 2] | 0) + 80 + 4 >> 2] | 0)) ___assert_fail(47664, 47181, 4123, 47720);
         if (((HEAP32[(HEAP32[i64 >> 2] | 0) + 88 >> 2] | 0) + 1512 + (HEAP32[(HEAP32[i64 >> 2] | 0) + 12 >> 2] | 0) | 0) >>> 0 <= (HEAP32[(HEAP32[i64 >> 2] | 0) + 92 >> 2] | 0) >>> 0) break;
         i64 = _stbv_error(HEAP32[i64 >> 2] | 0, 3) | 0;
         HEAP32[i65 >> 2] = i64;
         i65 = HEAP32[i65 >> 2] | 0;
         STACKTOP = i66;
         return i65 | 0;
        } while (0);
        i63 = _stb_vorbis_get_file_offset(HEAP32[i64 >> 2] | 0) | 0;
        HEAP32[(HEAP32[i64 >> 2] | 0) + 52 >> 2] = i63;
        HEAP32[i65 >> 2] = 1;
        i65 = HEAP32[i65 >> 2] | 0;
        STACKTOP = i66;
        return i65 | 0;
       }
       break;
      }
     }
    }
   }
   break;
  }
 }
 return 0;
}

function _stbtt_GetGlyphSDF(i8, f13, i3, i11, i10, f1, i15, i6, i17, i19) {
 i8 = i8 | 0;
 f13 = Math_fround(f13);
 i3 = i3 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 f1 = Math_fround(f1);
 i15 = i15 | 0;
 i6 = i6 | 0;
 i17 = i17 | 0;
 i19 = i19 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i12 = 0, i14 = 0, i16 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, f102 = f0;
 i100 = 0;
 i101 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 368 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(368);
 i76 = i2 + 352 | 0;
 i9 = i2 + 348 | 0;
 i14 = i2 + 344 | 0;
 i4 = i2 + 340 | 0;
 i12 = i2 + 336 | 0;
 i68 = i2 + 356 | 0;
 i69 = i2 + 332 | 0;
 i16 = i2 + 328 | 0;
 i7 = i2 + 324 | 0;
 i18 = i2 + 320 | 0;
 i20 = i2 + 316 | 0;
 i78 = i2 + 312 | 0;
 i79 = i2 + 308 | 0;
 i59 = i2 + 304 | 0;
 i61 = i2 + 300 | 0;
 i60 = i2 + 296 | 0;
 i62 = i2 + 292 | 0;
 i86 = i2 + 288 | 0;
 i5 = i2 + 284 | 0;
 i51 = i2 + 280 | 0;
 i88 = i2 + 276 | 0;
 i94 = i2 + 272 | 0;
 i57 = i2 + 268 | 0;
 i24 = i2 + 264 | 0;
 i70 = i2 + 260 | 0;
 i85 = i2 + 256 | 0;
 i67 = i2 + 252 | 0;
 i26 = i2 + 248 | 0;
 i31 = i2 + 244 | 0;
 i28 = i2 + 240 | 0;
 i33 = i2 + 236 | 0;
 i23 = i2 + 232 | 0;
 i30 = i2 + 228 | 0;
 i35 = i2 + 224 | 0;
 i29 = i2 + 220 | 0;
 i34 = i2 + 216 | 0;
 i27 = i2 + 212 | 0;
 i32 = i2 + 208 | 0;
 i21 = i2 + 204 | 0;
 i22 = i2 + 200 | 0;
 i25 = i2 + 196 | 0;
 i84 = i2 + 192 | 0;
 i63 = i2 + 188 | 0;
 i80 = i2 + 184 | 0;
 i81 = i2 + 180 | 0;
 i93 = i2 + 176 | 0;
 i99 = i2 + 172 | 0;
 i87 = i2 + 168 | 0;
 i89 = i2 + 164 | 0;
 i95 = i2 + 160 | 0;
 i54 = i2 + 156 | 0;
 i90 = i2 + 152 | 0;
 i96 = i2 + 148 | 0;
 i53 = i2 + 144 | 0;
 i55 = i2 + 140 | 0;
 i56 = i2 + 136 | 0;
 i71 = i2 + 132 | 0;
 i73 = i2 + 128 | 0;
 i82 = i2 + 124 | 0;
 i92 = i2 + 120 | 0;
 i98 = i2 + 116 | 0;
 i91 = i2 + 112 | 0;
 i97 = i2 + 108 | 0;
 i43 = i2 + 104 | 0;
 i45 = i2 + 100 | 0;
 i44 = i2 + 96 | 0;
 i46 = i2 + 92 | 0;
 i66 = i2 + 88 | 0;
 i39 = i2 + 84 | 0;
 i40 = i2 + 80 | 0;
 i47 = i2 + 76 | 0;
 i48 = i2 + 72 | 0;
 i64 = i2 + 68 | 0;
 i65 = i2 + 64 | 0;
 i75 = i2 + 52 | 0;
 i72 = i2 + 48 | 0;
 i74 = i2 + 44 | 0;
 i83 = i2 + 40 | 0;
 i58 = i2 + 36 | 0;
 i38 = i2 + 32 | 0;
 i37 = i2 + 28 | 0;
 i41 = i2 + 24 | 0;
 i49 = i2 + 20 | 0;
 i52 = i2 + 16 | 0;
 i77 = i2 + 12 | 0;
 i42 = i2 + 8 | 0;
 i50 = i2 + 4 | 0;
 i36 = i2;
 HEAP32[i9 >> 2] = i8;
 HEAPF32[i14 >> 2] = f13;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i12 >> 2] = i11;
 HEAP8[i68 >> 0] = i10;
 HEAPF32[i69 >> 2] = f1;
 HEAP32[i16 >> 2] = i15;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i20 >> 2] = i19;
 f13 = Math_fround(HEAPF32[i14 >> 2]);
 HEAPF32[i78 >> 2] = f13;
 f13 = Math_fround(HEAPF32[i14 >> 2]);
 HEAPF32[i79 >> 2] = f13;
 if (Math_fround(HEAPF32[i14 >> 2]) == Math_fround(0.0)) {
  HEAP32[i76 >> 2] = 0;
  i100 = HEAP32[i76 >> 2] | 0;
  STACKTOP = i101;
  return i100 | 0;
 }
 f13 = Math_fround(HEAPF32[i14 >> 2]);
 _stbtt_GetGlyphBitmapBoxSubpixel(HEAP32[i9 >> 2] | 0, HEAP32[i4 >> 2] | 0, f13, Math_fround(HEAPF32[i14 >> 2]), Math_fround(0.0), Math_fround(0.0), i59, i61, i60, i62);
 if ((HEAP32[i59 >> 2] | 0) != (HEAP32[i60 >> 2] | 0)) if ((HEAP32[i61 >> 2] | 0) != (HEAP32[i62 >> 2] | 0)) {
  HEAP32[i59 >> 2] = (HEAP32[i59 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
  HEAP32[i61 >> 2] = (HEAP32[i61 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
  HEAP32[i60 >> 2] = (HEAP32[i60 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
  HEAP32[i62 >> 2] = (HEAP32[i62 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
  HEAP32[i86 >> 2] = (HEAP32[i60 >> 2] | 0) - (HEAP32[i59 >> 2] | 0);
  HEAP32[i5 >> 2] = (HEAP32[i62 >> 2] | 0) - (HEAP32[i61 >> 2] | 0);
  if (HEAP32[i16 >> 2] | 0) HEAP32[HEAP32[i16 >> 2] >> 2] = HEAP32[i86 >> 2];
  if (HEAP32[i7 >> 2] | 0) HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i5 >> 2];
  if (HEAP32[i18 >> 2] | 0) HEAP32[HEAP32[i18 >> 2] >> 2] = HEAP32[i59 >> 2];
  if (HEAP32[i20 >> 2] | 0) HEAP32[HEAP32[i20 >> 2] >> 2] = HEAP32[i61 >> 2];
  f13 = Math_fround(-Math_fround(HEAPF32[i79 >> 2]));
  HEAPF32[i79 >> 2] = f13;
  i20 = _stbtt_GetGlyphShape(HEAP32[i9 >> 2] | 0, HEAP32[i4 >> 2] | 0, i85) | 0;
  HEAP32[i67 >> 2] = i20;
  i20 = _malloc(Math_imul(HEAP32[i86 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) | 0;
  HEAP32[i51 >> 2] = i20;
  i20 = _malloc(HEAP32[i67 >> 2] << 2) | 0;
  HEAP32[i70 >> 2] = i20;
  HEAP32[i57 >> 2] = 0;
  HEAP32[i24 >> 2] = (HEAP32[i67 >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[i57 >> 2] | 0) >= (HEAP32[i67 >> 2] | 0)) break;
   i2 = (HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) | 0;
   do if ((HEAPU8[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) == 2) {
    f1 = Math_fround(HEAP16[i2 >> 1] | 0);
    f1 = Math_fround(f1 * Math_fround(HEAPF32[i78 >> 2]));
    HEAPF32[i26 >> 2] = f1;
    f1 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
    f1 = Math_fround(f1 * Math_fround(HEAPF32[i79 >> 2]));
    HEAPF32[i31 >> 2] = f1;
    f1 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 14 | 0) >> 1] | 0);
    f1 = Math_fround(f1 * Math_fround(HEAPF32[i78 >> 2]));
    HEAPF32[i28 >> 2] = f1;
    f1 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
    f1 = Math_fround(f1 * Math_fround(HEAPF32[i79 >> 2]));
    HEAPF32[i33 >> 2] = f1;
    f1 = Math_fround(HEAPF32[i28 >> 2]);
    f1 = Math_fround(f1 - Math_fround(HEAPF32[i26 >> 2]));
    f102 = Math_fround(HEAPF32[i28 >> 2]);
    f102 = Math_fround(f1 * Math_fround(f102 - Math_fround(HEAPF32[i26 >> 2])));
    f1 = Math_fround(HEAPF32[i33 >> 2]);
    f1 = Math_fround(f1 - Math_fround(HEAPF32[i31 >> 2]));
    f13 = Math_fround(HEAPF32[i33 >> 2]);
    f13 = Math_fround(+Math_sqrt(+(+Math_fround(f102 + Math_fround(f1 * Math_fround(f13 - Math_fround(HEAPF32[i31 >> 2])))))));
    HEAPF32[i23 >> 2] = f13;
    if (Math_fround(HEAPF32[i23 >> 2]) == Math_fround(0.0)) f1 = Math_fround(0.0); else f1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i23 >> 2]));
    HEAPF32[(HEAP32[i70 >> 2] | 0) + (HEAP32[i57 >> 2] << 2) >> 2] = f1;
   } else {
    if ((HEAPU8[i2 + 12 >> 0] | 0) != 3) {
     HEAPF32[(HEAP32[i70 >> 2] | 0) + (HEAP32[i57 >> 2] << 2) >> 2] = Math_fround(0.0);
     break;
    }
    f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 14 | 0) >> 1] | 0);
    f13 = Math_fround(f13 * Math_fround(HEAPF32[i78 >> 2]));
    HEAPF32[i30 >> 2] = f13;
    f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
    f13 = Math_fround(f13 * Math_fround(HEAPF32[i79 >> 2]));
    HEAPF32[i35 >> 2] = f13;
    f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) + 4 >> 1] | 0);
    f13 = Math_fround(f13 * Math_fround(HEAPF32[i78 >> 2]));
    HEAPF32[i29 >> 2] = f13;
    f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) + 6 >> 1] | 0);
    f13 = Math_fround(f13 * Math_fround(HEAPF32[i79 >> 2]));
    HEAPF32[i34 >> 2] = f13;
    f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) >> 1] | 0);
    f13 = Math_fround(f13 * Math_fround(HEAPF32[i78 >> 2]));
    HEAPF32[i27 >> 2] = f13;
    f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
    f13 = Math_fround(f13 * Math_fround(HEAPF32[i79 >> 2]));
    HEAPF32[i32 >> 2] = f13;
    f13 = Math_fround(HEAPF32[i27 >> 2]);
    f13 = Math_fround(f13 - Math_fround(Math_fround(HEAPF32[i29 >> 2]) * Math_fround(2.0)));
    f13 = Math_fround(f13 + Math_fround(HEAPF32[i30 >> 2]));
    HEAPF32[i21 >> 2] = f13;
    f13 = Math_fround(HEAPF32[i32 >> 2]);
    f13 = Math_fround(f13 - Math_fround(Math_fround(HEAPF32[i34 >> 2]) * Math_fround(2.0)));
    f13 = Math_fround(f13 + Math_fround(HEAPF32[i35 >> 2]));
    HEAPF32[i22 >> 2] = f13;
    f13 = Math_fround(HEAPF32[i21 >> 2]);
    f13 = Math_fround(f13 * Math_fround(HEAPF32[i21 >> 2]));
    f102 = Math_fround(HEAPF32[i22 >> 2]);
    f102 = Math_fround(f13 + Math_fround(f102 * Math_fround(HEAPF32[i22 >> 2])));
    HEAPF32[i25 >> 2] = f102;
    if (Math_fround(HEAPF32[i25 >> 2]) != Math_fround(0.0)) {
     f13 = Math_fround(HEAPF32[i21 >> 2]);
     f13 = Math_fround(f13 * Math_fround(HEAPF32[i21 >> 2]));
     f102 = Math_fround(HEAPF32[i22 >> 2]);
     f102 = Math_fround(Math_fround(1.0) / Math_fround(f13 + Math_fround(f102 * Math_fround(HEAPF32[i22 >> 2]))));
     HEAPF32[(HEAP32[i70 >> 2] | 0) + (HEAP32[i57 >> 2] << 2) >> 2] = f102;
     break;
    } else {
     HEAPF32[(HEAP32[i70 >> 2] | 0) + (HEAP32[i57 >> 2] << 2) >> 2] = Math_fround(0.0);
     break;
    }
   } while (0);
   i20 = HEAP32[i57 >> 2] | 0;
   HEAP32[i57 >> 2] = i20 + 1;
   HEAP32[i24 >> 2] = i20;
  }
  HEAP32[i94 >> 2] = HEAP32[i61 >> 2];
  L37 : while (1) {
   if ((HEAP32[i94 >> 2] | 0) >= (HEAP32[i62 >> 2] | 0)) break;
   HEAP32[i88 >> 2] = HEAP32[i59 >> 2];
   while (1) {
    if ((HEAP32[i88 >> 2] | 0) >= (HEAP32[i60 >> 2] | 0)) break;
    HEAPF32[i63 >> 2] = Math_fround(999999.0);
    f13 = Math_fround(Math_fround(HEAP32[i88 >> 2] | 0) + Math_fround(.5));
    HEAPF32[i80 >> 2] = f13;
    f13 = Math_fround(Math_fround(HEAP32[i94 >> 2] | 0) + Math_fround(.5));
    HEAPF32[i81 >> 2] = f13;
    f13 = Math_fround(HEAPF32[i80 >> 2]);
    f13 = Math_fround(f13 / Math_fround(HEAPF32[i78 >> 2]));
    HEAPF32[i93 >> 2] = f13;
    f13 = Math_fround(HEAPF32[i81 >> 2]);
    f13 = Math_fround(f13 / Math_fround(HEAPF32[i79 >> 2]));
    HEAPF32[i99 >> 2] = f13;
    f13 = Math_fround(HEAPF32[i93 >> 2]);
    f102 = Math_fround(HEAPF32[i99 >> 2]);
    i35 = _stbtt__compute_crossings_x(f13, f102, HEAP32[i67 >> 2] | 0, HEAP32[i85 >> 2] | 0) | 0;
    HEAP32[i87 >> 2] = i35;
    HEAP32[i57 >> 2] = 0;
    while (1) {
     if ((HEAP32[i57 >> 2] | 0) >= (HEAP32[i67 >> 2] | 0)) break;
     f102 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) >> 1] | 0);
     f102 = Math_fround(f102 * Math_fround(HEAPF32[i78 >> 2]));
     HEAPF32[i89 >> 2] = f102;
     f102 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     f102 = Math_fround(f102 * Math_fround(HEAPF32[i79 >> 2]));
     HEAPF32[i95 >> 2] = f102;
     f102 = Math_fround(HEAPF32[i89 >> 2]);
     f102 = Math_fround(f102 - Math_fround(HEAPF32[i80 >> 2]));
     f1 = Math_fround(HEAPF32[i89 >> 2]);
     f1 = Math_fround(f102 * Math_fround(f1 - Math_fround(HEAPF32[i80 >> 2])));
     f102 = Math_fround(HEAPF32[i95 >> 2]);
     f102 = Math_fround(f102 - Math_fround(HEAPF32[i81 >> 2]));
     f13 = Math_fround(HEAPF32[i95 >> 2]);
     f13 = Math_fround(f1 + Math_fround(f102 * Math_fround(f13 - Math_fround(HEAPF32[i81 >> 2]))));
     HEAPF32[i54 >> 2] = f13;
     f13 = Math_fround(HEAPF32[i54 >> 2]);
     f102 = Math_fround(HEAPF32[i63 >> 2]);
     if (f13 < Math_fround(f102 * Math_fround(HEAPF32[i63 >> 2]))) {
      f102 = Math_fround(+Math_sqrt(+(+Math_fround(HEAPF32[i54 >> 2]))));
      HEAPF32[i63 >> 2] = f102;
     }
     i2 = HEAP32[i85 >> 2] | 0;
     i3 = HEAP32[i57 >> 2] | 0;
     do if ((HEAPU8[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) == 2) {
      f13 = Math_fround(HEAP16[i2 + ((i3 - 1 | 0) * 14 | 0) >> 1] | 0);
      f13 = Math_fround(f13 * Math_fround(HEAPF32[i78 >> 2]));
      HEAPF32[i90 >> 2] = f13;
      f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + (((HEAP32[i57 >> 2] | 0) - 1 | 0) * 14 | 0) + 2 >> 1] | 0);
      f13 = Math_fround(f13 * Math_fround(HEAPF32[i79 >> 2]));
      HEAPF32[i96 >> 2] = f13;
      f13 = Math_fround(HEAPF32[i90 >> 2]);
      f13 = Math_fround(f13 - Math_fround(HEAPF32[i89 >> 2]));
      f1 = Math_fround(HEAPF32[i95 >> 2]);
      f1 = Math_fround(f13 * Math_fround(f1 - Math_fround(HEAPF32[i81 >> 2])));
      f13 = Math_fround(HEAPF32[i96 >> 2]);
      f13 = Math_fround(f13 - Math_fround(HEAPF32[i95 >> 2]));
      f102 = Math_fround(HEAPF32[i89 >> 2]);
      f102 = Math_fround(+Math_abs(+(+Math_fround(f1 - Math_fround(f13 * Math_fround(f102 - Math_fround(HEAPF32[i80 >> 2])))))));
      f102 = Math_fround(f102 * Math_fround(HEAPF32[(HEAP32[i70 >> 2] | 0) + (HEAP32[i57 >> 2] << 2) >> 2]));
      HEAPF32[i53 >> 2] = f102;
      if (!(HEAP32[i57 >> 2] | 0)) {
       i100 = 36;
       break L37;
      }
      f102 = Math_fround(HEAPF32[i53 >> 2]);
      if (f102 < Math_fround(HEAPF32[i63 >> 2])) {
       f13 = Math_fround(HEAPF32[i90 >> 2]);
       f13 = Math_fround(f13 - Math_fround(HEAPF32[i89 >> 2]));
       HEAPF32[i55 >> 2] = f13;
       f13 = Math_fround(HEAPF32[i96 >> 2]);
       f13 = Math_fround(f13 - Math_fround(HEAPF32[i95 >> 2]));
       HEAPF32[i56 >> 2] = f13;
       f13 = Math_fround(HEAPF32[i89 >> 2]);
       f13 = Math_fround(f13 - Math_fround(HEAPF32[i80 >> 2]));
       HEAPF32[i71 >> 2] = f13;
       f13 = Math_fround(HEAPF32[i95 >> 2]);
       f13 = Math_fround(f13 - Math_fround(HEAPF32[i81 >> 2]));
       HEAPF32[i73 >> 2] = f13;
       f13 = Math_fround(HEAPF32[i71 >> 2]);
       f13 = Math_fround(f13 * Math_fround(HEAPF32[i55 >> 2]));
       f1 = Math_fround(HEAPF32[i73 >> 2]);
       f1 = Math_fround(-Math_fround(f13 + Math_fround(f1 * Math_fround(HEAPF32[i56 >> 2]))));
       f13 = Math_fround(HEAPF32[i55 >> 2]);
       f13 = Math_fround(f13 * Math_fround(HEAPF32[i55 >> 2]));
       f102 = Math_fround(HEAPF32[i56 >> 2]);
       f102 = Math_fround(f1 / Math_fround(f13 + Math_fround(f102 * Math_fround(HEAPF32[i56 >> 2]))));
       HEAPF32[i82 >> 2] = f102;
       i35 = Math_fround(HEAPF32[i82 >> 2]) >= Math_fround(0.0);
       if (i35 & Math_fround(HEAPF32[i82 >> 2]) <= Math_fround(1.0)) {
        f102 = Math_fround(HEAPF32[i53 >> 2]);
        HEAPF32[i63 >> 2] = f102;
       }
      }
     } else if ((HEAPU8[i2 + (i3 * 14 | 0) + 12 >> 0] | 0) == 3) {
      f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + (((HEAP32[i57 >> 2] | 0) - 1 | 0) * 14 | 0) >> 1] | 0);
      f13 = Math_fround(f13 * Math_fround(HEAPF32[i78 >> 2]));
      HEAPF32[i92 >> 2] = f13;
      f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + (((HEAP32[i57 >> 2] | 0) - 1 | 0) * 14 | 0) + 2 >> 1] | 0);
      f13 = Math_fround(f13 * Math_fround(HEAPF32[i79 >> 2]));
      HEAPF32[i98 >> 2] = f13;
      f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) + 4 >> 1] | 0);
      f13 = Math_fround(f13 * Math_fround(HEAPF32[i78 >> 2]));
      HEAPF32[i91 >> 2] = f13;
      f13 = Math_fround(HEAP16[(HEAP32[i85 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) * 14 | 0) + 6 >> 1] | 0);
      f13 = Math_fround(f13 * Math_fround(HEAPF32[i79 >> 2]));
      HEAPF32[i97 >> 2] = f13;
      f13 = Math_fround(HEAPF32[i89 >> 2]);
      i35 = f13 < Math_fround(HEAPF32[i91 >> 2]);
      f13 = Math_fround(HEAPF32[i89 >> 2]);
      f102 = Math_fround(HEAPF32[i91 >> 2]);
      if ((i35 ? f13 : f102) < Math_fround(HEAPF32[i92 >> 2])) {
       f102 = Math_fround(HEAPF32[i89 >> 2]);
       i35 = f102 < Math_fround(HEAPF32[i91 >> 2]);
       f102 = Math_fround(HEAPF32[i89 >> 2]);
       f1 = Math_fround(HEAPF32[i91 >> 2]);
       f1 = i35 ? f102 : f1;
      } else f1 = Math_fround(HEAPF32[i92 >> 2]);
      HEAPF32[i43 >> 2] = f1;
      f13 = Math_fround(HEAPF32[i95 >> 2]);
      i35 = f13 < Math_fround(HEAPF32[i97 >> 2]);
      f13 = Math_fround(HEAPF32[i95 >> 2]);
      f102 = Math_fround(HEAPF32[i97 >> 2]);
      if ((i35 ? f13 : f102) < Math_fround(HEAPF32[i98 >> 2])) {
       f102 = Math_fround(HEAPF32[i95 >> 2]);
       i35 = f102 < Math_fround(HEAPF32[i97 >> 2]);
       f102 = Math_fround(HEAPF32[i95 >> 2]);
       f1 = Math_fround(HEAPF32[i97 >> 2]);
       f1 = i35 ? f102 : f1;
      } else f1 = Math_fround(HEAPF32[i98 >> 2]);
      HEAPF32[i45 >> 2] = f1;
      f13 = Math_fround(HEAPF32[i89 >> 2]);
      i35 = f13 < Math_fround(HEAPF32[i91 >> 2]);
      f13 = Math_fround(HEAPF32[i91 >> 2]);
      f102 = Math_fround(HEAPF32[i89 >> 2]);
      if ((i35 ? f13 : f102) < Math_fround(HEAPF32[i92 >> 2])) f1 = Math_fround(HEAPF32[i92 >> 2]); else {
       f102 = Math_fround(HEAPF32[i89 >> 2]);
       i35 = f102 < Math_fround(HEAPF32[i91 >> 2]);
       f102 = Math_fround(HEAPF32[i91 >> 2]);
       f1 = Math_fround(HEAPF32[i89 >> 2]);
       f1 = i35 ? f102 : f1;
      }
      HEAPF32[i44 >> 2] = f1;
      f13 = Math_fround(HEAPF32[i95 >> 2]);
      i35 = f13 < Math_fround(HEAPF32[i97 >> 2]);
      f13 = Math_fround(HEAPF32[i97 >> 2]);
      f102 = Math_fround(HEAPF32[i95 >> 2]);
      if ((i35 ? f13 : f102) < Math_fround(HEAPF32[i98 >> 2])) f1 = Math_fround(HEAPF32[i98 >> 2]); else {
       f102 = Math_fround(HEAPF32[i95 >> 2]);
       i35 = f102 < Math_fround(HEAPF32[i97 >> 2]);
       f102 = Math_fround(HEAPF32[i97 >> 2]);
       f1 = Math_fround(HEAPF32[i95 >> 2]);
       f1 = i35 ? f102 : f1;
      }
      HEAPF32[i46 >> 2] = f1;
      f13 = Math_fround(HEAPF32[i80 >> 2]);
      f102 = Math_fround(HEAPF32[i43 >> 2]);
      if (!(f13 > Math_fround(f102 - Math_fround(HEAPF32[i63 >> 2])))) break;
      f13 = Math_fround(HEAPF32[i80 >> 2]);
      f102 = Math_fround(HEAPF32[i44 >> 2]);
      if (!(f13 < Math_fround(f102 + Math_fround(HEAPF32[i63 >> 2])))) break;
      f13 = Math_fround(HEAPF32[i81 >> 2]);
      f102 = Math_fround(HEAPF32[i45 >> 2]);
      if (!(f13 > Math_fround(f102 - Math_fround(HEAPF32[i63 >> 2])))) break;
      f13 = Math_fround(HEAPF32[i81 >> 2]);
      f102 = Math_fround(HEAPF32[i46 >> 2]);
      if (!(f13 < Math_fround(f102 + Math_fround(HEAPF32[i63 >> 2])))) break;
      HEAP32[i66 >> 2] = 0;
      f102 = Math_fround(HEAPF32[i91 >> 2]);
      f102 = Math_fround(f102 - Math_fround(HEAPF32[i89 >> 2]));
      HEAPF32[i39 >> 2] = f102;
      f102 = Math_fround(HEAPF32[i97 >> 2]);
      f102 = Math_fround(f102 - Math_fround(HEAPF32[i95 >> 2]));
      HEAPF32[i40 >> 2] = f102;
      f102 = Math_fround(HEAPF32[i89 >> 2]);
      f102 = Math_fround(f102 - Math_fround(Math_fround(HEAPF32[i91 >> 2]) * Math_fround(2.0)));
      f102 = Math_fround(f102 + Math_fround(HEAPF32[i92 >> 2]));
      HEAPF32[i47 >> 2] = f102;
      f102 = Math_fround(HEAPF32[i95 >> 2]);
      f102 = Math_fround(f102 - Math_fround(Math_fround(HEAPF32[i97 >> 2]) * Math_fround(2.0)));
      f102 = Math_fround(f102 + Math_fround(HEAPF32[i98 >> 2]));
      HEAPF32[i48 >> 2] = f102;
      f102 = Math_fround(HEAPF32[i89 >> 2]);
      f102 = Math_fround(f102 - Math_fround(HEAPF32[i80 >> 2]));
      HEAPF32[i64 >> 2] = f102;
      f102 = Math_fround(HEAPF32[i95 >> 2]);
      f102 = Math_fround(f102 - Math_fround(HEAPF32[i81 >> 2]));
      HEAPF32[i65 >> 2] = f102;
      f102 = Math_fround(HEAPF32[(HEAP32[i70 >> 2] | 0) + (HEAP32[i57 >> 2] << 2) >> 2]);
      HEAPF32[i38 >> 2] = f102;
      i35 = +Math_fround(HEAPF32[i38 >> 2]) == 0.0;
      f102 = Math_fround(HEAPF32[i39 >> 2]);
      f102 = Math_fround(f102 * Math_fround(HEAPF32[i47 >> 2]));
      f1 = Math_fround(HEAPF32[i40 >> 2]);
      f1 = Math_fround(Math_fround(f102 + Math_fround(f1 * Math_fround(HEAPF32[i48 >> 2]))) * Math_fround(3.0));
      do if (i35) {
       HEAPF32[i37 >> 2] = f1;
       f1 = Math_fround(HEAPF32[i39 >> 2]);
       f1 = Math_fround(f1 * Math_fround(HEAPF32[i39 >> 2]));
       f13 = Math_fround(HEAPF32[i40 >> 2]);
       f13 = Math_fround(Math_fround(f1 + Math_fround(f13 * Math_fround(HEAPF32[i40 >> 2]))) * Math_fround(2.0));
       f1 = Math_fround(HEAPF32[i64 >> 2]);
       f1 = Math_fround(f1 * Math_fround(HEAPF32[i47 >> 2]));
       f102 = Math_fround(HEAPF32[i65 >> 2]);
       f102 = Math_fround(f13 + Math_fround(f1 + Math_fround(f102 * Math_fround(HEAPF32[i48 >> 2]))));
       HEAPF32[i41 >> 2] = f102;
       f102 = Math_fround(HEAPF32[i64 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i39 >> 2]));
       f1 = Math_fround(HEAPF32[i65 >> 2]);
       f1 = Math_fround(f102 + Math_fround(f1 * Math_fround(HEAPF32[i40 >> 2])));
       HEAPF32[i49 >> 2] = f1;
       i35 = +Math_fround(HEAPF32[i37 >> 2]) == 0.0;
       f1 = Math_fround(HEAPF32[i41 >> 2]);
       if (i35) {
        if (!(+f1 != 0.0)) break;
        f102 = Math_fround(-Math_fround(HEAPF32[i49 >> 2]));
        f102 = Math_fround(f102 / Math_fround(HEAPF32[i41 >> 2]));
        i35 = HEAP32[i66 >> 2] | 0;
        HEAP32[i66 >> 2] = i35 + 1;
        HEAPF32[i75 + (i35 << 2) >> 2] = f102;
        break;
       }
       f13 = Math_fround(f1 * Math_fround(HEAPF32[i41 >> 2]));
       f102 = Math_fround(Math_fround(HEAPF32[i37 >> 2]) * Math_fround(4.0));
       f102 = Math_fround(f13 - Math_fround(f102 * Math_fround(HEAPF32[i49 >> 2])));
       HEAPF32[i52 >> 2] = f102;
       if (Math_fround(HEAPF32[i52 >> 2]) < Math_fround(0.0)) {
        HEAP32[i66 >> 2] = 0;
        break;
       } else {
        f102 = Math_fround(+Math_sqrt(+(+Math_fround(HEAPF32[i52 >> 2]))));
        HEAPF32[i77 >> 2] = f102;
        f102 = Math_fround(-Math_fround(HEAPF32[i41 >> 2]));
        f102 = Math_fround(f102 - Math_fround(HEAPF32[i77 >> 2]));
        f102 = Math_fround(f102 / Math_fround(Math_fround(HEAPF32[i37 >> 2]) * Math_fround(2.0)));
        HEAPF32[i75 >> 2] = f102;
        f102 = Math_fround(-Math_fround(HEAPF32[i41 >> 2]));
        f102 = Math_fround(f102 + Math_fround(HEAPF32[i77 >> 2]));
        f102 = Math_fround(f102 / Math_fround(Math_fround(HEAPF32[i37 >> 2]) * Math_fround(2.0)));
        HEAPF32[i75 + 4 >> 2] = f102;
        HEAP32[i66 >> 2] = 2;
        break;
       }
      } else {
       f13 = Math_fround(f1 * Math_fround(HEAPF32[i38 >> 2]));
       HEAPF32[i42 >> 2] = f13;
       f13 = Math_fround(HEAPF32[i39 >> 2]);
       f13 = Math_fround(f13 * Math_fround(HEAPF32[i39 >> 2]));
       f1 = Math_fround(HEAPF32[i40 >> 2]);
       f1 = Math_fround(Math_fround(f13 + Math_fround(f1 * Math_fround(HEAPF32[i40 >> 2]))) * Math_fround(2.0));
       f13 = Math_fround(HEAPF32[i64 >> 2]);
       f13 = Math_fround(f13 * Math_fround(HEAPF32[i47 >> 2]));
       f102 = Math_fround(HEAPF32[i65 >> 2]);
       f102 = Math_fround(f1 + Math_fround(f13 + Math_fround(f102 * Math_fround(HEAPF32[i48 >> 2]))));
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i38 >> 2]));
       HEAPF32[i50 >> 2] = f102;
       f102 = Math_fround(HEAPF32[i64 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i39 >> 2]));
       f13 = Math_fround(HEAPF32[i65 >> 2]);
       f13 = Math_fround(f102 + Math_fround(f13 * Math_fround(HEAPF32[i40 >> 2])));
       f13 = Math_fround(f13 * Math_fround(HEAPF32[i38 >> 2]));
       HEAPF32[i36 >> 2] = f13;
       f13 = Math_fround(HEAPF32[i42 >> 2]);
       f102 = Math_fround(HEAPF32[i50 >> 2]);
       i35 = _stbtt__solve_cubic(f13, f102, Math_fround(HEAPF32[i36 >> 2]), i75) | 0;
       HEAP32[i66 >> 2] = i35;
      } while (0);
      do if ((HEAP32[i66 >> 2] | 0) >= 1) {
       if (!(Math_fround(HEAPF32[i75 >> 2]) >= Math_fround(0.0))) break;
       if (!(Math_fround(HEAPF32[i75 >> 2]) <= Math_fround(1.0))) break;
       f102 = Math_fround(HEAPF32[i75 >> 2]);
       HEAPF32[i83 >> 2] = f102;
       f102 = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[i83 >> 2]));
       HEAPF32[i58 >> 2] = f102;
       f102 = Math_fround(HEAPF32[i58 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i58 >> 2]));
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i89 >> 2]));
       f1 = Math_fround(Math_fround(HEAPF32[i83 >> 2]) * Math_fround(2.0));
       f1 = Math_fround(f1 * Math_fround(HEAPF32[i58 >> 2]));
       f1 = Math_fround(f102 + Math_fround(f1 * Math_fround(HEAPF32[i91 >> 2])));
       f102 = Math_fround(HEAPF32[i83 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i83 >> 2]));
       f102 = Math_fround(f1 + Math_fround(f102 * Math_fround(HEAPF32[i92 >> 2])));
       HEAPF32[i72 >> 2] = f102;
       f102 = Math_fround(HEAPF32[i58 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i58 >> 2]));
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i95 >> 2]));
       f1 = Math_fround(Math_fround(HEAPF32[i83 >> 2]) * Math_fround(2.0));
       f1 = Math_fround(f1 * Math_fround(HEAPF32[i58 >> 2]));
       f1 = Math_fround(f102 + Math_fround(f1 * Math_fround(HEAPF32[i97 >> 2])));
       f102 = Math_fround(HEAPF32[i83 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i83 >> 2]));
       f102 = Math_fround(f1 + Math_fround(f102 * Math_fround(HEAPF32[i98 >> 2])));
       HEAPF32[i74 >> 2] = f102;
       f102 = Math_fround(HEAPF32[i72 >> 2]);
       f102 = Math_fround(f102 - Math_fround(HEAPF32[i80 >> 2]));
       f1 = Math_fround(HEAPF32[i72 >> 2]);
       f1 = Math_fround(f102 * Math_fround(f1 - Math_fround(HEAPF32[i80 >> 2])));
       f102 = Math_fround(HEAPF32[i74 >> 2]);
       f102 = Math_fround(f102 - Math_fround(HEAPF32[i81 >> 2]));
       f13 = Math_fround(HEAPF32[i74 >> 2]);
       f13 = Math_fround(f1 + Math_fround(f102 * Math_fround(f13 - Math_fround(HEAPF32[i81 >> 2]))));
       HEAPF32[i54 >> 2] = f13;
       f13 = Math_fround(HEAPF32[i54 >> 2]);
       f102 = Math_fround(HEAPF32[i63 >> 2]);
       if (!(f13 < Math_fround(f102 * Math_fround(HEAPF32[i63 >> 2])))) break;
       f102 = Math_fround(+Math_sqrt(+(+Math_fround(HEAPF32[i54 >> 2]))));
       HEAPF32[i63 >> 2] = f102;
      } while (0);
      do if ((HEAP32[i66 >> 2] | 0) >= 2) {
       if (!(Math_fround(HEAPF32[i75 + 4 >> 2]) >= Math_fround(0.0))) break;
       if (!(Math_fround(HEAPF32[i75 + 4 >> 2]) <= Math_fround(1.0))) break;
       f102 = Math_fround(HEAPF32[i75 + 4 >> 2]);
       HEAPF32[i83 >> 2] = f102;
       f102 = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[i83 >> 2]));
       HEAPF32[i58 >> 2] = f102;
       f102 = Math_fround(HEAPF32[i58 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i58 >> 2]));
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i89 >> 2]));
       f1 = Math_fround(Math_fround(HEAPF32[i83 >> 2]) * Math_fround(2.0));
       f1 = Math_fround(f1 * Math_fround(HEAPF32[i58 >> 2]));
       f1 = Math_fround(f102 + Math_fround(f1 * Math_fround(HEAPF32[i91 >> 2])));
       f102 = Math_fround(HEAPF32[i83 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i83 >> 2]));
       f102 = Math_fround(f1 + Math_fround(f102 * Math_fround(HEAPF32[i92 >> 2])));
       HEAPF32[i72 >> 2] = f102;
       f102 = Math_fround(HEAPF32[i58 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i58 >> 2]));
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i95 >> 2]));
       f1 = Math_fround(Math_fround(HEAPF32[i83 >> 2]) * Math_fround(2.0));
       f1 = Math_fround(f1 * Math_fround(HEAPF32[i58 >> 2]));
       f1 = Math_fround(f102 + Math_fround(f1 * Math_fround(HEAPF32[i97 >> 2])));
       f102 = Math_fround(HEAPF32[i83 >> 2]);
       f102 = Math_fround(f102 * Math_fround(HEAPF32[i83 >> 2]));
       f102 = Math_fround(f1 + Math_fround(f102 * Math_fround(HEAPF32[i98 >> 2])));
       HEAPF32[i74 >> 2] = f102;
       f102 = Math_fround(HEAPF32[i72 >> 2]);
       f102 = Math_fround(f102 - Math_fround(HEAPF32[i80 >> 2]));
       f1 = Math_fround(HEAPF32[i72 >> 2]);
       f1 = Math_fround(f102 * Math_fround(f1 - Math_fround(HEAPF32[i80 >> 2])));
       f102 = Math_fround(HEAPF32[i74 >> 2]);
       f102 = Math_fround(f102 - Math_fround(HEAPF32[i81 >> 2]));
       f13 = Math_fround(HEAPF32[i74 >> 2]);
       f13 = Math_fround(f1 + Math_fround(f102 * Math_fround(f13 - Math_fround(HEAPF32[i81 >> 2]))));
       HEAPF32[i54 >> 2] = f13;
       f13 = Math_fround(HEAPF32[i54 >> 2]);
       f102 = Math_fround(HEAPF32[i63 >> 2]);
       if (!(f13 < Math_fround(f102 * Math_fround(HEAPF32[i63 >> 2])))) break;
       f102 = Math_fround(+Math_sqrt(+(+Math_fround(HEAPF32[i54 >> 2]))));
       HEAPF32[i63 >> 2] = f102;
      } while (0);
      if ((HEAP32[i66 >> 2] | 0) < 3) break;
      if (!(Math_fround(HEAPF32[i75 + 8 >> 2]) >= Math_fround(0.0))) break;
      if (!(Math_fround(HEAPF32[i75 + 8 >> 2]) <= Math_fround(1.0))) break;
      f102 = Math_fround(HEAPF32[i75 + 8 >> 2]);
      HEAPF32[i83 >> 2] = f102;
      f102 = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[i83 >> 2]));
      HEAPF32[i58 >> 2] = f102;
      f102 = Math_fround(HEAPF32[i58 >> 2]);
      f102 = Math_fround(f102 * Math_fround(HEAPF32[i58 >> 2]));
      f102 = Math_fround(f102 * Math_fround(HEAPF32[i89 >> 2]));
      f1 = Math_fround(Math_fround(HEAPF32[i83 >> 2]) * Math_fround(2.0));
      f1 = Math_fround(f1 * Math_fround(HEAPF32[i58 >> 2]));
      f1 = Math_fround(f102 + Math_fround(f1 * Math_fround(HEAPF32[i91 >> 2])));
      f102 = Math_fround(HEAPF32[i83 >> 2]);
      f102 = Math_fround(f102 * Math_fround(HEAPF32[i83 >> 2]));
      f102 = Math_fround(f1 + Math_fround(f102 * Math_fround(HEAPF32[i92 >> 2])));
      HEAPF32[i72 >> 2] = f102;
      f102 = Math_fround(HEAPF32[i58 >> 2]);
      f102 = Math_fround(f102 * Math_fround(HEAPF32[i58 >> 2]));
      f102 = Math_fround(f102 * Math_fround(HEAPF32[i95 >> 2]));
      f1 = Math_fround(Math_fround(HEAPF32[i83 >> 2]) * Math_fround(2.0));
      f1 = Math_fround(f1 * Math_fround(HEAPF32[i58 >> 2]));
      f1 = Math_fround(f102 + Math_fround(f1 * Math_fround(HEAPF32[i97 >> 2])));
      f102 = Math_fround(HEAPF32[i83 >> 2]);
      f102 = Math_fround(f102 * Math_fround(HEAPF32[i83 >> 2]));
      f102 = Math_fround(f1 + Math_fround(f102 * Math_fround(HEAPF32[i98 >> 2])));
      HEAPF32[i74 >> 2] = f102;
      f102 = Math_fround(HEAPF32[i72 >> 2]);
      f102 = Math_fround(f102 - Math_fround(HEAPF32[i80 >> 2]));
      f1 = Math_fround(HEAPF32[i72 >> 2]);
      f1 = Math_fround(f102 * Math_fround(f1 - Math_fround(HEAPF32[i80 >> 2])));
      f102 = Math_fround(HEAPF32[i74 >> 2]);
      f102 = Math_fround(f102 - Math_fround(HEAPF32[i81 >> 2]));
      f13 = Math_fround(HEAPF32[i74 >> 2]);
      f13 = Math_fround(f1 + Math_fround(f102 * Math_fround(f13 - Math_fround(HEAPF32[i81 >> 2]))));
      HEAPF32[i54 >> 2] = f13;
      f13 = Math_fround(HEAPF32[i54 >> 2]);
      f102 = Math_fround(HEAPF32[i63 >> 2]);
      if (!(f13 < Math_fround(f102 * Math_fround(HEAPF32[i63 >> 2])))) break;
      f102 = Math_fround(+Math_sqrt(+(+Math_fround(HEAPF32[i54 >> 2]))));
      HEAPF32[i63 >> 2] = f102;
     } while (0);
     HEAP32[i57 >> 2] = (HEAP32[i57 >> 2] | 0) + 1;
    }
    if (!(HEAP32[i87 >> 2] | 0)) {
     f102 = Math_fround(-Math_fround(HEAPF32[i63 >> 2]));
     HEAPF32[i63 >> 2] = f102;
    }
    f13 = Math_fround(HEAPU8[i68 >> 0] | 0);
    f102 = Math_fround(HEAPF32[i69 >> 2]);
    f102 = Math_fround(f13 + Math_fround(f102 * Math_fround(HEAPF32[i63 >> 2])));
    HEAPF32[i84 >> 2] = f102;
    if (Math_fround(HEAPF32[i84 >> 2]) < Math_fround(0.0)) HEAPF32[i84 >> 2] = Math_fround(0.0); else if (Math_fround(HEAPF32[i84 >> 2]) > Math_fround(255.0)) HEAPF32[i84 >> 2] = Math_fround(255.0);
    i34 = ~~Math_fround(HEAPF32[i84 >> 2]) & 255;
    i35 = Math_imul((HEAP32[i94 >> 2] | 0) - (HEAP32[i61 >> 2] | 0) | 0, HEAP32[i86 >> 2] | 0) | 0;
    HEAP8[(HEAP32[i51 >> 2] | 0) + (i35 + ((HEAP32[i88 >> 2] | 0) - (HEAP32[i59 >> 2] | 0))) >> 0] = i34;
    HEAP32[i88 >> 2] = (HEAP32[i88 >> 2] | 0) + 1;
   }
   HEAP32[i94 >> 2] = (HEAP32[i94 >> 2] | 0) + 1;
  }
  if ((i100 | 0) == 36) ___assert_fail(52601, 52491, 4481, 52608);
  _free(HEAP32[i70 >> 2] | 0);
  _free(HEAP32[i85 >> 2] | 0);
  HEAP32[i76 >> 2] = HEAP32[i51 >> 2];
  i100 = HEAP32[i76 >> 2] | 0;
  STACKTOP = i101;
  return i100 | 0;
 }
 HEAP32[i76 >> 2] = 0;
 i100 = HEAP32[i76 >> 2] | 0;
 STACKTOP = i101;
 return i100 | 0;
}

function _jar_xm_load_module(i2, i4, i5, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, f38 = f0;
 i37 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i16 = i1 + 60 | 0;
 i29 = i1 + 56 | 0;
 i30 = i1 + 52 | 0;
 i27 = i1 + 48 | 0;
 i31 = i1 + 44 | 0;
 i28 = i1 + 40 | 0;
 i7 = i1 + 36 | 0;
 i6 = i1 + 80 | 0;
 i8 = i1 + 78 | 0;
 i12 = i1 + 76 | 0;
 i13 = i1 + 32 | 0;
 i9 = i1 + 74 | 0;
 i10 = i1 + 72 | 0;
 i11 = i1 + 87 | 0;
 i14 = i1 + 28 | 0;
 i19 = i1 + 70 | 0;
 i34 = i1 + 24 | 0;
 i20 = i1 + 20 | 0;
 i23 = i1 + 86 | 0;
 i24 = i1 + 85 | 0;
 i17 = i1 + 84 | 0;
 i21 = i1 + 68 | 0;
 i32 = i1 + 16 | 0;
 i18 = i1 + 83 | 0;
 i22 = i1 + 66 | 0;
 i33 = i1 + 12 | 0;
 i26 = i1 + 8 | 0;
 i35 = i1 + 64 | 0;
 i25 = i1 + 4 | 0;
 i36 = i1 + 82 | 0;
 i15 = i1;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i29 >> 2] = i4;
 HEAP32[i30 >> 2] = i5;
 HEAP32[i27 >> 2] = i3;
 HEAP32[i31 >> 2] = 0;
 HEAP32[i28 >> 2] = (HEAP32[i16 >> 2] | 0) + 4;
 _memcpy_pad(HEAP32[i28 >> 2] | 0, 20, HEAP32[i29 >> 2] | 0, HEAP32[i30 >> 2] | 0, (HEAP32[i31 >> 2] | 0) + 17 | 0);
 _memcpy_pad((HEAP32[i28 >> 2] | 0) + 21 | 0, 20, HEAP32[i29 >> 2] | 0, HEAP32[i30 >> 2] | 0, (HEAP32[i31 >> 2] | 0) + 38 | 0);
 HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 60;
 if ((HEAP32[i31 >> 2] | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 1) >> 0] | 0; else i2 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 2) >> 0] | 0; else i3 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 2 + 1) >> 0] | 0; else i4 = 0;
 HEAP32[i7 >> 2] = i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16;
 if (((HEAP32[i31 >> 2] | 0) + 4 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 4) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 4 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 4 + 1) >> 0] | 0; else i2 = 0;
 HEAP16[(HEAP32[i28 >> 2] | 0) + 42 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
 if (((HEAP32[i31 >> 2] | 0) + 6 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 6) >> 0] | 0; else i2 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 6 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 6 + 1) >> 0] | 0; else i1 = 0;
 HEAP16[(HEAP32[i28 >> 2] | 0) + 44 >> 1] = i2 & 65535 | (i1 & 65535) << 8;
 if (((HEAP32[i31 >> 2] | 0) + 8 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 8) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 8 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 8 + 1) >> 0] | 0; else i2 = 0;
 HEAP16[(HEAP32[i28 >> 2] | 0) + 46 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
 if (((HEAP32[i31 >> 2] | 0) + 10 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 10) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 10 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 10 + 1) >> 0] | 0; else i2 = 0;
 HEAP16[(HEAP32[i28 >> 2] | 0) + 48 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
 if (((HEAP32[i31 >> 2] | 0) + 12 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 12) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 12 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 12 + 1) >> 0] | 0; else i2 = 0;
 HEAP16[(HEAP32[i28 >> 2] | 0) + 50 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
 HEAP32[(HEAP32[i28 >> 2] | 0) + 312 >> 2] = HEAP32[i27 >> 2];
 HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAPU16[(HEAP32[i28 >> 2] | 0) + 48 >> 1] << 3);
 HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 15 & -16;
 HEAP32[(HEAP32[i28 >> 2] | 0) + 316 >> 2] = HEAP32[i27 >> 2];
 HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + ((HEAPU16[(HEAP32[i28 >> 2] | 0) + 50 >> 1] | 0) * 264 | 0);
 HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 15 & -16;
 if (((HEAP32[i31 >> 2] | 0) + 14 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 14) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 14 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 14 + 1) >> 0] | 0; else i2 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 14 + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 14 + 2) >> 0] | 0; else i3 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 14 + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 14 + 2 + 1) >> 0] | 0; else i4 = 0;
 HEAP16[i6 >> 1] = i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16;
 HEAP32[(HEAP32[i28 >> 2] | 0) + 52 >> 2] = HEAPU16[i6 >> 1] & 1 | 0 ? 0 : 1;
 if (((HEAP32[i31 >> 2] | 0) + 16 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 16) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 16 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 16 + 1) >> 0] | 0; else i2 = 0;
 HEAP16[(HEAP32[i16 >> 2] | 0) + 328 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
 if (((HEAP32[i31 >> 2] | 0) + 18 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 18) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i31 >> 2] | 0) + 18 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 18 + 1) >> 0] | 0; else i2 = 0;
 HEAP16[(HEAP32[i16 >> 2] | 0) + 330 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
 _memcpy_pad((HEAP32[i28 >> 2] | 0) + 56 | 0, 256, HEAP32[i29 >> 2] | 0, HEAP32[i30 >> 2] | 0, (HEAP32[i31 >> 2] | 0) + 20 | 0);
 HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
 HEAP16[i8 >> 1] = 0;
 while (1) {
  if ((HEAPU16[i8 >> 1] | 0) >= (HEAPU16[(HEAP32[i28 >> 2] | 0) + 48 >> 1] | 0)) break;
  if (((HEAP32[i31 >> 2] | 0) + 7 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 7) >> 0] | 0; else i1 = 0;
  if (((HEAP32[i31 >> 2] | 0) + 7 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 7 + 1) >> 0] | 0; else i2 = 0;
  HEAP16[i12 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
  HEAP32[i13 >> 2] = (HEAP32[(HEAP32[i28 >> 2] | 0) + 312 >> 2] | 0) + (HEAPU16[i8 >> 1] << 3);
  if (((HEAP32[i31 >> 2] | 0) + 5 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 5) >> 0] | 0; else i1 = 0;
  if (((HEAP32[i31 >> 2] | 0) + 5 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 5 + 1) >> 0] | 0; else i2 = 0;
  HEAP16[HEAP32[i13 >> 2] >> 1] = i1 & 65535 | (i2 & 65535) << 8;
  HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = HEAP32[i27 >> 2];
  i7 = (Math_imul(HEAPU16[(HEAP32[i28 >> 2] | 0) + 46 >> 1] | 0, HEAPU16[HEAP32[i13 >> 2] >> 1] | 0) | 0) * 5 | 0;
  HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + i7;
  if ((HEAP32[i31 >> 2] | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) >> 0] | 0; else i1 = 0;
  if (((HEAP32[i31 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 1) >> 0] | 0; else i2 = 0;
  if (((HEAP32[i31 >> 2] | 0) + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 2) >> 0] | 0; else i3 = 0;
  if (((HEAP32[i31 >> 2] | 0) + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 2 + 1) >> 0] | 0; else i4 = 0;
  HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16);
  L94 : do if (!(HEAPU16[i12 >> 1] | 0)) _memset(HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0, 0, Math_imul((HEAPU16[HEAP32[i13 >> 2] >> 1] | 0) * 5 | 0, HEAPU16[(HEAP32[i28 >> 2] | 0) + 46 >> 1] | 0) | 0) | 0; else {
   HEAP16[i9 >> 1] = 0;
   HEAP16[i10 >> 1] = 0;
   while (1) {
    if ((HEAPU16[i9 >> 1] | 0) >= (HEAPU16[i12 >> 1] | 0)) break L94;
    if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0)) >> 0] | 0; else i1 = 0;
    HEAP8[i11 >> 0] = i1;
    HEAP32[i14 >> 2] = (HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) + ((HEAPU16[i10 >> 1] | 0) * 5 | 0);
    do if (HEAPU8[i11 >> 0] & 128 | 0) {
     HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
     if (HEAPU8[i11 >> 0] & 1 | 0) {
      if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0)) >> 0] | 0; else i1 = 0;
      HEAP8[HEAP32[i14 >> 2] >> 0] = i1;
      HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
     } else HEAP8[HEAP32[i14 >> 2] >> 0] = 0;
     if (HEAPU8[i11 >> 0] & 2 | 0) {
      if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0)) >> 0] | 0; else i1 = 0;
      HEAP8[(HEAP32[i14 >> 2] | 0) + 1 >> 0] = i1;
      HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
     } else HEAP8[(HEAP32[i14 >> 2] | 0) + 1 >> 0] = 0;
     if (HEAPU8[i11 >> 0] & 4 | 0) {
      if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0)) >> 0] | 0; else i1 = 0;
      HEAP8[(HEAP32[i14 >> 2] | 0) + 2 >> 0] = i1;
      HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
     } else HEAP8[(HEAP32[i14 >> 2] | 0) + 2 >> 0] = 0;
     if (HEAPU8[i11 >> 0] & 8 | 0) {
      if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0)) >> 0] | 0; else i1 = 0;
      HEAP8[(HEAP32[i14 >> 2] | 0) + 3 >> 0] = i1;
      HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
     } else HEAP8[(HEAP32[i14 >> 2] | 0) + 3 >> 0] = 0;
     if (!(HEAPU8[i11 >> 0] & 16)) {
      HEAP8[(HEAP32[i14 >> 2] | 0) + 4 >> 0] = 0;
      break;
     }
     if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0)) >> 0] | 0; else i1 = 0;
     HEAP8[(HEAP32[i14 >> 2] | 0) + 4 >> 0] = i1;
     HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
    } else {
     HEAP8[HEAP32[i14 >> 2] >> 0] = HEAP8[i11 >> 0] | 0;
     if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) + 1) >> 0] | 0; else i1 = 0;
     HEAP8[(HEAP32[i14 >> 2] | 0) + 1 >> 0] = i1;
     if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) + 2) >> 0] | 0; else i1 = 0;
     HEAP8[(HEAP32[i14 >> 2] | 0) + 2 >> 0] = i1;
     if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) + 3 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) + 3) >> 0] | 0; else i1 = 0;
     HEAP8[(HEAP32[i14 >> 2] | 0) + 3 >> 0] = i1;
     if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) + 4 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAPU16[i9 >> 1] | 0) + 4) >> 0] | 0; else i1 = 0;
     HEAP8[(HEAP32[i14 >> 2] | 0) + 4 >> 0] = i1;
     HEAP16[i9 >> 1] = (HEAPU16[i9 >> 1] | 0) + 5;
    } while (0);
    HEAP16[i10 >> 1] = (HEAP16[i10 >> 1] | 0) + 1 << 16 >> 16;
   }
  } while (0);
  HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAPU16[i12 >> 1] | 0);
  HEAP16[i8 >> 1] = (HEAP16[i8 >> 1] | 0) + 1 << 16 >> 16;
 }
 HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 15 & -16;
 HEAP16[i19 >> 1] = 0;
 while (1) {
  if ((HEAPU16[i19 >> 1] | 0) >= (HEAPU16[(HEAP32[i16 >> 2] | 0) + 4 + 50 >> 1] | 0)) break;
  HEAP32[i34 >> 2] = 0;
  HEAP32[i20 >> 2] = (HEAP32[(HEAP32[i28 >> 2] | 0) + 316 >> 2] | 0) + ((HEAPU16[i19 >> 1] | 0) * 264 | 0);
  _memcpy_pad(HEAP32[i20 >> 2] | 0, 22, HEAP32[i29 >> 2] | 0, HEAP32[i30 >> 2] | 0, (HEAP32[i31 >> 2] | 0) + 4 | 0);
  if (((HEAP32[i31 >> 2] | 0) + 27 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 27) >> 0] | 0; else i1 = 0;
  if (((HEAP32[i31 >> 2] | 0) + 27 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 27 + 1) >> 0] | 0; else i2 = 0;
  HEAP16[(HEAP32[i20 >> 2] | 0) + 24 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
  if ((HEAPU16[(HEAP32[i20 >> 2] | 0) + 24 >> 1] | 0) > 0) {
   if (((HEAP32[i31 >> 2] | 0) + 29 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 29) >> 0] | 0; else i1 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 29 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 29 + 1) >> 0] | 0; else i2 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 29 + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 29 + 2) >> 0] | 0; else i3 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 29 + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 29 + 2 + 1) >> 0] | 0; else i4 = 0;
   HEAP32[i34 >> 2] = i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16;
   _memcpy_pad((HEAP32[i20 >> 2] | 0) + 26 | 0, 96, HEAP32[i29 >> 2] | 0, HEAP32[i30 >> 2] | 0, (HEAP32[i31 >> 2] | 0) + 33 | 0);
   if (((HEAP32[i31 >> 2] | 0) + 225 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 225) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 122 + 48 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 226 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 226) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 178 + 48 >> 0] = i1;
   HEAP8[i23 >> 0] = 0;
   while (1) {
    if ((HEAPU8[i23 >> 0] | 0) >= (HEAPU8[(HEAP32[i20 >> 2] | 0) + 122 + 48 >> 0] | 0)) break;
    if (((HEAP32[i31 >> 2] | 0) + 129 + (HEAPU8[i23 >> 0] << 2) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 129 + (HEAPU8[i23 >> 0] << 2)) >> 0] | 0; else i1 = 0;
    if (((HEAP32[i31 >> 2] | 0) + 129 + (HEAPU8[i23 >> 0] << 2) + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 129 + (HEAPU8[i23 >> 0] << 2) + 1) >> 0] | 0; else i2 = 0;
    HEAP16[(HEAP32[i20 >> 2] | 0) + 122 + (HEAPU8[i23 >> 0] << 2) >> 1] = i1 & 65535 | (i2 & 65535) << 8;
    if (((HEAP32[i31 >> 2] | 0) + 129 + (HEAPU8[i23 >> 0] << 2) + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 129 + (HEAPU8[i23 >> 0] << 2) + 2) >> 0] | 0; else i1 = 0;
    if (((HEAP32[i31 >> 2] | 0) + 129 + (HEAPU8[i23 >> 0] << 2) + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 129 + (HEAPU8[i23 >> 0] << 2) + 2 + 1) >> 0] | 0; else i2 = 0;
    HEAP16[(HEAP32[i20 >> 2] | 0) + 122 + (HEAPU8[i23 >> 0] << 2) + 2 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
    HEAP8[i23 >> 0] = (HEAP8[i23 >> 0] | 0) + 1 << 24 >> 24;
   }
   HEAP8[i24 >> 0] = 0;
   while (1) {
    i1 = HEAP32[i31 >> 2] | 0;
    if ((HEAPU8[i24 >> 0] | 0) >= (HEAPU8[(HEAP32[i20 >> 2] | 0) + 178 + 48 >> 0] | 0)) break;
    if ((i1 + 177 + (HEAPU8[i24 >> 0] << 2) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 177 + (HEAPU8[i24 >> 0] << 2)) >> 0] | 0; else i1 = 0;
    if (((HEAP32[i31 >> 2] | 0) + 177 + (HEAPU8[i24 >> 0] << 2) + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 177 + (HEAPU8[i24 >> 0] << 2) + 1) >> 0] | 0; else i2 = 0;
    HEAP16[(HEAP32[i20 >> 2] | 0) + 178 + (HEAPU8[i24 >> 0] << 2) >> 1] = i1 & 65535 | (i2 & 65535) << 8;
    if (((HEAP32[i31 >> 2] | 0) + 177 + (HEAPU8[i24 >> 0] << 2) + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 177 + (HEAPU8[i24 >> 0] << 2) + 2) >> 0] | 0; else i2 = 0;
    if (((HEAP32[i31 >> 2] | 0) + 177 + (HEAPU8[i24 >> 0] << 2) + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 177 + (HEAPU8[i24 >> 0] << 2) + 2 + 1) >> 0] | 0; else i1 = 0;
    HEAP16[(HEAP32[i20 >> 2] | 0) + 178 + (HEAPU8[i24 >> 0] << 2) + 2 >> 1] = i2 & 65535 | (i1 & 65535) << 8;
    HEAP8[i24 >> 0] = (HEAP8[i24 >> 0] | 0) + 1 << 24 >> 24;
   }
   if ((i1 + 227 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 227) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 122 + 49 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 228 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 228) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 122 + 50 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 229 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 229) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 122 + 51 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 230 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 230) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 178 + 49 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 231 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 231) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 178 + 50 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 232 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 232) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 178 + 51 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 233 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 233) >> 0] | 0; else i1 = 0;
   HEAP8[i17 >> 0] = i1;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 122 + 52 >> 0] = (HEAPU8[i17 >> 0] & 1 | 0) != 0 & 1;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 122 + 53 >> 0] = (HEAPU8[i17 >> 0] & 2 | 0) != 0 & 1;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 122 + 54 >> 0] = (HEAPU8[i17 >> 0] & 4 | 0) != 0 & 1;
   if (((HEAP32[i31 >> 2] | 0) + 234 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 234) >> 0] | 0; else i1 = 0;
   HEAP8[i17 >> 0] = i1;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 178 + 52 >> 0] = (HEAPU8[i17 >> 0] & 1 | 0) != 0 & 1;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 178 + 53 >> 0] = (HEAPU8[i17 >> 0] & 2 | 0) != 0 & 1;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 178 + 54 >> 0] = (HEAPU8[i17 >> 0] & 4 | 0) != 0 & 1;
   if (((HEAP32[i31 >> 2] | 0) + 235 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 235) >> 0] | 0; else i1 = 0;
   HEAP32[(HEAP32[i20 >> 2] | 0) + 236 >> 2] = i1;
   i1 = (HEAP32[i20 >> 2] | 0) + 236 | 0;
   do if ((HEAP32[(HEAP32[i20 >> 2] | 0) + 236 >> 2] | 0) == 2) HEAP32[i1 >> 2] = 1; else {
    if ((HEAP32[i1 >> 2] | 0) != 1) break;
    HEAP32[(HEAP32[i20 >> 2] | 0) + 236 >> 2] = 2;
   } while (0);
   if (((HEAP32[i31 >> 2] | 0) + 236 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 236) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 240 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 237 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 237) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 241 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 238 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 238) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i20 >> 2] | 0) + 242 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 239 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 239) >> 0] | 0; else i1 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 239 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 239 + 1) >> 0] | 0; else i2 = 0;
   HEAP16[(HEAP32[i20 >> 2] | 0) + 244 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
   HEAP32[(HEAP32[i20 >> 2] | 0) + 260 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + ((HEAPU16[(HEAP32[i20 >> 2] | 0) + 24 >> 1] | 0) * 80 | 0);
  } else HEAP32[(HEAP32[i20 >> 2] | 0) + 260 >> 2] = 0;
  if ((HEAP32[i31 >> 2] | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) >> 0] | 0; else i1 = 0;
  if (((HEAP32[i31 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 1) >> 0] | 0; else i2 = 0;
  if (((HEAP32[i31 >> 2] | 0) + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 2) >> 0] | 0; else i3 = 0;
  if (((HEAP32[i31 >> 2] | 0) + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 2 + 1) >> 0] | 0; else i4 = 0;
  HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16);
  HEAP16[i21 >> 1] = 0;
  while (1) {
   if ((HEAPU16[i21 >> 1] | 0) >= (HEAPU16[(HEAP32[i20 >> 2] | 0) + 24 >> 1] | 0)) break;
   HEAP32[i32 >> 2] = (HEAP32[(HEAP32[i20 >> 2] | 0) + 260 >> 2] | 0) + ((HEAPU16[i21 >> 1] | 0) * 80 | 0);
   if ((HEAP32[i31 >> 2] | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) >> 0] | 0; else i1 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 1) >> 0] | 0; else i2 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 2) >> 0] | 0; else i3 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 2 + 1) >> 0] | 0; else i4 = 0;
   HEAP32[(HEAP32[i32 >> 2] | 0) + 24 >> 2] = i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16;
   if (((HEAP32[i31 >> 2] | 0) + 4 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 4) >> 0] | 0; else i1 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 4 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 4 + 1) >> 0] | 0; else i2 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 4 + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 4 + 2) >> 0] | 0; else i3 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 4 + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 4 + 2 + 1) >> 0] | 0; else i4 = 0;
   HEAP32[(HEAP32[i32 >> 2] | 0) + 28 >> 2] = i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16;
   if (((HEAP32[i31 >> 2] | 0) + 8 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 8) >> 0] | 0; else i1 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 8 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 8 + 1) >> 0] | 0; else i2 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 8 + 2 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 8 + 2) >> 0] | 0; else i3 = 0;
   if (((HEAP32[i31 >> 2] | 0) + 8 + 2 + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 8 + 2 + 1) >> 0] | 0; else i4 = 0;
   HEAP32[(HEAP32[i32 >> 2] | 0) + 32 >> 2] = i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16;
   i14 = HEAP32[i32 >> 2] | 0;
   HEAP32[i14 + 36 >> 2] = (HEAP32[i14 + 28 >> 2] | 0) + (HEAP32[i14 + 32 >> 2] | 0);
   if (((HEAP32[i31 >> 2] | 0) + 12 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 12) >> 0] | 0; else i1 = 0;
   f38 = Math_fround(Math_fround(i1 | 0) / Math_fround(64.0));
   HEAPF32[(HEAP32[i32 >> 2] | 0) + 40 >> 2] = f38;
   if (((HEAP32[i31 >> 2] | 0) + 13 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 13) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i32 >> 2] | 0) + 44 >> 0] = i1;
   if (((HEAP32[i31 >> 2] | 0) + 14 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 14) >> 0] | 0; else i1 = 0;
   HEAP8[i18 >> 0] = i1;
   do if (!(HEAPU8[i18 >> 0] & 3)) HEAP32[(HEAP32[i32 >> 2] | 0) + 48 >> 2] = 0; else {
    i1 = (HEAP32[i32 >> 2] | 0) + 48 | 0;
    if ((HEAPU8[i18 >> 0] & 3 | 0) == 1) {
     HEAP32[i1 >> 2] = 1;
     break;
    } else {
     HEAP32[i1 >> 2] = 2;
     break;
    }
   } while (0);
   HEAP8[(HEAP32[i32 >> 2] | 0) + 23 >> 0] = HEAPU8[i18 >> 0] & 16 | 0 ? 16 : 8;
   if (((HEAP32[i31 >> 2] | 0) + 15 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 15) >> 0] | 0; else i1 = 0;
   f38 = Math_fround(Math_fround(i1 | 0) / Math_fround(255.0));
   HEAPF32[(HEAP32[i32 >> 2] | 0) + 52 >> 2] = f38;
   if (((HEAP32[i31 >> 2] | 0) + 16 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + 16) >> 0] | 0; else i1 = 0;
   HEAP8[(HEAP32[i32 >> 2] | 0) + 56 >> 0] = i1;
   _memcpy_pad(HEAP32[i32 >> 2] | 0, 22, HEAP32[i29 >> 2] | 0, HEAP32[i30 >> 2] | 0, 18);
   HEAP32[(HEAP32[i32 >> 2] | 0) + 72 >> 2] = HEAP32[i27 >> 2];
   i1 = HEAP32[(HEAP32[i32 >> 2] | 0) + 24 >> 2] | 0;
   if ((HEAP8[(HEAP32[i32 >> 2] | 0) + 23 >> 0] | 0) == 16) {
    HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (i1 << 1);
    i14 = (HEAP32[i32 >> 2] | 0) + 28 | 0;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) >>> 1;
    i14 = (HEAP32[i32 >> 2] | 0) + 32 | 0;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) >>> 1;
    i14 = (HEAP32[i32 >> 2] | 0) + 36 | 0;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) >>> 1;
    i14 = (HEAP32[i32 >> 2] | 0) + 24 | 0;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) >>> 1;
   } else HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (i1 << 2);
   HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAP32[i34 >> 2] | 0);
   HEAP16[i21 >> 1] = (HEAP16[i21 >> 1] | 0) + 1 << 16 >> 16;
  }
  HEAP16[i22 >> 1] = 0;
  while (1) {
   if ((HEAPU16[i22 >> 1] | 0) >= (HEAPU16[(HEAP32[i20 >> 2] | 0) + 24 >> 1] | 0)) break;
   HEAP32[i33 >> 2] = (HEAP32[(HEAP32[i20 >> 2] | 0) + 260 >> 2] | 0) + ((HEAPU16[i22 >> 1] | 0) * 80 | 0);
   HEAP32[i26 >> 2] = HEAP32[(HEAP32[i33 >> 2] | 0) + 24 >> 2];
   if ((HEAP8[(HEAP32[i33 >> 2] | 0) + 23 >> 0] | 0) == 16) {
    HEAP16[i35 >> 1] = 0;
    HEAP32[i25 >> 2] = 0;
    while (1) {
     if ((HEAP32[i25 >> 2] | 0) >>> 0 >= (HEAP32[i26 >> 2] | 0) >>> 0) break;
     if (((HEAP32[i31 >> 2] | 0) + (HEAP32[i25 >> 2] << 1) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAP32[i25 >> 2] << 1)) >> 0] | 0; else i1 = 0;
     if (((HEAP32[i31 >> 2] | 0) + (HEAP32[i25 >> 2] << 1) + 1 | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAP32[i25 >> 2] << 1) + 1) >> 0] | 0; else i2 = 0;
     HEAP16[i35 >> 1] = (HEAP16[i35 >> 1] | 0) + (((i1 & 65535 | (i2 & 65535) << 8) & 65535) << 16 >> 16);
     f38 = Math_fround(Math_fround(HEAP16[i35 >> 1] | 0) / Math_fround(32768.0));
     HEAPF32[(HEAP32[(HEAP32[i33 >> 2] | 0) + 72 >> 2] | 0) + (HEAP32[i25 >> 2] << 2) >> 2] = f38;
     HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
    }
    HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAP32[(HEAP32[i33 >> 2] | 0) + 24 >> 2] << 1);
   } else {
    HEAP8[i36 >> 0] = 0;
    HEAP32[i15 >> 2] = 0;
    while (1) {
     if ((HEAP32[i15 >> 2] | 0) >>> 0 >= (HEAP32[i26 >> 2] | 0) >>> 0) break;
     if (((HEAP32[i31 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i29 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) + (HEAP32[i15 >> 2] | 0)) >> 0] | 0; else i1 = 0;
     HEAP8[i36 >> 0] = (HEAP8[i36 >> 0] | 0) + ((i1 & 255) << 24 >> 24);
     f38 = Math_fround(Math_fround(HEAP8[i36 >> 0] | 0) / Math_fround(128.0));
     HEAPF32[(HEAP32[(HEAP32[i33 >> 2] | 0) + 72 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] = f38;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    }
    HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAP32[(HEAP32[i33 >> 2] | 0) + 24 >> 2] | 0);
   }
   HEAP16[i22 >> 1] = (HEAP16[i22 >> 1] | 0) + 1 << 16 >> 16;
  }
  HEAP16[i19 >> 1] = (HEAP16[i19 >> 1] | 0) + 1 << 16 >> 16;
 }
 STACKTOP = i37;
 return HEAP32[i27 >> 2] | 0;
}

function _malloc(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 do if (i2 >>> 0 < 245) {
  i10 = i2 >>> 0 < 11 ? 16 : i2 + 11 & -8;
  i2 = i10 >>> 3;
  i12 = HEAP32[44174] | 0;
  i3 = i12 >>> i2;
  if (i3 & 3 | 0) {
   i4 = (i3 & 1 ^ 1) + i2 | 0;
   i5 = 176736 + (i4 << 1 << 2) | 0;
   i1 = i5 + 8 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   i6 = i2 + 8 | 0;
   i3 = HEAP32[i6 >> 2] | 0;
   if ((i3 | 0) == (i5 | 0)) HEAP32[44174] = i12 & ~(1 << i4); else {
    HEAP32[i3 + 12 >> 2] = i5;
    HEAP32[i1 >> 2] = i3;
   }
   i13 = i4 << 3;
   HEAP32[i2 + 4 >> 2] = i13 | 3;
   i13 = i2 + i13 + 4 | 0;
   HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1;
   i13 = i6;
   STACKTOP = i14;
   return i13 | 0;
  }
  i11 = HEAP32[44176] | 0;
  if (i10 >>> 0 > i11 >>> 0) {
   if (i3 | 0) {
    i8 = 2 << i2;
    i3 = i3 << i2 & (i8 | 0 - i8);
    i3 = (i3 & 0 - i3) + -1 | 0;
    i8 = i3 >>> 12 & 16;
    i3 = i3 >>> i8;
    i2 = i3 >>> 5 & 8;
    i3 = i3 >>> i2;
    i6 = i3 >>> 2 & 4;
    i3 = i3 >>> i6;
    i1 = i3 >>> 1 & 2;
    i3 = i3 >>> i1;
    i4 = i3 >>> 1 & 1;
    i4 = (i2 | i8 | i6 | i1 | i4) + (i3 >>> i4) | 0;
    i3 = 176736 + (i4 << 1 << 2) | 0;
    i1 = i3 + 8 | 0;
    i6 = HEAP32[i1 >> 2] | 0;
    i8 = i6 + 8 | 0;
    i2 = HEAP32[i8 >> 2] | 0;
    if ((i2 | 0) == (i3 | 0)) {
     i2 = i12 & ~(1 << i4);
     HEAP32[44174] = i2;
    } else {
     HEAP32[i2 + 12 >> 2] = i3;
     HEAP32[i1 >> 2] = i2;
     i2 = i12;
    }
    i13 = i4 << 3;
    i7 = i13 - i10 | 0;
    HEAP32[i6 + 4 >> 2] = i10 | 3;
    i5 = i6 + i10 | 0;
    HEAP32[i5 + 4 >> 2] = i7 | 1;
    HEAP32[i6 + i13 >> 2] = i7;
    if (i11 | 0) {
     i4 = HEAP32[44179] | 0;
     i1 = i11 >>> 3;
     i3 = 176736 + (i1 << 1 << 2) | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[44174] = i2 | i1;
      i1 = i3 + 8 | 0;
      i2 = i3;
     } else {
      i2 = i3 + 8 | 0;
      i1 = i2;
      i2 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i1 >> 2] = i4;
     HEAP32[i2 + 12 >> 2] = i4;
     HEAP32[i4 + 8 >> 2] = i2;
     HEAP32[i4 + 12 >> 2] = i3;
    }
    HEAP32[44176] = i7;
    HEAP32[44179] = i5;
    i13 = i8;
    STACKTOP = i14;
    return i13 | 0;
   }
   i6 = HEAP32[44175] | 0;
   if (i6) {
    i8 = (i6 & 0 - i6) + -1 | 0;
    i5 = i8 >>> 12 & 16;
    i8 = i8 >>> i5;
    i4 = i8 >>> 5 & 8;
    i8 = i8 >>> i4;
    i7 = i8 >>> 2 & 4;
    i8 = i8 >>> i7;
    i3 = i8 >>> 1 & 2;
    i8 = i8 >>> i3;
    i9 = i8 >>> 1 & 1;
    i9 = HEAP32[177e3 + ((i4 | i5 | i7 | i3 | i9) + (i8 >>> i9) << 2) >> 2] | 0;
    i8 = (HEAP32[i9 + 4 >> 2] & -8) - i10 | 0;
    i3 = i9;
    while (1) {
     i2 = HEAP32[i3 + 16 >> 2] | 0;
     if (!i2) {
      i2 = HEAP32[i3 + 20 >> 2] | 0;
      if (!i2) break;
     }
     i3 = (HEAP32[i2 + 4 >> 2] & -8) - i10 | 0;
     i7 = i3 >>> 0 < i8 >>> 0;
     i8 = i7 ? i3 : i8;
     i3 = i2;
     i9 = i7 ? i2 : i9;
    }
    i7 = i9 + i10 | 0;
    if (i7 >>> 0 > i9 >>> 0) {
     i5 = HEAP32[i9 + 24 >> 2] | 0;
     i1 = HEAP32[i9 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i9 | 0)) {
      i2 = i9 + 20 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i2 = i9 + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i3 = 0;
        break;
       }
      }
      while (1) {
       i4 = i1 + 20 | 0;
       i3 = HEAP32[i4 >> 2] | 0;
       if (!i3) {
        i4 = i1 + 16 | 0;
        i3 = HEAP32[i4 >> 2] | 0;
        if (!i3) break; else {
         i1 = i3;
         i2 = i4;
        }
       } else {
        i1 = i3;
        i2 = i4;
       }
      }
      HEAP32[i2 >> 2] = 0;
      i3 = i1;
     } else {
      i3 = HEAP32[i9 + 8 >> 2] | 0;
      HEAP32[i3 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i3;
      i3 = i1;
     } while (0);
     do if (i5 | 0) {
      i1 = HEAP32[i9 + 28 >> 2] | 0;
      i2 = 177e3 + (i1 << 2) | 0;
      if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
       HEAP32[i2 >> 2] = i3;
       if (!i3) {
        HEAP32[44175] = i6 & ~(1 << i1);
        break;
       }
      } else {
       i13 = i5 + 16 | 0;
       HEAP32[((HEAP32[i13 >> 2] | 0) == (i9 | 0) ? i13 : i5 + 20 | 0) >> 2] = i3;
       if (!i3) break;
      }
      HEAP32[i3 + 24 >> 2] = i5;
      i1 = HEAP32[i9 + 16 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 16 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
      i1 = HEAP32[i9 + 20 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 20 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
     } while (0);
     if (i8 >>> 0 < 16) {
      i13 = i8 + i10 | 0;
      HEAP32[i9 + 4 >> 2] = i13 | 3;
      i13 = i9 + i13 + 4 | 0;
      HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1;
     } else {
      HEAP32[i9 + 4 >> 2] = i10 | 3;
      HEAP32[i7 + 4 >> 2] = i8 | 1;
      HEAP32[i7 + i8 >> 2] = i8;
      if (i11 | 0) {
       i4 = HEAP32[44179] | 0;
       i1 = i11 >>> 3;
       i3 = 176736 + (i1 << 1 << 2) | 0;
       i1 = 1 << i1;
       if (!(i1 & i12)) {
        HEAP32[44174] = i1 | i12;
        i1 = i3 + 8 | 0;
        i2 = i3;
       } else {
        i2 = i3 + 8 | 0;
        i1 = i2;
        i2 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i1 >> 2] = i4;
       HEAP32[i2 + 12 >> 2] = i4;
       HEAP32[i4 + 8 >> 2] = i2;
       HEAP32[i4 + 12 >> 2] = i3;
      }
      HEAP32[44176] = i8;
      HEAP32[44179] = i7;
     }
     i13 = i9 + 8 | 0;
     STACKTOP = i14;
     return i13 | 0;
    }
   }
  }
 } else if (i2 >>> 0 > 4294967231) i10 = -1; else {
  i2 = i2 + 11 | 0;
  i10 = i2 & -8;
  i9 = HEAP32[44175] | 0;
  if (i9) {
   i3 = 0 - i10 | 0;
   i2 = i2 >>> 8;
   if (!i2) i8 = 0; else if (i10 >>> 0 > 16777215) i8 = 31; else {
    i12 = (i2 + 1048320 | 0) >>> 16 & 8;
    i13 = i2 << i12;
    i11 = (i13 + 520192 | 0) >>> 16 & 4;
    i13 = i13 << i11;
    i8 = (i13 + 245760 | 0) >>> 16 & 2;
    i8 = 14 - (i11 | i12 | i8) + (i13 << i8 >>> 15) | 0;
    i8 = i10 >>> (i8 + 7 | 0) & 1 | i8 << 1;
   }
   i2 = HEAP32[177e3 + (i8 << 2) >> 2] | 0;
   L79 : do if (!i2) {
    i4 = 0;
    i2 = 0;
    i13 = 61;
   } else {
    i4 = 0;
    i6 = i10 << ((i8 | 0) == 31 ? 0 : 25 - (i8 >>> 1) | 0);
    i7 = i2;
    i2 = 0;
    while (1) {
     i5 = (HEAP32[i7 + 4 >> 2] & -8) - i10 | 0;
     if (i5 >>> 0 < i3 >>> 0) if (!i5) {
      i3 = 0;
      i4 = i7;
      i2 = i7;
      i13 = 65;
      break L79;
     } else {
      i3 = i5;
      i2 = i7;
     }
     i13 = HEAP32[i7 + 20 >> 2] | 0;
     i7 = HEAP32[i7 + 16 + (i6 >>> 31 << 2) >> 2] | 0;
     i4 = (i13 | 0) == 0 | (i13 | 0) == (i7 | 0) ? i4 : i13;
     if (!i7) {
      i13 = 61;
      break;
     } else i6 = i6 << 1;
    }
   } while (0);
   if ((i13 | 0) == 61) {
    if ((i4 | 0) == 0 & (i2 | 0) == 0) {
     i2 = 2 << i8;
     i2 = (i2 | 0 - i2) & i9;
     if (!i2) break;
     i2 = (i2 & 0 - i2) + -1 | 0;
     i8 = i2 >>> 12 & 16;
     i2 = i2 >>> i8;
     i7 = i2 >>> 5 & 8;
     i2 = i2 >>> i7;
     i11 = i2 >>> 2 & 4;
     i2 = i2 >>> i11;
     i12 = i2 >>> 1 & 2;
     i2 = i2 >>> i12;
     i4 = i2 >>> 1 & 1;
     i4 = HEAP32[177e3 + ((i7 | i8 | i11 | i12 | i4) + (i2 >>> i4) << 2) >> 2] | 0;
     i2 = 0;
    }
    if (!i4) {
     i7 = i3;
     i5 = i2;
    } else i13 = 65;
   }
   if ((i13 | 0) == 65) while (1) {
    i12 = (HEAP32[i4 + 4 >> 2] & -8) - i10 | 0;
    i5 = i12 >>> 0 < i3 >>> 0;
    i3 = i5 ? i12 : i3;
    i5 = i5 ? i4 : i2;
    i2 = HEAP32[i4 + 16 >> 2] | 0;
    if (!i2) i2 = HEAP32[i4 + 20 >> 2] | 0;
    if (!i2) {
     i7 = i3;
     break;
    } else {
     i4 = i2;
     i2 = i5;
    }
   }
   if (i5) if (i7 >>> 0 < ((HEAP32[44176] | 0) - i10 | 0) >>> 0) {
    i8 = i5 + i10 | 0;
    if (i8 >>> 0 > i5 >>> 0) {
     i6 = HEAP32[i5 + 24 >> 2] | 0;
     i1 = HEAP32[i5 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i5 | 0)) {
      i2 = i5 + 20 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i2 = i5 + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i1 = 0;
        break;
       }
      }
      while (1) {
       i4 = i1 + 20 | 0;
       i3 = HEAP32[i4 >> 2] | 0;
       if (!i3) {
        i4 = i1 + 16 | 0;
        i3 = HEAP32[i4 >> 2] | 0;
        if (!i3) break; else {
         i1 = i3;
         i2 = i4;
        }
       } else {
        i1 = i3;
        i2 = i4;
       }
      }
      HEAP32[i2 >> 2] = 0;
     } else {
      i13 = HEAP32[i5 + 8 >> 2] | 0;
      HEAP32[i13 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i13;
     } while (0);
     do if (!i6) i4 = i9; else {
      i2 = HEAP32[i5 + 28 >> 2] | 0;
      i3 = 177e3 + (i2 << 2) | 0;
      if ((i5 | 0) == (HEAP32[i3 >> 2] | 0)) {
       HEAP32[i3 >> 2] = i1;
       if (!i1) {
        i4 = i9 & ~(1 << i2);
        HEAP32[44175] = i4;
        break;
       }
      } else {
       i13 = i6 + 16 | 0;
       HEAP32[((HEAP32[i13 >> 2] | 0) == (i5 | 0) ? i13 : i6 + 20 | 0) >> 2] = i1;
       if (!i1) {
        i4 = i9;
        break;
       }
      }
      HEAP32[i1 + 24 >> 2] = i6;
      i2 = HEAP32[i5 + 16 >> 2] | 0;
      if (i2 | 0) {
       HEAP32[i1 + 16 >> 2] = i2;
       HEAP32[i2 + 24 >> 2] = i1;
      }
      i2 = HEAP32[i5 + 20 >> 2] | 0;
      if (!i2) i4 = i9; else {
       HEAP32[i1 + 20 >> 2] = i2;
       HEAP32[i2 + 24 >> 2] = i1;
       i4 = i9;
      }
     } while (0);
     L128 : do if (i7 >>> 0 < 16) {
      i13 = i7 + i10 | 0;
      HEAP32[i5 + 4 >> 2] = i13 | 3;
      i13 = i5 + i13 + 4 | 0;
      HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1;
     } else {
      HEAP32[i5 + 4 >> 2] = i10 | 3;
      HEAP32[i8 + 4 >> 2] = i7 | 1;
      HEAP32[i8 + i7 >> 2] = i7;
      i1 = i7 >>> 3;
      if (i7 >>> 0 < 256) {
       i3 = 176736 + (i1 << 1 << 2) | 0;
       i2 = HEAP32[44174] | 0;
       i1 = 1 << i1;
       if (!(i2 & i1)) {
        HEAP32[44174] = i2 | i1;
        i1 = i3 + 8 | 0;
        i2 = i3;
       } else {
        i2 = i3 + 8 | 0;
        i1 = i2;
        i2 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i1 >> 2] = i8;
       HEAP32[i2 + 12 >> 2] = i8;
       HEAP32[i8 + 8 >> 2] = i2;
       HEAP32[i8 + 12 >> 2] = i3;
       break;
      }
      i1 = i7 >>> 8;
      if (!i1) i3 = 0; else if (i7 >>> 0 > 16777215) i3 = 31; else {
       i12 = (i1 + 1048320 | 0) >>> 16 & 8;
       i13 = i1 << i12;
       i11 = (i13 + 520192 | 0) >>> 16 & 4;
       i13 = i13 << i11;
       i3 = (i13 + 245760 | 0) >>> 16 & 2;
       i3 = 14 - (i11 | i12 | i3) + (i13 << i3 >>> 15) | 0;
       i3 = i7 >>> (i3 + 7 | 0) & 1 | i3 << 1;
      }
      i1 = 177e3 + (i3 << 2) | 0;
      HEAP32[i8 + 28 >> 2] = i3;
      i2 = i8 + 16 | 0;
      HEAP32[i2 + 4 >> 2] = 0;
      HEAP32[i2 >> 2] = 0;
      i2 = 1 << i3;
      if (!(i4 & i2)) {
       HEAP32[44175] = i4 | i2;
       HEAP32[i1 >> 2] = i8;
       HEAP32[i8 + 24 >> 2] = i1;
       HEAP32[i8 + 12 >> 2] = i8;
       HEAP32[i8 + 8 >> 2] = i8;
       break;
      }
      i1 = HEAP32[i1 >> 2] | 0;
      L145 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i7 | 0)) {
       i4 = i7 << ((i3 | 0) == 31 ? 0 : 25 - (i3 >>> 1) | 0);
       while (1) {
        i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) break;
        if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i7 | 0)) {
         i1 = i2;
         break L145;
        } else {
         i4 = i4 << 1;
         i1 = i2;
        }
       }
       HEAP32[i3 >> 2] = i8;
       HEAP32[i8 + 24 >> 2] = i1;
       HEAP32[i8 + 12 >> 2] = i8;
       HEAP32[i8 + 8 >> 2] = i8;
       break L128;
      } while (0);
      i12 = i1 + 8 | 0;
      i13 = HEAP32[i12 >> 2] | 0;
      HEAP32[i13 + 12 >> 2] = i8;
      HEAP32[i12 >> 2] = i8;
      HEAP32[i8 + 8 >> 2] = i13;
      HEAP32[i8 + 12 >> 2] = i1;
      HEAP32[i8 + 24 >> 2] = 0;
     } while (0);
     i13 = i5 + 8 | 0;
     STACKTOP = i14;
     return i13 | 0;
    }
   }
  }
 } while (0);
 i3 = HEAP32[44176] | 0;
 if (i3 >>> 0 >= i10 >>> 0) {
  i2 = i3 - i10 | 0;
  i1 = HEAP32[44179] | 0;
  if (i2 >>> 0 > 15) {
   i13 = i1 + i10 | 0;
   HEAP32[44179] = i13;
   HEAP32[44176] = i2;
   HEAP32[i13 + 4 >> 2] = i2 | 1;
   HEAP32[i1 + i3 >> 2] = i2;
   HEAP32[i1 + 4 >> 2] = i10 | 3;
  } else {
   HEAP32[44176] = 0;
   HEAP32[44179] = 0;
   HEAP32[i1 + 4 >> 2] = i3 | 3;
   i13 = i1 + i3 + 4 | 0;
   HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1;
  }
  i13 = i1 + 8 | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i6 = HEAP32[44177] | 0;
 if (i6 >>> 0 > i10 >>> 0) {
  i11 = i6 - i10 | 0;
  HEAP32[44177] = i11;
  i13 = HEAP32[44180] | 0;
  i12 = i13 + i10 | 0;
  HEAP32[44180] = i12;
  HEAP32[i12 + 4 >> 2] = i11 | 1;
  HEAP32[i13 + 4 >> 2] = i10 | 3;
  i13 = i13 + 8 | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!(HEAP32[44292] | 0)) {
  HEAP32[44294] = 4096;
  HEAP32[44293] = 4096;
  HEAP32[44295] = -1;
  HEAP32[44296] = -1;
  HEAP32[44297] = 0;
  HEAP32[44285] = 0;
  HEAP32[44292] = i1 & -16 ^ 1431655768;
  i1 = 4096;
 } else i1 = HEAP32[44294] | 0;
 i7 = i10 + 48 | 0;
 i8 = i10 + 47 | 0;
 i5 = i1 + i8 | 0;
 i3 = 0 - i1 | 0;
 i9 = i5 & i3;
 if (i9 >>> 0 <= i10 >>> 0) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i1 = HEAP32[44284] | 0;
 if (i1 | 0) {
  i11 = HEAP32[44282] | 0;
  i12 = i11 + i9 | 0;
  if (i12 >>> 0 <= i11 >>> 0 | i12 >>> 0 > i1 >>> 0) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 L178 : do if (!(HEAP32[44285] & 4)) {
  i2 = HEAP32[44180] | 0;
  L180 : do if (!i2) i13 = 128; else {
   i4 = 177144;
   while (1) {
    i1 = HEAP32[i4 >> 2] | 0;
    if (i1 >>> 0 <= i2 >>> 0) if ((i1 + (HEAP32[i4 + 4 >> 2] | 0) | 0) >>> 0 > i2 >>> 0) break;
    i1 = HEAP32[i4 + 8 >> 2] | 0;
    if (!i1) {
     i13 = 128;
     break L180;
    } else i4 = i1;
   }
   i1 = i5 - i6 & i3;
   if (i1 >>> 0 < 2147483647) {
    i2 = _sbrk(i1) | 0;
    if ((i2 | 0) == ((HEAP32[i4 >> 2] | 0) + (HEAP32[i4 + 4 >> 2] | 0) | 0)) {
     if ((i2 | 0) != (-1 | 0)) {
      i6 = i2;
      i13 = 145;
      break L178;
     }
    } else {
     i4 = i2;
     i13 = 136;
    }
   } else i1 = 0;
  } while (0);
  do if ((i13 | 0) == 128) {
   i5 = _sbrk(0) | 0;
   if ((i5 | 0) == (-1 | 0)) i1 = 0; else {
    i1 = i5;
    i2 = HEAP32[44293] | 0;
    i4 = i2 + -1 | 0;
    i1 = ((i4 & i1 | 0) == 0 ? 0 : (i4 + i1 & 0 - i2) - i1 | 0) + i9 | 0;
    i2 = HEAP32[44282] | 0;
    i4 = i1 + i2 | 0;
    if (i1 >>> 0 > i10 >>> 0 & i1 >>> 0 < 2147483647) {
     i3 = HEAP32[44284] | 0;
     if (i3 | 0) if (i4 >>> 0 <= i2 >>> 0 | i4 >>> 0 > i3 >>> 0) {
      i1 = 0;
      break;
     }
     i2 = _sbrk(i1) | 0;
     if ((i2 | 0) == (i5 | 0)) {
      i6 = i5;
      i13 = 145;
      break L178;
     } else {
      i4 = i2;
      i13 = 136;
     }
    } else i1 = 0;
   }
  } while (0);
  do if ((i13 | 0) == 136) {
   i3 = 0 - i1 | 0;
   if (!(i7 >>> 0 > i1 >>> 0 & (i1 >>> 0 < 2147483647 & (i4 | 0) != (-1 | 0)))) if ((i4 | 0) == (-1 | 0)) {
    i1 = 0;
    break;
   } else {
    i6 = i4;
    i13 = 145;
    break L178;
   }
   i2 = HEAP32[44294] | 0;
   i2 = i8 - i1 + i2 & 0 - i2;
   if (i2 >>> 0 >= 2147483647) {
    i6 = i4;
    i13 = 145;
    break L178;
   }
   if ((_sbrk(i2) | 0) == (-1 | 0)) {
    _sbrk(i3) | 0;
    i1 = 0;
    break;
   } else {
    i6 = i4;
    i1 = i2 + i1 | 0;
    i13 = 145;
    break L178;
   }
  } while (0);
  HEAP32[44285] = HEAP32[44285] | 4;
  i13 = 143;
 } else {
  i1 = 0;
  i13 = 143;
 } while (0);
 if ((i13 | 0) == 143) if (i9 >>> 0 < 2147483647) {
  i2 = _sbrk(i9) | 0;
  i12 = _sbrk(0) | 0;
  i4 = i12 - i2 | 0;
  i3 = i4 >>> 0 > (i10 + 40 | 0) >>> 0;
  if (!((i2 | 0) == (-1 | 0) | i3 ^ 1 | i2 >>> 0 < i12 >>> 0 & ((i2 | 0) != (-1 | 0) & (i12 | 0) != (-1 | 0)) ^ 1)) {
   i6 = i2;
   i1 = i3 ? i4 : i1;
   i13 = 145;
  }
 }
 if ((i13 | 0) == 145) {
  i2 = (HEAP32[44282] | 0) + i1 | 0;
  HEAP32[44282] = i2;
  if (i2 >>> 0 > (HEAP32[44283] | 0) >>> 0) HEAP32[44283] = i2;
  i7 = HEAP32[44180] | 0;
  L215 : do if (!i7) {
   i13 = HEAP32[44178] | 0;
   if ((i13 | 0) == 0 | i6 >>> 0 < i13 >>> 0) HEAP32[44178] = i6;
   HEAP32[44286] = i6;
   HEAP32[44287] = i1;
   HEAP32[44289] = 0;
   HEAP32[44183] = HEAP32[44292];
   HEAP32[44182] = -1;
   HEAP32[44187] = 176736;
   HEAP32[44186] = 176736;
   HEAP32[44189] = 176744;
   HEAP32[44188] = 176744;
   HEAP32[44191] = 176752;
   HEAP32[44190] = 176752;
   HEAP32[44193] = 176760;
   HEAP32[44192] = 176760;
   HEAP32[44195] = 176768;
   HEAP32[44194] = 176768;
   HEAP32[44197] = 176776;
   HEAP32[44196] = 176776;
   HEAP32[44199] = 176784;
   HEAP32[44198] = 176784;
   HEAP32[44201] = 176792;
   HEAP32[44200] = 176792;
   HEAP32[44203] = 176800;
   HEAP32[44202] = 176800;
   HEAP32[44205] = 176808;
   HEAP32[44204] = 176808;
   HEAP32[44207] = 176816;
   HEAP32[44206] = 176816;
   HEAP32[44209] = 176824;
   HEAP32[44208] = 176824;
   HEAP32[44211] = 176832;
   HEAP32[44210] = 176832;
   HEAP32[44213] = 176840;
   HEAP32[44212] = 176840;
   HEAP32[44215] = 176848;
   HEAP32[44214] = 176848;
   HEAP32[44217] = 176856;
   HEAP32[44216] = 176856;
   HEAP32[44219] = 176864;
   HEAP32[44218] = 176864;
   HEAP32[44221] = 176872;
   HEAP32[44220] = 176872;
   HEAP32[44223] = 176880;
   HEAP32[44222] = 176880;
   HEAP32[44225] = 176888;
   HEAP32[44224] = 176888;
   HEAP32[44227] = 176896;
   HEAP32[44226] = 176896;
   HEAP32[44229] = 176904;
   HEAP32[44228] = 176904;
   HEAP32[44231] = 176912;
   HEAP32[44230] = 176912;
   HEAP32[44233] = 176920;
   HEAP32[44232] = 176920;
   HEAP32[44235] = 176928;
   HEAP32[44234] = 176928;
   HEAP32[44237] = 176936;
   HEAP32[44236] = 176936;
   HEAP32[44239] = 176944;
   HEAP32[44238] = 176944;
   HEAP32[44241] = 176952;
   HEAP32[44240] = 176952;
   HEAP32[44243] = 176960;
   HEAP32[44242] = 176960;
   HEAP32[44245] = 176968;
   HEAP32[44244] = 176968;
   HEAP32[44247] = 176976;
   HEAP32[44246] = 176976;
   HEAP32[44249] = 176984;
   HEAP32[44248] = 176984;
   i13 = i1 + -40 | 0;
   i11 = i6 + 8 | 0;
   i11 = (i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7;
   i12 = i6 + i11 | 0;
   i11 = i13 - i11 | 0;
   HEAP32[44180] = i12;
   HEAP32[44177] = i11;
   HEAP32[i12 + 4 >> 2] = i11 | 1;
   HEAP32[i6 + i13 + 4 >> 2] = 40;
   HEAP32[44181] = HEAP32[44296];
  } else {
   i2 = 177144;
   do {
    i3 = HEAP32[i2 >> 2] | 0;
    i4 = HEAP32[i2 + 4 >> 2] | 0;
    if ((i6 | 0) == (i3 + i4 | 0)) {
     i13 = 154;
     break;
    }
    i2 = HEAP32[i2 + 8 >> 2] | 0;
   } while ((i2 | 0) != 0);
   if ((i13 | 0) == 154) {
    i5 = i2 + 4 | 0;
    if (!(HEAP32[i2 + 12 >> 2] & 8)) if (i6 >>> 0 > i7 >>> 0 & i3 >>> 0 <= i7 >>> 0) {
     HEAP32[i5 >> 2] = i4 + i1;
     i13 = (HEAP32[44177] | 0) + i1 | 0;
     i11 = i7 + 8 | 0;
     i11 = (i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7;
     i12 = i7 + i11 | 0;
     i11 = i13 - i11 | 0;
     HEAP32[44180] = i12;
     HEAP32[44177] = i11;
     HEAP32[i12 + 4 >> 2] = i11 | 1;
     HEAP32[i7 + i13 + 4 >> 2] = 40;
     HEAP32[44181] = HEAP32[44296];
     break;
    }
   }
   if (i6 >>> 0 < (HEAP32[44178] | 0) >>> 0) HEAP32[44178] = i6;
   i3 = i6 + i1 | 0;
   i2 = 177144;
   do {
    if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) {
     i13 = 162;
     break;
    }
    i2 = HEAP32[i2 + 8 >> 2] | 0;
   } while ((i2 | 0) != 0);
   if ((i13 | 0) == 162) if (!(HEAP32[i2 + 12 >> 2] & 8)) {
    HEAP32[i2 >> 2] = i6;
    i11 = i2 + 4 | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i1;
    i11 = i6 + 8 | 0;
    i11 = i6 + ((i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7) | 0;
    i1 = i3 + 8 | 0;
    i1 = i3 + ((i1 & 7 | 0) == 0 ? 0 : 0 - i1 & 7) | 0;
    i9 = i11 + i10 | 0;
    i8 = i1 - i11 - i10 | 0;
    HEAP32[i11 + 4 >> 2] = i10 | 3;
    L238 : do if ((i7 | 0) == (i1 | 0)) {
     i13 = (HEAP32[44177] | 0) + i8 | 0;
     HEAP32[44177] = i13;
     HEAP32[44180] = i9;
     HEAP32[i9 + 4 >> 2] = i13 | 1;
    } else {
     if ((HEAP32[44179] | 0) == (i1 | 0)) {
      i13 = (HEAP32[44176] | 0) + i8 | 0;
      HEAP32[44176] = i13;
      HEAP32[44179] = i9;
      HEAP32[i9 + 4 >> 2] = i13 | 1;
      HEAP32[i9 + i13 >> 2] = i13;
      break;
     }
     i2 = HEAP32[i1 + 4 >> 2] | 0;
     if ((i2 & 3 | 0) == 1) {
      i7 = i2 & -8;
      i4 = i2 >>> 3;
      L246 : do if (i2 >>> 0 < 256) {
       i2 = HEAP32[i1 + 8 >> 2] | 0;
       i3 = HEAP32[i1 + 12 >> 2] | 0;
       if ((i3 | 0) == (i2 | 0)) {
        HEAP32[44174] = HEAP32[44174] & ~(1 << i4);
        break;
       } else {
        HEAP32[i2 + 12 >> 2] = i3;
        HEAP32[i3 + 8 >> 2] = i2;
        break;
       }
      } else {
       i6 = HEAP32[i1 + 24 >> 2] | 0;
       i2 = HEAP32[i1 + 12 >> 2] | 0;
       do if ((i2 | 0) == (i1 | 0)) {
        i4 = i1 + 16 | 0;
        i3 = i4 + 4 | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) {
         i2 = HEAP32[i4 >> 2] | 0;
         if (!i2) {
          i2 = 0;
          break;
         } else i3 = i4;
        }
        while (1) {
         i5 = i2 + 20 | 0;
         i4 = HEAP32[i5 >> 2] | 0;
         if (!i4) {
          i5 = i2 + 16 | 0;
          i4 = HEAP32[i5 >> 2] | 0;
          if (!i4) break; else {
           i2 = i4;
           i3 = i5;
          }
         } else {
          i2 = i4;
          i3 = i5;
         }
        }
        HEAP32[i3 >> 2] = 0;
       } else {
        i13 = HEAP32[i1 + 8 >> 2] | 0;
        HEAP32[i13 + 12 >> 2] = i2;
        HEAP32[i2 + 8 >> 2] = i13;
       } while (0);
       if (!i6) break;
       i3 = HEAP32[i1 + 28 >> 2] | 0;
       i4 = 177e3 + (i3 << 2) | 0;
       do if ((HEAP32[i4 >> 2] | 0) == (i1 | 0)) {
        HEAP32[i4 >> 2] = i2;
        if (i2 | 0) break;
        HEAP32[44175] = HEAP32[44175] & ~(1 << i3);
        break L246;
       } else {
        i13 = i6 + 16 | 0;
        HEAP32[((HEAP32[i13 >> 2] | 0) == (i1 | 0) ? i13 : i6 + 20 | 0) >> 2] = i2;
        if (!i2) break L246;
       } while (0);
       HEAP32[i2 + 24 >> 2] = i6;
       i4 = i1 + 16 | 0;
       i3 = HEAP32[i4 >> 2] | 0;
       if (i3 | 0) {
        HEAP32[i2 + 16 >> 2] = i3;
        HEAP32[i3 + 24 >> 2] = i2;
       }
       i3 = HEAP32[i4 + 4 >> 2] | 0;
       if (!i3) break;
       HEAP32[i2 + 20 >> 2] = i3;
       HEAP32[i3 + 24 >> 2] = i2;
      } while (0);
      i1 = i1 + i7 | 0;
      i5 = i7 + i8 | 0;
     } else i5 = i8;
     i1 = i1 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
     HEAP32[i9 + 4 >> 2] = i5 | 1;
     HEAP32[i9 + i5 >> 2] = i5;
     i1 = i5 >>> 3;
     if (i5 >>> 0 < 256) {
      i3 = 176736 + (i1 << 1 << 2) | 0;
      i2 = HEAP32[44174] | 0;
      i1 = 1 << i1;
      if (!(i2 & i1)) {
       HEAP32[44174] = i2 | i1;
       i1 = i3 + 8 | 0;
       i2 = i3;
      } else {
       i2 = i3 + 8 | 0;
       i1 = i2;
       i2 = HEAP32[i2 >> 2] | 0;
      }
      HEAP32[i1 >> 2] = i9;
      HEAP32[i2 + 12 >> 2] = i9;
      HEAP32[i9 + 8 >> 2] = i2;
      HEAP32[i9 + 12 >> 2] = i3;
      break;
     }
     i1 = i5 >>> 8;
     do if (!i1) i4 = 0; else {
      if (i5 >>> 0 > 16777215) {
       i4 = 31;
       break;
      }
      i12 = (i1 + 1048320 | 0) >>> 16 & 8;
      i13 = i1 << i12;
      i10 = (i13 + 520192 | 0) >>> 16 & 4;
      i13 = i13 << i10;
      i4 = (i13 + 245760 | 0) >>> 16 & 2;
      i4 = 14 - (i10 | i12 | i4) + (i13 << i4 >>> 15) | 0;
      i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
     } while (0);
     i2 = 177e3 + (i4 << 2) | 0;
     HEAP32[i9 + 28 >> 2] = i4;
     i1 = i9 + 16 | 0;
     HEAP32[i1 + 4 >> 2] = 0;
     HEAP32[i1 >> 2] = 0;
     i1 = HEAP32[44175] | 0;
     i3 = 1 << i4;
     if (!(i1 & i3)) {
      HEAP32[44175] = i1 | i3;
      HEAP32[i2 >> 2] = i9;
      HEAP32[i9 + 24 >> 2] = i2;
      HEAP32[i9 + 12 >> 2] = i9;
      HEAP32[i9 + 8 >> 2] = i9;
      break;
     }
     i1 = HEAP32[i2 >> 2] | 0;
     L291 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
      i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
      while (1) {
       i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       if (!i2) break;
       if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
        i1 = i2;
        break L291;
       } else {
        i4 = i4 << 1;
        i1 = i2;
       }
      }
      HEAP32[i3 >> 2] = i9;
      HEAP32[i9 + 24 >> 2] = i1;
      HEAP32[i9 + 12 >> 2] = i9;
      HEAP32[i9 + 8 >> 2] = i9;
      break L238;
     } while (0);
     i12 = i1 + 8 | 0;
     i13 = HEAP32[i12 >> 2] | 0;
     HEAP32[i13 + 12 >> 2] = i9;
     HEAP32[i12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i13;
     HEAP32[i9 + 12 >> 2] = i1;
     HEAP32[i9 + 24 >> 2] = 0;
    } while (0);
    i13 = i11 + 8 | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   i3 = 177144;
   while (1) {
    i2 = HEAP32[i3 >> 2] | 0;
    if (i2 >>> 0 <= i7 >>> 0) {
     i2 = i2 + (HEAP32[i3 + 4 >> 2] | 0) | 0;
     if (i2 >>> 0 > i7 >>> 0) break;
    }
    i3 = HEAP32[i3 + 8 >> 2] | 0;
   }
   i5 = i2 + -47 | 0;
   i3 = i5 + 8 | 0;
   i3 = i5 + ((i3 & 7 | 0) == 0 ? 0 : 0 - i3 & 7) | 0;
   i5 = i7 + 16 | 0;
   i3 = i3 >>> 0 < i5 >>> 0 ? i7 : i3;
   i13 = i3 + 8 | 0;
   i4 = i1 + -40 | 0;
   i11 = i6 + 8 | 0;
   i11 = (i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7;
   i12 = i6 + i11 | 0;
   i11 = i4 - i11 | 0;
   HEAP32[44180] = i12;
   HEAP32[44177] = i11;
   HEAP32[i12 + 4 >> 2] = i11 | 1;
   HEAP32[i6 + i4 + 4 >> 2] = 40;
   HEAP32[44181] = HEAP32[44296];
   i4 = i3 + 4 | 0;
   HEAP32[i4 >> 2] = 27;
   HEAP32[i13 >> 2] = HEAP32[44286];
   HEAP32[i13 + 4 >> 2] = HEAP32[44287];
   HEAP32[i13 + 8 >> 2] = HEAP32[44288];
   HEAP32[i13 + 12 >> 2] = HEAP32[44289];
   HEAP32[44286] = i6;
   HEAP32[44287] = i1;
   HEAP32[44289] = 0;
   HEAP32[44288] = i13;
   i1 = i3 + 24 | 0;
   do {
    i13 = i1;
    i1 = i1 + 4 | 0;
    HEAP32[i1 >> 2] = 7;
   } while ((i13 + 8 | 0) >>> 0 < i2 >>> 0);
   if ((i3 | 0) != (i7 | 0)) {
    i6 = i3 - i7 | 0;
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -2;
    HEAP32[i7 + 4 >> 2] = i6 | 1;
    HEAP32[i3 >> 2] = i6;
    i1 = i6 >>> 3;
    if (i6 >>> 0 < 256) {
     i3 = 176736 + (i1 << 1 << 2) | 0;
     i2 = HEAP32[44174] | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[44174] = i2 | i1;
      i1 = i3 + 8 | 0;
      i2 = i3;
     } else {
      i2 = i3 + 8 | 0;
      i1 = i2;
      i2 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i1 >> 2] = i7;
     HEAP32[i2 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i2;
     HEAP32[i7 + 12 >> 2] = i3;
     break;
    }
    i1 = i6 >>> 8;
    if (!i1) i4 = 0; else if (i6 >>> 0 > 16777215) i4 = 31; else {
     i12 = (i1 + 1048320 | 0) >>> 16 & 8;
     i13 = i1 << i12;
     i11 = (i13 + 520192 | 0) >>> 16 & 4;
     i13 = i13 << i11;
     i4 = (i13 + 245760 | 0) >>> 16 & 2;
     i4 = 14 - (i11 | i12 | i4) + (i13 << i4 >>> 15) | 0;
     i4 = i6 >>> (i4 + 7 | 0) & 1 | i4 << 1;
    }
    i3 = 177e3 + (i4 << 2) | 0;
    HEAP32[i7 + 28 >> 2] = i4;
    HEAP32[i7 + 20 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    i1 = HEAP32[44175] | 0;
    i2 = 1 << i4;
    if (!(i1 & i2)) {
     HEAP32[44175] = i1 | i2;
     HEAP32[i3 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i3;
     HEAP32[i7 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i7;
     break;
    }
    i1 = HEAP32[i3 >> 2] | 0;
    L325 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i6 | 0)) {
     i4 = i6 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
     while (1) {
      i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
      i2 = HEAP32[i3 >> 2] | 0;
      if (!i2) break;
      if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i6 | 0)) {
       i1 = i2;
       break L325;
      } else {
       i4 = i4 << 1;
       i1 = i2;
      }
     }
     HEAP32[i3 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i1;
     HEAP32[i7 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i7;
     break L215;
    } while (0);
    i12 = i1 + 8 | 0;
    i13 = HEAP32[i12 >> 2] | 0;
    HEAP32[i13 + 12 >> 2] = i7;
    HEAP32[i12 >> 2] = i7;
    HEAP32[i7 + 8 >> 2] = i13;
    HEAP32[i7 + 12 >> 2] = i1;
    HEAP32[i7 + 24 >> 2] = 0;
   }
  } while (0);
  i1 = HEAP32[44177] | 0;
  if (i1 >>> 0 > i10 >>> 0) {
   i11 = i1 - i10 | 0;
   HEAP32[44177] = i11;
   i13 = HEAP32[44180] | 0;
   i12 = i13 + i10 | 0;
   HEAP32[44180] = i12;
   HEAP32[i12 + 4 >> 2] = i11 | 1;
   HEAP32[i13 + 4 >> 2] = i10 | 3;
   i13 = i13 + 8 | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 i13 = ___errno_location() | 0;
 HEAP32[i13 >> 2] = 48;
 i13 = 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _stbi__create_png_image_raw(i2, i15, i17, i12, i21, i22, i6, i3) {
 i2 = i2 | 0;
 i15 = i15 | 0;
 i17 = i17 | 0;
 i12 = i12 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0;
 i23 = 0;
 i40 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i35 = i1 + 116 | 0;
 i24 = i1 + 112 | 0;
 i16 = i1 + 108 | 0;
 i18 = i1 + 104 | 0;
 i33 = i1 + 100 | 0;
 i38 = i1 + 96 | 0;
 i39 = i1 + 92 | 0;
 i27 = i1 + 88 | 0;
 i25 = i1 + 84 | 0;
 i41 = i1 + 80 | 0;
 i19 = i1 + 76 | 0;
 i9 = i1 + 72 | 0;
 i31 = i1 + 68 | 0;
 i37 = i1 + 64 | 0;
 i10 = i1 + 60 | 0;
 i29 = i1 + 56 | 0;
 i32 = i1 + 52 | 0;
 i28 = i1 + 48 | 0;
 i13 = i1 + 44 | 0;
 i8 = i1 + 40 | 0;
 i20 = i1 + 36 | 0;
 i4 = i1 + 32 | 0;
 i14 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i26 = i1 + 16 | 0;
 i30 = i1 + 12 | 0;
 i36 = i1 + 120 | 0;
 i34 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i24 >> 2] = i2;
 HEAP32[i16 >> 2] = i15;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i33 >> 2] = i12;
 HEAP32[i38 >> 2] = i21;
 HEAP32[i39 >> 2] = i22;
 HEAP32[i27 >> 2] = i6;
 HEAP32[i25 >> 2] = i3;
 HEAP32[i41 >> 2] = (HEAP32[i27 >> 2] | 0) == 16 ? 2 : 1;
 HEAP32[i19 >> 2] = HEAP32[HEAP32[i24 >> 2] >> 2];
 i22 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i33 >> 2] | 0) | 0;
 i22 = Math_imul(i22, HEAP32[i41 >> 2] | 0) | 0;
 HEAP32[i37 >> 2] = i22;
 HEAP32[i28 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2];
 i22 = Math_imul(HEAP32[i33 >> 2] | 0, HEAP32[i41 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i22;
 i22 = Math_imul(HEAP32[i28 >> 2] | 0, HEAP32[i41 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i22;
 HEAP32[i20 >> 2] = HEAP32[i38 >> 2];
 if ((HEAP32[i33 >> 2] | 0) != (HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0)) if ((HEAP32[i33 >> 2] | 0) != ((HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0) + 1 | 0)) ___assert_fail(54165, 53449, 4410, 54206);
 i41 = _stbi__malloc_mad3(HEAP32[i38 >> 2] | 0, HEAP32[i39 >> 2] | 0, HEAP32[i13 >> 2] | 0, 0) | 0;
 HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] = i41;
 if (!(HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] | 0)) {
  i41 = _stbi__err(53511) | 0;
  HEAP32[i35 >> 2] = i41;
  i41 = HEAP32[i35 >> 2] | 0;
  STACKTOP = i40;
  return i41 | 0;
 }
 if (!(_stbi__mad3sizes_valid(HEAP32[i28 >> 2] | 0, HEAP32[i38 >> 2] | 0, HEAP32[i27 >> 2] | 0, 7) | 0)) {
  i41 = _stbi__err(53639) | 0;
  HEAP32[i35 >> 2] = i41;
  i41 = HEAP32[i35 >> 2] | 0;
  STACKTOP = i40;
  return i41 | 0;
 }
 i41 = Math_imul(HEAP32[i28 >> 2] | 0, HEAP32[i38 >> 2] | 0) | 0;
 i41 = ((Math_imul(i41, HEAP32[i27 >> 2] | 0) | 0) + 7 | 0) >>> 3;
 HEAP32[i29 >> 2] = i41;
 i41 = Math_imul((HEAP32[i29 >> 2] | 0) + 1 | 0, HEAP32[i39 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = i41;
 if ((HEAP32[i18 >> 2] | 0) >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
  i41 = _stbi__err(54233) | 0;
  HEAP32[i35 >> 2] = i41;
  i41 = HEAP32[i35 >> 2] | 0;
  STACKTOP = i40;
  return i41 | 0;
 }
 HEAP32[i31 >> 2] = 0;
 L17 : while (1) {
  if ((HEAP32[i31 >> 2] | 0) >>> 0 >= (HEAP32[i39 >> 2] | 0) >>> 0) {
   i23 = 113;
   break;
  }
  i41 = (HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[i37 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0) | 0;
  HEAP32[i4 >> 2] = i41;
  i41 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i41 + 1;
  HEAP32[i7 >> 2] = HEAPU8[i41 >> 0];
  if ((HEAP32[i7 >> 2] | 0) > 4) {
   i23 = 13;
   break;
  }
  if ((HEAP32[i27 >> 2] | 0) < 8) {
   if ((HEAP32[i29 >> 2] | 0) >>> 0 > (HEAP32[i38 >> 2] | 0) >>> 0) {
    i23 = 16;
    break;
   }
   i41 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i33 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (i41 - (HEAP32[i29 >> 2] | 0));
   HEAP32[i8 >> 2] = 1;
   HEAP32[i20 >> 2] = HEAP32[i29 >> 2];
  }
  HEAP32[i14 >> 2] = (HEAP32[i4 >> 2] | 0) + (0 - (HEAP32[i37 >> 2] | 0));
  if (!(HEAP32[i31 >> 2] | 0)) HEAP32[i7 >> 2] = HEAPU8[54287 + (HEAP32[i7 >> 2] | 0) >> 0];
  HEAP32[i32 >> 2] = 0;
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
   switch (HEAP32[i7 >> 2] | 0) {
   case 0:
    {
     i41 = HEAP32[i32 >> 2] | 0;
     HEAP8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] = HEAP8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0;
     break;
    }
   case 1:
    {
     i41 = HEAP32[i32 >> 2] | 0;
     HEAP8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] = HEAP8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0;
     break;
    }
   case 2:
    {
     i41 = HEAP32[i32 >> 2] | 0;
     HEAP8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[(HEAP32[i14 >> 2] | 0) + i41 >> 0] | 0);
     break;
    }
   case 3:
    {
     i41 = HEAP32[i32 >> 2] | 0;
     HEAP8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[(HEAP32[i14 >> 2] | 0) + i41 >> 0] >> 1);
     break;
    }
   case 4:
    {
     i41 = HEAP32[i32 >> 2] | 0;
     i41 = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + (_stbi__paeth(0, HEAPU8[(HEAP32[i14 >> 2] | 0) + i41 >> 0] | 0, 0) | 0) & 255;
     HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] = i41;
     break;
    }
   case 5:
    {
     i41 = HEAP32[i32 >> 2] | 0;
     HEAP8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] = HEAP8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0;
     break;
    }
   case 6:
    {
     i41 = HEAP32[i32 >> 2] | 0;
     HEAP8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] = HEAP8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0;
     break;
    }
   default:
    {}
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
  do if ((HEAP32[i27 >> 2] | 0) == 8) {
   if ((HEAP32[i28 >> 2] | 0) != (HEAP32[i33 >> 2] | 0)) HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i28 >> 2] | 0) >> 0] = -1;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i28 >> 2] | 0);
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i33 >> 2] | 0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i33 >> 2] | 0);
  } else {
   if ((HEAP32[i27 >> 2] | 0) != 16) {
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
    break;
   }
   if ((HEAP32[i28 >> 2] | 0) != (HEAP32[i33 >> 2] | 0)) {
    HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = -1;
    HEAP8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) + 1) >> 0] = -1;
   }
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
  } while (0);
  L54 : do if ((HEAP32[i27 >> 2] | 0) < 8) i23 = 42; else if ((HEAP32[i28 >> 2] | 0) == (HEAP32[i33 >> 2] | 0)) i23 = 42; else {
   if (((HEAP32[i28 >> 2] | 0) + 1 | 0) != (HEAP32[i33 >> 2] | 0)) {
    i23 = 64;
    break L17;
   }
   L58 : do switch (HEAP32[i7 >> 2] | 0) {
   case 0:
    {
     HEAP32[i9 >> 2] = (HEAP32[i38 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[i32 >> 2] = 0;
      while (1) {
       if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
       i41 = HEAP32[i32 >> 2] | 0;
       HEAP8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] = HEAP8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0;
       HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
      }
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
      HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = -1;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
     }
    }
   case 1:
    {
     HEAP32[i9 >> 2] = (HEAP32[i38 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[i32 >> 2] = 0;
      while (1) {
       if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
       i41 = HEAP32[i32 >> 2] | 0;
       i22 = HEAP32[i4 >> 2] | 0;
       HEAP8[i22 + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[i22 + (i41 - (HEAP32[i13 >> 2] | 0)) >> 0] | 0);
       HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
      }
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
      HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = -1;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
     }
    }
   case 2:
    {
     HEAP32[i9 >> 2] = (HEAP32[i38 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[i32 >> 2] = 0;
      while (1) {
       if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
       i41 = HEAP32[i32 >> 2] | 0;
       HEAP8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[(HEAP32[i14 >> 2] | 0) + i41 >> 0] | 0);
       HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
      }
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
      HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = -1;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
     }
    }
   case 3:
    {
     HEAP32[i9 >> 2] = (HEAP32[i38 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[i32 >> 2] = 0;
      while (1) {
       if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
       i41 = HEAP32[i32 >> 2] | 0;
       i22 = HEAP32[i4 >> 2] | 0;
       HEAP8[i22 + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + ((HEAPU8[(HEAP32[i14 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[i22 + (i41 - (HEAP32[i13 >> 2] | 0)) >> 0] | 0) >> 1);
       HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
      }
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
      HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = -1;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
     }
    }
   case 4:
    {
     HEAP32[i9 >> 2] = (HEAP32[i38 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[i32 >> 2] = 0;
      while (1) {
       if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
       i19 = HEAPU8[(HEAP32[i16 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] | 0;
       i21 = HEAP32[i32 >> 2] | 0;
       i22 = HEAP32[i14 >> 2] | 0;
       i41 = (HEAP32[i32 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0;
       i41 = i19 + (_stbi__paeth(HEAPU8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] | 0, HEAPU8[i22 + i21 >> 0] | 0, HEAPU8[i22 + i41 >> 0] | 0) | 0) & 255;
       HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] = i41;
       HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
      }
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
      HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = -1;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
     }
    }
   case 5:
    {
     HEAP32[i9 >> 2] = (HEAP32[i38 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[i32 >> 2] = 0;
      while (1) {
       if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
       i41 = HEAP32[i32 >> 2] | 0;
       i22 = HEAP32[i4 >> 2] | 0;
       HEAP8[i22 + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[i22 + (i41 - (HEAP32[i13 >> 2] | 0)) >> 0] >> 1);
       HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
      }
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
      HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = -1;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
     }
    }
   case 6:
    {
     HEAP32[i9 >> 2] = (HEAP32[i38 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[i32 >> 2] = 0;
      while (1) {
       if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
       i41 = HEAPU8[(HEAP32[i16 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] | 0;
       i41 = i41 + (_stbi__paeth(HEAPU8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i32 >> 2] | 0) - (HEAP32[i13 >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255;
       HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] = i41;
       HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
      }
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
      HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = -1;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
     }
    }
   default:
    {}
   } while (0);
   if ((HEAP32[i27 >> 2] | 0) == 16) {
    i41 = (HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[i37 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0) | 0;
    HEAP32[i4 >> 2] = i41;
    HEAP32[i9 >> 2] = 0;
    while (1) {
     if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAP32[i38 >> 2] | 0) >>> 0) break L54;
     HEAP8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) + 1) >> 0] = -1;
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
    }
   }
  } while (0);
  if ((i23 | 0) == 42) {
   i23 = 0;
   i41 = Math_imul((HEAP32[i20 >> 2] | 0) - 1 | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i11 >> 2] = i41;
   L122 : do switch (HEAP32[i7 >> 2] | 0) {
   case 0:
    {
     _memcpy(HEAP32[i4 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
     break;
    }
   case 1:
    {
     HEAP32[i32 >> 2] = 0;
     while (1) {
      if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break L122;
      i41 = HEAP32[i32 >> 2] | 0;
      i22 = HEAP32[i4 >> 2] | 0;
      HEAP8[i22 + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[i22 + (i41 - (HEAP32[i8 >> 2] | 0)) >> 0] | 0);
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
     }
    }
   case 2:
    {
     HEAP32[i32 >> 2] = 0;
     while (1) {
      if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break L122;
      i41 = HEAP32[i32 >> 2] | 0;
      HEAP8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[(HEAP32[i14 >> 2] | 0) + i41 >> 0] | 0);
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
     }
    }
   case 3:
    {
     HEAP32[i32 >> 2] = 0;
     while (1) {
      if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break L122;
      i41 = HEAP32[i32 >> 2] | 0;
      i22 = HEAP32[i4 >> 2] | 0;
      HEAP8[i22 + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + ((HEAPU8[(HEAP32[i14 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[i22 + (i41 - (HEAP32[i8 >> 2] | 0)) >> 0] | 0) >> 1);
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
     }
    }
   case 4:
    {
     HEAP32[i32 >> 2] = 0;
     while (1) {
      if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break L122;
      i19 = HEAPU8[(HEAP32[i16 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] | 0;
      i21 = HEAP32[i32 >> 2] | 0;
      i22 = HEAP32[i14 >> 2] | 0;
      i41 = (HEAP32[i32 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0;
      i41 = i19 + (_stbi__paeth(HEAPU8[(HEAP32[i4 >> 2] | 0) + i41 >> 0] | 0, HEAPU8[i22 + i21 >> 0] | 0, HEAPU8[i22 + i41 >> 0] | 0) | 0) & 255;
      HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] = i41;
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
     }
    }
   case 5:
    {
     HEAP32[i32 >> 2] = 0;
     while (1) {
      if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break L122;
      i41 = HEAP32[i32 >> 2] | 0;
      i22 = HEAP32[i4 >> 2] | 0;
      HEAP8[i22 + i41 >> 0] = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i41 >> 0] | 0) + (HEAPU8[i22 + (i41 - (HEAP32[i8 >> 2] | 0)) >> 0] >> 1);
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
     }
    }
   case 6:
    {
     HEAP32[i32 >> 2] = 0;
     while (1) {
      if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break L122;
      i41 = HEAPU8[(HEAP32[i16 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] | 0;
      i41 = i41 + (_stbi__paeth(HEAPU8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i32 >> 2] | 0) - (HEAP32[i8 >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255;
      HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] = i41;
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
     }
    }
   default:
    {}
   } while (0);
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  }
  HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
 }
 if ((i23 | 0) == 13) {
  i41 = _stbi__err(54251) | 0;
  HEAP32[i35 >> 2] = i41;
  i41 = HEAP32[i35 >> 2] | 0;
  STACKTOP = i40;
  return i41 | 0;
 } else if ((i23 | 0) == 16) ___assert_fail(54266, 53449, 4432, 54206); else if ((i23 | 0) == 64) ___assert_fail(54292, 53449, 4494, 54206); else if ((i23 | 0) == 113) {
  L152 : do if ((HEAP32[i27 >> 2] | 0) < 8) {
   HEAP32[i31 >> 2] = 0;
   L154 : while (1) {
    if ((HEAP32[i31 >> 2] | 0) >>> 0 >= (HEAP32[i39 >> 2] | 0) >>> 0) break L152;
    i41 = (HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[i37 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0) | 0;
    HEAP32[i26 >> 2] = i41;
    i41 = (HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[i37 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0) | 0;
    i41 = i41 + (Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i33 >> 2] | 0) | 0) | 0;
    HEAP32[i30 >> 2] = i41 + (0 - (HEAP32[i29 >> 2] | 0));
    if (!(HEAP32[i25 >> 2] | 0)) i1 = HEAPU8[54015 + (HEAP32[i27 >> 2] | 0) >> 0] | 0; else i1 = 1;
    HEAP8[i36 >> 0] = i1;
    do if ((HEAP32[i27 >> 2] | 0) == 4) {
     i41 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i28 >> 2] | 0) | 0;
     HEAP32[i32 >> 2] = i41;
     while (1) {
      if ((HEAP32[i32 >> 2] | 0) < 2) break;
      i41 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 4) | 0) & 255;
      i23 = HEAP32[i26 >> 2] | 0;
      HEAP32[i26 >> 2] = i23 + 1;
      HEAP8[i23 >> 0] = i41;
      i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] & 15) | 0) & 255;
      i41 = HEAP32[i26 >> 2] | 0;
      HEAP32[i26 >> 2] = i41 + 1;
      HEAP8[i41 >> 0] = i23;
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) - 2;
      HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
     }
     if ((HEAP32[i32 >> 2] | 0) > 0) {
      i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 4) | 0) & 255;
      i41 = HEAP32[i26 >> 2] | 0;
      HEAP32[i26 >> 2] = i41 + 1;
      HEAP8[i41 >> 0] = i23;
     }
    } else {
     if ((HEAP32[i27 >> 2] | 0) == 2) {
      i41 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i28 >> 2] | 0) | 0;
      HEAP32[i32 >> 2] = i41;
      while (1) {
       if ((HEAP32[i32 >> 2] | 0) < 4) break;
       i41 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 6) | 0) & 255;
       i23 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i23 + 1;
       HEAP8[i23 >> 0] = i41;
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 4 & 3) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
       i41 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 2 & 3) | 0) & 255;
       i23 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i23 + 1;
       HEAP8[i23 >> 0] = i41;
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] & 3) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
       HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) - 4;
       HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
      }
      if ((HEAP32[i32 >> 2] | 0) > 0) {
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 6) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
      }
      if ((HEAP32[i32 >> 2] | 0) > 1) {
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 4 & 3) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
      }
      if ((HEAP32[i32 >> 2] | 0) <= 2) break;
      i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 2 & 3) | 0) & 255;
      i41 = HEAP32[i26 >> 2] | 0;
      HEAP32[i26 >> 2] = i41 + 1;
      HEAP8[i41 >> 0] = i23;
      break;
     }
     if ((HEAP32[i27 >> 2] | 0) == 1) {
      i41 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i28 >> 2] | 0) | 0;
      HEAP32[i32 >> 2] = i41;
      while (1) {
       if ((HEAP32[i32 >> 2] | 0) < 8) break;
       i41 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 7) | 0) & 255;
       i23 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i23 + 1;
       HEAP8[i23 >> 0] = i41;
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 6 & 1) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
       i41 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 5 & 1) | 0) & 255;
       i23 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i23 + 1;
       HEAP8[i23 >> 0] = i41;
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 4 & 1) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
       i41 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 3 & 1) | 0) & 255;
       i23 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i23 + 1;
       HEAP8[i23 >> 0] = i41;
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 2 & 1) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
       i41 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 1 & 1) | 0) & 255;
       i23 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i23 + 1;
       HEAP8[i23 >> 0] = i41;
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] & 1) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
       HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) - 8;
       HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
      }
      if ((HEAP32[i32 >> 2] | 0) > 0) {
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 7) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
      }
      if ((HEAP32[i32 >> 2] | 0) > 1) {
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 6 & 1) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
      }
      if ((HEAP32[i32 >> 2] | 0) > 2) {
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 5 & 1) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
      }
      if ((HEAP32[i32 >> 2] | 0) > 3) {
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 4 & 1) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
      }
      if ((HEAP32[i32 >> 2] | 0) > 4) {
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 3 & 1) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
      }
      if ((HEAP32[i32 >> 2] | 0) > 5) {
       i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 2 & 1) | 0) & 255;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP32[i26 >> 2] = i41 + 1;
       HEAP8[i41 >> 0] = i23;
      }
      if ((HEAP32[i32 >> 2] | 0) <= 6) break;
      i23 = (Math_imul(HEAPU8[i36 >> 0] | 0, HEAPU8[HEAP32[i30 >> 2] >> 0] >> 1 & 1) | 0) & 255;
      i41 = HEAP32[i26 >> 2] | 0;
      HEAP32[i26 >> 2] = i41 + 1;
      HEAP8[i41 >> 0] = i23;
     }
    } while (0);
    L207 : do if ((HEAP32[i28 >> 2] | 0) != (HEAP32[i33 >> 2] | 0)) {
     i41 = (HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[i37 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0) | 0;
     HEAP32[i26 >> 2] = i41;
     if ((HEAP32[i28 >> 2] | 0) == 1) {
      HEAP32[i34 >> 2] = (HEAP32[i38 >> 2] | 0) - 1;
      while (1) {
       if ((HEAP32[i34 >> 2] | 0) < 0) break L207;
       HEAP8[(HEAP32[i26 >> 2] | 0) + ((HEAP32[i34 >> 2] << 1) + 1) >> 0] = -1;
       i41 = HEAP32[i26 >> 2] | 0;
       HEAP8[i41 + ((HEAP32[i34 >> 2] << 1) + 0) >> 0] = HEAP8[i41 + (HEAP32[i34 >> 2] | 0) >> 0] | 0;
       HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + -1;
      }
     }
     if ((HEAP32[i28 >> 2] | 0) != 3) break L154;
     HEAP32[i34 >> 2] = (HEAP32[i38 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[i34 >> 2] | 0) < 0) break L207;
      HEAP8[(HEAP32[i26 >> 2] | 0) + ((HEAP32[i34 >> 2] << 2) + 3) >> 0] = -1;
      i41 = HEAP32[i26 >> 2] | 0;
      HEAP8[i41 + ((HEAP32[i34 >> 2] << 2) + 2) >> 0] = HEAP8[i41 + (((HEAP32[i34 >> 2] | 0) * 3 | 0) + 2) >> 0] | 0;
      i41 = HEAP32[i26 >> 2] | 0;
      HEAP8[i41 + ((HEAP32[i34 >> 2] << 2) + 1) >> 0] = HEAP8[i41 + (((HEAP32[i34 >> 2] | 0) * 3 | 0) + 1) >> 0] | 0;
      i41 = HEAP32[i26 >> 2] | 0;
      HEAP8[i41 + ((HEAP32[i34 >> 2] << 2) + 0) >> 0] = HEAP8[i41 + (((HEAP32[i34 >> 2] | 0) * 3 | 0) + 0) >> 0] | 0;
      HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + -1;
     }
    } while (0);
    HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
   }
   ___assert_fail(54309, 53449, 4583, 54206);
  } else if ((HEAP32[i27 >> 2] | 0) == 16) {
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i9 >> 2] = 0;
   while (1) {
    i41 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i39 >> 2] | 0) | 0;
    if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (Math_imul(i41, HEAP32[i33 >> 2] | 0) | 0) >>> 0) break L152;
    HEAP16[HEAP32[i1 >> 2] >> 1] = HEAPU8[HEAP32[i5 >> 2] >> 0] << 8 | HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0];
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 2;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 2;
   }
  } while (0);
  HEAP32[i35 >> 2] = 1;
  i41 = HEAP32[i35 >> 2] | 0;
  STACKTOP = i40;
  return i41 | 0;
 }
 return 0;
}

function _stbtt__run_charstring(i8, i7, i5) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, f2 = f0, f3 = f0, f4 = f0, f6 = f0, f9 = f0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i47 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(528);
 i12 = i1 + 508 | 0;
 i38 = i1 + 504 | 0;
 i36 = i1 + 500 | 0;
 i32 = i1 + 496 | 0;
 i15 = i1 + 492 | 0;
 i35 = i1 + 488 | 0;
 i37 = i1 + 484 | 0;
 i42 = i1 + 480 | 0;
 i40 = i1 + 476 | 0;
 i46 = i1 + 472 | 0;
 i34 = i1 + 468 | 0;
 i14 = i1 + 464 | 0;
 i33 = i1 + 460 | 0;
 i16 = i1 + 456 | 0;
 i39 = i1 + 128 | 0;
 i41 = i1;
 i43 = i1 + 444 | 0;
 i13 = i1 + 432 | 0;
 i31 = i1 + 428 | 0;
 i48 = i1 + 416 | 0;
 i44 = i1 + 404 | 0;
 i11 = i1 + 392 | 0;
 i45 = i1 + 380 | 0;
 i18 = i1 + 376 | 0;
 i19 = i1 + 372 | 0;
 i20 = i1 + 368 | 0;
 i21 = i1 + 364 | 0;
 i22 = i1 + 360 | 0;
 i23 = i1 + 356 | 0;
 i25 = i1 + 352 | 0;
 i26 = i1 + 348 | 0;
 i27 = i1 + 344 | 0;
 i28 = i1 + 340 | 0;
 i29 = i1 + 336 | 0;
 i30 = i1 + 332 | 0;
 i17 = i1 + 328 | 0;
 i24 = i1 + 324 | 0;
 i10 = i1 + 320 | 0;
 HEAP32[i36 >> 2] = i8;
 HEAP32[i32 >> 2] = i7;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i35 >> 2] = 1;
 HEAP32[i37 >> 2] = 0;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i40 >> 2] = 0;
 HEAP32[i33 >> 2] = 0;
 i7 = (HEAP32[i36 >> 2] | 0) + 88 | 0;
 HEAP32[i43 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i43 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i43 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 i7 = (HEAP32[i36 >> 2] | 0) + 64 | 0;
 i8 = HEAP32[i32 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 _stbtt__cff_index_get(i48, i12, i8);
 HEAP32[i13 >> 2] = HEAP32[i48 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i48 + 8 >> 2];
 L1 : while (1) {
  if ((HEAP32[i13 + 4 >> 2] | 0) >= (HEAP32[i13 + 8 >> 2] | 0)) {
   i1 = 122;
   break;
  }
  HEAP32[i34 >> 2] = 0;
  HEAP32[i16 >> 2] = 1;
  i48 = (_stbtt__buf_get8(i13) | 0) & 255;
  HEAP32[i14 >> 2] = i48;
  L4 : do switch (HEAP32[i14 >> 2] | 0) {
  case 14:
   {
    i1 = 92;
    break L1;
   }
  case 20:
  case 19:
   {
    if (HEAP32[i35 >> 2] | 0) HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + ((HEAP32[i40 >> 2] | 0) / 2 | 0);
    HEAP32[i35 >> 2] = 0;
    _stbtt__buf_skip(i13, ((HEAP32[i37 >> 2] | 0) + 7 | 0) / 8 | 0);
    i1 = 119;
    break;
   }
  case 23:
  case 18:
  case 3:
  case 1:
   {
    HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + ((HEAP32[i40 >> 2] | 0) / 2 | 0);
    i1 = 119;
    break;
   }
  case 21:
   {
    HEAP32[i35 >> 2] = 0;
    if ((HEAP32[i40 >> 2] | 0) < 2) {
     i1 = 9;
     break L1;
    }
    f9 = Math_fround(HEAPF32[i39 + ((HEAP32[i40 >> 2] | 0) - 2 << 2) >> 2]);
    _stbtt__csctx_rmove_to(HEAP32[i15 >> 2] | 0, f9, Math_fround(HEAPF32[i39 + ((HEAP32[i40 >> 2] | 0) - 1 << 2) >> 2]));
    i1 = 119;
    break;
   }
  case 4:
   {
    HEAP32[i35 >> 2] = 0;
    if ((HEAP32[i40 >> 2] | 0) < 1) {
     i1 = 12;
     break L1;
    }
    _stbtt__csctx_rmove_to(HEAP32[i15 >> 2] | 0, Math_fround(0.0), Math_fround(HEAPF32[i39 + ((HEAP32[i40 >> 2] | 0) - 1 << 2) >> 2]));
    i1 = 119;
    break;
   }
  case 22:
   {
    HEAP32[i35 >> 2] = 0;
    if ((HEAP32[i40 >> 2] | 0) < 1) {
     i1 = 15;
     break L1;
    }
    _stbtt__csctx_rmove_to(HEAP32[i15 >> 2] | 0, Math_fround(HEAPF32[i39 + ((HEAP32[i40 >> 2] | 0) - 1 << 2) >> 2]), Math_fround(0.0));
    i1 = 119;
    break;
   }
  case 5:
   {
    if ((HEAP32[i40 >> 2] | 0) < 2) {
     i1 = 18;
     break L1;
    }
    while (1) {
     if (((HEAP32[i34 >> 2] | 0) + 1 | 0) >= (HEAP32[i40 >> 2] | 0)) {
      i1 = 119;
      break L4;
     }
     f9 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
     _stbtt__csctx_rline_to(HEAP32[i15 >> 2] | 0, f9, Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]));
     HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 2;
    }
   }
  case 7:
   {
    if ((HEAP32[i40 >> 2] | 0) < 1) {
     i1 = 23;
     break L1;
    }
    i1 = 29;
    break;
   }
  case 6:
   {
    if ((HEAP32[i40 >> 2] | 0) < 1) {
     i1 = 26;
     break L1;
    } else i1 = 27;
    break;
   }
  case 31:
   {
    if ((HEAP32[i40 >> 2] | 0) < 4) {
     i1 = 32;
     break L1;
    }
    i1 = 40;
    break;
   }
  case 30:
   {
    if ((HEAP32[i40 >> 2] | 0) < 4) {
     i1 = 35;
     break L1;
    } else i1 = 36;
    break;
   }
  case 8:
   {
    if ((HEAP32[i40 >> 2] | 0) < 6) {
     i1 = 45;
     break L1;
    }
    while (1) {
     if (((HEAP32[i34 >> 2] | 0) + 5 | 0) >= (HEAP32[i40 >> 2] | 0)) {
      i1 = 119;
      break L4;
     }
     f2 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
     f3 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]);
     f4 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 2 << 2) >> 2]);
     f6 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 3 << 2) >> 2]);
     f9 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 4 << 2) >> 2]);
     _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f2, f3, f4, f6, f9, Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 5 << 2) >> 2]));
     HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 6;
    }
   }
  case 24:
   {
    if ((HEAP32[i40 >> 2] | 0) < 8) {
     i1 = 50;
     break L1;
    }
    while (1) {
     if (((HEAP32[i34 >> 2] | 0) + 5 | 0) >= ((HEAP32[i40 >> 2] | 0) - 2 | 0)) break;
     f2 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
     f3 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]);
     f4 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 2 << 2) >> 2]);
     f6 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 3 << 2) >> 2]);
     f9 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 4 << 2) >> 2]);
     _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f2, f3, f4, f6, f9, Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 5 << 2) >> 2]));
     HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 6;
    }
    if (((HEAP32[i34 >> 2] | 0) + 1 | 0) >= (HEAP32[i40 >> 2] | 0)) {
     i1 = 55;
     break L1;
    }
    f9 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
    _stbtt__csctx_rline_to(HEAP32[i15 >> 2] | 0, f9, Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]));
    i1 = 119;
    break;
   }
  case 25:
   {
    if ((HEAP32[i40 >> 2] | 0) < 8) {
     i1 = 58;
     break L1;
    }
    while (1) {
     if (((HEAP32[i34 >> 2] | 0) + 1 | 0) >= ((HEAP32[i40 >> 2] | 0) - 6 | 0)) break;
     f9 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
     _stbtt__csctx_rline_to(HEAP32[i15 >> 2] | 0, f9, Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]));
     HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 2;
    }
    if (((HEAP32[i34 >> 2] | 0) + 5 | 0) >= (HEAP32[i40 >> 2] | 0)) {
     i1 = 63;
     break L1;
    }
    f2 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
    f3 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]);
    f4 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 2 << 2) >> 2]);
    f6 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 3 << 2) >> 2]);
    f9 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 4 << 2) >> 2]);
    _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f2, f3, f4, f6, f9, Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 5 << 2) >> 2]));
    i1 = 119;
    break;
   }
  case 27:
  case 26:
   {
    if ((HEAP32[i40 >> 2] | 0) < 4) {
     i1 = 66;
     break L1;
    }
    HEAPF32[i31 >> 2] = Math_fround(0.0);
    if (HEAP32[i40 >> 2] & 1 | 0) {
     f9 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
     HEAPF32[i31 >> 2] = f9;
     HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
    }
    while (1) {
     if (((HEAP32[i34 >> 2] | 0) + 3 | 0) >= (HEAP32[i40 >> 2] | 0)) {
      i1 = 119;
      break L4;
     }
     i1 = HEAP32[i15 >> 2] | 0;
     if ((HEAP32[i14 >> 2] | 0) == 27) {
      f3 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
      f4 = Math_fround(HEAPF32[i31 >> 2]);
      f6 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]);
      f9 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 2 << 2) >> 2]);
      _stbtt__csctx_rccurve_to(i1, f3, f4, f6, f9, Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 3 << 2) >> 2]), Math_fround(0.0));
     } else {
      f3 = Math_fround(HEAPF32[i31 >> 2]);
      f4 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
      f6 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]);
      f9 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 2 << 2) >> 2]);
      _stbtt__csctx_rccurve_to(i1, f3, f4, f6, f9, Math_fround(0.0), Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 3 << 2) >> 2]));
     }
     HEAPF32[i31 >> 2] = Math_fround(0.0);
     HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 4;
    }
   }
  case 10:
   {
    if (HEAP32[i33 >> 2] | 0) i1 = 79; else {
     if (HEAP32[(HEAP32[i36 >> 2] | 0) + 112 + 8 >> 2] | 0) {
      _stbtt__cid_get_glyph_subrs(i44, HEAP32[i36 >> 2] | 0, HEAP32[i32 >> 2] | 0);
      HEAP32[i43 >> 2] = HEAP32[i44 >> 2];
      HEAP32[i43 + 4 >> 2] = HEAP32[i44 + 4 >> 2];
      HEAP32[i43 + 8 >> 2] = HEAP32[i44 + 8 >> 2];
     }
     HEAP32[i33 >> 2] = 1;
     i1 = 79;
    }
    break;
   }
  case 29:
   {
    i1 = 79;
    break;
   }
  case 11:
   {
    if ((HEAP32[i42 >> 2] | 0) <= 0) {
     i1 = 90;
     break L1;
    }
    i1 = (HEAP32[i42 >> 2] | 0) + -1 | 0;
    HEAP32[i42 >> 2] = i1;
    i1 = i41 + (i1 * 12 | 0) | 0;
    HEAP32[i13 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
    HEAP32[i16 >> 2] = 0;
    i1 = 119;
    break;
   }
  case 12:
   {
    i48 = (_stbtt__buf_get8(i13) | 0) & 255;
    HEAP32[i10 >> 2] = i48;
    switch (HEAP32[i10 >> 2] | 0) {
    case 34:
     {
      if ((HEAP32[i40 >> 2] | 0) < 7) {
       i1 = 95;
       break L1;
      }
      f9 = Math_fround(HEAPF32[i39 >> 2]);
      HEAPF32[i18 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 4 >> 2]);
      HEAPF32[i19 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 8 >> 2]);
      HEAPF32[i26 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 12 >> 2]);
      HEAPF32[i20 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 16 >> 2]);
      HEAPF32[i21 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 20 >> 2]);
      HEAPF32[i22 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 24 >> 2]);
      HEAPF32[i23 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i18 >> 2]);
      f6 = Math_fround(HEAPF32[i19 >> 2]);
      f4 = Math_fround(HEAPF32[i26 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f9, Math_fround(0.0), f6, f4, Math_fround(HEAPF32[i20 >> 2]), Math_fround(0.0));
      f4 = Math_fround(HEAPF32[i21 >> 2]);
      f6 = Math_fround(HEAPF32[i22 >> 2]);
      f9 = Math_fround(-Math_fround(HEAPF32[i26 >> 2]));
      _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f4, Math_fround(0.0), f6, f9, Math_fround(HEAPF32[i23 >> 2]), Math_fround(0.0));
      i1 = 119;
      break L4;
     }
    case 35:
     {
      if ((HEAP32[i40 >> 2] | 0) < 13) {
       i1 = 98;
       break L1;
      }
      f9 = Math_fround(HEAPF32[i39 >> 2]);
      HEAPF32[i18 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 4 >> 2]);
      HEAPF32[i25 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 8 >> 2]);
      HEAPF32[i19 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 12 >> 2]);
      HEAPF32[i26 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 16 >> 2]);
      HEAPF32[i20 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 20 >> 2]);
      HEAPF32[i27 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 24 >> 2]);
      HEAPF32[i21 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 28 >> 2]);
      HEAPF32[i28 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 32 >> 2]);
      HEAPF32[i22 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 36 >> 2]);
      HEAPF32[i29 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 40 >> 2]);
      HEAPF32[i23 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 44 >> 2]);
      HEAPF32[i30 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i18 >> 2]);
      f6 = Math_fround(HEAPF32[i25 >> 2]);
      f4 = Math_fround(HEAPF32[i19 >> 2]);
      f3 = Math_fround(HEAPF32[i26 >> 2]);
      f2 = Math_fround(HEAPF32[i20 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f9, f6, f4, f3, f2, Math_fround(HEAPF32[i27 >> 2]));
      f2 = Math_fround(HEAPF32[i21 >> 2]);
      f3 = Math_fround(HEAPF32[i28 >> 2]);
      f4 = Math_fround(HEAPF32[i22 >> 2]);
      f6 = Math_fround(HEAPF32[i29 >> 2]);
      f9 = Math_fround(HEAPF32[i23 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f2, f3, f4, f6, f9, Math_fround(HEAPF32[i30 >> 2]));
      i1 = 119;
      break L4;
     }
    case 36:
     {
      if ((HEAP32[i40 >> 2] | 0) < 9) {
       i1 = 101;
       break L1;
      }
      f6 = Math_fround(HEAPF32[i39 >> 2]);
      HEAPF32[i18 >> 2] = f6;
      f6 = Math_fround(HEAPF32[i39 + 4 >> 2]);
      HEAPF32[i25 >> 2] = f6;
      f6 = Math_fround(HEAPF32[i39 + 8 >> 2]);
      HEAPF32[i19 >> 2] = f6;
      f6 = Math_fround(HEAPF32[i39 + 12 >> 2]);
      HEAPF32[i26 >> 2] = f6;
      f6 = Math_fround(HEAPF32[i39 + 16 >> 2]);
      HEAPF32[i20 >> 2] = f6;
      f6 = Math_fround(HEAPF32[i39 + 20 >> 2]);
      HEAPF32[i21 >> 2] = f6;
      f6 = Math_fround(HEAPF32[i39 + 24 >> 2]);
      HEAPF32[i22 >> 2] = f6;
      f6 = Math_fround(HEAPF32[i39 + 28 >> 2]);
      HEAPF32[i29 >> 2] = f6;
      f6 = Math_fround(HEAPF32[i39 + 32 >> 2]);
      HEAPF32[i23 >> 2] = f6;
      f6 = Math_fround(HEAPF32[i18 >> 2]);
      f4 = Math_fround(HEAPF32[i25 >> 2]);
      f3 = Math_fround(HEAPF32[i19 >> 2]);
      f2 = Math_fround(HEAPF32[i26 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f6, f4, f3, f2, Math_fround(HEAPF32[i20 >> 2]), Math_fround(0.0));
      f2 = Math_fround(HEAPF32[i21 >> 2]);
      f3 = Math_fround(HEAPF32[i22 >> 2]);
      f4 = Math_fround(HEAPF32[i29 >> 2]);
      f6 = Math_fround(HEAPF32[i23 >> 2]);
      f9 = Math_fround(Math_fround(HEAPF32[i25 >> 2]) + Math_fround(HEAPF32[i26 >> 2]));
      _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f2, Math_fround(0.0), f3, f4, f6, Math_fround(-Math_fround(f9 + Math_fround(HEAPF32[i29 >> 2]))));
      i1 = 119;
      break L4;
     }
    case 37:
     {
      if ((HEAP32[i40 >> 2] | 0) < 11) {
       i1 = 104;
       break L1;
      }
      f9 = Math_fround(HEAPF32[i39 >> 2]);
      HEAPF32[i18 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 4 >> 2]);
      HEAPF32[i25 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 8 >> 2]);
      HEAPF32[i19 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 12 >> 2]);
      HEAPF32[i26 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 16 >> 2]);
      HEAPF32[i20 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 20 >> 2]);
      HEAPF32[i27 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 24 >> 2]);
      HEAPF32[i21 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 28 >> 2]);
      HEAPF32[i28 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 32 >> 2]);
      HEAPF32[i22 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 36 >> 2]);
      HEAPF32[i29 >> 2] = f9;
      f9 = Math_fround(HEAPF32[i39 + 40 >> 2]);
      HEAPF32[i30 >> 2] = f9;
      HEAPF32[i23 >> 2] = f9;
      f9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[i18 >> 2]) + Math_fround(HEAPF32[i19 >> 2])) + Math_fround(HEAPF32[i20 >> 2])) + Math_fround(HEAPF32[i21 >> 2])) + Math_fround(HEAPF32[i22 >> 2]));
      HEAPF32[i17 >> 2] = f9;
      f9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[i25 >> 2]) + Math_fround(HEAPF32[i26 >> 2])) + Math_fround(HEAPF32[i27 >> 2])) + Math_fround(HEAPF32[i28 >> 2])) + Math_fround(HEAPF32[i29 >> 2]));
      HEAPF32[i24 >> 2] = f9;
      if (+Math_abs(+(+Math_fround(HEAPF32[i17 >> 2]))) > +Math_abs(+(+Math_fround(HEAPF32[i24 >> 2])))) {
       f9 = Math_fround(-Math_fround(HEAPF32[i24 >> 2]));
       HEAPF32[i30 >> 2] = f9;
      } else {
       f9 = Math_fround(-Math_fround(HEAPF32[i17 >> 2]));
       HEAPF32[i23 >> 2] = f9;
      }
      f9 = Math_fround(HEAPF32[i18 >> 2]);
      f6 = Math_fround(HEAPF32[i25 >> 2]);
      f4 = Math_fround(HEAPF32[i19 >> 2]);
      f3 = Math_fround(HEAPF32[i26 >> 2]);
      f2 = Math_fround(HEAPF32[i20 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f9, f6, f4, f3, f2, Math_fround(HEAPF32[i27 >> 2]));
      f2 = Math_fround(HEAPF32[i21 >> 2]);
      f3 = Math_fround(HEAPF32[i28 >> 2]);
      f4 = Math_fround(HEAPF32[i22 >> 2]);
      f6 = Math_fround(HEAPF32[i29 >> 2]);
      f9 = Math_fround(HEAPF32[i23 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f2, f3, f4, f6, f9, Math_fround(HEAPF32[i30 >> 2]));
      i1 = 119;
      break L4;
     }
    default:
     {
      i1 = 109;
      break L1;
     }
    }
   }
  default:
   {
    if ((HEAP32[i14 >> 2] | 0) != 255 & (HEAP32[i14 >> 2] | 0) != 28) if ((HEAP32[i14 >> 2] | 0) < 32 | (HEAP32[i14 >> 2] | 0) > 254) {
     i1 = 112;
     break L1;
    }
    if ((HEAP32[i14 >> 2] | 0) == 255) {
     f9 = Math_fround(Math_fround(_stbtt__buf_get(i13, 4) | 0) / Math_fround(65536.0));
     HEAPF32[i31 >> 2] = f9;
    } else {
     _stbtt__buf_skip(i13, -1);
     f9 = Math_fround(((_stbtt__cff_int(i13) | 0) & 65535) << 16 >> 16);
     HEAPF32[i31 >> 2] = f9;
    }
    if ((HEAP32[i40 >> 2] | 0) >= 48) {
     i1 = 117;
     break L1;
    }
    f9 = Math_fround(HEAPF32[i31 >> 2]);
    i1 = HEAP32[i40 >> 2] | 0;
    HEAP32[i40 >> 2] = i1 + 1;
    HEAPF32[i39 + (i1 << 2) >> 2] = f9;
    HEAP32[i16 >> 2] = 0;
    i1 = 119;
   }
  } while (0);
  if ((i1 | 0) == 79) {
   if ((HEAP32[i40 >> 2] | 0) < 1) {
    i1 = 80;
    break;
   }
   i48 = (HEAP32[i40 >> 2] | 0) + -1 | 0;
   HEAP32[i40 >> 2] = i48;
   i48 = ~~Math_fround(HEAPF32[i39 + (i48 << 2) >> 2]);
   HEAP32[i46 >> 2] = i48;
   if ((HEAP32[i42 >> 2] | 0) >= 10) {
    i1 = 82;
    break;
   }
   i48 = HEAP32[i42 >> 2] | 0;
   HEAP32[i42 >> 2] = i48 + 1;
   i48 = i41 + (i48 * 12 | 0) | 0;
   HEAP32[i48 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i48 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i48 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   if ((HEAP32[i14 >> 2] | 0) == 10) {
    HEAP32[i11 >> 2] = HEAP32[i43 >> 2];
    HEAP32[i11 + 4 >> 2] = HEAP32[i43 + 4 >> 2];
    HEAP32[i11 + 8 >> 2] = HEAP32[i43 + 8 >> 2];
   } else {
    i48 = (HEAP32[i36 >> 2] | 0) + 76 | 0;
    HEAP32[i11 >> 2] = HEAP32[i48 >> 2];
    HEAP32[i11 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
    HEAP32[i11 + 8 >> 2] = HEAP32[i48 + 8 >> 2];
   }
   i48 = HEAP32[i46 >> 2] | 0;
   HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i12 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i12 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   _stbtt__get_subr(i45, i12, i48);
   HEAP32[i13 >> 2] = HEAP32[i45 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
   if (!(HEAP32[i13 + 8 >> 2] | 0)) {
    i1 = 87;
    break;
   }
   HEAP32[i13 + 4 >> 2] = 0;
   HEAP32[i16 >> 2] = 0;
   i1 = 119;
  }
  while (1) if ((i1 | 0) == 27) {
   if ((HEAP32[i34 >> 2] | 0) >= (HEAP32[i40 >> 2] | 0)) {
    i1 = 119;
    continue;
   }
   _stbtt__csctx_rline_to(HEAP32[i15 >> 2] | 0, Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]), Math_fround(0.0));
   HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
   i1 = 29;
   continue;
  } else if ((i1 | 0) == 29) {
   if ((HEAP32[i34 >> 2] | 0) >= (HEAP32[i40 >> 2] | 0)) {
    i1 = 119;
    continue;
   }
   _stbtt__csctx_rline_to(HEAP32[i15 >> 2] | 0, Math_fround(0.0), Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]));
   HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
   i1 = 27;
   continue;
  } else if ((i1 | 0) == 36) {
   if (((HEAP32[i34 >> 2] | 0) + 3 | 0) >= (HEAP32[i40 >> 2] | 0)) {
    i1 = 119;
    continue;
   }
   f2 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
   f3 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]);
   f4 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 2 << 2) >> 2]);
   f6 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 3 << 2) >> 2]);
   if (((HEAP32[i40 >> 2] | 0) - (HEAP32[i34 >> 2] | 0) | 0) == 5) f9 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 4 << 2) >> 2]); else f9 = Math_fround(0.0);
   _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, Math_fround(0.0), f2, f3, f4, f6, f9);
   HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 4;
   i1 = 40;
   continue;
  } else if ((i1 | 0) == 40) {
   if (((HEAP32[i34 >> 2] | 0) + 3 | 0) >= (HEAP32[i40 >> 2] | 0)) {
    i1 = 119;
    continue;
   }
   f2 = Math_fround(HEAPF32[i39 + (HEAP32[i34 >> 2] << 2) >> 2]);
   f3 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 1 << 2) >> 2]);
   f4 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 2 << 2) >> 2]);
   if (((HEAP32[i40 >> 2] | 0) - (HEAP32[i34 >> 2] | 0) | 0) == 5) f6 = Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 4 << 2) >> 2]); else f6 = Math_fround(0.0);
   _stbtt__csctx_rccurve_to(HEAP32[i15 >> 2] | 0, f2, Math_fround(0.0), f3, f4, f6, Math_fround(HEAPF32[i39 + ((HEAP32[i34 >> 2] | 0) + 3 << 2) >> 2]));
   HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 4;
   i1 = 36;
   continue;
  } else if ((i1 | 0) == 119) {
   i1 = 0;
   if (HEAP32[i16 >> 2] | 0) {
    i1 = 120;
    break;
   } else break;
  }
  if ((i1 | 0) == 120) HEAP32[i40 >> 2] = 0;
 }
 switch (i1 | 0) {
 case 9:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 12:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 15:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 18:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 23:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 26:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 32:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 35:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 45:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 50:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 55:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 58:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 63:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 66:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 80:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 82:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 87:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 90:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 92:
  {
   _stbtt__csctx_close_shape(HEAP32[i15 >> 2] | 0);
   HEAP32[i38 >> 2] = 1;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 95:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 98:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 101:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 104:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 109:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 112:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 117:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 case 122:
  {
   HEAP32[i38 >> 2] = 0;
   i48 = HEAP32[i38 >> 2] | 0;
   STACKTOP = i47;
   return i48 | 0;
  }
 }
 return 0;
}

function _stbv_inverse_mdct(i3, i5, i4, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, f67 = f0, f68 = f0;
 i66 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i36 = i1 + 236 | 0;
 i55 = i1 + 232 | 0;
 i46 = i1 + 228 | 0;
 i34 = i1 + 224 | 0;
 i56 = i1 + 220 | 0;
 i57 = i1 + 216 | 0;
 i19 = i1 + 212 | 0;
 i52 = i1 + 208 | 0;
 i53 = i1 + 204 | 0;
 i63 = i1 + 200 | 0;
 i35 = i1 + 196 | 0;
 i64 = i1 + 192 | 0;
 i65 = i1 + 188 | 0;
 i23 = i1 + 184 | 0;
 i8 = i1 + 180 | 0;
 i11 = i1 + 176 | 0;
 i6 = i1 + 172 | 0;
 i14 = i1 + 168 | 0;
 i7 = i1 + 164 | 0;
 i9 = i1 + 160 | 0;
 i10 = i1 + 156 | 0;
 i12 = i1 + 152 | 0;
 i13 = i1 + 148 | 0;
 i21 = i1 + 144 | 0;
 i22 = i1 + 140 | 0;
 i16 = i1 + 136 | 0;
 i17 = i1 + 132 | 0;
 i18 = i1 + 128 | 0;
 i15 = i1 + 124 | 0;
 i48 = i1 + 120 | 0;
 i50 = i1 + 116 | 0;
 i49 = i1 + 112 | 0;
 i62 = i1 + 108 | 0;
 i61 = i1 + 104 | 0;
 i54 = i1 + 100 | 0;
 i47 = i1 + 96 | 0;
 i24 = i1 + 92 | 0;
 i33 = i1 + 88 | 0;
 i37 = i1 + 84 | 0;
 i39 = i1 + 80 | 0;
 i51 = i1 + 76 | 0;
 i26 = i1 + 72 | 0;
 i42 = i1 + 68 | 0;
 i44 = i1 + 64 | 0;
 i27 = i1 + 60 | 0;
 i28 = i1 + 56 | 0;
 i29 = i1 + 52 | 0;
 i30 = i1 + 48 | 0;
 i31 = i1 + 44 | 0;
 i32 = i1 + 40 | 0;
 i38 = i1 + 36 | 0;
 i40 = i1 + 32 | 0;
 i41 = i1 + 28 | 0;
 i43 = i1 + 24 | 0;
 i25 = i1 + 20 | 0;
 i45 = i1 + 16 | 0;
 i58 = i1 + 12 | 0;
 i59 = i1 + 8 | 0;
 i60 = i1 + 4 | 0;
 i20 = i1;
 HEAP32[i36 >> 2] = i3;
 HEAP32[i55 >> 2] = i5;
 HEAP32[i46 >> 2] = i4;
 HEAP32[i34 >> 2] = i2;
 HEAP32[i56 >> 2] = HEAP32[i55 >> 2] >> 1;
 HEAP32[i57 >> 2] = HEAP32[i55 >> 2] >> 2;
 HEAP32[i19 >> 2] = HEAP32[i55 >> 2] >> 3;
 HEAP32[i63 >> 2] = HEAP32[(HEAP32[i46 >> 2] | 0) + 92 >> 2];
 if (HEAP32[(HEAP32[i46 >> 2] | 0) + 80 >> 2] | 0) i1 = _stbv_setup_temp_malloc(HEAP32[i46 >> 2] | 0, HEAP32[i56 >> 2] << 2) | 0; else {
  i2 = HEAP32[i56 >> 2] << 2;
  i1 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * i2 | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i2 | 0) + 15 & -16 | 0);
 }
 HEAP32[i35 >> 2] = i1;
 HEAP32[i64 >> 2] = 0;
 HEAP32[i65 >> 2] = 0;
 HEAP32[i23 >> 2] = HEAP32[(HEAP32[i46 >> 2] | 0) + 1068 + (HEAP32[i34 >> 2] << 2) >> 2];
 HEAP32[i8 >> 2] = (HEAP32[i35 >> 2] | 0) + ((HEAP32[i56 >> 2] | 0) - 2 << 2);
 HEAP32[i6 >> 2] = HEAP32[i23 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i36 >> 2];
 HEAP32[i14 >> 2] = (HEAP32[i36 >> 2] | 0) + (HEAP32[i56 >> 2] << 2);
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) break;
  f67 = Math_fround(HEAPF32[HEAP32[i11 >> 2] >> 2]);
  f67 = Math_fround(f67 * Math_fround(HEAPF32[HEAP32[i6 >> 2] >> 2]));
  f68 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + 8 >> 2]);
  f68 = Math_fround(f67 - Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = f68;
  f68 = Math_fround(HEAPF32[HEAP32[i11 >> 2] >> 2]);
  f68 = Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 4 >> 2]));
  f67 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + 8 >> 2]);
  f67 = Math_fround(f68 + Math_fround(f67 * Math_fround(HEAPF32[HEAP32[i6 >> 2] >> 2])));
  HEAPF32[HEAP32[i8 >> 2] >> 2] = f67;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -8;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 8;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 16;
 }
 HEAP32[i11 >> 2] = (HEAP32[i36 >> 2] | 0) + ((HEAP32[i56 >> 2] | 0) - 3 << 2);
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >>> 0 < (HEAP32[i35 >> 2] | 0) >>> 0) break;
  f68 = Math_fround(-Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + 8 >> 2]));
  f68 = Math_fround(f68 * Math_fround(HEAPF32[HEAP32[i6 >> 2] >> 2]));
  f67 = Math_fround(-Math_fround(HEAPF32[HEAP32[i11 >> 2] >> 2]));
  f67 = Math_fround(f68 - Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = f67;
  f67 = Math_fround(-Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + 8 >> 2]));
  f67 = Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 4 >> 2]));
  f68 = Math_fround(-Math_fround(HEAPF32[HEAP32[i11 >> 2] >> 2]));
  f68 = Math_fround(f67 + Math_fround(f68 * Math_fround(HEAPF32[HEAP32[i6 >> 2] >> 2])));
  HEAPF32[HEAP32[i8 >> 2] >> 2] = f68;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -8;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 8;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -16;
 }
 HEAP32[i64 >> 2] = HEAP32[i36 >> 2];
 HEAP32[i65 >> 2] = HEAP32[i35 >> 2];
 HEAP32[i7 >> 2] = (HEAP32[i23 >> 2] | 0) + ((HEAP32[i56 >> 2] | 0) - 8 << 2);
 HEAP32[i12 >> 2] = (HEAP32[i65 >> 2] | 0) + (HEAP32[i57 >> 2] << 2);
 HEAP32[i13 >> 2] = HEAP32[i65 >> 2];
 HEAP32[i9 >> 2] = (HEAP32[i64 >> 2] | 0) + (HEAP32[i57 >> 2] << 2);
 HEAP32[i10 >> 2] = HEAP32[i64 >> 2];
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) >>> 0 < (HEAP32[i23 >> 2] | 0) >>> 0) break;
  f68 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 4 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 4 >> 2]));
  HEAPF32[i22 >> 2] = f68;
  f68 = Math_fround(HEAPF32[HEAP32[i12 >> 2] >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[HEAP32[i13 >> 2] >> 2]));
  HEAPF32[i21 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 4 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 4 >> 2]));
  HEAPF32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = f68;
  f68 = Math_fround(HEAPF32[HEAP32[i12 >> 2] >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[HEAP32[i13 >> 2] >> 2]));
  HEAPF32[HEAP32[i9 >> 2] >> 2] = f68;
  f68 = Math_fround(HEAPF32[i22 >> 2]);
  f68 = Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 16 >> 2]));
  f67 = Math_fround(HEAPF32[i21 >> 2]);
  f67 = Math_fround(f68 - Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 20 >> 2])));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] = f67;
  f67 = Math_fround(HEAPF32[i21 >> 2]);
  f67 = Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 16 >> 2]));
  f68 = Math_fround(HEAPF32[i22 >> 2]);
  f68 = Math_fround(f67 + Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 20 >> 2])));
  HEAPF32[HEAP32[i10 >> 2] >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 12 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 12 >> 2]));
  HEAPF32[i22 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 8 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 8 >> 2]));
  HEAPF32[i21 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 12 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 12 >> 2]));
  HEAPF32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 8 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 8 >> 2]));
  HEAPF32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i22 >> 2]);
  f68 = Math_fround(f68 * Math_fround(HEAPF32[HEAP32[i7 >> 2] >> 2]));
  f67 = Math_fround(HEAPF32[i21 >> 2]);
  f67 = Math_fround(f68 - Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] = f67;
  f67 = Math_fround(HEAPF32[i21 >> 2]);
  f67 = Math_fround(f67 * Math_fround(HEAPF32[HEAP32[i7 >> 2] >> 2]));
  f68 = Math_fround(HEAPF32[i22 >> 2]);
  f68 = Math_fround(f67 + Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = f68;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -32;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 16;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 16;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 16;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 16;
 }
 i22 = (_stbv_ilog(HEAP32[i55 >> 2] | 0) | 0) - 1 | 0;
 HEAP32[i53 >> 2] = i22;
 _stbv_imdct_step3_iter0_loop(HEAP32[i55 >> 2] >> 4, HEAP32[i64 >> 2] | 0, (HEAP32[i56 >> 2] | 0) - 1 - 0 | 0, 0 - (HEAP32[i55 >> 2] >> 3) | 0, HEAP32[i23 >> 2] | 0);
 _stbv_imdct_step3_iter0_loop(HEAP32[i55 >> 2] >> 4, HEAP32[i64 >> 2] | 0, (HEAP32[i56 >> 2] | 0) - 1 - (HEAP32[i57 >> 2] | 0) | 0, 0 - (HEAP32[i55 >> 2] >> 3) | 0, HEAP32[i23 >> 2] | 0);
 _stbv_imdct_step3_inner_r_loop(HEAP32[i55 >> 2] >> 5, HEAP32[i64 >> 2] | 0, (HEAP32[i56 >> 2] | 0) - 1 - 0 | 0, 0 - (HEAP32[i55 >> 2] >> 4) | 0, HEAP32[i23 >> 2] | 0, 16);
 _stbv_imdct_step3_inner_r_loop(HEAP32[i55 >> 2] >> 5, HEAP32[i64 >> 2] | 0, (HEAP32[i56 >> 2] | 0) - 1 - (HEAP32[i19 >> 2] | 0) | 0, 0 - (HEAP32[i55 >> 2] >> 4) | 0, HEAP32[i23 >> 2] | 0, 16);
 _stbv_imdct_step3_inner_r_loop(HEAP32[i55 >> 2] >> 5, HEAP32[i64 >> 2] | 0, (HEAP32[i56 >> 2] | 0) - 1 - (HEAP32[i19 >> 2] << 1) | 0, 0 - (HEAP32[i55 >> 2] >> 4) | 0, HEAP32[i23 >> 2] | 0, 16);
 _stbv_imdct_step3_inner_r_loop(HEAP32[i55 >> 2] >> 5, HEAP32[i64 >> 2] | 0, (HEAP32[i56 >> 2] | 0) - 1 - ((HEAP32[i19 >> 2] | 0) * 3 | 0) | 0, 0 - (HEAP32[i55 >> 2] >> 4) | 0, HEAP32[i23 >> 2] | 0, 16);
 HEAP32[i52 >> 2] = 2;
 while (1) {
  if ((HEAP32[i52 >> 2] | 0) >= ((HEAP32[i53 >> 2] | 0) - 3 >> 1 | 0)) break;
  HEAP32[i16 >> 2] = HEAP32[i55 >> 2] >> (HEAP32[i52 >> 2] | 0) + 2;
  HEAP32[i17 >> 2] = HEAP32[i16 >> 2] >> 1;
  HEAP32[i18 >> 2] = 1 << (HEAP32[i52 >> 2] | 0) + 1;
  HEAP32[i15 >> 2] = 0;
  while (1) {
   if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break;
   i21 = (HEAP32[i56 >> 2] | 0) - 1 - (Math_imul(HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0) | 0;
   i22 = HEAP32[i52 >> 2] | 0;
   _stbv_imdct_step3_inner_r_loop(HEAP32[i55 >> 2] >> i22 + 4, HEAP32[i64 >> 2] | 0, i21, 0 - (HEAP32[i17 >> 2] | 0) | 0, HEAP32[i23 >> 2] | 0, 1 << i22 + 3);
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
 }
 while (1) {
  i1 = HEAP32[i55 >> 2] | 0;
  if ((HEAP32[i52 >> 2] | 0) >= ((HEAP32[i53 >> 2] | 0) - 6 | 0)) break;
  HEAP32[i48 >> 2] = i1 >> (HEAP32[i52 >> 2] | 0) + 2;
  HEAP32[i50 >> 2] = 1 << (HEAP32[i52 >> 2] | 0) + 3;
  HEAP32[i49 >> 2] = HEAP32[i48 >> 2] >> 1;
  HEAP32[i62 >> 2] = HEAP32[i55 >> 2] >> (HEAP32[i52 >> 2] | 0) + 6;
  HEAP32[i54 >> 2] = 1 << (HEAP32[i52 >> 2] | 0) + 1;
  HEAP32[i24 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i47 >> 2] = (HEAP32[i56 >> 2] | 0) - 1;
  HEAP32[i61 >> 2] = HEAP32[i62 >> 2];
  while (1) {
   if ((HEAP32[i61 >> 2] | 0) <= 0) break;
   _stbv_imdct_step3_inner_s_loop(HEAP32[i54 >> 2] | 0, HEAP32[i64 >> 2] | 0, HEAP32[i47 >> 2] | 0, 0 - (HEAP32[i49 >> 2] | 0) | 0, HEAP32[i24 >> 2] | 0, HEAP32[i50 >> 2] | 0, HEAP32[i48 >> 2] | 0);
   HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + (HEAP32[i50 >> 2] << 2 << 2);
   HEAP32[i47 >> 2] = (HEAP32[i47 >> 2] | 0) - 8;
   HEAP32[i61 >> 2] = (HEAP32[i61 >> 2] | 0) + -1;
  }
  HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
 }
 _stbv_imdct_step3_inner_s_loop_ld654(i1 >> 5, HEAP32[i64 >> 2] | 0, (HEAP32[i56 >> 2] | 0) - 1 | 0, HEAP32[i23 >> 2] | 0, HEAP32[i55 >> 2] | 0);
 HEAP32[i33 >> 2] = HEAP32[(HEAP32[i46 >> 2] | 0) + 1100 + (HEAP32[i34 >> 2] << 2) >> 2];
 HEAP32[i37 >> 2] = (HEAP32[i65 >> 2] | 0) + ((HEAP32[i57 >> 2] | 0) - 4 << 2);
 HEAP32[i39 >> 2] = (HEAP32[i65 >> 2] | 0) + ((HEAP32[i56 >> 2] | 0) - 4 << 2);
 while (1) {
  if ((HEAP32[i37 >> 2] | 0) >>> 0 < (HEAP32[i65 >> 2] | 0) >>> 0) break;
  HEAP32[i51 >> 2] = HEAPU16[HEAP32[i33 >> 2] >> 1];
  f68 = Math_fround(HEAPF32[(HEAP32[i64 >> 2] | 0) + ((HEAP32[i51 >> 2] | 0) + 0 << 2) >> 2]);
  HEAPF32[(HEAP32[i39 >> 2] | 0) + 12 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i64 >> 2] | 0) + ((HEAP32[i51 >> 2] | 0) + 1 << 2) >> 2]);
  HEAPF32[(HEAP32[i39 >> 2] | 0) + 8 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i64 >> 2] | 0) + ((HEAP32[i51 >> 2] | 0) + 2 << 2) >> 2]);
  HEAPF32[(HEAP32[i37 >> 2] | 0) + 12 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i64 >> 2] | 0) + ((HEAP32[i51 >> 2] | 0) + 3 << 2) >> 2]);
  HEAPF32[(HEAP32[i37 >> 2] | 0) + 8 >> 2] = f68;
  HEAP32[i51 >> 2] = HEAPU16[(HEAP32[i33 >> 2] | 0) + 2 >> 1];
  f68 = Math_fround(HEAPF32[(HEAP32[i64 >> 2] | 0) + ((HEAP32[i51 >> 2] | 0) + 0 << 2) >> 2]);
  HEAPF32[(HEAP32[i39 >> 2] | 0) + 4 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i64 >> 2] | 0) + ((HEAP32[i51 >> 2] | 0) + 1 << 2) >> 2]);
  HEAPF32[HEAP32[i39 >> 2] >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i64 >> 2] | 0) + ((HEAP32[i51 >> 2] | 0) + 2 << 2) >> 2]);
  HEAPF32[(HEAP32[i37 >> 2] | 0) + 4 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i64 >> 2] | 0) + ((HEAP32[i51 >> 2] | 0) + 3 << 2) >> 2]);
  HEAPF32[HEAP32[i37 >> 2] >> 2] = f68;
  HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + -16;
  HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + -16;
  HEAP32[i33 >> 2] = (HEAP32[i33 >> 2] | 0) + 4;
 }
 if ((HEAP32[i65 >> 2] | 0) != (HEAP32[i35 >> 2] | 0)) ___assert_fail(47395, 47181, 2813, 47405);
 HEAP32[i26 >> 2] = HEAP32[(HEAP32[i46 >> 2] | 0) + 1084 + (HEAP32[i34 >> 2] << 2) >> 2];
 HEAP32[i42 >> 2] = HEAP32[i65 >> 2];
 HEAP32[i44 >> 2] = (HEAP32[i65 >> 2] | 0) + (HEAP32[i56 >> 2] << 2) + -16;
 while (1) {
  if ((HEAP32[i42 >> 2] | 0) >>> 0 >= (HEAP32[i44 >> 2] | 0) >>> 0) break;
  f68 = Math_fround(HEAPF32[HEAP32[i42 >> 2] >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[(HEAP32[i44 >> 2] | 0) + 8 >> 2]));
  HEAPF32[i27 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + 4 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[(HEAP32[i44 >> 2] | 0) + 12 >> 2]));
  HEAPF32[i28 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + 4 >> 2]);
  f68 = Math_fround(f68 * Math_fround(HEAPF32[i27 >> 2]));
  f67 = Math_fround(HEAPF32[HEAP32[i26 >> 2] >> 2]);
  f67 = Math_fround(f68 + Math_fround(f67 * Math_fround(HEAPF32[i28 >> 2])));
  HEAPF32[i29 >> 2] = f67;
  f67 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + 4 >> 2]);
  f67 = Math_fround(f67 * Math_fround(HEAPF32[i28 >> 2]));
  f68 = Math_fround(HEAPF32[HEAP32[i26 >> 2] >> 2]);
  f68 = Math_fround(f67 - Math_fround(f68 * Math_fround(HEAPF32[i27 >> 2])));
  HEAPF32[i30 >> 2] = f68;
  f68 = Math_fround(HEAPF32[HEAP32[i42 >> 2] >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[(HEAP32[i44 >> 2] | 0) + 8 >> 2]));
  HEAPF32[i31 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + 4 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[(HEAP32[i44 >> 2] | 0) + 12 >> 2]));
  HEAPF32[i32 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i31 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[i29 >> 2]));
  HEAPF32[HEAP32[i42 >> 2] >> 2] = f68;
  f68 = Math_fround(HEAPF32[i32 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[i30 >> 2]));
  HEAPF32[(HEAP32[i42 >> 2] | 0) + 4 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i31 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[i29 >> 2]));
  HEAPF32[(HEAP32[i44 >> 2] | 0) + 8 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i30 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[i32 >> 2]));
  HEAPF32[(HEAP32[i44 >> 2] | 0) + 12 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + 8 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[HEAP32[i44 >> 2] >> 2]));
  HEAPF32[i27 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + 12 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[(HEAP32[i44 >> 2] | 0) + 4 >> 2]));
  HEAPF32[i28 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + 12 >> 2]);
  f68 = Math_fround(f68 * Math_fround(HEAPF32[i27 >> 2]));
  f67 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + 8 >> 2]);
  f67 = Math_fround(f68 + Math_fround(f67 * Math_fround(HEAPF32[i28 >> 2])));
  HEAPF32[i29 >> 2] = f67;
  f67 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + 12 >> 2]);
  f67 = Math_fround(f67 * Math_fround(HEAPF32[i28 >> 2]));
  f68 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + 8 >> 2]);
  f68 = Math_fround(f67 - Math_fround(f68 * Math_fround(HEAPF32[i27 >> 2])));
  HEAPF32[i30 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + 8 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[HEAP32[i44 >> 2] >> 2]));
  HEAPF32[i31 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + 12 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[(HEAP32[i44 >> 2] | 0) + 4 >> 2]));
  HEAPF32[i32 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i31 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[i29 >> 2]));
  HEAPF32[(HEAP32[i42 >> 2] | 0) + 8 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i32 >> 2]);
  f68 = Math_fround(f68 + Math_fround(HEAPF32[i30 >> 2]));
  HEAPF32[(HEAP32[i42 >> 2] | 0) + 12 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i31 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[i29 >> 2]));
  HEAPF32[HEAP32[i44 >> 2] >> 2] = f68;
  f68 = Math_fround(HEAPF32[i30 >> 2]);
  f68 = Math_fround(f68 - Math_fround(HEAPF32[i32 >> 2]));
  HEAPF32[(HEAP32[i44 >> 2] | 0) + 4 >> 2] = f68;
  HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 16;
  HEAP32[i42 >> 2] = (HEAP32[i42 >> 2] | 0) + 16;
  HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) + -16;
 }
 HEAP32[i25 >> 2] = (HEAP32[(HEAP32[i46 >> 2] | 0) + 1076 + (HEAP32[i34 >> 2] << 2) >> 2] | 0) + (HEAP32[i56 >> 2] << 2) + -32;
 HEAP32[i45 >> 2] = (HEAP32[i35 >> 2] | 0) + (HEAP32[i56 >> 2] << 2) + -32;
 HEAP32[i38 >> 2] = HEAP32[i36 >> 2];
 HEAP32[i40 >> 2] = (HEAP32[i36 >> 2] | 0) + ((HEAP32[i56 >> 2] | 0) - 4 << 2);
 HEAP32[i41 >> 2] = (HEAP32[i36 >> 2] | 0) + (HEAP32[i56 >> 2] << 2);
 HEAP32[i43 >> 2] = (HEAP32[i36 >> 2] | 0) + ((HEAP32[i55 >> 2] | 0) - 4 << 2);
 while (1) {
  if ((HEAP32[i45 >> 2] | 0) >>> 0 < (HEAP32[i65 >> 2] | 0) >>> 0) break;
  f68 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 24 >> 2]);
  f68 = Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 28 >> 2]));
  f67 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 28 >> 2]);
  f67 = Math_fround(f68 - Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 24 >> 2])));
  HEAPF32[i20 >> 2] = f67;
  f67 = Math_fround(-Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 24 >> 2]));
  f67 = Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 24 >> 2]));
  f68 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 28 >> 2]);
  f68 = Math_fround(f67 - Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 28 >> 2])));
  HEAPF32[i60 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i20 >> 2]);
  HEAPF32[HEAP32[i38 >> 2] >> 2] = f68;
  f68 = Math_fround(-Math_fround(HEAPF32[i20 >> 2]));
  HEAPF32[(HEAP32[i40 >> 2] | 0) + 12 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i60 >> 2]);
  HEAPF32[HEAP32[i41 >> 2] >> 2] = f68;
  f68 = Math_fround(HEAPF32[i60 >> 2]);
  HEAPF32[(HEAP32[i43 >> 2] | 0) + 12 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 16 >> 2]);
  f68 = Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 20 >> 2]));
  f67 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 20 >> 2]);
  f67 = Math_fround(f68 - Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 16 >> 2])));
  HEAPF32[i59 >> 2] = f67;
  f67 = Math_fround(-Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 16 >> 2]));
  f67 = Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 16 >> 2]));
  f68 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 20 >> 2]);
  f68 = Math_fround(f67 - Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 20 >> 2])));
  HEAPF32[i58 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i59 >> 2]);
  HEAPF32[(HEAP32[i38 >> 2] | 0) + 4 >> 2] = f68;
  f68 = Math_fround(-Math_fround(HEAPF32[i59 >> 2]));
  HEAPF32[(HEAP32[i40 >> 2] | 0) + 8 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i58 >> 2]);
  HEAPF32[(HEAP32[i41 >> 2] | 0) + 4 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i58 >> 2]);
  HEAPF32[(HEAP32[i43 >> 2] | 0) + 8 >> 2] = f68;
  f68 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 8 >> 2]);
  f68 = Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 12 >> 2]));
  f67 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 12 >> 2]);
  f67 = Math_fround(f68 - Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 8 >> 2])));
  HEAPF32[i20 >> 2] = f67;
  f67 = Math_fround(-Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 8 >> 2]));
  f67 = Math_fround(f67 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 8 >> 2]));
  f68 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 12 >> 2]);
  f68 = Math_fround(f67 - Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 12 >> 2])));
  HEAPF32[i60 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i20 >> 2]);
  HEAPF32[(HEAP32[i38 >> 2] | 0) + 8 >> 2] = f68;
  f68 = Math_fround(-Math_fround(HEAPF32[i20 >> 2]));
  HEAPF32[(HEAP32[i40 >> 2] | 0) + 4 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i60 >> 2]);
  HEAPF32[(HEAP32[i41 >> 2] | 0) + 8 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i60 >> 2]);
  HEAPF32[(HEAP32[i43 >> 2] | 0) + 4 >> 2] = f68;
  f68 = Math_fround(HEAPF32[HEAP32[i45 >> 2] >> 2]);
  f68 = Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 4 >> 2]));
  f67 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 4 >> 2]);
  f67 = Math_fround(f68 - Math_fround(f67 * Math_fround(HEAPF32[HEAP32[i25 >> 2] >> 2])));
  HEAPF32[i59 >> 2] = f67;
  f67 = Math_fround(-Math_fround(HEAPF32[HEAP32[i45 >> 2] >> 2]));
  f67 = Math_fround(f67 * Math_fround(HEAPF32[HEAP32[i25 >> 2] >> 2]));
  f68 = Math_fround(HEAPF32[(HEAP32[i45 >> 2] | 0) + 4 >> 2]);
  f68 = Math_fround(f67 - Math_fround(f68 * Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 4 >> 2])));
  HEAPF32[i58 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i59 >> 2]);
  HEAPF32[(HEAP32[i38 >> 2] | 0) + 12 >> 2] = f68;
  f68 = Math_fround(-Math_fround(HEAPF32[i59 >> 2]));
  HEAPF32[HEAP32[i40 >> 2] >> 2] = f68;
  f68 = Math_fround(HEAPF32[i58 >> 2]);
  HEAPF32[(HEAP32[i41 >> 2] | 0) + 12 >> 2] = f68;
  f68 = Math_fround(HEAPF32[i58 >> 2]);
  HEAPF32[HEAP32[i43 >> 2] >> 2] = f68;
  HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + -32;
  HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + -32;
  HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 16;
  HEAP32[i41 >> 2] = (HEAP32[i41 >> 2] | 0) + 16;
  HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + -16;
  HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + -16;
 }
 HEAP32[(HEAP32[i46 >> 2] | 0) + 92 >> 2] = HEAP32[i63 >> 2];
 STACKTOP = i66;
 return;
}

function _stbv_vorbis_decode_packet_rest(i1, i5, i6, i4, i3, i9, i8, i7) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var f2 = f0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0;
 i37 = 0;
 i63 = STACKTOP;
 i10 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 2816 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2816);
 i60 = i10 + 2808 | 0;
 i52 = i10 + 2804 | 0;
 i55 = i10 + 2800 | 0;
 i56 = i10 + 2796 | 0;
 i54 = i10 + 2792 | 0;
 i62 = i10 + 2784 | 0;
 i61 = i10 + 2780 | 0;
 i59 = i10 + 2776 | 0;
 i49 = i10 + 2772 | 0;
 i53 = i10 + 2768 | 0;
 i45 = i10 + 2764 | 0;
 i23 = i10 + 2760 | 0;
 i57 = i10 + 2756 | 0;
 i58 = i10 + 2752 | 0;
 i42 = i10 + 1600 | 0;
 i50 = i10 + 576 | 0;
 i33 = i10 + 2748 | 0;
 i19 = i10 + 2744 | 0;
 i20 = i10 + 2740 | 0;
 i18 = i10 + 2736 | 0;
 i34 = i10 + 320 | 0;
 i31 = i10 + 2732 | 0;
 i28 = i10 + 2728 | 0;
 i29 = i10 + 2724 | 0;
 i15 = i10 + 2720 | 0;
 i14 = i10 + 2716 | 0;
 i16 = i10 + 2712 | 0;
 i17 = i10 + 2708 | 0;
 i12 = i10 + 2704 | 0;
 i27 = i10 + 2700 | 0;
 i11 = i10 + 2696 | 0;
 i35 = i10 + 2692 | 0;
 i13 = i10 + 2688 | 0;
 i26 = i10 + 2684 | 0;
 i24 = i10 + 2680 | 0;
 i21 = i10 + 2676 | 0;
 i30 = i10 + 2672 | 0;
 i22 = i10 + 2668 | 0;
 i25 = i10 + 2664 | 0;
 i32 = i10 + 2660 | 0;
 i36 = i10 + 2656 | 0;
 i41 = i10 + 256 | 0;
 i40 = i10 + 2652 | 0;
 i39 = i10;
 i38 = i10 + 2648 | 0;
 i48 = i10 + 2644 | 0;
 i47 = i10 + 2640 | 0;
 i43 = i10 + 2636 | 0;
 i44 = i10 + 2632 | 0;
 i46 = i10 + 2628 | 0;
 i51 = i10 + 2624 | 0;
 HEAP32[i52 >> 2] = i1;
 HEAP32[i55 >> 2] = i5;
 HEAP32[i56 >> 2] = i6;
 HEAP32[i54 >> 2] = i4;
 HEAP32[i10 + 2788 >> 2] = i3;
 HEAP32[i62 >> 2] = i9;
 HEAP32[i61 >> 2] = i8;
 HEAP32[i59 >> 2] = i7;
 HEAP32[i57 >> 2] = HEAP32[(HEAP32[i52 >> 2] | 0) + 104 + (HEAPU8[HEAP32[i56 >> 2] >> 0] << 2) >> 2];
 HEAP32[i49 >> 2] = (HEAP32[(HEAP32[i52 >> 2] | 0) + 404 >> 2] | 0) + ((HEAPU8[(HEAP32[i56 >> 2] | 0) + 1 >> 0] | 0) * 40 | 0);
 HEAP32[i58 >> 2] = HEAP32[i57 >> 2] >> 1;
 HEAP32[i53 >> 2] = 0;
 while (1) {
  if ((HEAP32[i53 >> 2] | 0) >= (HEAP32[(HEAP32[i52 >> 2] | 0) + 4 >> 2] | 0)) break;
  HEAP32[i33 >> 2] = HEAPU8[(HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i53 >> 2] | 0) * 3 | 0) + 2 >> 0];
  HEAP32[i42 + (HEAP32[i53 >> 2] << 2) >> 2] = 0;
  HEAP32[i19 >> 2] = HEAPU8[(HEAP32[i49 >> 2] | 0) + 9 + (HEAP32[i33 >> 2] | 0) >> 0];
  i1 = HEAP32[i52 >> 2] | 0;
  if (!(HEAPU16[(HEAP32[i52 >> 2] | 0) + 132 + (HEAP32[i19 >> 2] << 1) >> 1] | 0)) {
   i37 = 4;
   break;
  }
  HEAP32[i20 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) * 1596 | 0);
  L5 : do if (_stbv_get_bits(HEAP32[i52 >> 2] | 0, 1) | 0) {
   HEAP32[i31 >> 2] = HEAP32[13504 + ((HEAPU8[(HEAP32[i20 >> 2] | 0) + 1588 >> 0] | 0) - 1 << 2) >> 2];
   HEAP32[i28 >> 2] = 2;
   HEAP32[i18 >> 2] = HEAP32[(HEAP32[i52 >> 2] | 0) + 996 + (HEAP32[i53 >> 2] << 2) >> 2];
   i10 = HEAP32[i52 >> 2] | 0;
   i10 = (_stbv_get_bits(i10, (_stbv_ilog(HEAP32[i31 >> 2] | 0) | 0) - 1 | 0) | 0) & 65535;
   HEAP16[HEAP32[i18 >> 2] >> 1] = i10;
   i10 = HEAP32[i52 >> 2] | 0;
   i10 = (_stbv_get_bits(i10, (_stbv_ilog(HEAP32[i31 >> 2] | 0) | 0) - 1 | 0) | 0) & 65535;
   HEAP16[(HEAP32[i18 >> 2] | 0) + 2 >> 1] = i10;
   HEAP32[i45 >> 2] = 0;
   while (1) {
    if ((HEAP32[i45 >> 2] | 0) >= (HEAPU8[HEAP32[i20 >> 2] >> 0] | 0)) break;
    HEAP32[i29 >> 2] = HEAPU8[(HEAP32[i20 >> 2] | 0) + 1 + (HEAP32[i45 >> 2] | 0) >> 0];
    HEAP32[i15 >> 2] = HEAPU8[(HEAP32[i20 >> 2] | 0) + 33 + (HEAP32[i29 >> 2] | 0) >> 0];
    HEAP32[i14 >> 2] = HEAPU8[(HEAP32[i20 >> 2] | 0) + 49 + (HEAP32[i29 >> 2] | 0) >> 0];
    HEAP32[i16 >> 2] = (1 << HEAP32[i14 >> 2]) - 1;
    HEAP32[i17 >> 2] = 0;
    if (HEAP32[i14 >> 2] | 0) {
     HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i52 >> 2] | 0) + 124 >> 2] | 0) + ((HEAPU8[(HEAP32[i20 >> 2] | 0) + 65 + (HEAP32[i29 >> 2] | 0) >> 0] | 0) * 2096 | 0);
     if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 1396 >> 2] | 0) < 10) _stbv_prep_huffman(HEAP32[i52 >> 2] | 0);
     HEAP32[i17 >> 2] = HEAP32[(HEAP32[i52 >> 2] | 0) + 1392 >> 2] & 1023;
     HEAP32[i17 >> 2] = HEAP16[(HEAP32[i12 >> 2] | 0) + 36 + (HEAP32[i17 >> 2] << 1) >> 1];
     if ((HEAP32[i17 >> 2] | 0) >= 0) {
      HEAP32[i27 >> 2] = HEAPU8[(HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) >> 0];
      i10 = (HEAP32[i52 >> 2] | 0) + 1392 | 0;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) >>> (HEAP32[i27 >> 2] | 0);
      i10 = (HEAP32[i52 >> 2] | 0) + 1396 | 0;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i27 >> 2] | 0);
      if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
       HEAP32[(HEAP32[i52 >> 2] | 0) + 1396 >> 2] = 0;
       HEAP32[i17 >> 2] = -1;
      }
     } else {
      i10 = _stbv_codebook_decode_scalar_raw(HEAP32[i52 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
      HEAP32[i17 >> 2] = i10;
     }
     if (HEAP8[(HEAP32[i12 >> 2] | 0) + 23 >> 0] | 0) HEAP32[i17 >> 2] = HEAP32[(HEAP32[(HEAP32[i12 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i17 >> 2] << 2) >> 2];
    }
    HEAP32[i23 >> 2] = 0;
    while (1) {
     if ((HEAP32[i23 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break;
     HEAP32[i11 >> 2] = HEAP16[(HEAP32[i20 >> 2] | 0) + 82 + (HEAP32[i29 >> 2] << 4) + ((HEAP32[i17 >> 2] & HEAP32[i16 >> 2]) << 1) >> 1];
     HEAP32[i17 >> 2] = HEAP32[i17 >> 2] >> HEAP32[i14 >> 2];
     if ((HEAP32[i11 >> 2] | 0) >= 0) {
      HEAP32[i13 >> 2] = (HEAP32[(HEAP32[i52 >> 2] | 0) + 124 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) * 2096 | 0);
      if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 1396 >> 2] | 0) < 10) _stbv_prep_huffman(HEAP32[i52 >> 2] | 0);
      HEAP32[i35 >> 2] = HEAP32[(HEAP32[i52 >> 2] | 0) + 1392 >> 2] & 1023;
      HEAP32[i35 >> 2] = HEAP16[(HEAP32[i13 >> 2] | 0) + 36 + (HEAP32[i35 >> 2] << 1) >> 1];
      if ((HEAP32[i35 >> 2] | 0) >= 0) {
       HEAP32[i26 >> 2] = HEAPU8[(HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i35 >> 2] | 0) >> 0];
       i10 = (HEAP32[i52 >> 2] | 0) + 1392 | 0;
       HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) >>> (HEAP32[i26 >> 2] | 0);
       i10 = (HEAP32[i52 >> 2] | 0) + 1396 | 0;
       HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i26 >> 2] | 0);
       if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
        HEAP32[(HEAP32[i52 >> 2] | 0) + 1396 >> 2] = 0;
        HEAP32[i35 >> 2] = -1;
       }
      } else {
       i10 = _stbv_codebook_decode_scalar_raw(HEAP32[i52 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
       HEAP32[i35 >> 2] = i10;
      }
      if (HEAP8[(HEAP32[i13 >> 2] | 0) + 23 >> 0] | 0) HEAP32[i35 >> 2] = HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i35 >> 2] << 2) >> 2];
      i8 = HEAP32[i35 >> 2] & 65535;
      i9 = HEAP32[i18 >> 2] | 0;
      i10 = HEAP32[i28 >> 2] | 0;
      HEAP32[i28 >> 2] = i10 + 1;
      HEAP16[i9 + (i10 << 1) >> 1] = i8;
     } else {
      i9 = HEAP32[i18 >> 2] | 0;
      i10 = HEAP32[i28 >> 2] | 0;
      HEAP32[i28 >> 2] = i10 + 1;
      HEAP16[i9 + (i10 << 1) >> 1] = 0;
     }
     HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
    }
    HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + 1;
   }
   if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 1396 >> 2] | 0) == -1) i37 = 53; else {
    HEAP8[i34 + 1 >> 0] = 1;
    HEAP8[i34 >> 0] = 1;
    HEAP32[i45 >> 2] = 2;
    while (1) {
     if ((HEAP32[i45 >> 2] | 0) >= (HEAP32[(HEAP32[i20 >> 2] | 0) + 1592 >> 2] | 0)) break;
     HEAP32[i24 >> 2] = HEAPU8[(HEAP32[i20 >> 2] | 0) + 1088 + (HEAP32[i45 >> 2] << 1) >> 0];
     HEAP32[i21 >> 2] = HEAPU8[(HEAP32[i20 >> 2] | 0) + 1088 + (HEAP32[i45 >> 2] << 1) + 1 >> 0];
     i7 = (HEAP32[i20 >> 2] | 0) + 338 | 0;
     i8 = HEAP32[i24 >> 2] << 1 | 0;
     i9 = HEAP32[i18 >> 2] | 0;
     i10 = HEAP32[i21 >> 2] << 1 | 0;
     i10 = _stbv_predict_point(HEAPU16[i7 + (HEAP32[i45 >> 2] << 1) >> 1] | 0, HEAPU16[i7 + i8 >> 1] | 0, HEAPU16[i7 + i10 >> 1] | 0, HEAP16[i9 + i8 >> 1] | 0, HEAP16[i9 + i10 >> 1] | 0) | 0;
     HEAP32[i30 >> 2] = i10;
     HEAP32[i36 >> 2] = HEAP16[(HEAP32[i18 >> 2] | 0) + (HEAP32[i45 >> 2] << 1) >> 1];
     HEAP32[i22 >> 2] = (HEAP32[i31 >> 2] | 0) - (HEAP32[i30 >> 2] | 0);
     HEAP32[i25 >> 2] = HEAP32[i30 >> 2];
     if ((HEAP32[i22 >> 2] | 0) < (HEAP32[i25 >> 2] | 0)) HEAP32[i32 >> 2] = HEAP32[i22 >> 2] << 1; else HEAP32[i32 >> 2] = HEAP32[i25 >> 2] << 1;
     do if (HEAP32[i36 >> 2] | 0) {
      HEAP8[i34 + (HEAP32[i21 >> 2] | 0) >> 0] = 1;
      HEAP8[i34 + (HEAP32[i24 >> 2] | 0) >> 0] = 1;
      HEAP8[i34 + (HEAP32[i45 >> 2] | 0) >> 0] = 1;
      if ((HEAP32[i36 >> 2] | 0) >= (HEAP32[i32 >> 2] | 0)) if ((HEAP32[i22 >> 2] | 0) > (HEAP32[i25 >> 2] | 0)) {
       HEAP16[(HEAP32[i18 >> 2] | 0) + (HEAP32[i45 >> 2] << 1) >> 1] = (HEAP32[i36 >> 2] | 0) - (HEAP32[i25 >> 2] | 0) + (HEAP32[i30 >> 2] | 0);
       break;
      } else {
       HEAP16[(HEAP32[i18 >> 2] | 0) + (HEAP32[i45 >> 2] << 1) >> 1] = (HEAP32[i30 >> 2] | 0) - (HEAP32[i36 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) - 1;
       break;
      } else {
       i1 = HEAP32[i30 >> 2] | 0;
       i3 = HEAP32[i36 >> 2] | 0;
       if (HEAP32[i36 >> 2] & 1 | 0) {
        HEAP16[(HEAP32[i18 >> 2] | 0) + (HEAP32[i45 >> 2] << 1) >> 1] = i1 - (i3 + 1 >> 1);
        break;
       } else {
        HEAP16[(HEAP32[i18 >> 2] | 0) + (HEAP32[i45 >> 2] << 1) >> 1] = i1 + (i3 >> 1);
        break;
       }
      }
     } else {
      HEAP8[i34 + (HEAP32[i45 >> 2] | 0) >> 0] = 0;
      HEAP16[(HEAP32[i18 >> 2] | 0) + (HEAP32[i45 >> 2] << 1) >> 1] = HEAP32[i30 >> 2];
     } while (0);
     HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + 1;
    }
    HEAP32[i45 >> 2] = 0;
    while (1) {
     if ((HEAP32[i45 >> 2] | 0) >= (HEAP32[(HEAP32[i20 >> 2] | 0) + 1592 >> 2] | 0)) break L5;
     if (!(HEAP8[i34 + (HEAP32[i45 >> 2] | 0) >> 0] | 0)) HEAP16[(HEAP32[i18 >> 2] | 0) + (HEAP32[i45 >> 2] << 1) >> 1] = -1;
     HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + 1;
    }
   }
  } else i37 = 53; while (0);
  if ((i37 | 0) == 53) {
   i37 = 0;
   HEAP32[i42 + (HEAP32[i53 >> 2] << 2) >> 2] = 1;
  }
  HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
 }
 if ((i37 | 0) == 4) {
  i62 = _stbv_error(i1, 21) | 0;
  HEAP32[i60 >> 2] = i62;
  i62 = HEAP32[i60 >> 2] | 0;
  STACKTOP = i63;
  return i62 | 0;
 }
 do if (HEAP32[(HEAP32[i52 >> 2] | 0) + 80 >> 2] | 0) if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 80 + 4 >> 2] | 0) == (HEAP32[(HEAP32[i52 >> 2] | 0) + 92 >> 2] | 0)) break; else ___assert_fail(47308, 47181, 3289, 47364); while (0);
 _memcpy(i50 | 0, i42 | 0, HEAP32[(HEAP32[i52 >> 2] | 0) + 4 >> 2] << 2 | 0) | 0;
 HEAP32[i53 >> 2] = 0;
 while (1) {
  if ((HEAP32[i53 >> 2] | 0) >= (HEAPU16[HEAP32[i49 >> 2] >> 1] | 0)) break;
  if (HEAP32[i42 + (HEAPU8[(HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i53 >> 2] | 0) * 3 | 0) >> 0] << 2) >> 2] | 0) {
   if (!(HEAP32[i42 + (HEAPU8[(HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i53 >> 2] | 0) * 3 | 0) + 1 >> 0] << 2) >> 2] | 0)) i37 = 63;
  } else i37 = 63;
  if ((i37 | 0) == 63) {
   i37 = 0;
   HEAP32[i42 + (HEAPU8[(HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i53 >> 2] | 0) * 3 | 0) + 1 >> 0] << 2) >> 2] = 0;
   HEAP32[i42 + (HEAPU8[(HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i53 >> 2] | 0) * 3 | 0) >> 0] << 2) >> 2] = 0;
  }
  HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
 }
 HEAP32[i53 >> 2] = 0;
 while (1) {
  if ((HEAP32[i53 >> 2] | 0) >= (HEAPU8[(HEAP32[i49 >> 2] | 0) + 8 >> 0] | 0)) break;
  HEAP32[i38 >> 2] = 0;
  HEAP32[i45 >> 2] = 0;
  while (1) {
   i1 = HEAP32[i49 >> 2] | 0;
   if ((HEAP32[i45 >> 2] | 0) >= (HEAP32[(HEAP32[i52 >> 2] | 0) + 4 >> 2] | 0)) break;
   if ((HEAPU8[(HEAP32[i1 + 4 >> 2] | 0) + ((HEAP32[i45 >> 2] | 0) * 3 | 0) + 2 >> 0] | 0) == (HEAP32[i53 >> 2] | 0)) {
    i1 = i39 + (HEAP32[i38 >> 2] | 0) | 0;
    if (HEAP32[i42 + (HEAP32[i45 >> 2] << 2) >> 2] | 0) {
     HEAP8[i1 >> 0] = 1;
     HEAP32[i41 + (HEAP32[i38 >> 2] << 2) >> 2] = 0;
    } else {
     HEAP8[i1 >> 0] = 0;
     HEAP32[i41 + (HEAP32[i38 >> 2] << 2) >> 2] = HEAP32[(HEAP32[i52 >> 2] | 0) + 800 + (HEAP32[i45 >> 2] << 2) >> 2];
    }
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
   }
   HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + 1;
  }
  HEAP32[i40 >> 2] = HEAPU8[i1 + 24 + (HEAP32[i53 >> 2] | 0) >> 0];
  _stbv_decode_residue(HEAP32[i52 >> 2] | 0, i41, HEAP32[i38 >> 2] | 0, HEAP32[i58 >> 2] | 0, HEAP32[i40 >> 2] | 0, i39);
  HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
 }
 do if (HEAP32[(HEAP32[i52 >> 2] | 0) + 80 >> 2] | 0) if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 80 + 4 >> 2] | 0) == (HEAP32[(HEAP32[i52 >> 2] | 0) + 92 >> 2] | 0)) break; else ___assert_fail(47308, 47181, 3322, 47364); while (0);
 HEAP32[i53 >> 2] = (HEAPU16[HEAP32[i49 >> 2] >> 1] | 0) - 1;
 while (1) {
  if ((HEAP32[i53 >> 2] | 0) < 0) break;
  HEAP32[i48 >> 2] = HEAP32[i57 >> 2] >> 1;
  HEAP32[i47 >> 2] = HEAP32[(HEAP32[i52 >> 2] | 0) + 800 + (HEAPU8[(HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i53 >> 2] | 0) * 3 | 0) >> 0] << 2) >> 2];
  HEAP32[i43 >> 2] = HEAP32[(HEAP32[i52 >> 2] | 0) + 800 + (HEAPU8[(HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i53 >> 2] | 0) * 3 | 0) + 1 >> 0] << 2) >> 2];
  HEAP32[i45 >> 2] = 0;
  while (1) {
   if ((HEAP32[i45 >> 2] | 0) >= (HEAP32[i48 >> 2] | 0)) break;
   i42 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]) > Math_fround(0.0);
   i1 = Math_fround(HEAPF32[(HEAP32[i43 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]) > Math_fround(0.0);
   f2 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]);
   do if (i42) if (i1) {
    HEAPF32[i46 >> 2] = f2;
    f2 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]);
    f2 = Math_fround(f2 - Math_fround(HEAPF32[(HEAP32[i43 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]));
    HEAPF32[i44 >> 2] = f2;
    break;
   } else {
    HEAPF32[i44 >> 2] = f2;
    f2 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]);
    f2 = Math_fround(f2 + Math_fround(HEAPF32[(HEAP32[i43 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]));
    HEAPF32[i46 >> 2] = f2;
    break;
   } else if (i1) {
    HEAPF32[i46 >> 2] = f2;
    f2 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]);
    f2 = Math_fround(f2 + Math_fround(HEAPF32[(HEAP32[i43 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]));
    HEAPF32[i44 >> 2] = f2;
    break;
   } else {
    HEAPF32[i44 >> 2] = f2;
    f2 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]);
    f2 = Math_fround(f2 - Math_fround(HEAPF32[(HEAP32[i43 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2]));
    HEAPF32[i46 >> 2] = f2;
    break;
   } while (0);
   f2 = Math_fround(HEAPF32[i46 >> 2]);
   HEAPF32[(HEAP32[i47 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2] = f2;
   f2 = Math_fround(HEAPF32[i44 >> 2]);
   HEAPF32[(HEAP32[i43 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2] = f2;
   HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + 1;
  }
  HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + -1;
 }
 HEAP32[i53 >> 2] = 0;
 while (1) {
  if ((HEAP32[i53 >> 2] | 0) >= (HEAP32[(HEAP32[i52 >> 2] | 0) + 4 >> 2] | 0)) break;
  i1 = HEAP32[i52 >> 2] | 0;
  if (HEAP32[i50 + (HEAP32[i53 >> 2] << 2) >> 2] | 0) _memset(HEAP32[i1 + 800 + (HEAP32[i53 >> 2] << 2) >> 2] | 0, 0, HEAP32[i58 >> 2] << 2 | 0) | 0; else {
   i47 = HEAP32[i52 >> 2] | 0;
   i48 = HEAP32[i53 >> 2] << 2 | 0;
   _stbv_do_floor(i1, HEAP32[i49 >> 2] | 0, HEAP32[i53 >> 2] | 0, HEAP32[i57 >> 2] | 0, HEAP32[i47 + 800 + i48 >> 2] | 0, HEAP32[i47 + 996 + i48 >> 2] | 0, 0) | 0;
  }
  HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
 }
 HEAP32[i53 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i52 >> 2] | 0;
  if ((HEAP32[i53 >> 2] | 0) >= (HEAP32[(HEAP32[i52 >> 2] | 0) + 4 >> 2] | 0)) break;
  _stbv_inverse_mdct(HEAP32[i1 + 800 + (HEAP32[i53 >> 2] << 2) >> 2] | 0, HEAP32[i57 >> 2] | 0, HEAP32[i52 >> 2] | 0, HEAPU8[HEAP32[i56 >> 2] >> 0] | 0);
  HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
 }
 _stbv_flush_packet(i1);
 do if (HEAP8[(HEAP32[i52 >> 2] | 0) + 1377 >> 0] | 0) {
  HEAP32[(HEAP32[i52 >> 2] | 0) + 1060 >> 2] = 0 - (HEAP32[i58 >> 2] | 0);
  HEAP32[(HEAP32[i52 >> 2] | 0) + 1412 >> 2] = (HEAP32[i57 >> 2] | 0) - (HEAP32[i61 >> 2] | 0);
  HEAP32[(HEAP32[i52 >> 2] | 0) + 1064 >> 2] = 1;
  HEAP8[(HEAP32[i52 >> 2] | 0) + 1377 >> 0] = 0;
 } else if (HEAP32[(HEAP32[i52 >> 2] | 0) + 1412 >> 2] | 0) if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 1412 >> 2] | 0) >= ((HEAP32[i62 >> 2] | 0) - (HEAP32[i54 >> 2] | 0) | 0)) {
  i57 = (HEAP32[i52 >> 2] | 0) + 1412 | 0;
  HEAP32[i57 >> 2] = (HEAP32[i57 >> 2] | 0) - ((HEAP32[i62 >> 2] | 0) - (HEAP32[i54 >> 2] | 0));
  HEAP32[i54 >> 2] = HEAP32[i62 >> 2];
  HEAP32[HEAP32[i59 >> 2] >> 2] = HEAP32[i54 >> 2];
  break;
 } else {
  HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + (HEAP32[(HEAP32[i52 >> 2] | 0) + 1412 >> 2] | 0);
  HEAP32[HEAP32[i59 >> 2] >> 2] = HEAP32[i54 >> 2];
  HEAP32[(HEAP32[i52 >> 2] | 0) + 1412 >> 2] = 0;
  break;
 } while (0);
 if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 1388 >> 2] | 0) == (HEAP32[(HEAP32[i52 >> 2] | 0) + 1404 >> 2] | 0)) {
  if (HEAP32[(HEAP32[i52 >> 2] | 0) + 1064 >> 2] | 0) if (HEAPU8[(HEAP32[i52 >> 2] | 0) + 1375 >> 0] & 4 | 0) {
   HEAP32[i51 >> 2] = HEAP32[(HEAP32[i52 >> 2] | 0) + 1408 >> 2];
   if ((HEAP32[i51 >> 2] | 0) >>> 0 < ((HEAP32[(HEAP32[i52 >> 2] | 0) + 1060 >> 2] | 0) + ((HEAP32[i61 >> 2] | 0) - (HEAP32[i54 >> 2] | 0)) | 0) >>> 0) {
    if ((HEAP32[i51 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[i52 >> 2] | 0) + 1060 >> 2] | 0) >>> 0) HEAP32[HEAP32[i55 >> 2] >> 2] = 0; else HEAP32[HEAP32[i55 >> 2] >> 2] = (HEAP32[i51 >> 2] | 0) - (HEAP32[(HEAP32[i52 >> 2] | 0) + 1060 >> 2] | 0);
    i62 = HEAP32[i55 >> 2] | 0;
    HEAP32[i62 >> 2] = (HEAP32[i62 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
    if ((HEAP32[HEAP32[i55 >> 2] >> 2] | 0) > (HEAP32[i61 >> 2] | 0)) HEAP32[HEAP32[i55 >> 2] >> 2] = HEAP32[i61 >> 2];
    i62 = (HEAP32[i52 >> 2] | 0) + 1060 | 0;
    HEAP32[i62 >> 2] = (HEAP32[i62 >> 2] | 0) + (HEAP32[HEAP32[i55 >> 2] >> 2] | 0);
    HEAP32[i60 >> 2] = 1;
    i62 = HEAP32[i60 >> 2] | 0;
    STACKTOP = i63;
    return i62 | 0;
   }
  }
  i59 = HEAP32[i52 >> 2] | 0;
  HEAP32[i59 + 1060 >> 2] = (HEAP32[i59 + 1408 >> 2] | 0) - ((HEAP32[i58 >> 2] | 0) - (HEAP32[i54 >> 2] | 0));
  HEAP32[(HEAP32[i52 >> 2] | 0) + 1064 >> 2] = 1;
 }
 if (HEAP32[(HEAP32[i52 >> 2] | 0) + 1064 >> 2] | 0) {
  i59 = (HEAP32[i52 >> 2] | 0) + 1060 | 0;
  HEAP32[i59 >> 2] = (HEAP32[i59 >> 2] | 0) + ((HEAP32[i62 >> 2] | 0) - (HEAP32[i54 >> 2] | 0));
 }
 do if (HEAP32[(HEAP32[i52 >> 2] | 0) + 80 >> 2] | 0) if ((HEAP32[(HEAP32[i52 >> 2] | 0) + 80 + 4 >> 2] | 0) == (HEAP32[(HEAP32[i52 >> 2] | 0) + 92 >> 2] | 0)) break; else ___assert_fail(47308, 47181, 3438, 47364); while (0);
 HEAP32[HEAP32[i55 >> 2] >> 2] = HEAP32[i61 >> 2];
 HEAP32[i60 >> 2] = 1;
 i62 = HEAP32[i60 >> 2] | 0;
 STACKTOP = i63;
 return i62 | 0;
}

function _stbv_decode_residue(i4, i6, i2, i5, i7, i3) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0;
 i69 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i43 = i1 + 248 | 0;
 i61 = i1 + 244 | 0;
 i39 = i1 + 240 | 0;
 i46 = i1 + 236 | 0;
 i71 = i1 + 232 | 0;
 i42 = i1 + 228 | 0;
 i44 = i1 + 224 | 0;
 i45 = i1 + 220 | 0;
 i55 = i1 + 216 | 0;
 i60 = i1 + 212 | 0;
 i21 = i1 + 208 | 0;
 i70 = i1 + 204 | 0;
 i41 = i1 + 200 | 0;
 i8 = i1 + 196 | 0;
 i9 = i1 + 192 | 0;
 i10 = i1 + 188 | 0;
 i11 = i1 + 184 | 0;
 i54 = i1 + 180 | 0;
 i62 = i1 + 176 | 0;
 i53 = i1 + 172 | 0;
 i56 = i1 + 168 | 0;
 i40 = i1 + 164 | 0;
 i63 = i1 + 160 | 0;
 i36 = i1 + 156 | 0;
 i50 = i1 + 152 | 0;
 i35 = i1 + 148 | 0;
 i57 = i1 + 144 | 0;
 i49 = i1 + 140 | 0;
 i64 = i1 + 136 | 0;
 i30 = i1 + 132 | 0;
 i24 = i1 + 128 | 0;
 i27 = i1 + 124 | 0;
 i65 = i1 + 120 | 0;
 i37 = i1 + 116 | 0;
 i51 = i1 + 112 | 0;
 i31 = i1 + 108 | 0;
 i58 = i1 + 104 | 0;
 i47 = i1 + 100 | 0;
 i66 = i1 + 96 | 0;
 i32 = i1 + 92 | 0;
 i25 = i1 + 88 | 0;
 i28 = i1 + 84 | 0;
 i67 = i1 + 80 | 0;
 i38 = i1 + 76 | 0;
 i52 = i1 + 72 | 0;
 i33 = i1 + 68 | 0;
 i59 = i1 + 64 | 0;
 i48 = i1 + 60 | 0;
 i68 = i1 + 56 | 0;
 i34 = i1 + 52 | 0;
 i26 = i1 + 48 | 0;
 i29 = i1 + 44 | 0;
 i20 = i1 + 40 | 0;
 i16 = i1 + 36 | 0;
 i14 = i1 + 32 | 0;
 i23 = i1 + 28 | 0;
 i17 = i1 + 24 | 0;
 i15 = i1 + 20 | 0;
 i13 = i1 + 16 | 0;
 i22 = i1 + 12 | 0;
 i19 = i1 + 8 | 0;
 i18 = i1 + 4 | 0;
 i12 = i1;
 HEAP32[i43 >> 2] = i4;
 HEAP32[i61 >> 2] = i6;
 HEAP32[i39 >> 2] = i2;
 HEAP32[i46 >> 2] = i5;
 HEAP32[i71 >> 2] = i7;
 HEAP32[i42 >> 2] = i3;
 HEAP32[i60 >> 2] = (HEAP32[(HEAP32[i43 >> 2] | 0) + 396 >> 2] | 0) + ((HEAP32[i71 >> 2] | 0) * 24 | 0);
 HEAP32[i21 >> 2] = HEAPU16[(HEAP32[i43 >> 2] | 0) + 268 + (HEAP32[i71 >> 2] << 1) >> 1];
 HEAP32[i70 >> 2] = HEAPU8[(HEAP32[i60 >> 2] | 0) + 13 >> 0];
 HEAP32[i41 >> 2] = HEAP32[(HEAP32[(HEAP32[i43 >> 2] | 0) + 124 >> 2] | 0) + ((HEAP32[i70 >> 2] | 0) * 2096 | 0) >> 2];
 i7 = HEAP32[i46 >> 2] | 0;
 HEAP32[i8 >> 2] = (HEAP32[i21 >> 2] | 0) == 2 ? i7 << 1 : i7;
 if ((HEAP32[HEAP32[i60 >> 2] >> 2] | 0) >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) i1 = HEAP32[HEAP32[i60 >> 2] >> 2] | 0; else i1 = HEAP32[i8 >> 2] | 0;
 HEAP32[i9 >> 2] = i1;
 if ((HEAP32[(HEAP32[i60 >> 2] | 0) + 4 >> 2] | 0) >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) i1 = HEAP32[(HEAP32[i60 >> 2] | 0) + 4 >> 2] | 0; else i1 = HEAP32[i8 >> 2] | 0;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
 HEAP32[i54 >> 2] = ((HEAP32[i11 >> 2] | 0) >>> 0) / ((HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0;
 HEAP32[i62 >> 2] = HEAP32[(HEAP32[i43 >> 2] | 0) + 92 >> 2];
 i1 = HEAP32[i43 >> 2] | 0;
 if (HEAP32[(HEAP32[i43 >> 2] | 0) + 80 >> 2] | 0) i1 = _stbv_setup_temp_malloc(i1, Math_imul(HEAP32[(HEAP32[i43 >> 2] | 0) + 4 >> 2] | 0, 4 + (HEAP32[i54 >> 2] << 2) | 0) | 0) | 0; else {
  i2 = Math_imul(HEAP32[i1 + 4 >> 2] | 0, 4 + (HEAP32[i54 >> 2] << 2) | 0) | 0;
  i1 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * i2 | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i2 | 0) + 15 & -16 | 0);
 }
 i71 = _stbv_make_block_array(i1, HEAP32[(HEAP32[i43 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i54 >> 2] << 2) | 0;
 HEAP32[i53 >> 2] = i71;
 HEAP32[i44 >> 2] = 0;
 while (1) {
  if ((HEAP32[i44 >> 2] | 0) >= (HEAP32[i39 >> 2] | 0)) break;
  if (!(HEAP8[(HEAP32[i42 >> 2] | 0) + (HEAP32[i44 >> 2] | 0) >> 0] | 0)) _memset(HEAP32[(HEAP32[i61 >> 2] | 0) + (HEAP32[i44 >> 2] << 2) >> 2] | 0, 0, HEAP32[i46 >> 2] << 2 | 0) | 0;
  HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) + 1;
 }
 if (!((HEAP32[i21 >> 2] | 0) == 2 & (HEAP32[i39 >> 2] | 0) != 1)) {
  HEAP32[i55 >> 2] = 0;
  L22 : while (1) {
   if ((HEAP32[i55 >> 2] | 0) >= 8) {
    i1 = 120;
    break;
   }
   HEAP32[i20 >> 2] = 0;
   HEAP32[i16 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i55 >> 2] | 0;
    if ((HEAP32[i20 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break;
    L28 : do if (!i1) {
     HEAP32[i45 >> 2] = 0;
     while (1) {
      if ((HEAP32[i45 >> 2] | 0) >= (HEAP32[i39 >> 2] | 0)) break L28;
      if (!(HEAP8[(HEAP32[i42 >> 2] | 0) + (HEAP32[i45 >> 2] | 0) >> 0] | 0)) {
       HEAP32[i14 >> 2] = (HEAP32[(HEAP32[i43 >> 2] | 0) + 124 >> 2] | 0) + ((HEAPU8[(HEAP32[i60 >> 2] | 0) + 13 >> 0] | 0) * 2096 | 0);
       if ((HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] | 0) < 10) _stbv_prep_huffman(HEAP32[i43 >> 2] | 0);
       HEAP32[i23 >> 2] = HEAP32[(HEAP32[i43 >> 2] | 0) + 1392 >> 2] & 1023;
       HEAP32[i23 >> 2] = HEAP16[(HEAP32[i14 >> 2] | 0) + 36 + (HEAP32[i23 >> 2] << 1) >> 1];
       if ((HEAP32[i23 >> 2] | 0) >= 0) {
        HEAP32[i17 >> 2] = HEAPU8[(HEAP32[(HEAP32[i14 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) >> 0];
        i71 = (HEAP32[i43 >> 2] | 0) + 1392 | 0;
        HEAP32[i71 >> 2] = (HEAP32[i71 >> 2] | 0) >>> (HEAP32[i17 >> 2] | 0);
        i71 = (HEAP32[i43 >> 2] | 0) + 1396 | 0;
        HEAP32[i71 >> 2] = (HEAP32[i71 >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
        if ((HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
         HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] = 0;
         HEAP32[i23 >> 2] = -1;
        }
       } else {
        i71 = _stbv_codebook_decode_scalar_raw(HEAP32[i43 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
        HEAP32[i23 >> 2] = i71;
       }
       if (HEAP8[(HEAP32[i14 >> 2] | 0) + 23 >> 0] | 0) HEAP32[i23 >> 2] = HEAP32[(HEAP32[(HEAP32[i14 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i23 >> 2] << 2) >> 2];
       if ((HEAP32[i23 >> 2] | 0) == -1) {
        i1 = 120;
        break L22;
       }
       HEAP32[(HEAP32[(HEAP32[i53 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] = HEAP32[(HEAP32[(HEAP32[i60 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i23 >> 2] << 2) >> 2];
      }
      HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + 1;
     }
    } while (0);
    HEAP32[i44 >> 2] = 0;
    while (1) {
     if ((HEAP32[i44 >> 2] | 0) >= (HEAP32[i41 >> 2] | 0)) break;
     if ((HEAP32[i20 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break;
     HEAP32[i45 >> 2] = 0;
     while (1) {
      if ((HEAP32[i45 >> 2] | 0) >= (HEAP32[i39 >> 2] | 0)) break;
      if (!(HEAP8[(HEAP32[i42 >> 2] | 0) + (HEAP32[i45 >> 2] | 0) >> 0] | 0)) {
       HEAP32[i15 >> 2] = HEAPU8[(HEAP32[(HEAP32[(HEAP32[i53 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0) + (HEAP32[i44 >> 2] | 0) >> 0];
       HEAP32[i13 >> 2] = HEAP16[(HEAP32[(HEAP32[i60 >> 2] | 0) + 20 >> 2] | 0) + (HEAP32[i15 >> 2] << 4) + (HEAP32[i55 >> 2] << 1) >> 1];
       if ((HEAP32[i13 >> 2] | 0) >= 0) {
        HEAP32[i22 >> 2] = HEAP32[(HEAP32[i61 >> 2] | 0) + (HEAP32[i45 >> 2] << 2) >> 2];
        i71 = (HEAP32[HEAP32[i60 >> 2] >> 2] | 0) + (Math_imul(HEAP32[i20 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0) | 0;
        HEAP32[i19 >> 2] = i71;
        HEAP32[i18 >> 2] = HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2];
        HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i43 >> 2] | 0) + 124 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) * 2096 | 0);
        if (!(_stbv_residue_decode(HEAP32[i43 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i22 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0, HEAP32[i21 >> 2] | 0) | 0)) {
         i1 = 120;
         break L22;
        }
       }
      }
      HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + 1;
     }
     HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) + 1;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
    }
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   }
   HEAP32[i55 >> 2] = i1 + 1;
  }
  if ((i1 | 0) == 120) {
   i70 = HEAP32[i62 >> 2] | 0;
   i71 = HEAP32[i43 >> 2] | 0;
   i71 = i71 + 92 | 0;
   HEAP32[i71 >> 2] = i70;
   STACKTOP = i69;
   return;
  }
 }
 HEAP32[i45 >> 2] = 0;
 while (1) {
  if ((HEAP32[i45 >> 2] | 0) >= (HEAP32[i39 >> 2] | 0)) break;
  if (!(HEAP8[(HEAP32[i42 >> 2] | 0) + (HEAP32[i45 >> 2] | 0) >> 0] | 0)) break;
  HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + 1;
 }
 if ((HEAP32[i45 >> 2] | 0) == (HEAP32[i39 >> 2] | 0)) {
  i70 = HEAP32[i62 >> 2] | 0;
  i71 = HEAP32[i43 >> 2] | 0;
  i71 = i71 + 92 | 0;
  HEAP32[i71 >> 2] = i70;
  STACKTOP = i69;
  return;
 }
 HEAP32[i55 >> 2] = 0;
 L76 : while (1) {
  if ((HEAP32[i55 >> 2] | 0) >= 8) {
   i1 = 120;
   break;
  }
  HEAP32[i56 >> 2] = 0;
  HEAP32[i40 >> 2] = 0;
  L79 : do if ((HEAP32[i39 >> 2] | 0) == 2) while (1) {
   if ((HEAP32[i56 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break L79;
   i71 = (HEAP32[HEAP32[i60 >> 2] >> 2] | 0) + (Math_imul(HEAP32[i56 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0) | 0;
   HEAP32[i63 >> 2] = i71;
   HEAP32[i36 >> 2] = HEAP32[i63 >> 2] & 1;
   HEAP32[i50 >> 2] = HEAP32[i63 >> 2] >> 1;
   if (!(HEAP32[i55 >> 2] | 0)) {
    HEAP32[i35 >> 2] = (HEAP32[(HEAP32[i43 >> 2] | 0) + 124 >> 2] | 0) + ((HEAPU8[(HEAP32[i60 >> 2] | 0) + 13 >> 0] | 0) * 2096 | 0);
    if ((HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] | 0) < 10) _stbv_prep_huffman(HEAP32[i43 >> 2] | 0);
    HEAP32[i57 >> 2] = HEAP32[(HEAP32[i43 >> 2] | 0) + 1392 >> 2] & 1023;
    HEAP32[i57 >> 2] = HEAP16[(HEAP32[i35 >> 2] | 0) + 36 + (HEAP32[i57 >> 2] << 1) >> 1];
    if ((HEAP32[i57 >> 2] | 0) >= 0) {
     HEAP32[i49 >> 2] = HEAPU8[(HEAP32[(HEAP32[i35 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i57 >> 2] | 0) >> 0];
     i71 = (HEAP32[i43 >> 2] | 0) + 1392 | 0;
     HEAP32[i71 >> 2] = (HEAP32[i71 >> 2] | 0) >>> (HEAP32[i49 >> 2] | 0);
     i71 = (HEAP32[i43 >> 2] | 0) + 1396 | 0;
     HEAP32[i71 >> 2] = (HEAP32[i71 >> 2] | 0) - (HEAP32[i49 >> 2] | 0);
     if ((HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
      HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] = 0;
      HEAP32[i57 >> 2] = -1;
     }
    } else {
     i71 = _stbv_codebook_decode_scalar_raw(HEAP32[i43 >> 2] | 0, HEAP32[i35 >> 2] | 0) | 0;
     HEAP32[i57 >> 2] = i71;
    }
    if (HEAP8[(HEAP32[i35 >> 2] | 0) + 23 >> 0] | 0) HEAP32[i57 >> 2] = HEAP32[(HEAP32[(HEAP32[i35 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i57 >> 2] << 2) >> 2];
    if ((HEAP32[i57 >> 2] | 0) == -1) {
     i1 = 120;
     break L76;
    }
    HEAP32[(HEAP32[HEAP32[i53 >> 2] >> 2] | 0) + (HEAP32[i40 >> 2] << 2) >> 2] = HEAP32[(HEAP32[(HEAP32[i60 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i57 >> 2] << 2) >> 2];
   }
   HEAP32[i44 >> 2] = 0;
   while (1) {
    if ((HEAP32[i44 >> 2] | 0) >= (HEAP32[i41 >> 2] | 0)) break;
    if ((HEAP32[i56 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break;
    i71 = (HEAP32[HEAP32[i60 >> 2] >> 2] | 0) + (Math_imul(HEAP32[i56 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0) | 0;
    HEAP32[i64 >> 2] = i71;
    HEAP32[i30 >> 2] = HEAPU8[(HEAP32[(HEAP32[HEAP32[i53 >> 2] >> 2] | 0) + (HEAP32[i40 >> 2] << 2) >> 2] | 0) + (HEAP32[i44 >> 2] | 0) >> 0];
    HEAP32[i24 >> 2] = HEAP16[(HEAP32[(HEAP32[i60 >> 2] | 0) + 20 >> 2] | 0) + (HEAP32[i30 >> 2] << 4) + (HEAP32[i55 >> 2] << 1) >> 1];
    if ((HEAP32[i24 >> 2] | 0) >= 0) {
     HEAP32[i27 >> 2] = (HEAP32[(HEAP32[i43 >> 2] | 0) + 124 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 2096 | 0);
     if (!(_stbv_codebook_decode_deinterleave_repeat(HEAP32[i43 >> 2] | 0, HEAP32[i27 >> 2] | 0, HEAP32[i61 >> 2] | 0, HEAP32[i39 >> 2] | 0, i36, i50, HEAP32[i46 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0)) {
      i1 = 120;
      break L76;
     }
    } else {
     HEAP32[i64 >> 2] = (HEAP32[i64 >> 2] | 0) + (HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0);
     HEAP32[i36 >> 2] = HEAP32[i64 >> 2] & 1;
     HEAP32[i50 >> 2] = HEAP32[i64 >> 2] >> 1;
    }
    HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) + 1;
    HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + 1;
   }
   HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + 1;
  } else if ((HEAP32[i39 >> 2] | 0) == 1) while (1) {
   if ((HEAP32[i56 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break L79;
   i71 = (HEAP32[HEAP32[i60 >> 2] >> 2] | 0) + (Math_imul(HEAP32[i56 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0) | 0;
   HEAP32[i65 >> 2] = i71;
   HEAP32[i37 >> 2] = 0;
   HEAP32[i51 >> 2] = HEAP32[i65 >> 2];
   if (!(HEAP32[i55 >> 2] | 0)) {
    HEAP32[i31 >> 2] = (HEAP32[(HEAP32[i43 >> 2] | 0) + 124 >> 2] | 0) + ((HEAPU8[(HEAP32[i60 >> 2] | 0) + 13 >> 0] | 0) * 2096 | 0);
    if ((HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] | 0) < 10) _stbv_prep_huffman(HEAP32[i43 >> 2] | 0);
    HEAP32[i58 >> 2] = HEAP32[(HEAP32[i43 >> 2] | 0) + 1392 >> 2] & 1023;
    HEAP32[i58 >> 2] = HEAP16[(HEAP32[i31 >> 2] | 0) + 36 + (HEAP32[i58 >> 2] << 1) >> 1];
    if ((HEAP32[i58 >> 2] | 0) >= 0) {
     HEAP32[i47 >> 2] = HEAPU8[(HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i58 >> 2] | 0) >> 0];
     i71 = (HEAP32[i43 >> 2] | 0) + 1392 | 0;
     HEAP32[i71 >> 2] = (HEAP32[i71 >> 2] | 0) >>> (HEAP32[i47 >> 2] | 0);
     i71 = (HEAP32[i43 >> 2] | 0) + 1396 | 0;
     HEAP32[i71 >> 2] = (HEAP32[i71 >> 2] | 0) - (HEAP32[i47 >> 2] | 0);
     if ((HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
      HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] = 0;
      HEAP32[i58 >> 2] = -1;
     }
    } else {
     i71 = _stbv_codebook_decode_scalar_raw(HEAP32[i43 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0;
     HEAP32[i58 >> 2] = i71;
    }
    if (HEAP8[(HEAP32[i31 >> 2] | 0) + 23 >> 0] | 0) HEAP32[i58 >> 2] = HEAP32[(HEAP32[(HEAP32[i31 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i58 >> 2] << 2) >> 2];
    if ((HEAP32[i58 >> 2] | 0) == -1) {
     i1 = 120;
     break L76;
    }
    HEAP32[(HEAP32[HEAP32[i53 >> 2] >> 2] | 0) + (HEAP32[i40 >> 2] << 2) >> 2] = HEAP32[(HEAP32[(HEAP32[i60 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i58 >> 2] << 2) >> 2];
   }
   HEAP32[i44 >> 2] = 0;
   while (1) {
    if ((HEAP32[i44 >> 2] | 0) >= (HEAP32[i41 >> 2] | 0)) break;
    if ((HEAP32[i56 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break;
    i71 = (HEAP32[HEAP32[i60 >> 2] >> 2] | 0) + (Math_imul(HEAP32[i56 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0) | 0;
    HEAP32[i66 >> 2] = i71;
    HEAP32[i32 >> 2] = HEAPU8[(HEAP32[(HEAP32[HEAP32[i53 >> 2] >> 2] | 0) + (HEAP32[i40 >> 2] << 2) >> 2] | 0) + (HEAP32[i44 >> 2] | 0) >> 0];
    HEAP32[i25 >> 2] = HEAP16[(HEAP32[(HEAP32[i60 >> 2] | 0) + 20 >> 2] | 0) + (HEAP32[i32 >> 2] << 4) + (HEAP32[i55 >> 2] << 1) >> 1];
    if ((HEAP32[i25 >> 2] | 0) >= 0) {
     HEAP32[i28 >> 2] = (HEAP32[(HEAP32[i43 >> 2] | 0) + 124 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 2096 | 0);
     if (!(_stbv_codebook_decode_deinterleave_repeat(HEAP32[i43 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i61 >> 2] | 0, HEAP32[i39 >> 2] | 0, i37, i51, HEAP32[i46 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0)) {
      i1 = 120;
      break L76;
     }
    } else {
     HEAP32[i66 >> 2] = (HEAP32[i66 >> 2] | 0) + (HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0);
     HEAP32[i37 >> 2] = 0;
     HEAP32[i51 >> 2] = HEAP32[i66 >> 2];
    }
    HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) + 1;
    HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + 1;
   }
   HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + 1;
  } else while (1) {
   if ((HEAP32[i56 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break L79;
   i71 = (HEAP32[HEAP32[i60 >> 2] >> 2] | 0) + (Math_imul(HEAP32[i56 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0) | 0;
   HEAP32[i67 >> 2] = i71;
   HEAP32[i38 >> 2] = (HEAP32[i67 >> 2] | 0) % (HEAP32[i39 >> 2] | 0) | 0;
   HEAP32[i52 >> 2] = (HEAP32[i67 >> 2] | 0) / (HEAP32[i39 >> 2] | 0) | 0;
   if (!(HEAP32[i55 >> 2] | 0)) {
    HEAP32[i33 >> 2] = (HEAP32[(HEAP32[i43 >> 2] | 0) + 124 >> 2] | 0) + ((HEAPU8[(HEAP32[i60 >> 2] | 0) + 13 >> 0] | 0) * 2096 | 0);
    if ((HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] | 0) < 10) _stbv_prep_huffman(HEAP32[i43 >> 2] | 0);
    HEAP32[i59 >> 2] = HEAP32[(HEAP32[i43 >> 2] | 0) + 1392 >> 2] & 1023;
    HEAP32[i59 >> 2] = HEAP16[(HEAP32[i33 >> 2] | 0) + 36 + (HEAP32[i59 >> 2] << 1) >> 1];
    if ((HEAP32[i59 >> 2] | 0) >= 0) {
     HEAP32[i48 >> 2] = HEAPU8[(HEAP32[(HEAP32[i33 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i59 >> 2] | 0) >> 0];
     i71 = (HEAP32[i43 >> 2] | 0) + 1392 | 0;
     HEAP32[i71 >> 2] = (HEAP32[i71 >> 2] | 0) >>> (HEAP32[i48 >> 2] | 0);
     i71 = (HEAP32[i43 >> 2] | 0) + 1396 | 0;
     HEAP32[i71 >> 2] = (HEAP32[i71 >> 2] | 0) - (HEAP32[i48 >> 2] | 0);
     if ((HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
      HEAP32[(HEAP32[i43 >> 2] | 0) + 1396 >> 2] = 0;
      HEAP32[i59 >> 2] = -1;
     }
    } else {
     i71 = _stbv_codebook_decode_scalar_raw(HEAP32[i43 >> 2] | 0, HEAP32[i33 >> 2] | 0) | 0;
     HEAP32[i59 >> 2] = i71;
    }
    if (HEAP8[(HEAP32[i33 >> 2] | 0) + 23 >> 0] | 0) HEAP32[i59 >> 2] = HEAP32[(HEAP32[(HEAP32[i33 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i59 >> 2] << 2) >> 2];
    if ((HEAP32[i59 >> 2] | 0) == -1) {
     i1 = 120;
     break L76;
    }
    HEAP32[(HEAP32[HEAP32[i53 >> 2] >> 2] | 0) + (HEAP32[i40 >> 2] << 2) >> 2] = HEAP32[(HEAP32[(HEAP32[i60 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i59 >> 2] << 2) >> 2];
   }
   HEAP32[i44 >> 2] = 0;
   while (1) {
    if ((HEAP32[i44 >> 2] | 0) >= (HEAP32[i41 >> 2] | 0)) break;
    if ((HEAP32[i56 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break;
    i71 = (HEAP32[HEAP32[i60 >> 2] >> 2] | 0) + (Math_imul(HEAP32[i56 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0) | 0;
    HEAP32[i68 >> 2] = i71;
    HEAP32[i34 >> 2] = HEAPU8[(HEAP32[(HEAP32[HEAP32[i53 >> 2] >> 2] | 0) + (HEAP32[i40 >> 2] << 2) >> 2] | 0) + (HEAP32[i44 >> 2] | 0) >> 0];
    HEAP32[i26 >> 2] = HEAP16[(HEAP32[(HEAP32[i60 >> 2] | 0) + 20 >> 2] | 0) + (HEAP32[i34 >> 2] << 4) + (HEAP32[i55 >> 2] << 1) >> 1];
    if ((HEAP32[i26 >> 2] | 0) >= 0) {
     HEAP32[i29 >> 2] = (HEAP32[(HEAP32[i43 >> 2] | 0) + 124 >> 2] | 0) + ((HEAP32[i26 >> 2] | 0) * 2096 | 0);
     if (!(_stbv_codebook_decode_deinterleave_repeat(HEAP32[i43 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[i61 >> 2] | 0, HEAP32[i39 >> 2] | 0, i38, i52, HEAP32[i46 >> 2] | 0, HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0) | 0)) {
      i1 = 120;
      break L76;
     }
    } else {
     HEAP32[i68 >> 2] = (HEAP32[i68 >> 2] | 0) + (HEAP32[(HEAP32[i60 >> 2] | 0) + 8 >> 2] | 0);
     HEAP32[i38 >> 2] = (HEAP32[i68 >> 2] | 0) % (HEAP32[i39 >> 2] | 0) | 0;
     HEAP32[i52 >> 2] = (HEAP32[i68 >> 2] | 0) / (HEAP32[i39 >> 2] | 0) | 0;
    }
    HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) + 1;
    HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + 1;
   }
   HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + 1;
  } while (0);
  HEAP32[i55 >> 2] = (HEAP32[i55 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 120) {
  i70 = HEAP32[i62 >> 2] | 0;
  i71 = HEAP32[i43 >> 2] | 0;
  i71 = i71 + 92 | 0;
  HEAP32[i71 >> 2] = i70;
  STACKTOP = i69;
  return;
 }
}

function _stbi__parse_png_file(i5, i4, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i20 = 0;
 i32 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 1136 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1136);
 i27 = i1 + 1108 | 0;
 i31 = i1 + 1104 | 0;
 i19 = i1 + 1100 | 0;
 i26 = i1 + 1096 | 0;
 i25 = i1;
 i23 = i1 + 1122 | 0;
 i21 = i1 + 1121 | 0;
 i29 = i1 + 1118 | 0;
 i30 = i1 + 1112 | 0;
 i15 = i1 + 1092 | 0;
 i12 = i1 + 1088 | 0;
 i11 = i1 + 1084 | 0;
 i24 = i1 + 1080 | 0;
 i10 = i1 + 1076 | 0;
 i16 = i1 + 1072 | 0;
 i14 = i1 + 1068 | 0;
 i7 = i1 + 1064 | 0;
 i22 = i1 + 1060 | 0;
 i28 = i1 + 1056 | 0;
 i6 = i1 + 1048 | 0;
 i8 = i1 + 1044 | 0;
 i9 = i1 + 1040 | 0;
 i13 = i1 + 1036 | 0;
 i17 = i1 + 1032 | 0;
 i18 = i1 + 1028 | 0;
 i2 = i1 + 1024 | 0;
 HEAP32[i31 >> 2] = i5;
 HEAP32[i19 >> 2] = i4;
 HEAP32[i26 >> 2] = i3;
 HEAP8[i23 >> 0] = 0;
 HEAP8[i21 >> 0] = 0;
 HEAP8[i29 >> 0] = 0;
 HEAP8[i29 + 1 >> 0] = 0;
 HEAP8[i29 + 2 >> 0] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i10 >> 2] = 1;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i28 >> 2] = HEAP32[HEAP32[i31 >> 2] >> 2];
 HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[i31 >> 2] | 0) + 12 >> 2] = 0;
 if (!(_stbi__check_png_header(HEAP32[i28 >> 2] | 0) | 0)) {
  HEAP32[i27 >> 2] = 0;
  i31 = HEAP32[i27 >> 2] | 0;
  STACKTOP = i32;
  return i31 | 0;
 }
 if ((HEAP32[i19 >> 2] | 0) == 1) {
  HEAP32[i27 >> 2] = 1;
  i31 = HEAP32[i27 >> 2] | 0;
  STACKTOP = i32;
  return i31 | 0;
 }
 L9 : while (1) {
  _stbi__get_chunk_header(i6, HEAP32[i28 >> 2] | 0);
  i1 = HEAP32[i6 + 4 >> 2] | 0;
  L11 : do if ((i1 | 0) < 1229472850) {
   if ((i1 | 0) < 1229209940) {
    switch (i1 | 0) {
    case 1130840649:
     break;
    default:
     {
      i20 = 132;
      break L11;
     }
    }
    HEAP32[i22 >> 2] = 1;
    _stbi__skip(HEAP32[i28 >> 2] | 0, HEAP32[i6 >> 2] | 0);
    break;
   }
   if ((i1 | 0) >= 1229278788) switch (i1 | 0) {
   case 1229278788:
    {
     i20 = 101;
     break L9;
    }
   default:
    {
     i20 = 132;
     break L11;
    }
   }
   switch (i1 | 0) {
   case 1229209940:
    break;
   default:
    {
     i20 = 132;
     break L11;
    }
   }
   if (HEAP32[i10 >> 2] | 0) {
    i20 = 82;
    break L9;
   }
   if (!((HEAPU8[i23 >> 0] | 0) == 0 | (HEAP32[i24 >> 2] | 0) != 0)) {
    i20 = 84;
    break L9;
   }
   if ((HEAP32[i19 >> 2] | 0) == 2) {
    i20 = 86;
    break L9;
   }
   if (((HEAP32[i15 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) < (HEAP32[i15 >> 2] | 0)) {
    i20 = 88;
    break L9;
   }
   if (((HEAP32[i15 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) >>> 0 > (HEAP32[i12 >> 2] | 0) >>> 0) {
    HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
    if (!(HEAP32[i12 >> 2] | 0)) {
     i5 = HEAP32[i6 >> 2] | 0;
     HEAP32[i12 >> 2] = (i5 | 0) >>> 0 > 4096 ? i5 | 0 : 4096;
    }
    while (1) {
     if (((HEAP32[i15 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) >>> 0 <= (HEAP32[i12 >> 2] | 0) >>> 0) break;
     HEAP32[i12 >> 2] = HEAP32[i12 >> 2] << 1;
    }
    i5 = _realloc(HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i17 >> 2] = i5;
    if (!(HEAP32[i17 >> 2] | 0)) {
     i20 = 96;
     break L9;
    }
    HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2] = HEAP32[i17 >> 2];
   }
   if (!(_stbi__getn(HEAP32[i28 >> 2] | 0, (HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0, HEAP32[i6 >> 2] | 0) | 0)) {
    i20 = 99;
    break L9;
   }
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
  } else {
   if ((i1 | 0) < 1347179589) {
    switch (i1 | 0) {
    case 1229472850:
     break;
    default:
     {
      i20 = 132;
      break L11;
     }
    }
    if (!(HEAP32[i10 >> 2] | 0)) {
     i20 = 9;
     break L9;
    }
    HEAP32[i10 >> 2] = 0;
    if ((HEAP32[i6 >> 2] | 0) != 13) {
     i20 = 11;
     break L9;
    }
    i5 = _stbi__get32be(HEAP32[i28 >> 2] | 0) | 0;
    HEAP32[HEAP32[i28 >> 2] >> 2] = i5;
    if ((HEAP32[HEAP32[i28 >> 2] >> 2] | 0) >>> 0 > 16777216) {
     i20 = 13;
     break L9;
    }
    i5 = _stbi__get32be(HEAP32[i28 >> 2] | 0) | 0;
    HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] = i5;
    if ((HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 16777216) {
     i20 = 15;
     break L9;
    }
    i5 = (_stbi__get8(HEAP32[i28 >> 2] | 0) | 0) & 255;
    HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] = i5;
    if ((HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) != 1) if ((HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) != 2) if ((HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) != 4) if ((HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) != 8) if ((HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) != 16) {
     i20 = 21;
     break L9;
    }
    i5 = (_stbi__get8(HEAP32[i28 >> 2] | 0) | 0) & 255;
    HEAP32[i7 >> 2] = i5;
    if ((HEAP32[i7 >> 2] | 0) > 6) {
     i20 = 23;
     break L9;
    }
    if ((HEAP32[i7 >> 2] | 0) == 3) if ((HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) == 16) {
     i20 = 26;
     break L9;
    }
    if ((HEAP32[i7 >> 2] | 0) == 3) HEAP8[i23 >> 0] = 3; else if (HEAP32[i7 >> 2] & 1 | 0) {
     i20 = 30;
     break L9;
    }
    i5 = (_stbi__get8(HEAP32[i28 >> 2] | 0) | 0) & 255;
    HEAP32[i8 >> 2] = i5;
    if (HEAP32[i8 >> 2] | 0) {
     i20 = 32;
     break L9;
    }
    i5 = (_stbi__get8(HEAP32[i28 >> 2] | 0) | 0) & 255;
    HEAP32[i9 >> 2] = i5;
    if (HEAP32[i9 >> 2] | 0) {
     i20 = 34;
     break L9;
    }
    i5 = (_stbi__get8(HEAP32[i28 >> 2] | 0) | 0) & 255;
    HEAP32[i14 >> 2] = i5;
    if ((HEAP32[i14 >> 2] | 0) > 1) {
     i20 = 36;
     break L9;
    }
    if (!(HEAP32[HEAP32[i28 >> 2] >> 2] | 0)) {
     i20 = 39;
     break L9;
    }
    if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0)) {
     i20 = 39;
     break L9;
    }
    if (HEAP8[i23 >> 0] | 0) {
     HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] = 1;
     if ((((1073741824 / ((HEAP32[HEAP32[i28 >> 2] >> 2] | 0) >>> 0) | 0) >>> 0) / 4 | 0) >>> 0 < (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
      i20 = 46;
      break L9;
     } else break;
    }
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] = (HEAP32[i7 >> 2] & 2 | 0 ? 3 : 1) + (HEAP32[i7 >> 2] & 4 | 0 ? 1 : 0);
    if ((((1073741824 / ((HEAP32[HEAP32[i28 >> 2] >> 2] | 0) >>> 0) | 0) >>> 0) / ((HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0) >>> 0 < (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
     i20 = 42;
     break L9;
    }
    if ((HEAP32[i19 >> 2] | 0) == 2) {
     i20 = 44;
     break L9;
    } else break;
   }
   if ((i1 | 0) < 1951551059) {
    switch (i1 | 0) {
    case 1347179589:
     break;
    default:
     {
      i20 = 132;
      break L11;
     }
    }
    if (HEAP32[i10 >> 2] | 0) {
     i20 = 48;
     break L9;
    }
    if ((HEAP32[i6 >> 2] | 0) >>> 0 > 768) {
     i20 = 50;
     break L9;
    }
    HEAP32[i24 >> 2] = ((HEAP32[i6 >> 2] | 0) >>> 0) / 3 | 0;
    if (((HEAP32[i24 >> 2] | 0) * 3 | 0) != (HEAP32[i6 >> 2] | 0)) {
     i20 = 52;
     break L9;
    }
    HEAP32[i11 >> 2] = 0;
    while (1) {
     if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[i24 >> 2] | 0) >>> 0) break L11;
     i5 = _stbi__get8(HEAP32[i28 >> 2] | 0) | 0;
     HEAP8[i25 + ((HEAP32[i11 >> 2] << 2) + 0) >> 0] = i5;
     i5 = _stbi__get8(HEAP32[i28 >> 2] | 0) | 0;
     HEAP8[i25 + ((HEAP32[i11 >> 2] << 2) + 1) >> 0] = i5;
     i5 = _stbi__get8(HEAP32[i28 >> 2] | 0) | 0;
     HEAP8[i25 + ((HEAP32[i11 >> 2] << 2) + 2) >> 0] = i5;
     HEAP8[i25 + ((HEAP32[i11 >> 2] << 2) + 3) >> 0] = -1;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    }
   }
   switch (i1 | 0) {
   case 1951551059:
    break;
   default:
    {
     i20 = 132;
     break L11;
    }
   }
   if (HEAP32[i10 >> 2] | 0) {
    i20 = 57;
    break L9;
   }
   if (HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2] | 0) {
    i20 = 59;
    break L9;
   }
   if (HEAP8[i23 >> 0] | 0) {
    if ((HEAP32[i19 >> 2] | 0) == 2) {
     i20 = 62;
     break L9;
    }
    if (!(HEAP32[i24 >> 2] | 0)) {
     i20 = 64;
     break L9;
    }
    if ((HEAP32[i6 >> 2] | 0) >>> 0 > (HEAP32[i24 >> 2] | 0) >>> 0) {
     i20 = 66;
     break L9;
    }
    HEAP8[i23 >> 0] = 4;
    HEAP32[i11 >> 2] = 0;
    while (1) {
     if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) break L11;
     i5 = _stbi__get8(HEAP32[i28 >> 2] | 0) | 0;
     HEAP8[i25 + ((HEAP32[i11 >> 2] << 2) + 3) >> 0] = i5;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    }
   }
   if (!(HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] & 1)) {
    i20 = 71;
    break L9;
   }
   if ((HEAP32[i6 >> 2] | 0) != (HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] << 1 | 0)) {
    i20 = 73;
    break L9;
   }
   HEAP8[i21 >> 0] = 1;
   i5 = (HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) == 16;
   HEAP32[i16 >> 2] = 0;
   if (i5) while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0)) break L11;
    i5 = (_stbi__get16be(HEAP32[i28 >> 2] | 0) | 0) & 65535;
    HEAP16[i30 + (HEAP32[i16 >> 2] << 1) >> 1] = i5;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   } else while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0)) break L11;
    i5 = (_stbi__get16be(HEAP32[i28 >> 2] | 0) | 0) & 255;
    i5 = (Math_imul(i5, HEAPU8[54015 + (HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) >> 0] | 0) | 0) & 255;
    HEAP8[i29 + (HEAP32[i16 >> 2] | 0) >> 0] = i5;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   }
  } while (0);
  if ((i20 | 0) == 132) {
   i20 = 0;
   if (HEAP32[i10 >> 2] | 0) {
    i20 = 133;
    break;
   }
   if (!(HEAP32[i6 + 4 >> 2] & 536870912)) {
    i20 = 135;
    break;
   }
   _stbi__skip(HEAP32[i28 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  }
  _stbi__get32be(HEAP32[i28 >> 2] | 0) | 0;
 }
 switch (i20 | 0) {
 case 9:
  {
   i31 = _stbi__err(53799) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 11:
  {
   i31 = _stbi__err(53813) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 13:
  {
   i31 = _stbi__err(53639) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 15:
  {
   i31 = _stbi__err(53639) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 21:
  {
   i31 = _stbi__err(53826) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 23:
  {
   i31 = _stbi__err(53846) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 26:
  {
   i31 = _stbi__err(53846) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 30:
  {
   i31 = _stbi__err(53846) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 32:
  {
   i31 = _stbi__err(53856) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 34:
  {
   i31 = _stbi__err(53872) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 36:
  {
   i31 = _stbi__err(53890) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 39:
  {
   i31 = _stbi__err(53911) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 42:
  {
   i31 = _stbi__err(53639) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 44:
  {
   HEAP32[i27 >> 2] = 1;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 46:
  {
   i31 = _stbi__err(53639) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 48:
  {
   i31 = _stbi__err(53925) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 50:
  {
   i31 = _stbi__err(53940) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 52:
  {
   i31 = _stbi__err(53940) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 57:
  {
   i31 = _stbi__err(53925) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 59:
  {
   i31 = _stbi__err(53953) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 62:
  {
   HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] = 4;
   HEAP32[i27 >> 2] = 1;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 64:
  {
   i31 = _stbi__err(53969) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 66:
  {
   i31 = _stbi__err(53986) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 71:
  {
   i31 = _stbi__err(53999) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 73:
  {
   i31 = _stbi__err(53986) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 82:
  {
   i31 = _stbi__err(53925) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 84:
  {
   i31 = _stbi__err(54024) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 86:
  {
   HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] = HEAPU8[i23 >> 0];
   HEAP32[i27 >> 2] = 1;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 88:
  {
   HEAP32[i27 >> 2] = 0;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 96:
  {
   i31 = _stbi__err(53511) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 99:
  {
   i31 = _stbi__err(54032) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 101:
  {
   if (HEAP32[i10 >> 2] | 0) {
    i31 = _stbi__err(53925) | 0;
    HEAP32[i27 >> 2] = i31;
    i31 = HEAP32[i27 >> 2] | 0;
    STACKTOP = i32;
    return i31 | 0;
   }
   if (HEAP32[i19 >> 2] | 0) {
    HEAP32[i27 >> 2] = 1;
    i31 = HEAP32[i27 >> 2] | 0;
    STACKTOP = i32;
    return i31 | 0;
   }
   if (!(HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2] | 0)) {
    i31 = _stbi__err(54042) | 0;
    HEAP32[i27 >> 2] = i31;
    i31 = HEAP32[i27 >> 2] | 0;
    STACKTOP = i32;
    return i31 | 0;
   }
   i19 = (((Math_imul(HEAP32[HEAP32[i28 >> 2] >> 2] | 0, HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) | 0) + 7 | 0) >>> 0) / 8 | 0;
   HEAP32[i2 >> 2] = i19;
   i19 = HEAP32[i28 >> 2] | 0;
   i19 = Math_imul(Math_imul(HEAP32[i2 >> 2] | 0, HEAP32[i19 + 4 >> 2] | 0) | 0, HEAP32[i19 + 8 >> 2] | 0) | 0;
   HEAP32[i18 >> 2] = i19 + (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0);
   i19 = _stbi_zlib_decode_malloc_guesssize_headerflag(HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i18 >> 2] | 0, i18, ((HEAP32[i22 >> 2] | 0) != 0 ^ 1) & 1) | 0;
   HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] = i19;
   if (!(HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[i27 >> 2] = 0;
    i31 = HEAP32[i27 >> 2] | 0;
    STACKTOP = i32;
    return i31 | 0;
   }
   _free(HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2] | 0);
   HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2] = 0;
   if (((HEAP32[i26 >> 2] | 0) != 3 ? (HEAP32[i26 >> 2] | 0) == ((HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0) + 1 | 0) : 0) ^ 1 | (HEAP8[i23 >> 0] | 0) != 0) if (HEAPU8[i21 >> 0] | 0) i20 = 111; else {
    i19 = HEAP32[i28 >> 2] | 0;
    HEAP32[i19 + 12 >> 2] = HEAP32[i19 + 8 >> 2];
   } else i20 = 111;
   if ((i20 | 0) == 111) {
    i20 = HEAP32[i28 >> 2] | 0;
    HEAP32[i20 + 12 >> 2] = (HEAP32[i20 + 8 >> 2] | 0) + 1;
   }
   if (!(_stbi__create_png_image(HEAP32[i31 >> 2] | 0, HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i18 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0)) {
    HEAP32[i27 >> 2] = 0;
    i31 = HEAP32[i27 >> 2] | 0;
    STACKTOP = i32;
    return i31 | 0;
   }
   do if (HEAP8[i21 >> 0] | 0) {
    i1 = HEAP32[i31 >> 2] | 0;
    if ((HEAP32[(HEAP32[i31 >> 2] | 0) + 16 >> 2] | 0) == 16) {
     if (_stbi__compute_transparency16(i1, i30, HEAP32[(HEAP32[i28 >> 2] | 0) + 12 >> 2] | 0) | 0) break;
     HEAP32[i27 >> 2] = 0;
     i31 = HEAP32[i27 >> 2] | 0;
     STACKTOP = i32;
     return i31 | 0;
    } else {
     if (_stbi__compute_transparency(i1, i29, HEAP32[(HEAP32[i28 >> 2] | 0) + 12 >> 2] | 0) | 0) break;
     HEAP32[i27 >> 2] = 0;
     i31 = HEAP32[i27 >> 2] | 0;
     STACKTOP = i32;
     return i31 | 0;
    }
   } while (0);
   if ((HEAP32[i22 >> 2] | 0) != 0 & 0 != 0) if ((HEAP32[(HEAP32[i28 >> 2] | 0) + 12 >> 2] | 0) > 2) _stbi__de_iphone(HEAP32[i31 >> 2] | 0);
   if (HEAP8[i23 >> 0] | 0) {
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] = HEAPU8[i23 >> 0];
    HEAP32[(HEAP32[i28 >> 2] | 0) + 12 >> 2] = HEAPU8[i23 >> 0];
    if ((HEAP32[i26 >> 2] | 0) >= 3) HEAP32[(HEAP32[i28 >> 2] | 0) + 12 >> 2] = HEAP32[i26 >> 2];
    if (!(_stbi__expand_png_palette(HEAP32[i31 >> 2] | 0, i25, HEAP32[i24 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 12 >> 2] | 0) | 0)) {
     HEAP32[i27 >> 2] = 0;
     i31 = HEAP32[i27 >> 2] | 0;
     STACKTOP = i32;
     return i31 | 0;
    }
   } else if (HEAP8[i21 >> 0] | 0) {
    i30 = (HEAP32[i28 >> 2] | 0) + 8 | 0;
    HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
   }
   _free(HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] | 0);
   HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] = 0;
   HEAP32[i27 >> 2] = 1;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 133:
  {
   i31 = _stbi__err(53925) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 case 135:
  {
   HEAP8[26016] = (HEAP32[i6 + 4 >> 2] | 0) >>> 24;
   HEAP8[26017] = (HEAP32[i6 + 4 >> 2] | 0) >>> 16;
   HEAP8[26018] = (HEAP32[i6 + 4 >> 2] | 0) >>> 8;
   HEAP8[26019] = (HEAP32[i6 + 4 >> 2] | 0) >>> 0;
   i31 = _stbi__err(26016) | 0;
   HEAP32[i27 >> 2] = i31;
   i31 = HEAP32[i27 >> 2] | 0;
   STACKTOP = i32;
   return i31 | 0;
  }
 }
 return 0;
}

function _ma_src_read_deinterleaved__linear(i4, i2, i3, i6, i5) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, f87 = f0, f88 = f0, f89 = f0;
 i86 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592);
 i79 = i1 + 576 | 0;
 i84 = i1 + 572 | 0;
 i13 = i1 + 568 | 0;
 i60 = i1 + 564 | 0;
 i65 = i1 + 560 | 0;
 i78 = i1 + 556 | 0;
 i83 = i1 + 552 | 0;
 i12 = i1 + 548 | 0;
 i59 = i1 + 544 | 0;
 i64 = i1 + 540 | 0;
 i77 = i1 + 536 | 0;
 i82 = i1 + 532 | 0;
 i11 = i1 + 528 | 0;
 i58 = i1 + 524 | 0;
 i63 = i1 + 520 | 0;
 i76 = i1 + 516 | 0;
 i81 = i1 + 512 | 0;
 i10 = i1 + 508 | 0;
 i57 = i1 + 504 | 0;
 i62 = i1 + 500 | 0;
 i75 = i1 + 496 | 0;
 i80 = i1 + 492 | 0;
 i9 = i1 + 488 | 0;
 i56 = i1 + 484 | 0;
 i61 = i1 + 480 | 0;
 i47 = i1 + 476 | 0;
 i20 = i1 + 280 | 0;
 i7 = i1 + 472 | 0;
 i48 = i1 + 468 | 0;
 i49 = i1 + 128 | 0;
 i19 = i1 + 464 | 0;
 i39 = i1 + 460 | 0;
 i85 = i1 + 272 | 0;
 i25 = i1 + 456 | 0;
 i72 = i1 + 452 | 0;
 i73 = i1 + 448 | 0;
 i71 = i1 + 444 | 0;
 i74 = i1 + 440 | 0;
 i50 = i1;
 i28 = i1 + 436 | 0;
 i40 = i1 + 432 | 0;
 i41 = i1 + 428 | 0;
 i24 = i1 + 424 | 0;
 i21 = i1 + 420 | 0;
 i22 = i1 + 264 | 0;
 i23 = i1 + 256 | 0;
 i27 = i1 + 416 | 0;
 i67 = i1 + 412 | 0;
 i68 = i1 + 408 | 0;
 i69 = i1 + 404 | 0;
 i70 = i1 + 400 | 0;
 i66 = i1 + 396 | 0;
 i35 = i1 + 392 | 0;
 i36 = i1 + 388 | 0;
 i37 = i1 + 384 | 0;
 i38 = i1 + 380 | 0;
 i30 = i1 + 376 | 0;
 i31 = i1 + 372 | 0;
 i32 = i1 + 368 | 0;
 i33 = i1 + 364 | 0;
 i15 = i1 + 360 | 0;
 i16 = i1 + 356 | 0;
 i17 = i1 + 352 | 0;
 i18 = i1 + 348 | 0;
 i52 = i1 + 344 | 0;
 i53 = i1 + 340 | 0;
 i54 = i1 + 336 | 0;
 i55 = i1 + 332 | 0;
 i43 = i1 + 328 | 0;
 i44 = i1 + 324 | 0;
 i45 = i1 + 320 | 0;
 i46 = i1 + 316 | 0;
 i34 = i1 + 312 | 0;
 i29 = i1 + 308 | 0;
 i14 = i1 + 304 | 0;
 i51 = i1 + 300 | 0;
 i42 = i1 + 296 | 0;
 i26 = i1 + 292 | 0;
 i8 = i1 + 288 | 0;
 HEAP32[i47 >> 2] = i4;
 i4 = i20;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i48 >> 2] = i5;
 if (!(HEAP32[i47 >> 2] | 0)) ___assert_fail(44155, 36381, 31174, 44335);
 i6 = i20;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 if (!(i5 >>> 0 > 0 | (i5 | 0) == 0 & (HEAP32[i6 >> 2] | 0) >>> 0 > 0)) ___assert_fail(36454, 36381, 31175, 44335);
 if (!(HEAP32[i7 >> 2] | 0)) ___assert_fail(44206, 36381, 31176, 44335);
 _memcpy(i49 | 0, HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i47 >> 2] | 0) + 42048 + 8 >> 2] << 2 | 0) | 0;
 f87 = Math_fround((HEAP32[(HEAP32[i47 >> 2] | 0) + 42048 >> 2] | 0) >>> 0);
 f87 = Math_fround(f87 / Math_fround((HEAP32[(HEAP32[i47 >> 2] | 0) + 42048 + 4 >> 2] | 0) >>> 0));
 HEAPF32[i19 >> 2] = f87;
 HEAP32[i39 >> 2] = 256;
 i7 = i85;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 L10 : while (1) {
  i6 = i85;
  i4 = HEAP32[i6 + 4 >> 2] | 0;
  i7 = i20;
  i5 = HEAP32[i7 + 4 >> 2] | 0;
  if (!(i4 >>> 0 < i5 >>> 0 ? 1 : (i4 | 0) == (i5 | 0) ? (HEAP32[i6 >> 2] | 0) >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0 : 0)) {
   i1 = 45;
   break;
  }
  i4 = i20;
  i5 = i85;
  i5 = _i64Subtract(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0) | 0;
  i4 = getTempRet0() | 0;
  i6 = i22;
  HEAP32[i6 >> 2] = i5;
  HEAP32[i6 + 4 >> 2] = i4;
  i6 = i22;
  i4 = HEAP32[i6 >> 2] | 0;
  i6 = HEAP32[i6 + 4 >> 2] | 0;
  i5 = i23;
  HEAP32[i5 >> 2] = i4;
  HEAP32[i5 + 4 >> 2] = i6;
  i5 = i23;
  i7 = HEAP32[i5 + 4 >> 2] | 0;
  i5 = i7 >>> 0 > 0 | (i7 | 0) == 0 & (HEAP32[i5 >> 2] | 0) >>> 0 > 16384;
  i7 = i23;
  HEAP32[i7 >> 2] = i5 ? 16384 : i4;
  HEAP32[i7 + 4 >> 2] = i5 ? 0 : i6;
  f88 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + 32768 >> 2]);
  HEAPF32[i72 >> 2] = f88;
  f88 = Math_fround(HEAPF32[i72 >> 2]);
  i7 = i23;
  f87 = Math_fround(+((HEAP32[i7 >> 2] | 0) >>> 0) + 4294967296.0 * +(HEAP32[i7 + 4 >> 2] | 0));
  f87 = Math_fround(f88 + Math_fround(f87 * Math_fround(HEAPF32[i19 >> 2])));
  HEAPF32[i73 >> 2] = f87;
  i7 = (~~Math_fround(HEAPF32[i73 >> 2]) >>> 0) + 1 + 1 | 0;
  HEAP32[i24 >> 2] = i7;
  if ((HEAP32[i24 >> 2] | 0) >>> 0 >= (HEAP32[i39 >> 2] | 0) >>> 0) HEAP32[i24 >> 2] = HEAP32[i39 >> 2];
  HEAP32[i25 >> 2] = 0;
  while (1) {
   if ((HEAP32[i25 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i47 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break;
   i7 = HEAP32[i47 >> 2] | 0;
   HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] = (i7 | 0) + (HEAP32[i25 >> 2] << 10) + (HEAP32[i7 + 32772 >> 2] << 2);
   HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
  }
  HEAP32[i21 >> 2] = 0;
  if ((HEAP32[i24 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[i47 >> 2] | 0) + 32772 >> 2] | 0) >>> 0) {
   i7 = HEAP32[i47 >> 2] | 0;
   i7 = FUNCTION_TABLE_iiiii[HEAP32[i7 + 42048 + 20 >> 2] & 15](i7 | 0, (HEAP32[i24 >> 2] | 0) - (HEAP32[i7 + 32772 >> 2] | 0) | 0, i50, HEAP32[i48 >> 2] | 0) | 0;
   HEAP32[i21 >> 2] = i7;
  }
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[(HEAP32[i47 >> 2] | 0) + 32772 >> 2] | 0);
  if ((HEAP32[i21 >> 2] | 0) >>> 0 < 2) {
   i1 = 45;
   break;
  }
  HEAP32[i25 >> 2] = 0;
  while (1) {
   if ((HEAP32[i25 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i47 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break;
   HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] = (HEAP32[i47 >> 2] | 0) + (HEAP32[i25 >> 2] << 10);
   HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
  }
  f88 = Math_fround((HEAP32[i21 >> 2] | 0) >>> 0);
  f88 = Math_fround(Math_fround(f88 - Math_fround(HEAPF32[i72 >> 2])) - Math_fround(1.0));
  HEAPF32[i71 >> 2] = f88;
  f88 = Math_fround(HEAPF32[i71 >> 2]);
  i7 = ~~Math_fround(f88 / Math_fround(HEAPF32[i19 >> 2])) >>> 0;
  HEAP32[i40 >> 2] = i7;
  HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) == 0 ? 1 : i7;
  i7 = i23;
  i6 = HEAP32[i7 + 4 >> 2] | 0;
  if (0 > i6 >>> 0 ? 1 : 0 == (i6 | 0) ? (HEAP32[i40 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0 : 0) HEAP32[i40 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i41 >> 2] = ((HEAP32[i40 >> 2] | 0) >>> 0) / 4 | 0;
  HEAP32[i25 >> 2] = 0;
  while (1) {
   if ((HEAP32[i25 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i47 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break;
   f88 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + 32768 >> 2]);
   f88 = Math_fround(f88 + Math_fround(Math_fround(HEAPF32[i19 >> 2]) * Math_fround(0.0)));
   HEAPF32[i67 >> 2] = f88;
   f88 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + 32768 >> 2]);
   f88 = Math_fround(f88 + Math_fround(Math_fround(HEAPF32[i19 >> 2]) * Math_fround(1.0)));
   HEAPF32[i68 >> 2] = f88;
   f88 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + 32768 >> 2]);
   f88 = Math_fround(f88 + Math_fround(Math_fround(HEAPF32[i19 >> 2]) * Math_fround(2.0)));
   HEAPF32[i69 >> 2] = f88;
   f88 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + 32768 >> 2]);
   f88 = Math_fround(f88 + Math_fround(Math_fround(HEAPF32[i19 >> 2]) * Math_fround(3.0)));
   HEAPF32[i70 >> 2] = f88;
   HEAP32[i27 >> 2] = 0;
   while (1) {
    if ((HEAP32[i27 >> 2] | 0) >>> 0 >= (HEAP32[i41 >> 2] | 0) >>> 0) break;
    f88 = Math_fround(+Math_floor(+(+Math_fround(HEAPF32[i67 >> 2]))));
    HEAPF32[i35 >> 2] = f88;
    f88 = Math_fround(+Math_floor(+(+Math_fround(HEAPF32[i68 >> 2]))));
    HEAPF32[i36 >> 2] = f88;
    f88 = Math_fround(+Math_floor(+(+Math_fround(HEAPF32[i69 >> 2]))));
    HEAPF32[i37 >> 2] = f88;
    f88 = Math_fround(+Math_floor(+(+Math_fround(HEAPF32[i70 >> 2]))));
    HEAPF32[i38 >> 2] = f88;
    f88 = Math_fround(Math_fround(HEAPF32[i35 >> 2]) + Math_fround(1.0));
    HEAPF32[i30 >> 2] = f88;
    f88 = Math_fround(Math_fround(HEAPF32[i36 >> 2]) + Math_fround(1.0));
    HEAPF32[i31 >> 2] = f88;
    f88 = Math_fround(Math_fround(HEAPF32[i37 >> 2]) + Math_fround(1.0));
    HEAPF32[i32 >> 2] = f88;
    f88 = Math_fround(Math_fround(HEAPF32[i38 >> 2]) + Math_fround(1.0));
    HEAPF32[i33 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i67 >> 2]);
    f88 = Math_fround(f88 - Math_fround(HEAPF32[i35 >> 2]));
    HEAPF32[i15 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i68 >> 2]);
    f88 = Math_fround(f88 - Math_fround(HEAPF32[i36 >> 2]));
    HEAPF32[i16 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i69 >> 2]);
    f88 = Math_fround(f88 - Math_fround(HEAPF32[i37 >> 2]));
    HEAPF32[i17 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i70 >> 2]);
    f88 = Math_fround(f88 - Math_fround(HEAPF32[i38 >> 2]));
    HEAPF32[i18 >> 2] = f88;
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i35 >> 2]) >>> 0 << 2) | 0;
    f88 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i52 >> 2] = f88;
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i36 >> 2]) >>> 0 << 2) | 0;
    f88 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i53 >> 2] = f88;
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i37 >> 2]) >>> 0 << 2) | 0;
    f88 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i54 >> 2] = f88;
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i38 >> 2]) >>> 0 << 2) | 0;
    f88 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i55 >> 2] = f88;
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i30 >> 2]) >>> 0 << 2) | 0;
    f88 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i43 >> 2] = f88;
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i31 >> 2]) >>> 0 << 2) | 0;
    f88 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i44 >> 2] = f88;
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i32 >> 2]) >>> 0 << 2) | 0;
    f88 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i45 >> 2] = f88;
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i33 >> 2]) >>> 0 << 2) | 0;
    f88 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i46 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i52 >> 2]);
    f87 = Math_fround(HEAPF32[i43 >> 2]);
    f89 = Math_fround(HEAPF32[i15 >> 2]);
    HEAPF32[i75 >> 2] = f88;
    HEAPF32[i80 >> 2] = f87;
    HEAPF32[i9 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i80 >> 2]);
    f89 = Math_fround(f89 - Math_fround(HEAPF32[i75 >> 2]));
    HEAPF32[i56 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i56 >> 2]);
    f89 = Math_fround(f89 * Math_fround(HEAPF32[i9 >> 2]));
    HEAPF32[i61 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i75 >> 2]);
    f89 = Math_fround(f89 + Math_fround(HEAPF32[i61 >> 2]));
    HEAPF32[(HEAP32[i49 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] << 2) + 0 << 2) >> 2] = f89;
    f89 = Math_fround(HEAPF32[i53 >> 2]);
    f87 = Math_fround(HEAPF32[i44 >> 2]);
    f88 = Math_fround(HEAPF32[i16 >> 2]);
    HEAPF32[i79 >> 2] = f89;
    HEAPF32[i84 >> 2] = f87;
    HEAPF32[i13 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i84 >> 2]);
    f88 = Math_fround(f88 - Math_fround(HEAPF32[i79 >> 2]));
    HEAPF32[i60 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i60 >> 2]);
    f88 = Math_fround(f88 * Math_fround(HEAPF32[i13 >> 2]));
    HEAPF32[i65 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i79 >> 2]);
    f88 = Math_fround(f88 + Math_fround(HEAPF32[i65 >> 2]));
    HEAPF32[(HEAP32[i49 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] << 2) + 1 << 2) >> 2] = f88;
    f88 = Math_fround(HEAPF32[i54 >> 2]);
    f87 = Math_fround(HEAPF32[i45 >> 2]);
    f89 = Math_fround(HEAPF32[i17 >> 2]);
    HEAPF32[i78 >> 2] = f88;
    HEAPF32[i83 >> 2] = f87;
    HEAPF32[i12 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i83 >> 2]);
    f89 = Math_fround(f89 - Math_fround(HEAPF32[i78 >> 2]));
    HEAPF32[i59 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i59 >> 2]);
    f89 = Math_fround(f89 * Math_fround(HEAPF32[i12 >> 2]));
    HEAPF32[i64 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i78 >> 2]);
    f89 = Math_fround(f89 + Math_fround(HEAPF32[i64 >> 2]));
    HEAPF32[(HEAP32[i49 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] << 2) + 2 << 2) >> 2] = f89;
    f89 = Math_fround(HEAPF32[i55 >> 2]);
    f87 = Math_fround(HEAPF32[i46 >> 2]);
    f88 = Math_fround(HEAPF32[i18 >> 2]);
    HEAPF32[i77 >> 2] = f89;
    HEAPF32[i82 >> 2] = f87;
    HEAPF32[i11 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i82 >> 2]);
    f88 = Math_fround(f88 - Math_fround(HEAPF32[i77 >> 2]));
    HEAPF32[i58 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i58 >> 2]);
    f88 = Math_fround(f88 * Math_fround(HEAPF32[i11 >> 2]));
    HEAPF32[i63 >> 2] = f88;
    f88 = Math_fround(HEAPF32[i77 >> 2]);
    f88 = Math_fround(f88 + Math_fround(HEAPF32[i63 >> 2]));
    HEAPF32[(HEAP32[i49 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] << 2) + 3 << 2) >> 2] = f88;
    f88 = Math_fround(Math_fround(HEAPF32[i19 >> 2]) * Math_fround(4.0));
    f88 = Math_fround(Math_fround(HEAPF32[i67 >> 2]) + f88);
    HEAPF32[i67 >> 2] = f88;
    f88 = Math_fround(Math_fround(HEAPF32[i19 >> 2]) * Math_fround(4.0));
    f88 = Math_fround(Math_fround(HEAPF32[i68 >> 2]) + f88);
    HEAPF32[i68 >> 2] = f88;
    f88 = Math_fround(Math_fround(HEAPF32[i19 >> 2]) * Math_fround(4.0));
    f88 = Math_fround(Math_fround(HEAPF32[i69 >> 2]) + f88);
    HEAPF32[i69 >> 2] = f88;
    f88 = Math_fround(Math_fround(HEAPF32[i19 >> 2]) * Math_fround(4.0));
    f88 = Math_fround(Math_fround(HEAPF32[i70 >> 2]) + f88);
    HEAPF32[i70 >> 2] = f88;
    HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
   }
   f88 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + 32768 >> 2]);
   f89 = Math_fround(HEAPF32[i19 >> 2]);
   f89 = Math_fround(f88 + Math_fround(Math_fround(f89 * Math_fround((HEAP32[i41 >> 2] | 0) >>> 0)) * Math_fround(4.0)));
   HEAPF32[i66 >> 2] = f89;
   HEAP32[i27 >> 2] = HEAP32[i41 >> 2] << 2;
   while (1) {
    if ((HEAP32[i27 >> 2] | 0) >>> 0 >= (HEAP32[i40 >> 2] | 0) >>> 0) break;
    f89 = Math_fround(+Math_floor(+(+Math_fround(HEAPF32[i66 >> 2]))));
    HEAPF32[i34 >> 2] = f89;
    f89 = Math_fround(Math_fround(HEAPF32[i34 >> 2]) + Math_fround(1.0));
    HEAPF32[i29 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i66 >> 2]);
    f89 = Math_fround(f89 - Math_fround(HEAPF32[i34 >> 2]));
    HEAPF32[i14 >> 2] = f89;
    if (!(Math_fround(HEAPF32[i34 >> 2]) < Math_fround(256.0))) {
     i1 = 30;
     break L10;
    }
    if (!(Math_fround(HEAPF32[i29 >> 2]) < Math_fround(256.0))) {
     i1 = 32;
     break L10;
    }
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i34 >> 2]) >>> 0 << 2) | 0;
    f87 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i51 >> 2] = f87;
    i7 = (HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (~~Math_fround(HEAPF32[i29 >> 2]) >>> 0 << 2) | 0;
    f87 = Math_fround(HEAPF32[i7 >> 2]);
    HEAPF32[i42 >> 2] = f87;
    f87 = Math_fround(HEAPF32[i51 >> 2]);
    f88 = Math_fround(HEAPF32[i42 >> 2]);
    f89 = Math_fround(HEAPF32[i14 >> 2]);
    HEAPF32[i76 >> 2] = f87;
    HEAPF32[i81 >> 2] = f88;
    HEAPF32[i10 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i81 >> 2]);
    f89 = Math_fround(f89 - Math_fround(HEAPF32[i76 >> 2]));
    HEAPF32[i57 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i57 >> 2]);
    f89 = Math_fround(f89 * Math_fround(HEAPF32[i10 >> 2]));
    HEAPF32[i62 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i76 >> 2]);
    f89 = Math_fround(f89 + Math_fround(HEAPF32[i62 >> 2]));
    HEAPF32[(HEAP32[i49 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (HEAP32[i27 >> 2] << 2) >> 2] = f89;
    f89 = Math_fround(HEAPF32[i19 >> 2]);
    f89 = Math_fround(Math_fround(HEAPF32[i66 >> 2]) + f89);
    HEAPF32[i66 >> 2] = f89;
    HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
   }
   i7 = i49 + (HEAP32[i25 >> 2] << 2) | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i40 >> 2] << 2);
   HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
  }
  i5 = i85;
  i5 = _i64Add(HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i40 >> 2] | 0, 0) | 0;
  i6 = getTempRet0() | 0;
  i7 = i85;
  HEAP32[i7 >> 2] = i5;
  HEAP32[i7 + 4 >> 2] = i6;
  f88 = Math_fround(HEAPF32[(HEAP32[i47 >> 2] | 0) + 32768 >> 2]);
  f89 = Math_fround((HEAP32[i40 >> 2] | 0) >>> 0);
  f89 = Math_fround(f88 + Math_fround(f89 * Math_fround(HEAPF32[i19 >> 2])));
  HEAPF32[i74 >> 2] = f89;
  f89 = Math_fround(HEAPF32[i74 >> 2]);
  HEAPF32[(HEAP32[i47 >> 2] | 0) + 32768 >> 2] = f89;
  f89 = Math_fround(HEAPF32[i74 >> 2]);
  if (!(f89 <= Math_fround(((HEAP32[i21 >> 2] | 0) + 1 | 0) >>> 0))) {
   i1 = 36;
   break;
  }
  i7 = ~~+Math_floor(+(+Math_fround(HEAPF32[i74 >> 2]))) >>> 0;
  HEAP32[i28 >> 2] = i7;
  HEAP32[(HEAP32[i47 >> 2] | 0) + 32772 >> 2] = (HEAP32[i21 >> 2] | 0) - (HEAP32[i28 >> 2] | 0);
  f89 = Math_fround(HEAPF32[i74 >> 2]);
  f89 = Math_fround(f89 - Math_fround((HEAP32[i28 >> 2] | 0) >>> 0));
  HEAPF32[(HEAP32[i47 >> 2] | 0) + 32768 >> 2] = f89;
  HEAP32[i25 >> 2] = 0;
  while (1) {
   if ((HEAP32[i25 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i47 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break;
   HEAP32[i26 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i25 >> 2] | 0;
    if ((HEAP32[i26 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i47 >> 2] | 0) + 32772 >> 2] | 0) >>> 0) break;
    f89 = Math_fround(HEAPF32[(HEAP32[i50 + (i1 << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) - (HEAP32[(HEAP32[i47 >> 2] | 0) + 32772 >> 2] | 0) + (HEAP32[i26 >> 2] | 0) << 2) >> 2]);
    HEAPF32[i8 >> 2] = f89;
    f89 = Math_fround(HEAPF32[i8 >> 2]);
    HEAPF32[(HEAP32[i50 + (HEAP32[i25 >> 2] << 2) >> 2] | 0) + (HEAP32[i26 >> 2] << 2) >> 2] = f89;
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
   }
   HEAP32[i25 >> 2] = i1 + 1;
  }
  if ((HEAP32[i21 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0) {
   i1 = 45;
   break;
  }
 }
 if ((i1 | 0) == 30) ___assert_fail(44369, 36381, 31302, 44335); else if ((i1 | 0) == 32) ___assert_fail(44464, 36381, 31303, 44335); else if ((i1 | 0) == 36) ___assert_fail(44559, 36381, 31323, 44335); else if ((i1 | 0) == 45) {
  i84 = i85;
  i85 = HEAP32[i84 >> 2] | 0;
  setTempRet0(HEAP32[i84 + 4 >> 2] | 0);
  STACKTOP = i86;
  return i85 | 0;
 }
 return 0;
}

function _stbtt__fill_active_edges_new(i5, i6, i4, i3, f1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 f1 = Math_fround(f1);
 var i2 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, f41 = f0, f42 = f0, f43 = f0;
 i39 = 0;
 i40 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i13 = i2 + 128 | 0;
 i14 = i2 + 124 | 0;
 i12 = i2 + 120 | 0;
 i10 = i2 + 116 | 0;
 i38 = i2 + 112 | 0;
 i36 = i2 + 108 | 0;
 i21 = i2 + 104 | 0;
 i22 = i2 + 100 | 0;
 i8 = i2 + 96 | 0;
 i32 = i2 + 92 | 0;
 i31 = i2 + 88 | 0;
 i30 = i2 + 84 | 0;
 i17 = i2 + 80 | 0;
 i18 = i2 + 76 | 0;
 i9 = i2 + 72 | 0;
 i11 = i2 + 68 | 0;
 i20 = i2 + 64 | 0;
 i29 = i2 + 60 | 0;
 i23 = i2 + 56 | 0;
 i26 = i2 + 52 | 0;
 i37 = i2 + 48 | 0;
 i16 = i2 + 44 | 0;
 i15 = i2 + 40 | 0;
 i7 = i2 + 36 | 0;
 i19 = i2 + 32 | 0;
 i25 = i2 + 28 | 0;
 i33 = i2 + 24 | 0;
 i24 = i2 + 20 | 0;
 i27 = i2 + 16 | 0;
 i28 = i2 + 12 | 0;
 i35 = i2 + 8 | 0;
 i34 = i2 + 4 | 0;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i10 >> 2] = i3;
 HEAPF32[i38 >> 2] = f1;
 f1 = Math_fround(Math_fround(HEAPF32[i38 >> 2]) + Math_fround(1.0));
 HEAPF32[i36 >> 2] = f1;
 L1 : while (1) {
  if (!(HEAP32[i10 >> 2] | 0)) {
   i39 = 58;
   break;
  }
  f1 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2]);
  if (!(f1 >= Math_fround(HEAPF32[i38 >> 2]))) {
   i39 = 4;
   break;
  }
  i6 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 8 >> 2]) == Math_fround(0.0);
  f1 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 4 >> 2]);
  L5 : do if (i6) {
   HEAPF32[i21 >> 2] = f1;
   f1 = Math_fround(HEAPF32[i21 >> 2]);
   if (f1 < Math_fround(HEAP32[i12 >> 2] | 0)) if (Math_fround(HEAPF32[i21 >> 2]) >= Math_fround(0.0)) {
    i6 = ~~Math_fround(HEAPF32[i21 >> 2]);
    f1 = Math_fround(HEAPF32[i21 >> 2]);
    f41 = Math_fround(HEAPF32[i38 >> 2]);
    f42 = Math_fround(HEAPF32[i21 >> 2]);
    _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, i6, HEAP32[i10 >> 2] | 0, f1, f41, f42, Math_fround(HEAPF32[i36 >> 2]));
    i6 = ~~Math_fround(HEAPF32[i21 >> 2]) + 1 | 0;
    f42 = Math_fround(HEAPF32[i21 >> 2]);
    f41 = Math_fround(HEAPF32[i38 >> 2]);
    f1 = Math_fround(HEAPF32[i21 >> 2]);
    _stbtt__handle_clipped_edge((HEAP32[i14 >> 2] | 0) + -4 | 0, i6, HEAP32[i10 >> 2] | 0, f42, f41, f1, Math_fround(HEAPF32[i36 >> 2]));
    break;
   } else {
    f1 = Math_fround(HEAPF32[i21 >> 2]);
    f41 = Math_fround(HEAPF32[i38 >> 2]);
    f42 = Math_fround(HEAPF32[i21 >> 2]);
    _stbtt__handle_clipped_edge((HEAP32[i14 >> 2] | 0) + -4 | 0, 0, HEAP32[i10 >> 2] | 0, f1, f41, f42, Math_fround(HEAPF32[i36 >> 2]));
    break;
   }
  } else {
   HEAPF32[i22 >> 2] = f1;
   f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 8 >> 2]);
   HEAPF32[i8 >> 2] = f42;
   f42 = Math_fround(HEAPF32[i22 >> 2]);
   f42 = Math_fround(f42 + Math_fround(HEAPF32[i8 >> 2]));
   HEAPF32[i32 >> 2] = f42;
   f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 12 >> 2]);
   HEAPF32[i9 >> 2] = f42;
   f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2]);
   if (!(f42 <= Math_fround(HEAPF32[i36 >> 2]))) {
    i39 = 12;
    break L1;
   }
   f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2]);
   if (!(f42 >= Math_fround(HEAPF32[i38 >> 2]))) {
    i39 = 12;
    break L1;
   }
   f1 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2]);
   i6 = f1 > Math_fround(HEAPF32[i38 >> 2]);
   f1 = Math_fround(HEAPF32[i22 >> 2]);
   if (i6) {
    f41 = Math_fround(HEAPF32[i8 >> 2]);
    f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2]);
    f42 = Math_fround(f1 + Math_fround(f41 * Math_fround(f42 - Math_fround(HEAPF32[i38 >> 2]))));
    HEAPF32[i31 >> 2] = f42;
    f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2]);
    HEAPF32[i17 >> 2] = f42;
   } else {
    HEAPF32[i31 >> 2] = f1;
    f42 = Math_fround(HEAPF32[i38 >> 2]);
    HEAPF32[i17 >> 2] = f42;
   }
   f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2]);
   if (f42 < Math_fround(HEAPF32[i36 >> 2])) {
    f1 = Math_fround(HEAPF32[i22 >> 2]);
    f41 = Math_fround(HEAPF32[i8 >> 2]);
    f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2]);
    f42 = Math_fround(f1 + Math_fround(f41 * Math_fround(f42 - Math_fround(HEAPF32[i38 >> 2]))));
    HEAPF32[i30 >> 2] = f42;
    f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2]);
    HEAPF32[i18 >> 2] = f42;
   } else {
    f42 = Math_fround(HEAPF32[i32 >> 2]);
    HEAPF32[i30 >> 2] = f42;
    f42 = Math_fround(HEAPF32[i36 >> 2]);
    HEAPF32[i18 >> 2] = f42;
   }
   i6 = Math_fround(HEAPF32[i31 >> 2]) >= Math_fround(0.0);
   if (i6 & Math_fround(HEAPF32[i30 >> 2]) >= Math_fround(0.0)) {
    f42 = Math_fround(HEAPF32[i31 >> 2]);
    if (f42 < Math_fround(HEAP32[i12 >> 2] | 0)) {
     f42 = Math_fround(HEAPF32[i30 >> 2]);
     if (f42 < Math_fround(HEAP32[i12 >> 2] | 0)) {
      i6 = ~~Math_fround(HEAPF32[i31 >> 2]);
      i6 = (i6 | 0) == (~~Math_fround(HEAPF32[i30 >> 2]) | 0);
      f1 = Math_fround(HEAPF32[i31 >> 2]);
      if (i6) {
       HEAP32[i20 >> 2] = ~~f1;
       f42 = Math_fround(HEAPF32[i18 >> 2]);
       f42 = Math_fround(f42 - Math_fround(HEAPF32[i17 >> 2]));
       HEAPF32[i11 >> 2] = f42;
       if ((HEAP32[i20 >> 2] | 0) < 0) {
        i39 = 25;
        break L1;
       }
       if ((HEAP32[i20 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) {
        i39 = 25;
        break L1;
       }
       f1 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 16 >> 2]);
       f41 = Math_fround(HEAPF32[i31 >> 2]);
       f41 = Math_fround(f41 - Math_fround(HEAP32[i20 >> 2] | 0));
       f42 = Math_fround(HEAPF32[i30 >> 2]);
       f42 = Math_fround(f1 * Math_fround(Math_fround(1.0) - Math_fround(Math_fround(f41 + Math_fround(f42 - Math_fround(HEAP32[i20 >> 2] | 0))) / Math_fround(2.0))));
       f42 = Math_fround(f42 * Math_fround(HEAPF32[i11 >> 2]));
       i6 = (HEAP32[i13 >> 2] | 0) + (HEAP32[i20 >> 2] << 2) | 0;
       f42 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f42);
       HEAPF32[i6 >> 2] = f42;
       f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 16 >> 2]);
       f42 = Math_fround(f42 * Math_fround(HEAPF32[i11 >> 2]));
       i6 = (HEAP32[i14 >> 2] | 0) + (HEAP32[i20 >> 2] << 2) | 0;
       f42 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f42);
       HEAPF32[i6 >> 2] = f42;
       break;
      }
      if (f1 > Math_fround(HEAPF32[i30 >> 2])) {
       f42 = Math_fround(HEAPF32[i36 >> 2]);
       f41 = Math_fround(HEAPF32[i17 >> 2]);
       f41 = Math_fround(f42 - Math_fround(f41 - Math_fround(HEAPF32[i38 >> 2])));
       HEAPF32[i17 >> 2] = f41;
       f41 = Math_fround(HEAPF32[i36 >> 2]);
       f42 = Math_fround(HEAPF32[i18 >> 2]);
       f42 = Math_fround(f41 - Math_fround(f42 - Math_fround(HEAPF32[i38 >> 2])));
       HEAPF32[i18 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i17 >> 2]);
       HEAPF32[i19 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i18 >> 2]);
       HEAPF32[i17 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i19 >> 2]);
       HEAPF32[i18 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i30 >> 2]);
       HEAPF32[i19 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i31 >> 2]);
       HEAPF32[i30 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i19 >> 2]);
       HEAPF32[i31 >> 2] = f42;
       f42 = Math_fround(-Math_fround(HEAPF32[i8 >> 2]));
       HEAPF32[i8 >> 2] = f42;
       f42 = Math_fround(-Math_fround(HEAPF32[i9 >> 2]));
       HEAPF32[i9 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i22 >> 2]);
       HEAPF32[i19 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i32 >> 2]);
       HEAPF32[i22 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i19 >> 2]);
       HEAPF32[i32 >> 2] = f42;
      }
      i6 = ~~Math_fround(HEAPF32[i31 >> 2]);
      HEAP32[i23 >> 2] = i6;
      i6 = ~~Math_fround(HEAPF32[i30 >> 2]);
      HEAP32[i26 >> 2] = i6;
      f42 = Math_fround((HEAP32[i23 >> 2] | 0) + 1 | 0);
      f42 = Math_fround(f42 - Math_fround(HEAPF32[i22 >> 2]));
      f42 = Math_fround(f42 * Math_fround(HEAPF32[i9 >> 2]));
      f42 = Math_fround(f42 + Math_fround(HEAPF32[i38 >> 2]));
      HEAPF32[i37 >> 2] = f42;
      f42 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 16 >> 2]);
      HEAPF32[i15 >> 2] = f42;
      f42 = Math_fround(HEAPF32[i15 >> 2]);
      f41 = Math_fround(HEAPF32[i37 >> 2]);
      f41 = Math_fround(f42 * Math_fround(f41 - Math_fround(HEAPF32[i17 >> 2])));
      HEAPF32[i7 >> 2] = f41;
      f41 = Math_fround(HEAPF32[i7 >> 2]);
      f42 = Math_fround(HEAPF32[i31 >> 2]);
      f42 = Math_fround(f42 - Math_fround(HEAP32[i23 >> 2] | 0));
      i6 = HEAP32[i23 >> 2] | 0;
      f42 = Math_fround(f41 * Math_fround(Math_fround(1.0) - Math_fround(Math_fround(f42 + Math_fround(i6 + 1 - i6 | 0)) / Math_fround(2.0))));
      i6 = (HEAP32[i13 >> 2] | 0) + (HEAP32[i23 >> 2] << 2) | 0;
      f42 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f42);
      HEAPF32[i6 >> 2] = f42;
      f42 = Math_fround(HEAPF32[i15 >> 2]);
      f42 = Math_fround(f42 * Math_fround(HEAPF32[i9 >> 2]));
      HEAPF32[i16 >> 2] = f42;
      HEAP32[i29 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
      while (1) {
       if ((HEAP32[i29 >> 2] | 0) >= (HEAP32[i26 >> 2] | 0)) break;
       f42 = Math_fround(HEAPF32[i7 >> 2]);
       f42 = Math_fround(f42 + Math_fround(Math_fround(HEAPF32[i16 >> 2]) / Math_fround(2.0)));
       i6 = (HEAP32[i13 >> 2] | 0) + (HEAP32[i29 >> 2] << 2) | 0;
       f42 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f42);
       HEAPF32[i6 >> 2] = f42;
       f42 = Math_fround(HEAPF32[i16 >> 2]);
       f42 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f42);
       HEAPF32[i7 >> 2] = f42;
       HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
      }
      f42 = Math_fround(HEAPF32[i9 >> 2]);
      f42 = Math_fround(f42 * Math_fround((HEAP32[i26 >> 2] | 0) - ((HEAP32[i23 >> 2] | 0) + 1) | 0));
      f42 = Math_fround(Math_fround(HEAPF32[i37 >> 2]) + f42);
      HEAPF32[i37 >> 2] = f42;
      if (!(+Math_abs(+(+Math_fround(HEAPF32[i7 >> 2]))) <= 1.0099999904632568)) {
       i39 = 33;
       break L1;
      }
      f1 = Math_fround(HEAPF32[i7 >> 2]);
      f43 = Math_fround(HEAPF32[i15 >> 2]);
      i6 = HEAP32[i26 >> 2] | 0;
      f41 = Math_fround(i6 - i6 | 0);
      f42 = Math_fround(HEAPF32[i30 >> 2]);
      f42 = Math_fround(f43 * Math_fround(Math_fround(1.0) - Math_fround(Math_fround(f41 + Math_fround(f42 - Math_fround(HEAP32[i26 >> 2] | 0))) / Math_fround(2.0))));
      f41 = Math_fround(HEAPF32[i18 >> 2]);
      f41 = Math_fround(f1 + Math_fround(f42 * Math_fround(f41 - Math_fround(HEAPF32[i37 >> 2]))));
      i6 = (HEAP32[i13 >> 2] | 0) + (HEAP32[i26 >> 2] << 2) | 0;
      f41 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f41);
      HEAPF32[i6 >> 2] = f41;
      f41 = Math_fround(HEAPF32[i15 >> 2]);
      f42 = Math_fround(HEAPF32[i18 >> 2]);
      f42 = Math_fround(f41 * Math_fround(f42 - Math_fround(HEAPF32[i17 >> 2])));
      i6 = (HEAP32[i14 >> 2] | 0) + (HEAP32[i26 >> 2] << 2) | 0;
      f42 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f42);
      HEAPF32[i6 >> 2] = f42;
      break;
     }
    }
   }
   HEAP32[i25 >> 2] = 0;
   while (1) {
    if ((HEAP32[i25 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break L5;
    f43 = Math_fround(HEAPF32[i38 >> 2]);
    HEAPF32[i33 >> 2] = f43;
    f43 = Math_fround(HEAP32[i25 >> 2] | 0);
    HEAPF32[i24 >> 2] = f43;
    f43 = Math_fround((HEAP32[i25 >> 2] | 0) + 1 | 0);
    HEAPF32[i27 >> 2] = f43;
    f43 = Math_fround(HEAPF32[i32 >> 2]);
    HEAPF32[i28 >> 2] = f43;
    f43 = Math_fround(HEAPF32[i36 >> 2]);
    HEAPF32[i35 >> 2] = f43;
    f43 = Math_fround(HEAP32[i25 >> 2] | 0);
    f43 = Math_fround(f43 - Math_fround(HEAPF32[i22 >> 2]));
    f43 = Math_fround(f43 / Math_fround(HEAPF32[i8 >> 2]));
    f43 = Math_fround(f43 + Math_fround(HEAPF32[i38 >> 2]));
    HEAPF32[i34 >> 2] = f43;
    f43 = Math_fround((HEAP32[i25 >> 2] | 0) + 1 | 0);
    f43 = Math_fround(f43 - Math_fround(HEAPF32[i22 >> 2]));
    f43 = Math_fround(f43 / Math_fround(HEAPF32[i8 >> 2]));
    f43 = Math_fround(f43 + Math_fround(HEAPF32[i38 >> 2]));
    HEAPF32[i2 >> 2] = f43;
    f43 = Math_fround(HEAPF32[i22 >> 2]);
    if (f43 < Math_fround(HEAPF32[i24 >> 2])) {
     f43 = Math_fround(HEAPF32[i28 >> 2]);
     if (f43 > Math_fround(HEAPF32[i27 >> 2])) {
      f41 = Math_fround(HEAPF32[i22 >> 2]);
      f42 = Math_fround(HEAPF32[i33 >> 2]);
      f43 = Math_fround(HEAPF32[i24 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f41, f42, f43, Math_fround(HEAPF32[i34 >> 2]));
      f43 = Math_fround(HEAPF32[i24 >> 2]);
      f42 = Math_fround(HEAPF32[i34 >> 2]);
      f41 = Math_fround(HEAPF32[i27 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f43, f42, f41, Math_fround(HEAPF32[i2 >> 2]));
      f41 = Math_fround(HEAPF32[i27 >> 2]);
      f42 = Math_fround(HEAPF32[i2 >> 2]);
      f43 = Math_fround(HEAPF32[i28 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f41, f42, f43, Math_fround(HEAPF32[i35 >> 2]));
     } else i39 = 40;
    } else i39 = 40;
    L46 : do if ((i39 | 0) == 40) {
     i39 = 0;
     f43 = Math_fround(HEAPF32[i28 >> 2]);
     if (f43 < Math_fround(HEAPF32[i24 >> 2])) {
      f43 = Math_fround(HEAPF32[i22 >> 2]);
      if (f43 > Math_fround(HEAPF32[i27 >> 2])) {
       f41 = Math_fround(HEAPF32[i22 >> 2]);
       f42 = Math_fround(HEAPF32[i33 >> 2]);
       f43 = Math_fround(HEAPF32[i27 >> 2]);
       _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f41, f42, f43, Math_fround(HEAPF32[i2 >> 2]));
       f43 = Math_fround(HEAPF32[i27 >> 2]);
       f42 = Math_fround(HEAPF32[i2 >> 2]);
       f41 = Math_fround(HEAPF32[i24 >> 2]);
       _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f43, f42, f41, Math_fround(HEAPF32[i34 >> 2]));
       f41 = Math_fround(HEAPF32[i24 >> 2]);
       f42 = Math_fround(HEAPF32[i34 >> 2]);
       f43 = Math_fround(HEAPF32[i28 >> 2]);
       _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f41, f42, f43, Math_fround(HEAPF32[i35 >> 2]));
       break;
      }
     }
     f43 = Math_fround(HEAPF32[i22 >> 2]);
     if (f43 < Math_fround(HEAPF32[i24 >> 2])) {
      f43 = Math_fround(HEAPF32[i28 >> 2]);
      if (f43 > Math_fround(HEAPF32[i24 >> 2])) {
       f43 = Math_fround(HEAPF32[i22 >> 2]);
       f42 = Math_fround(HEAPF32[i33 >> 2]);
       f41 = Math_fround(HEAPF32[i24 >> 2]);
       _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f43, f42, f41, Math_fround(HEAPF32[i34 >> 2]));
       f41 = Math_fround(HEAPF32[i24 >> 2]);
       f42 = Math_fround(HEAPF32[i34 >> 2]);
       f43 = Math_fround(HEAPF32[i28 >> 2]);
       _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f41, f42, f43, Math_fround(HEAPF32[i35 >> 2]));
       break;
      }
     }
     f43 = Math_fround(HEAPF32[i28 >> 2]);
     if (f43 < Math_fround(HEAPF32[i24 >> 2])) {
      f43 = Math_fround(HEAPF32[i22 >> 2]);
      if (f43 > Math_fround(HEAPF32[i24 >> 2])) {
       f43 = Math_fround(HEAPF32[i22 >> 2]);
       f42 = Math_fround(HEAPF32[i33 >> 2]);
       f41 = Math_fround(HEAPF32[i24 >> 2]);
       _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f43, f42, f41, Math_fround(HEAPF32[i34 >> 2]));
       f41 = Math_fround(HEAPF32[i24 >> 2]);
       f42 = Math_fround(HEAPF32[i34 >> 2]);
       f43 = Math_fround(HEAPF32[i28 >> 2]);
       _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f41, f42, f43, Math_fround(HEAPF32[i35 >> 2]));
       break;
      }
     }
     f43 = Math_fround(HEAPF32[i22 >> 2]);
     if (f43 < Math_fround(HEAPF32[i27 >> 2])) {
      f43 = Math_fround(HEAPF32[i28 >> 2]);
      if (f43 > Math_fround(HEAPF32[i27 >> 2])) {
       f43 = Math_fround(HEAPF32[i22 >> 2]);
       f42 = Math_fround(HEAPF32[i33 >> 2]);
       f41 = Math_fround(HEAPF32[i27 >> 2]);
       _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f43, f42, f41, Math_fround(HEAPF32[i2 >> 2]));
       f41 = Math_fround(HEAPF32[i27 >> 2]);
       f42 = Math_fround(HEAPF32[i2 >> 2]);
       f43 = Math_fround(HEAPF32[i28 >> 2]);
       _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f41, f42, f43, Math_fround(HEAPF32[i35 >> 2]));
       break;
      }
     }
     f43 = Math_fround(HEAPF32[i28 >> 2]);
     do if (f43 < Math_fround(HEAPF32[i27 >> 2])) {
      f43 = Math_fround(HEAPF32[i22 >> 2]);
      if (!(f43 > Math_fround(HEAPF32[i27 >> 2]))) break;
      f43 = Math_fround(HEAPF32[i22 >> 2]);
      f42 = Math_fround(HEAPF32[i33 >> 2]);
      f41 = Math_fround(HEAPF32[i27 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f43, f42, f41, Math_fround(HEAPF32[i2 >> 2]));
      f41 = Math_fround(HEAPF32[i27 >> 2]);
      f42 = Math_fround(HEAPF32[i2 >> 2]);
      f43 = Math_fround(HEAPF32[i28 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f41, f42, f43, Math_fround(HEAPF32[i35 >> 2]));
      break L46;
     } while (0);
     f41 = Math_fround(HEAPF32[i22 >> 2]);
     f42 = Math_fround(HEAPF32[i33 >> 2]);
     f43 = Math_fround(HEAPF32[i28 >> 2]);
     _stbtt__handle_clipped_edge(HEAP32[i13 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i10 >> 2] | 0, f41, f42, f43, Math_fround(HEAPF32[i35 >> 2]));
    } while (0);
    HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[i10 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
 }
 if ((i39 | 0) == 4) ___assert_fail(53066, 52491, 2963, 53081); else if ((i39 | 0) == 12) ___assert_fail(53110, 52491, 2982, 53081); else if ((i39 | 0) == 25) ___assert_fail(53146, 52491, 3010, 53081); else if ((i39 | 0) == 33) ___assert_fail(53164, 52491, 3047, 53081); else if ((i39 | 0) == 58) {
  STACKTOP = i40;
  return;
 }
}

function _drmp3d_synth(i51, i4, i17, i16) {
 i51 = i51 | 0;
 i4 = i4 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, f57 = f0, f58 = f0;
 i55 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i52 = i1 + 224 | 0;
 i5 = i1 + 220 | 0;
 i18 = i1 + 216 | 0;
 i56 = i1 + 212 | 0;
 i7 = i1 + 208 | 0;
 i53 = i1 + 204 | 0;
 i6 = i1 + 200 | 0;
 i54 = i1 + 196 | 0;
 i34 = i1 + 192 | 0;
 i2 = i1 + 16 | 0;
 i3 = i1;
 i8 = i1 + 188 | 0;
 i35 = i1 + 184 | 0;
 i43 = i1 + 180 | 0;
 i26 = i1 + 176 | 0;
 i19 = i1 + 172 | 0;
 i9 = i1 + 168 | 0;
 i36 = i1 + 164 | 0;
 i44 = i1 + 160 | 0;
 i27 = i1 + 156 | 0;
 i20 = i1 + 152 | 0;
 i10 = i1 + 148 | 0;
 i37 = i1 + 144 | 0;
 i45 = i1 + 140 | 0;
 i28 = i1 + 136 | 0;
 i21 = i1 + 132 | 0;
 i11 = i1 + 128 | 0;
 i38 = i1 + 124 | 0;
 i46 = i1 + 120 | 0;
 i29 = i1 + 116 | 0;
 i22 = i1 + 112 | 0;
 i12 = i1 + 108 | 0;
 i39 = i1 + 104 | 0;
 i47 = i1 + 100 | 0;
 i30 = i1 + 96 | 0;
 i23 = i1 + 92 | 0;
 i13 = i1 + 88 | 0;
 i40 = i1 + 84 | 0;
 i48 = i1 + 80 | 0;
 i31 = i1 + 76 | 0;
 i24 = i1 + 72 | 0;
 i14 = i1 + 68 | 0;
 i41 = i1 + 64 | 0;
 i49 = i1 + 60 | 0;
 i32 = i1 + 56 | 0;
 i25 = i1 + 52 | 0;
 i15 = i1 + 48 | 0;
 i42 = i1 + 44 | 0;
 i50 = i1 + 40 | 0;
 i33 = i1 + 36 | 0;
 i1 = i1 + 32 | 0;
 HEAP32[i52 >> 2] = i51;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i56 >> 2] = i16;
 HEAP32[i53 >> 2] = (HEAP32[i52 >> 2] | 0) + (((HEAP32[i18 >> 2] | 0) - 1 | 0) * 576 << 2);
 HEAP32[i6 >> 2] = (HEAP32[i5 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) - 1 << 1);
 HEAP32[i54 >> 2] = (HEAP32[i56 >> 2] | 0) + 3840;
 HEAP32[i34 >> 2] = 15440;
 f57 = Math_fround(HEAPF32[(HEAP32[i52 >> 2] | 0) + 1152 >> 2]);
 HEAPF32[(HEAP32[i54 >> 2] | 0) + 240 >> 2] = f57;
 f57 = Math_fround(HEAPF32[(HEAP32[i53 >> 2] | 0) + 1152 >> 2]);
 HEAPF32[(HEAP32[i54 >> 2] | 0) + 244 >> 2] = f57;
 f57 = Math_fround(HEAPF32[HEAP32[i52 >> 2] >> 2]);
 HEAPF32[(HEAP32[i54 >> 2] | 0) + 248 >> 2] = f57;
 f57 = Math_fround(HEAPF32[HEAP32[i53 >> 2] >> 2]);
 HEAPF32[(HEAP32[i54 >> 2] | 0) + 252 >> 2] = f57;
 f57 = Math_fround(HEAPF32[(HEAP32[i52 >> 2] | 0) + 1156 >> 2]);
 HEAPF32[(HEAP32[i54 >> 2] | 0) + 496 >> 2] = f57;
 f57 = Math_fround(HEAPF32[(HEAP32[i53 >> 2] | 0) + 1156 >> 2]);
 HEAPF32[(HEAP32[i54 >> 2] | 0) + 500 >> 2] = f57;
 f57 = Math_fround(HEAPF32[(HEAP32[i52 >> 2] | 0) + 4 >> 2]);
 HEAPF32[(HEAP32[i54 >> 2] | 0) + 504 >> 2] = f57;
 f57 = Math_fround(HEAPF32[(HEAP32[i53 >> 2] | 0) + 4 >> 2]);
 HEAPF32[(HEAP32[i54 >> 2] | 0) + 508 >> 2] = f57;
 _drmp3d_synth_pair(HEAP32[i6 >> 2] | 0, HEAP32[i18 >> 2] | 0, (HEAP32[i56 >> 2] | 0) + 240 + 4 | 0);
 _drmp3d_synth_pair((HEAP32[i6 >> 2] | 0) + (HEAP32[i18 >> 2] << 5 << 1) | 0, HEAP32[i18 >> 2] | 0, (HEAP32[i56 >> 2] | 0) + 240 + 256 + 4 | 0);
 _drmp3d_synth_pair(HEAP32[i5 >> 2] | 0, HEAP32[i18 >> 2] | 0, (HEAP32[i56 >> 2] | 0) + 240 | 0);
 _drmp3d_synth_pair((HEAP32[i5 >> 2] | 0) + (HEAP32[i18 >> 2] << 5 << 1) | 0, HEAP32[i18 >> 2] | 0, (HEAP32[i56 >> 2] | 0) + 240 + 256 | 0);
 HEAP32[i7 >> 2] = 14;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) < 0) break;
  f57 = Math_fround(HEAPF32[(HEAP32[i52 >> 2] | 0) + ((31 - (HEAP32[i7 >> 2] | 0) | 0) * 18 << 2) >> 2]);
  HEAPF32[(HEAP32[i54 >> 2] | 0) + (HEAP32[i7 >> 2] << 2 << 2) >> 2] = f57;
  f57 = Math_fround(HEAPF32[(HEAP32[i53 >> 2] | 0) + ((31 - (HEAP32[i7 >> 2] | 0) | 0) * 18 << 2) >> 2]);
  HEAPF32[(HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) + 1 << 2) >> 2] = f57;
  f57 = Math_fround(HEAPF32[(HEAP32[i52 >> 2] | 0) + (1 + ((31 - (HEAP32[i7 >> 2] | 0) | 0) * 18 | 0) << 2) >> 2]);
  HEAPF32[(HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) + 2 << 2) >> 2] = f57;
  f57 = Math_fround(HEAPF32[(HEAP32[i53 >> 2] | 0) + (1 + ((31 - (HEAP32[i7 >> 2] | 0) | 0) * 18 | 0) << 2) >> 2]);
  HEAPF32[(HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) + 3 << 2) >> 2] = f57;
  f57 = Math_fround(HEAPF32[(HEAP32[i52 >> 2] | 0) + (1 + ((1 + (HEAP32[i7 >> 2] | 0) | 0) * 18 | 0) << 2) >> 2]);
  HEAPF32[(HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) + 16 << 2 << 2) >> 2] = f57;
  f57 = Math_fround(HEAPF32[(HEAP32[i53 >> 2] | 0) + (1 + ((1 + (HEAP32[i7 >> 2] | 0) | 0) * 18 | 0) << 2) >> 2]);
  HEAPF32[(HEAP32[i54 >> 2] | 0) + (((HEAP32[i7 >> 2] | 0) + 16 << 2) + 1 << 2) >> 2] = f57;
  f57 = Math_fround(HEAPF32[(HEAP32[i52 >> 2] | 0) + ((1 + (HEAP32[i7 >> 2] | 0) | 0) * 18 << 2) >> 2]);
  HEAPF32[(HEAP32[i54 >> 2] | 0) + (((HEAP32[i7 >> 2] | 0) - 16 << 2) + 2 << 2) >> 2] = f57;
  f57 = Math_fround(HEAPF32[(HEAP32[i53 >> 2] | 0) + ((1 + (HEAP32[i7 >> 2] | 0) | 0) * 18 << 2) >> 2]);
  HEAPF32[(HEAP32[i54 >> 2] | 0) + (((HEAP32[i7 >> 2] | 0) - 16 << 2) + 3 << 2) >> 2] = f57;
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f57 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i35 >> 2] = f57;
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f57 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i43 >> 2] = f57;
  HEAP32[i26 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 0 << 2);
  HEAP32[i19 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 960 << 2);
  HEAP32[i8 >> 2] = 0;
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= 4) break;
   f57 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2]);
   f57 = Math_fround(f57 * Math_fround(HEAPF32[i43 >> 2]));
   f58 = Math_fround(HEAPF32[(HEAP32[i19 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2]);
   f58 = Math_fround(f57 + Math_fround(f58 * Math_fround(HEAPF32[i35 >> 2])));
   HEAPF32[i3 + (HEAP32[i8 >> 2] << 2) >> 2] = f58;
   f58 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2]);
   f58 = Math_fround(f58 * Math_fround(HEAPF32[i35 >> 2]));
   f57 = Math_fround(HEAPF32[(HEAP32[i19 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2]);
   f57 = Math_fround(f58 - Math_fround(f57 * Math_fround(HEAPF32[i43 >> 2])));
   HEAPF32[i2 + (HEAP32[i8 >> 2] << 2) >> 2] = f57;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i36 >> 2] = f58;
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i44 >> 2] = f58;
  HEAP32[i27 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 64 << 2);
  HEAP32[i20 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 896 << 2);
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= 4) break;
   f58 = Math_fround(HEAPF32[(HEAP32[i27 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2]);
   f58 = Math_fround(f58 * Math_fround(HEAPF32[i44 >> 2]));
   f57 = Math_fround(HEAPF32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2]);
   f57 = Math_fround(f58 + Math_fround(f57 * Math_fround(HEAPF32[i36 >> 2])));
   i56 = i3 + (HEAP32[i9 >> 2] << 2) | 0;
   f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
   HEAPF32[i56 >> 2] = f57;
   f57 = Math_fround(HEAPF32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2]);
   f57 = Math_fround(f57 * Math_fround(HEAPF32[i44 >> 2]));
   f58 = Math_fround(HEAPF32[(HEAP32[i27 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2]);
   f58 = Math_fround(f57 - Math_fround(f58 * Math_fround(HEAPF32[i36 >> 2])));
   i56 = i2 + (HEAP32[i9 >> 2] << 2) | 0;
   f58 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f58);
   HEAPF32[i56 >> 2] = f58;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i37 >> 2] = f58;
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i45 >> 2] = f58;
  HEAP32[i28 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 128 << 2);
  HEAP32[i21 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 832 << 2);
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= 4) break;
   f58 = Math_fround(HEAPF32[(HEAP32[i28 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2]);
   f58 = Math_fround(f58 * Math_fround(HEAPF32[i45 >> 2]));
   f57 = Math_fround(HEAPF32[(HEAP32[i21 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2]);
   f57 = Math_fround(f58 + Math_fround(f57 * Math_fround(HEAPF32[i37 >> 2])));
   i56 = i3 + (HEAP32[i10 >> 2] << 2) | 0;
   f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
   HEAPF32[i56 >> 2] = f57;
   f57 = Math_fround(HEAPF32[(HEAP32[i28 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2]);
   f57 = Math_fround(f57 * Math_fround(HEAPF32[i37 >> 2]));
   f58 = Math_fround(HEAPF32[(HEAP32[i21 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2]);
   f58 = Math_fround(f57 - Math_fround(f58 * Math_fround(HEAPF32[i45 >> 2])));
   i56 = i2 + (HEAP32[i10 >> 2] << 2) | 0;
   f58 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f58);
   HEAPF32[i56 >> 2] = f58;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i38 >> 2] = f58;
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i46 >> 2] = f58;
  HEAP32[i29 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 192 << 2);
  HEAP32[i22 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 768 << 2);
  HEAP32[i11 >> 2] = 0;
  while (1) {
   if ((HEAP32[i11 >> 2] | 0) >= 4) break;
   f58 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2]);
   f58 = Math_fround(f58 * Math_fround(HEAPF32[i46 >> 2]));
   f57 = Math_fround(HEAPF32[(HEAP32[i22 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2]);
   f57 = Math_fround(f58 + Math_fround(f57 * Math_fround(HEAPF32[i38 >> 2])));
   i56 = i3 + (HEAP32[i11 >> 2] << 2) | 0;
   f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
   HEAPF32[i56 >> 2] = f57;
   f57 = Math_fround(HEAPF32[(HEAP32[i22 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2]);
   f57 = Math_fround(f57 * Math_fround(HEAPF32[i46 >> 2]));
   f58 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2]);
   f58 = Math_fround(f57 - Math_fround(f58 * Math_fround(HEAPF32[i38 >> 2])));
   i56 = i2 + (HEAP32[i11 >> 2] << 2) | 0;
   f58 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f58);
   HEAPF32[i56 >> 2] = f58;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i39 >> 2] = f58;
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i47 >> 2] = f58;
  HEAP32[i30 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 256 << 2);
  HEAP32[i23 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 704 << 2);
  HEAP32[i12 >> 2] = 0;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) >= 4) break;
   f58 = Math_fround(HEAPF32[(HEAP32[i30 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2]);
   f58 = Math_fround(f58 * Math_fround(HEAPF32[i47 >> 2]));
   f57 = Math_fround(HEAPF32[(HEAP32[i23 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2]);
   f57 = Math_fround(f58 + Math_fround(f57 * Math_fround(HEAPF32[i39 >> 2])));
   i56 = i3 + (HEAP32[i12 >> 2] << 2) | 0;
   f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
   HEAPF32[i56 >> 2] = f57;
   f57 = Math_fround(HEAPF32[(HEAP32[i30 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2]);
   f57 = Math_fround(f57 * Math_fround(HEAPF32[i39 >> 2]));
   f58 = Math_fround(HEAPF32[(HEAP32[i23 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2]);
   f58 = Math_fround(f57 - Math_fround(f58 * Math_fround(HEAPF32[i47 >> 2])));
   i56 = i2 + (HEAP32[i12 >> 2] << 2) | 0;
   f58 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f58);
   HEAPF32[i56 >> 2] = f58;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i40 >> 2] = f58;
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i48 >> 2] = f58;
  HEAP32[i31 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 320 << 2);
  HEAP32[i24 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 640 << 2);
  HEAP32[i13 >> 2] = 0;
  while (1) {
   if ((HEAP32[i13 >> 2] | 0) >= 4) break;
   f58 = Math_fround(HEAPF32[(HEAP32[i31 >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2]);
   f58 = Math_fround(f58 * Math_fround(HEAPF32[i48 >> 2]));
   f57 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2]);
   f57 = Math_fround(f58 + Math_fround(f57 * Math_fround(HEAPF32[i40 >> 2])));
   i56 = i3 + (HEAP32[i13 >> 2] << 2) | 0;
   f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
   HEAPF32[i56 >> 2] = f57;
   f57 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2]);
   f57 = Math_fround(f57 * Math_fround(HEAPF32[i48 >> 2]));
   f58 = Math_fround(HEAPF32[(HEAP32[i31 >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2]);
   f58 = Math_fround(f57 - Math_fround(f58 * Math_fround(HEAPF32[i40 >> 2])));
   i56 = i2 + (HEAP32[i13 >> 2] << 2) | 0;
   f58 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f58);
   HEAPF32[i56 >> 2] = f58;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i41 >> 2] = f58;
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i49 >> 2] = f58;
  HEAP32[i32 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 384 << 2);
  HEAP32[i25 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 576 << 2);
  HEAP32[i14 >> 2] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= 4) break;
   f58 = Math_fround(HEAPF32[(HEAP32[i32 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2]);
   f58 = Math_fround(f58 * Math_fround(HEAPF32[i49 >> 2]));
   f57 = Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2]);
   f57 = Math_fround(f58 + Math_fround(f57 * Math_fround(HEAPF32[i41 >> 2])));
   i56 = i3 + (HEAP32[i14 >> 2] << 2) | 0;
   f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
   HEAPF32[i56 >> 2] = f57;
   f57 = Math_fround(HEAPF32[(HEAP32[i32 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2]);
   f57 = Math_fround(f57 * Math_fround(HEAPF32[i41 >> 2]));
   f58 = Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2]);
   f58 = Math_fround(f57 - Math_fround(f58 * Math_fround(HEAPF32[i49 >> 2])));
   i56 = i2 + (HEAP32[i14 >> 2] << 2) | 0;
   f58 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f58);
   HEAPF32[i56 >> 2] = f58;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i42 >> 2] = f58;
  i56 = HEAP32[i34 >> 2] | 0;
  HEAP32[i34 >> 2] = i56 + 4;
  f58 = Math_fround(HEAPF32[i56 >> 2]);
  HEAPF32[i50 >> 2] = f58;
  HEAP32[i33 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 448 << 2);
  HEAP32[i1 >> 2] = (HEAP32[i54 >> 2] | 0) + ((HEAP32[i7 >> 2] << 2) - 512 << 2);
  HEAP32[i15 >> 2] = 0;
  while (1) {
   if ((HEAP32[i15 >> 2] | 0) >= 4) break;
   f58 = Math_fround(HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2]);
   f58 = Math_fround(f58 * Math_fround(HEAPF32[i50 >> 2]));
   f57 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2]);
   f57 = Math_fround(f58 + Math_fround(f57 * Math_fround(HEAPF32[i42 >> 2])));
   i56 = i3 + (HEAP32[i15 >> 2] << 2) | 0;
   f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
   HEAPF32[i56 >> 2] = f57;
   f57 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2]);
   f57 = Math_fround(f57 * Math_fround(HEAPF32[i50 >> 2]));
   f58 = Math_fround(HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2]);
   f58 = Math_fround(f57 - Math_fround(f58 * Math_fround(HEAPF32[i42 >> 2])));
   i56 = i2 + (HEAP32[i15 >> 2] << 2) | 0;
   f58 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f58);
   HEAPF32[i56 >> 2] = f58;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  i56 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i2 + 4 >> 2])) | 0;
  i51 = (HEAP32[i6 >> 2] | 0) + ((Math_imul(15 - (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0) << 1) | 0;
  HEAP16[i51 >> 1] = i56;
  i51 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i3 + 4 >> 2])) | 0;
  i56 = (HEAP32[i6 >> 2] | 0) + ((Math_imul(17 + (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0) << 1) | 0;
  HEAP16[i56 >> 1] = i51;
  i56 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i2 >> 2])) | 0;
  i51 = (HEAP32[i5 >> 2] | 0) + ((Math_imul(15 - (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0) << 1) | 0;
  HEAP16[i51 >> 1] = i56;
  i51 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i3 >> 2])) | 0;
  i56 = (HEAP32[i5 >> 2] | 0) + ((Math_imul(17 + (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0) << 1) | 0;
  HEAP16[i56 >> 1] = i51;
  i56 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i2 + 12 >> 2])) | 0;
  i51 = (HEAP32[i6 >> 2] | 0) + ((Math_imul(47 - (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0) << 1) | 0;
  HEAP16[i51 >> 1] = i56;
  i51 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i3 + 12 >> 2])) | 0;
  i56 = (HEAP32[i6 >> 2] | 0) + ((Math_imul(49 + (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0) << 1) | 0;
  HEAP16[i56 >> 1] = i51;
  i56 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i2 + 8 >> 2])) | 0;
  i51 = (HEAP32[i5 >> 2] | 0) + ((Math_imul(47 - (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0) << 1) | 0;
  HEAP16[i51 >> 1] = i56;
  i51 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i3 + 8 >> 2])) | 0;
  i56 = (HEAP32[i5 >> 2] | 0) + ((Math_imul(49 + (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0) << 1) | 0;
  HEAP16[i56 >> 1] = i51;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 }
 STACKTOP = i55;
 return;
}

function _ma_device_process_pcm_frames_playback__webaudio(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0;
 i82 = 0;
 i83 = STACKTOP;
 STACKTOP = STACKTOP + 16704 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16704);
 i18 = i83 + 16688 | 0;
 i13 = i83 + 16684 | 0;
 i10 = i83 + 16680 | 0;
 i12 = i83 + 16676 | 0;
 i9 = i83 + 16672 | 0;
 i11 = i83 + 16668 | 0;
 i8 = i83 + 16664 | 0;
 i19 = i83 + 16660 | 0;
 i23 = i83 + 16656 | 0;
 i21 = i83 + 16652 | 0;
 i14 = i83 + 16648 | 0;
 i17 = i83 + 16644 | 0;
 i6 = i83 + 16640 | 0;
 i7 = i83 + 16636 | 0;
 i24 = i83 + 16632 | 0;
 i16 = i83 + 16628 | 0;
 i20 = i83 + 16624 | 0;
 i15 = i83 + 16620 | 0;
 i22 = i83 + 16616 | 0;
 i44 = i83 + 16612 | 0;
 i32 = i83 + 16608 | 0;
 i63 = i83 + 16604 | 0;
 i53 = i83 + 16600 | 0;
 i36 = i83 + 16596 | 0;
 i46 = i83 + 16592 | 0;
 i34 = i83 + 16588 | 0;
 i43 = i83 + 16584 | 0;
 i31 = i83 + 16580 | 0;
 i66 = i83 + 16576 | 0;
 i71 = i83 + 16572 | 0;
 i68 = i83 + 16568 | 0;
 i54 = i83 + 16564 | 0;
 i61 = i83 + 16560 | 0;
 i26 = i83 + 16556 | 0;
 i28 = i83 + 16552 | 0;
 i78 = i83 + 16548 | 0;
 i58 = i83 + 16544 | 0;
 i50 = i83 + 16540 | 0;
 i40 = i83 + 16536 | 0;
 i49 = i83 + 16532 | 0;
 i39 = i83 + 16528 | 0;
 i48 = i83 + 16524 | 0;
 i38 = i83 + 16520 | 0;
 i47 = i83 + 16516 | 0;
 i37 = i83 + 16512 | 0;
 i62 = i83 + 16508 | 0;
 i52 = i83 + 16504 | 0;
 i35 = i83 + 16500 | 0;
 i45 = i83 + 16496 | 0;
 i33 = i83 + 16492 | 0;
 i42 = i83 + 16488 | 0;
 i30 = i83 + 16484 | 0;
 i65 = i83 + 16480 | 0;
 i70 = i83 + 16476 | 0;
 i67 = i83 + 16472 | 0;
 i51 = i83 + 16468 | 0;
 i60 = i83 + 16464 | 0;
 i81 = i83 + 8192 | 0;
 i25 = i83 + 16460 | 0;
 i27 = i83 + 16456 | 0;
 i77 = i83 + 16452 | 0;
 i57 = i83 + 16448 | 0;
 i41 = i83 + 16444 | 0;
 i29 = i83 + 16440 | 0;
 i64 = i83 + 16436 | 0;
 i4 = i83 + 16432 | 0;
 i69 = i83 + 16428 | 0;
 i73 = i83 + 16424 | 0;
 i75 = i83 + 16420 | 0;
 i74 = i83 + 4096 | 0;
 i76 = i83;
 i80 = i83 + 16416 | 0;
 i79 = i83 + 16412 | 0;
 i55 = i83 + 16408 | 0;
 i56 = i83 + 16404 | 0;
 i59 = i83 + 16400 | 0;
 i72 = i83 + 16396 | 0;
 i5 = i83 + 16392 | 0;
 i85 = i83 + 16388 | 0;
 i84 = i83 + 16384 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i85 >> 2] = i1;
 HEAP32[i84 >> 2] = i3;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i85 >> 2] | 0;
 i3 = HEAP32[i84 >> 2] | 0;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) != 3) {
  HEAP32[i20 >> 2] = i1;
  HEAP32[i15 >> 2] = i2;
  HEAP32[i22 >> 2] = i3;
  if (!(HEAP32[i20 >> 2] | 0)) ___assert_fail(36359, 36381, 5848, 36525);
  if ((HEAP32[i15 >> 2] | 0) >>> 0 <= 0) ___assert_fail(36454, 36381, 5849, 36525);
  if (!(HEAP32[i22 >> 2] | 0)) ___assert_fail(36560, 36381, 5850, 36525);
  i1 = HEAP32[i20 >> 2] | 0;
  if (!((HEAPU8[(HEAP32[i20 >> 2] | 0) + 384 + 384 + 46464 >> 0] | 0) >>> 6 & 1)) {
   _ma_pcm_converter_read(i1 + 384 + 384 | 0, HEAP32[i22 >> 2] | 0, HEAP32[i15 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   STACKTOP = i83;
   return;
  }
  i84 = HEAP32[i22 >> 2] | 0;
  i85 = HEAP32[i15 >> 2] | 0;
  HEAP32[i19 >> 2] = i1;
  HEAP32[i23 >> 2] = i84;
  HEAP32[i21 >> 2] = 0;
  HEAP32[i14 >> 2] = i85;
  HEAP32[i17 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + 16 >> 2];
  if (!(HEAP32[i17 >> 2] | 0)) {
   STACKTOP = i83;
   return;
  }
  if (HEAP32[i23 >> 2] | 0 ? ((HEAPU8[(HEAP32[i19 >> 2] | 0) + 324 >> 0] | 0) >>> 4 & 1 | 0) == 0 : 0) {
   i85 = (HEAP32[i19 >> 2] | 0) + 384 | 0;
   _ma_zero_pcm_frames(HEAP32[i23 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i85 + 264 >> 2] | 0, HEAP32[i85 + 268 >> 2] | 0);
  }
  L22 : do if (HEAP32[i21 >> 2] | 0) if (Math_fround(HEAPF32[(HEAP32[i19 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0)) {
   i85 = HEAP32[(HEAP32[i19 >> 2] | 0) + 47360 + 268 >> 2] | 0;
   HEAP32[i11 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + 47360 + 264 >> 2];
   HEAP32[i8 >> 2] = i85;
   i85 = _ma_get_bytes_per_sample(HEAP32[i11 >> 2] | 0) | 0;
   i85 = Math_imul(i85, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i85;
   i85 = HEAP32[(HEAP32[i19 >> 2] | 0) + 384 + 268 >> 2] | 0;
   HEAP32[i12 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + 384 + 264 >> 2];
   HEAP32[i9 >> 2] = i85;
   i85 = _ma_get_bytes_per_sample(HEAP32[i12 >> 2] | 0) | 0;
   i85 = Math_imul(i85, HEAP32[i9 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i85;
   HEAP32[i24 >> 2] = 0;
   while (1) {
    if ((HEAP32[i24 >> 2] | 0) >>> 0 >= (HEAP32[i14 >> 2] | 0) >>> 0) break L22;
    HEAP32[i16 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i24 >> 2] | 0);
    if ((HEAP32[i16 >> 2] | 0) >>> 0 > (8192 / ((HEAP32[i6 >> 2] | 0) >>> 0) | 0) >>> 0) HEAP32[i16 >> 2] = 8192 / ((HEAP32[i6 >> 2] | 0) >>> 0) | 0;
    i80 = (HEAP32[i21 >> 2] | 0) + (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
    i84 = (HEAP32[i19 >> 2] | 0) + 47360 | 0;
    i85 = HEAP32[i19 >> 2] | 0;
    _ma_copy_and_apply_volume_factor_pcm_frames(i81, i80, HEAP32[i16 >> 2] | 0, HEAP32[i84 + 264 >> 2] | 0, HEAP32[i84 + 268 >> 2] | 0, Math_fround(HEAPF32[i85 + 328 >> 2]));
    i85 = (HEAP32[i23 >> 2] | 0) + (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) | 0;
    FUNCTION_TABLE_viiii[HEAP32[i17 >> 2] & 31](HEAP32[i19 >> 2] | 0, i85, i81, HEAP32[i16 >> 2] | 0);
    HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
   }
  } else i82 = 74; else i82 = 74; while (0);
  if ((i82 | 0) == 74) FUNCTION_TABLE_viiii[HEAP32[i17 >> 2] & 31](HEAP32[i19 >> 2] | 0, HEAP32[i23 >> 2] | 0, HEAP32[i21 >> 2] | 0, HEAP32[i14 >> 2] | 0);
  if (!(HEAP32[i23 >> 2] | 0)) {
   STACKTOP = i83;
   return;
  }
  i85 = Math_fround(HEAPF32[(HEAP32[i19 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0);
  if (i85 & (HEAP32[i21 >> 2] | 0) == 0) {
   i84 = (HEAP32[i19 >> 2] | 0) + 384 | 0;
   i85 = HEAP32[i19 >> 2] | 0;
   _ma_apply_volume_factor_pcm_frames(HEAP32[i23 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i84 + 264 >> 2] | 0, HEAP32[i84 + 268 >> 2] | 0, Math_fround(HEAPF32[i85 + 328 >> 2]));
  }
  if ((HEAPU8[(HEAP32[i19 >> 2] | 0) + 324 >> 0] | 0) >>> 5 & 1 | 0) {
   STACKTOP = i83;
   return;
  }
  if ((HEAP32[(HEAP32[i19 >> 2] | 0) + 384 + 264 >> 2] | 0) != 5) {
   STACKTOP = i83;
   return;
  }
  i84 = HEAP32[i14 >> 2] | 0;
  i85 = HEAP32[(HEAP32[i19 >> 2] | 0) + 384 + 268 >> 2] | 0;
  HEAP32[i18 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i13 >> 2] = i84;
  HEAP32[i10 >> 2] = i85;
  _ma_clip_samples_f32(HEAP32[i18 >> 2] | 0, Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0);
  STACKTOP = i83;
  return;
 }
 i85 = (HEAP32[i5 >> 2] | 0) + 94336 + 8 | 0;
 HEAP32[i64 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i69 >> 2] = i3;
 HEAP32[i73 >> 2] = i85;
 if (!(HEAP32[i64 >> 2] | 0)) ___assert_fail(36359, 36381, 5947, 36411);
 if ((HEAP32[i4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(36454, 36381, 5948, 36411);
 if (!(HEAP32[i69 >> 2] | 0)) ___assert_fail(36469, 36381, 5949, 36411);
 if (!(HEAP32[i73 >> 2] | 0)) ___assert_fail(36507, 36381, 5950, 36411);
 _memset(i76 | 0, 0, 4096) | 0;
 i85 = HEAP32[i64 >> 2] | 0;
 i85 = _ma_calculate_frame_count_after_src(HEAP32[i85 + 8 >> 2] | 0, HEAP32[i85 + 384 + 312 >> 2] | 0, HEAP32[i4 >> 2] | 0, 0) | 0;
 getTempRet0() | 0;
 HEAP32[i80 >> 2] = i85;
 HEAP32[i79 >> 2] = 0;
 while (1) {
  if ((HEAP32[i79 >> 2] | 0) >>> 0 >= (HEAP32[i80 >> 2] | 0) >>> 0) {
   i82 = 82;
   break;
  }
  if (!(_ma_device_is_started(HEAP32[i64 >> 2] | 0) | 0)) {
   i82 = 82;
   break;
  }
  HEAP32[i55 >> 2] = (HEAP32[i80 >> 2] | 0) - (HEAP32[i79 >> 2] | 0);
  i85 = HEAP32[(HEAP32[i64 >> 2] | 0) + 384 + 268 >> 2] | 0;
  HEAP32[i41 >> 2] = HEAP32[(HEAP32[i64 >> 2] | 0) + 384 + 264 >> 2];
  HEAP32[i29 >> 2] = i85;
  i85 = _ma_get_bytes_per_sample(HEAP32[i41 >> 2] | 0) | 0;
  i85 = 4096 / ((Math_imul(i85, HEAP32[i29 >> 2] | 0) | 0) >>> 0) | 0;
  HEAP32[i56 >> 2] = i85;
  if ((HEAP32[i56 >> 2] | 0) >>> 0 > (HEAP32[i55 >> 2] | 0) >>> 0) HEAP32[i56 >> 2] = HEAP32[i55 >> 2];
  HEAP32[i59 >> 2] = HEAP32[i56 >> 2];
  i85 = _ma_pcm_rb_acquire_read(HEAP32[i73 >> 2] | 0, i59, i72) | 0;
  HEAP32[i75 >> 2] = i85;
  if (!(HEAP32[i75 >> 2] | 0)) {
   if ((HEAP32[i59 >> 2] | 0) >>> 0 > 0) {
    i84 = HEAP32[i72 >> 2] | 0;
    i85 = HEAP32[i59 >> 2] | 0;
    HEAP32[i65 >> 2] = HEAP32[i64 >> 2];
    HEAP32[i70 >> 2] = i74;
    HEAP32[i67 >> 2] = i84;
    HEAP32[i51 >> 2] = i85;
    HEAP32[i60 >> 2] = HEAP32[(HEAP32[i65 >> 2] | 0) + 16 >> 2];
    if (HEAP32[i60 >> 2] | 0) {
     if (HEAP32[i70 >> 2] | 0 ? ((HEAPU8[(HEAP32[i65 >> 2] | 0) + 324 >> 0] | 0) >>> 4 & 1 | 0) == 0 : 0) {
      i85 = (HEAP32[i65 >> 2] | 0) + 384 | 0;
      _ma_zero_pcm_frames(HEAP32[i70 >> 2] | 0, HEAP32[i51 >> 2] | 0, HEAP32[i85 + 264 >> 2] | 0, HEAP32[i85 + 268 >> 2] | 0);
     }
     L75 : do if (HEAP32[i67 >> 2] | 0) if (Math_fround(HEAPF32[(HEAP32[i65 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0)) {
      i85 = HEAP32[(HEAP32[i65 >> 2] | 0) + 47360 + 268 >> 2] | 0;
      HEAP32[i42 >> 2] = HEAP32[(HEAP32[i65 >> 2] | 0) + 47360 + 264 >> 2];
      HEAP32[i30 >> 2] = i85;
      i85 = _ma_get_bytes_per_sample(HEAP32[i42 >> 2] | 0) | 0;
      i85 = Math_imul(i85, HEAP32[i30 >> 2] | 0) | 0;
      HEAP32[i25 >> 2] = i85;
      i85 = HEAP32[(HEAP32[i65 >> 2] | 0) + 384 + 268 >> 2] | 0;
      HEAP32[i45 >> 2] = HEAP32[(HEAP32[i65 >> 2] | 0) + 384 + 264 >> 2];
      HEAP32[i33 >> 2] = i85;
      i85 = _ma_get_bytes_per_sample(HEAP32[i45 >> 2] | 0) | 0;
      i85 = Math_imul(i85, HEAP32[i33 >> 2] | 0) | 0;
      HEAP32[i27 >> 2] = i85;
      HEAP32[i77 >> 2] = 0;
      while (1) {
       if ((HEAP32[i77 >> 2] | 0) >>> 0 >= (HEAP32[i51 >> 2] | 0) >>> 0) break L75;
       HEAP32[i57 >> 2] = (HEAP32[i51 >> 2] | 0) - (HEAP32[i77 >> 2] | 0);
       if ((HEAP32[i57 >> 2] | 0) >>> 0 > (8192 / ((HEAP32[i25 >> 2] | 0) >>> 0) | 0) >>> 0) HEAP32[i57 >> 2] = 8192 / ((HEAP32[i25 >> 2] | 0) >>> 0) | 0;
       i24 = (HEAP32[i67 >> 2] | 0) + (Math_imul(HEAP32[i77 >> 2] | 0, HEAP32[i25 >> 2] | 0) | 0) | 0;
       i84 = (HEAP32[i65 >> 2] | 0) + 47360 | 0;
       i85 = HEAP32[i65 >> 2] | 0;
       _ma_copy_and_apply_volume_factor_pcm_frames(i81, i24, HEAP32[i57 >> 2] | 0, HEAP32[i84 + 264 >> 2] | 0, HEAP32[i84 + 268 >> 2] | 0, Math_fround(HEAPF32[i85 + 328 >> 2]));
       i85 = (HEAP32[i70 >> 2] | 0) + (Math_imul(HEAP32[i77 >> 2] | 0, HEAP32[i27 >> 2] | 0) | 0) | 0;
       FUNCTION_TABLE_viiii[HEAP32[i60 >> 2] & 31](HEAP32[i65 >> 2] | 0, i85, i81, HEAP32[i57 >> 2] | 0);
       HEAP32[i77 >> 2] = (HEAP32[i77 >> 2] | 0) + (HEAP32[i57 >> 2] | 0);
      }
     } else i82 = 27; else i82 = 27; while (0);
     if ((i82 | 0) == 27) {
      i82 = 0;
      FUNCTION_TABLE_viiii[HEAP32[i60 >> 2] & 31](HEAP32[i65 >> 2] | 0, HEAP32[i70 >> 2] | 0, HEAP32[i67 >> 2] | 0, HEAP32[i51 >> 2] | 0);
     }
     if (HEAP32[i70 >> 2] | 0) {
      i85 = Math_fround(HEAPF32[(HEAP32[i65 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0);
      if (i85 & (HEAP32[i67 >> 2] | 0) == 0) {
       i84 = (HEAP32[i65 >> 2] | 0) + 384 | 0;
       i85 = HEAP32[i65 >> 2] | 0;
       _ma_apply_volume_factor_pcm_frames(HEAP32[i70 >> 2] | 0, HEAP32[i51 >> 2] | 0, HEAP32[i84 + 264 >> 2] | 0, HEAP32[i84 + 268 >> 2] | 0, Math_fround(HEAPF32[i85 + 328 >> 2]));
      }
      if (!((HEAPU8[(HEAP32[i65 >> 2] | 0) + 324 >> 0] | 0) >>> 5 & 1)) if ((HEAP32[(HEAP32[i65 >> 2] | 0) + 384 + 264 >> 2] | 0) == 5) {
       i84 = HEAP32[i51 >> 2] | 0;
       i85 = HEAP32[(HEAP32[i65 >> 2] | 0) + 384 + 268 >> 2] | 0;
       HEAP32[i62 >> 2] = HEAP32[i70 >> 2];
       HEAP32[i52 >> 2] = i84;
       HEAP32[i35 >> 2] = i85;
       _ma_clip_samples_f32(HEAP32[i62 >> 2] | 0, Math_imul(HEAP32[i52 >> 2] | 0, HEAP32[i35 >> 2] | 0) | 0);
      }
     }
    }
   } else if (!(_ma_pcm_rb_pointer_disance(HEAP32[i73 >> 2] | 0) | 0)) {
    i82 = 82;
    break;
   }
   i85 = _ma_pcm_rb_commit_read(HEAP32[i73 >> 2] | 0, HEAP32[i59 >> 2] | 0, HEAP32[i72 >> 2] | 0) | 0;
   HEAP32[i75 >> 2] = i85;
   if (HEAP32[i75 >> 2] | 0) {
    i82 = 82;
    break;
   }
  } else {
   i1 = HEAP32[(HEAP32[i64 >> 2] | 0) + 384 + 268 >> 2] | 0;
   HEAP32[i47 >> 2] = HEAP32[(HEAP32[i64 >> 2] | 0) + 384 + 264 >> 2];
   HEAP32[i37 >> 2] = i1;
   i1 = _ma_get_bytes_per_sample(HEAP32[i47 >> 2] | 0) | 0;
   i1 = 4096 / ((Math_imul(i1, HEAP32[i37 >> 2] | 0) | 0) >>> 0) | 0;
   i85 = HEAP32[(HEAP32[i64 >> 2] | 0) + 47360 + 268 >> 2] | 0;
   HEAP32[i48 >> 2] = HEAP32[(HEAP32[i64 >> 2] | 0) + 47360 + 264 >> 2];
   HEAP32[i38 >> 2] = i85;
   i85 = _ma_get_bytes_per_sample(HEAP32[i48 >> 2] | 0) | 0;
   i85 = i1 >>> 0 < (4096 / ((Math_imul(i85, HEAP32[i38 >> 2] | 0) | 0) >>> 0) | 0) >>> 0;
   i1 = HEAP32[i64 >> 2] | 0;
   if (i85) {
    i85 = HEAP32[(HEAP32[i64 >> 2] | 0) + 384 + 268 >> 2] | 0;
    HEAP32[i49 >> 2] = HEAP32[i1 + 384 + 264 >> 2];
    HEAP32[i39 >> 2] = i85;
    i1 = _ma_get_bytes_per_sample(HEAP32[i49 >> 2] | 0) | 0;
    i1 = 4096 / ((Math_imul(i1, HEAP32[i39 >> 2] | 0) | 0) >>> 0) | 0;
   } else {
    i85 = HEAP32[(HEAP32[i64 >> 2] | 0) + 47360 + 268 >> 2] | 0;
    HEAP32[i50 >> 2] = HEAP32[i1 + 47360 + 264 >> 2];
    HEAP32[i40 >> 2] = i85;
    i1 = _ma_get_bytes_per_sample(HEAP32[i50 >> 2] | 0) | 0;
    i1 = 4096 / ((Math_imul(i1, HEAP32[i40 >> 2] | 0) | 0) >>> 0) | 0;
   }
   HEAP32[i59 >> 2] = i1;
   i85 = HEAP32[i59 >> 2] | 0;
   HEAP32[i66 >> 2] = HEAP32[i64 >> 2];
   HEAP32[i71 >> 2] = i74;
   HEAP32[i68 >> 2] = i76;
   HEAP32[i54 >> 2] = i85;
   HEAP32[i61 >> 2] = HEAP32[(HEAP32[i66 >> 2] | 0) + 16 >> 2];
   if (HEAP32[i61 >> 2] | 0) {
    if (HEAP32[i71 >> 2] | 0 ? ((HEAPU8[(HEAP32[i66 >> 2] | 0) + 324 >> 0] | 0) >>> 4 & 1 | 0) == 0 : 0) {
     i85 = (HEAP32[i66 >> 2] | 0) + 384 | 0;
     _ma_zero_pcm_frames(HEAP32[i71 >> 2] | 0, HEAP32[i54 >> 2] | 0, HEAP32[i85 + 264 >> 2] | 0, HEAP32[i85 + 268 >> 2] | 0);
    }
    L104 : do if (HEAP32[i68 >> 2] | 0) if (Math_fround(HEAPF32[(HEAP32[i66 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0)) {
     i85 = HEAP32[(HEAP32[i66 >> 2] | 0) + 47360 + 268 >> 2] | 0;
     HEAP32[i43 >> 2] = HEAP32[(HEAP32[i66 >> 2] | 0) + 47360 + 264 >> 2];
     HEAP32[i31 >> 2] = i85;
     i85 = _ma_get_bytes_per_sample(HEAP32[i43 >> 2] | 0) | 0;
     i85 = Math_imul(i85, HEAP32[i31 >> 2] | 0) | 0;
     HEAP32[i26 >> 2] = i85;
     i85 = HEAP32[(HEAP32[i66 >> 2] | 0) + 384 + 268 >> 2] | 0;
     HEAP32[i46 >> 2] = HEAP32[(HEAP32[i66 >> 2] | 0) + 384 + 264 >> 2];
     HEAP32[i34 >> 2] = i85;
     i85 = _ma_get_bytes_per_sample(HEAP32[i46 >> 2] | 0) | 0;
     i85 = Math_imul(i85, HEAP32[i34 >> 2] | 0) | 0;
     HEAP32[i28 >> 2] = i85;
     HEAP32[i78 >> 2] = 0;
     while (1) {
      if ((HEAP32[i78 >> 2] | 0) >>> 0 >= (HEAP32[i54 >> 2] | 0) >>> 0) break L104;
      HEAP32[i58 >> 2] = (HEAP32[i54 >> 2] | 0) - (HEAP32[i78 >> 2] | 0);
      if ((HEAP32[i58 >> 2] | 0) >>> 0 > (8192 / ((HEAP32[i26 >> 2] | 0) >>> 0) | 0) >>> 0) HEAP32[i58 >> 2] = 8192 / ((HEAP32[i26 >> 2] | 0) >>> 0) | 0;
      i24 = (HEAP32[i68 >> 2] | 0) + (Math_imul(HEAP32[i78 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0) | 0;
      i84 = (HEAP32[i66 >> 2] | 0) + 47360 | 0;
      i85 = HEAP32[i66 >> 2] | 0;
      _ma_copy_and_apply_volume_factor_pcm_frames(i81, i24, HEAP32[i58 >> 2] | 0, HEAP32[i84 + 264 >> 2] | 0, HEAP32[i84 + 268 >> 2] | 0, Math_fround(HEAPF32[i85 + 328 >> 2]));
      i85 = (HEAP32[i71 >> 2] | 0) + (Math_imul(HEAP32[i78 >> 2] | 0, HEAP32[i28 >> 2] | 0) | 0) | 0;
      FUNCTION_TABLE_viiii[HEAP32[i61 >> 2] & 31](HEAP32[i66 >> 2] | 0, i85, i81, HEAP32[i58 >> 2] | 0);
      HEAP32[i78 >> 2] = (HEAP32[i78 >> 2] | 0) + (HEAP32[i58 >> 2] | 0);
     }
    } else i82 = 49; else i82 = 49; while (0);
    if ((i82 | 0) == 49) {
     i82 = 0;
     FUNCTION_TABLE_viiii[HEAP32[i61 >> 2] & 31](HEAP32[i66 >> 2] | 0, HEAP32[i71 >> 2] | 0, HEAP32[i68 >> 2] | 0, HEAP32[i54 >> 2] | 0);
    }
    if (HEAP32[i71 >> 2] | 0) {
     i85 = Math_fround(HEAPF32[(HEAP32[i66 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0);
     if (i85 & (HEAP32[i68 >> 2] | 0) == 0) {
      i84 = (HEAP32[i66 >> 2] | 0) + 384 | 0;
      i85 = HEAP32[i66 >> 2] | 0;
      _ma_apply_volume_factor_pcm_frames(HEAP32[i71 >> 2] | 0, HEAP32[i54 >> 2] | 0, HEAP32[i84 + 264 >> 2] | 0, HEAP32[i84 + 268 >> 2] | 0, Math_fround(HEAPF32[i85 + 328 >> 2]));
     }
     if (!((HEAPU8[(HEAP32[i66 >> 2] | 0) + 324 >> 0] | 0) >>> 5 & 1)) if ((HEAP32[(HEAP32[i66 >> 2] | 0) + 384 + 264 >> 2] | 0) == 5) {
      i84 = HEAP32[i54 >> 2] | 0;
      i85 = HEAP32[(HEAP32[i66 >> 2] | 0) + 384 + 268 >> 2] | 0;
      HEAP32[i63 >> 2] = HEAP32[i71 >> 2];
      HEAP32[i53 >> 2] = i84;
      HEAP32[i36 >> 2] = i85;
      _ma_clip_samples_f32(HEAP32[i63 >> 2] | 0, Math_imul(HEAP32[i53 >> 2] | 0, HEAP32[i36 >> 2] | 0) | 0);
     }
    }
   }
  }
  HEAP32[(HEAP32[i64 >> 2] | 0) + 384 + 46912 >> 2] = HEAP32[i59 >> 2];
  HEAP32[(HEAP32[i64 >> 2] | 0) + 384 + 46916 >> 2] = i74;
  _ma_pcm_converter_read((HEAP32[i64 >> 2] | 0) + 384 + 384 | 0, HEAP32[i69 >> 2] | 0, HEAP32[i59 >> 2] | 0, 0) | 0;
  getTempRet0() | 0;
  HEAP32[i79 >> 2] = (HEAP32[i79 >> 2] | 0) + (HEAP32[i59 >> 2] | 0);
  i24 = HEAP32[i69 >> 2] | 0;
  i84 = HEAP32[i59 >> 2] | 0;
  i85 = HEAP32[(HEAP32[i64 >> 2] | 0) + 384 + 308 >> 2] | 0;
  HEAP32[i44 >> 2] = HEAP32[(HEAP32[i64 >> 2] | 0) + 384 + 304 >> 2];
  HEAP32[i32 >> 2] = i85;
  i85 = _ma_get_bytes_per_sample(HEAP32[i44 >> 2] | 0) | 0;
  i85 = i24 + (Math_imul(i84, Math_imul(i85, HEAP32[i32 >> 2] | 0) | 0) | 0) | 0;
  HEAP32[i69 >> 2] = i85;
 }
 if ((i82 | 0) == 82) {
  STACKTOP = i83;
  return;
 }
}

function _jar_xm_handle_note_and_instrument(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, f14 = f0;
 i9 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i12 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i12 >> 2] = i4;
 do if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) > 0) {
  if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) + 3 >> 0] | 0) == 3) i9 = 5; else if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) + 3 >> 0] | 0) == 5) i9 = 5; else if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) + 2 >> 0] >> 4 | 0) == 15) i9 = 5;
  if ((i9 | 0) == 5) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) {
   _jar_xm_trigger_note(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, 6);
   break;
  }
  if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) > (HEAPU16[(HEAP32[i11 >> 2] | 0) + 4 + 50 >> 1] | 0)) {
   _jar_xm_cut_note(HEAP32[i10 >> 2] | 0);
   HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = 0;
   HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] = 0;
   break;
  }
  HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 + 316 >> 2] | 0) + (((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) - 1 | 0) * 264 | 0);
  if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) _jar_xm_trigger_note(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, 4);
 } while (0);
 do if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) > 0) if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) < 97) {
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2];
  if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) + 3 >> 0] | 0) == 3) i9 = 18; else if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) + 3 >> 0] | 0) == 5) i9 = 18; else if (HEAP32[i5 >> 2] | 0 ? (HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) + 2 >> 0] >> 4 | 0) == 15 : 0) i9 = 19;
  if ((i9 | 0) == 18) if (HEAP32[i5 >> 2] | 0) i9 = 19;
  if ((i9 | 0) == 19) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) {
   f14 = Math_fround((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) + (HEAP8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) + 56 >> 0] | 0) | 0);
   f14 = Math_fround(Math_fround(f14 + Math_fround(Math_fround(HEAP8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) + 44 >> 0] | 0) / Math_fround(128.0))) - Math_fround(1.0));
   HEAPF32[HEAP32[i10 >> 2] >> 2] = f14;
   f14 = Math_fround(_jar_xm_period(HEAP32[i11 >> 2] | 0, Math_fround(HEAPF32[HEAP32[i10 >> 2] >> 2])));
   HEAPF32[(HEAP32[i10 >> 2] | 0) + 88 >> 2] = f14;
   break;
  }
  if (HEAP32[i5 >> 2] | 0) if (HEAPU16[(HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) + 24 >> 1] | 0) {
   if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 26 + ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) - 1) >> 0] | 0) >= (HEAPU16[(HEAP32[i5 >> 2] | 0) + 24 >> 1] | 0)) {
    _jar_xm_cut_note(HEAP32[i10 >> 2] | 0);
    break;
   }
   HEAP32[i6 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i10 >> 2] | 0;
    if ((HEAP32[i6 >> 2] | 0) >>> 0 >= 32) break;
    f14 = Math_fround(_jar_xm_next_of_sample(i1));
    HEAPF32[(HEAP32[i10 >> 2] | 0) + 152 + (HEAP32[i6 >> 2] << 2) >> 2] = f14;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   }
   HEAP32[i1 + 148 >> 2] = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + ((HEAPU8[i1 + 26 + ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) - 1) >> 0] | 0) * 80 | 0);
   f14 = Math_fround((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) + (HEAP8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) + 56 >> 0] | 0) | 0);
   f14 = Math_fround(Math_fround(f14 + Math_fround(Math_fround(HEAP8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) + 44 >> 0] | 0) / Math_fround(128.0))) - Math_fround(1.0));
   HEAPF32[HEAP32[i10 >> 2] >> 2] = f14;
   HEAPF32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] = f14;
   i1 = HEAP32[i11 >> 2] | 0;
   i2 = HEAP32[i10 >> 2] | 0;
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) > 0) {
    _jar_xm_trigger_note(i1, i2, 0);
    break;
   } else {
    _jar_xm_trigger_note(i1, i2, 1);
    break;
   }
  }
  _jar_xm_cut_note(HEAP32[i10 >> 2] | 0);
 } else i9 = 32; else i9 = 32; while (0);
 if ((i9 | 0) == 32) if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 97) _jar_xm_key_off(HEAP32[i10 >> 2] | 0);
 switch (HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] >> 4 | 0) {
 case 5:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] | 0) <= 80) i9 = 36;
   break;
  }
 case 4:
 case 3:
 case 2:
 case 1:
  {
   i9 = 36;
   break;
  }
 case 8:
  {
   _jar_xm_volume_slide(HEAP32[i10 >> 2] | 0, HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] & 15);
   break;
  }
 case 9:
  {
   _jar_xm_volume_slide(HEAP32[i10 >> 2] | 0, HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] << 4 & 255);
   break;
  }
 case 10:
  {
   i6 = (HEAP32[i10 >> 2] | 0) + 105 | 0;
   HEAP8[i6 >> 0] = HEAPU8[i6 >> 0] & 15 | (HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] & 15) << 4;
   break;
  }
 case 12:
  {
   i6 = HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] & 15 | 0;
   f14 = Math_fround(Math_fround(i6 << 4 | i6 | 0) / Math_fround(255.0));
   HEAPF32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] = f14;
   break;
  }
 case 15:
  {
   if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] & 15 | 0) {
    i6 = HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] & 15 | 0;
    HEAP8[(HEAP32[i10 >> 2] | 0) + 84 >> 0] = i6 << 4 | i6;
   }
   break;
  }
 default:
  {}
 }
 if ((i9 | 0) == 36) {
  f14 = Math_fround(Math_fround((HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] | 0) - 16 | 0) / Math_fround(64.0));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] = f14;
 }
 do switch (HEAPU8[(HEAP32[i12 >> 2] | 0) + 3 >> 0] | 0) {
 case 1:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i10 >> 2] | 0) + 78 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 2:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i10 >> 2] | 0) + 79 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 3:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i10 >> 2] | 0) + 84 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 4:
  {
   if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15 | 0) {
    i11 = (HEAP32[i10 >> 2] | 0) + 105 | 0;
    HEAP8[i11 >> 0] = HEAPU8[i11 >> 0] & 240 | HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15;
   }
   if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] >> 4)) {
    STACKTOP = i13;
    return;
   }
   i11 = (HEAP32[i10 >> 2] | 0) + 105 | 0;
   HEAP8[i11 >> 0] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 240 | HEAPU8[i11 >> 0] & 15;
   STACKTOP = i13;
   return;
  }
 case 5:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i10 >> 2] | 0) + 74 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 6:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i10 >> 2] | 0) + 74 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 7:
  {
   if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15 | 0) {
    i11 = (HEAP32[i10 >> 2] | 0) + 117 | 0;
    HEAP8[i11 >> 0] = HEAPU8[i11 >> 0] & 240 | HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15;
   }
   if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] >> 4)) {
    STACKTOP = i13;
    return;
   }
   i11 = (HEAP32[i10 >> 2] | 0) + 117 | 0;
   HEAP8[i11 >> 0] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 240 | HEAPU8[i11 >> 0] & 15;
   STACKTOP = i13;
   return;
  }
 case 8:
  {
   f14 = Math_fround(Math_fround(HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) / Math_fround(255.0));
   HEAPF32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] = f14;
   STACKTOP = i13;
   return;
  }
 case 9:
  {
   if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0)) {
    STACKTOP = i13;
    return;
   }
   if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) >= 97) {
    STACKTOP = i13;
    return;
   }
   HEAP32[i8 >> 2] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] << ((HEAP8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) + 23 >> 0] | 0) == 16 ? 7 : 8);
   if ((HEAP32[i8 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
    HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = Math_fround(-1.0);
    STACKTOP = i13;
    return;
   } else {
    f14 = Math_fround((HEAP32[i8 >> 2] | 0) >>> 0);
    HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = f14;
    STACKTOP = i13;
    return;
   }
  }
 case 10:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i10 >> 2] | 0) + 74 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 11:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) >= (HEAPU16[(HEAP32[i11 >> 2] | 0) + 4 + 42 >> 1] | 0)) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i11 >> 2] | 0) + 368 >> 0] = 1;
   HEAP8[(HEAP32[i11 >> 2] | 0) + 370 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 12:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) > 64) i1 = 64; else i1 = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   f14 = Math_fround(Math_fround(i1 | 0) / Math_fround(64.0));
   HEAPF32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] = f14;
   STACKTOP = i13;
   return;
  }
 case 13:
  {
   HEAP8[(HEAP32[i11 >> 2] | 0) + 369 >> 0] = 1;
   i12 = (HEAP32[i12 >> 2] | 0) + 4 | 0;
   HEAP8[(HEAP32[i11 >> 2] | 0) + 371 >> 0] = ((HEAPU8[i12 >> 0] >> 4) * 10 | 0) + (HEAPU8[i12 >> 0] & 15);
   STACKTOP = i13;
   return;
  }
 case 14:
  do switch (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] >> 4 | 0) {
  case 1:
   {
    if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15 | 0) HEAP8[(HEAP32[i10 >> 2] | 0) + 80 >> 0] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15;
    i12 = HEAP32[i10 >> 2] | 0;
    _jar_xm_pitch_slide(HEAP32[i11 >> 2] | 0, i12 | 0, Math_fround(0 - (HEAPU8[i12 + 80 >> 0] | 0) | 0));
    STACKTOP = i13;
    return;
   }
  case 2:
   {
    if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15 | 0) HEAP8[(HEAP32[i10 >> 2] | 0) + 81 >> 0] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15;
    i12 = HEAP32[i10 >> 2] | 0;
    _jar_xm_pitch_slide(HEAP32[i11 >> 2] | 0, i12 | 0, Math_fround(HEAPU8[i12 + 81 >> 0] | 0));
    STACKTOP = i13;
    return;
   }
  case 4:
   {
    HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 3;
    HEAP8[(HEAP32[i10 >> 2] | 0) + 104 >> 0] = ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] >> 2 & 1 | 0) != 0 ^ 1) & 1;
    STACKTOP = i13;
    return;
   }
  case 5:
   {
    if ((HEAPU8[HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] >> 0] | 0) <= 0) {
     STACKTOP = i13;
     return;
    }
    if ((HEAPU8[HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] >> 0] | 0) >= 97) {
     STACKTOP = i13;
     return;
    }
    if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0)) {
     STACKTOP = i13;
     return;
    }
    i9 = HEAP32[i10 >> 2] | 0;
    f14 = Math_fround(Math_fround(Math_fround((HEAPU8[HEAP32[i9 + 16 >> 2] >> 0] | 0) + (HEAP8[(HEAP32[i9 + 12 >> 2] | 0) + 56 >> 0] | 0) | 0) + Math_fround(Math_fround((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15) - 8 << 4 | 0) / Math_fround(128.0))) - Math_fround(1.0));
    HEAPF32[HEAP32[i10 >> 2] >> 2] = f14;
    f14 = Math_fround(_jar_xm_period(HEAP32[i11 >> 2] | 0, Math_fround(HEAPF32[HEAP32[i10 >> 2] >> 2])));
    HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] = f14;
    _jar_xm_update_frequency(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0);
    STACKTOP = i13;
    return;
   }
  case 6:
   {
    if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15)) {
     HEAP8[(HEAP32[i10 >> 2] | 0) + 94 >> 0] = HEAP8[(HEAP32[i11 >> 2] | 0) + 349 >> 0] | 0;
     HEAP8[(HEAP32[i11 >> 2] | 0) + 371 >> 0] = HEAP8[(HEAP32[i10 >> 2] | 0) + 94 >> 0] | 0;
     STACKTOP = i13;
     return;
    }
    i1 = (HEAP32[i10 >> 2] | 0) + 95 | 0;
    if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15 | 0) == (HEAPU8[(HEAP32[i10 >> 2] | 0) + 95 >> 0] | 0)) {
     HEAP8[i1 >> 0] = 0;
     STACKTOP = i13;
     return;
    } else {
     HEAP8[i1 >> 0] = (HEAP8[i1 >> 0] | 0) + 1 << 24 >> 24;
     HEAP8[(HEAP32[i11 >> 2] | 0) + 368 >> 0] = 1;
     HEAP8[(HEAP32[i11 >> 2] | 0) + 371 >> 0] = HEAP8[(HEAP32[i10 >> 2] | 0) + 94 >> 0] | 0;
     i12 = HEAP32[i11 >> 2] | 0;
     HEAP8[i12 + 370 >> 0] = HEAP8[i12 + 348 >> 0] | 0;
     STACKTOP = i13;
     return;
    }
   }
  case 7:
   {
    HEAP32[(HEAP32[i10 >> 2] | 0) + 112 >> 2] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 3;
    HEAP8[(HEAP32[i10 >> 2] | 0) + 116 >> 0] = ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] >> 2 & 1 | 0) != 0 ^ 1) & 1;
    STACKTOP = i13;
    return;
   }
  case 10:
   {
    if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15 | 0) HEAP8[(HEAP32[i10 >> 2] | 0) + 75 >> 0] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15;
    i12 = HEAP32[i10 >> 2] | 0;
    _jar_xm_volume_slide(i12 | 0, HEAPU8[i12 + 75 >> 0] << 4 & 255);
    STACKTOP = i13;
    return;
   }
  case 11:
   {
    if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15 | 0) HEAP8[(HEAP32[i10 >> 2] | 0) + 75 >> 0] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15;
    i12 = HEAP32[i10 >> 2] | 0;
    _jar_xm_volume_slide(i12 | 0, HEAP8[i12 + 75 >> 0] | 0);
    STACKTOP = i13;
    return;
   }
  case 13:
   {
    if (HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) {
     STACKTOP = i13;
     return;
    }
    if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) {
     STACKTOP = i13;
     return;
    }
    HEAP32[i7 >> 2] = 1;
    if (HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] & 15 | 0) {
     f14 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 4 >> 2]);
     HEAPF32[HEAP32[i10 >> 2] >> 2] = f14;
     _jar_xm_trigger_note(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0);
     STACKTOP = i13;
     return;
    } else {
     _jar_xm_trigger_note(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 2 | 4);
     STACKTOP = i13;
     return;
    }
   }
  case 14:
   {
    i12 = (Math_imul(HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] & 15, HEAPU16[(HEAP32[i11 >> 2] | 0) + 328 >> 1] | 0) | 0) & 65535;
    HEAP16[(HEAP32[i11 >> 2] | 0) + 372 >> 1] = i12;
    STACKTOP = i13;
    return;
   }
  default:
   {
    STACKTOP = i13;
    return;
   }
  } while (0);
 case 15:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   i2 = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   i1 = HEAP32[i11 >> 2] | 0;
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 31) {
    HEAP16[i1 + 328 >> 1] = i2;
    STACKTOP = i13;
    return;
   } else {
    HEAP16[i1 + 330 >> 1] = i2;
    STACKTOP = i13;
    return;
   }
  }
 case 16:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) > 64) i1 = 64; else i1 = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   f14 = Math_fround(Math_fround(i1 | 0) / Math_fround(64.0));
   HEAPF32[(HEAP32[i11 >> 2] | 0) + 332 >> 2] = f14;
   STACKTOP = i13;
   return;
  }
 case 17:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i10 >> 2] | 0) + 76 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 21:
  {
   HEAP16[(HEAP32[i10 >> 2] | 0) + 64 >> 1] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   HEAP16[(HEAP32[i10 >> 2] | 0) + 66 >> 1] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 25:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i10 >> 2] | 0) + 77 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 27:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] >> 4)) {
    i11 = (HEAP32[i10 >> 2] | 0) + 92 | 0;
    HEAP8[i11 >> 0] = HEAPU8[i11 >> 0] & 240 | HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15;
    STACKTOP = i13;
    return;
   } else {
    HEAP8[(HEAP32[i10 >> 2] | 0) + 92 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
    STACKTOP = i13;
    return;
   }
  }
 case 29:
  {
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) <= 0) {
    STACKTOP = i13;
    return;
   }
   HEAP8[(HEAP32[i10 >> 2] | 0) + 124 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0;
   STACKTOP = i13;
   return;
  }
 case 33:
  switch (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] >> 4 | 0) {
  case 1:
   {
    if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15 | 0) HEAP8[(HEAP32[i10 >> 2] | 0) + 82 >> 0] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15;
    i12 = HEAP32[i10 >> 2] | 0;
    _jar_xm_pitch_slide(HEAP32[i11 >> 2] | 0, i12 | 0, Math_fround(Math_fround(HEAPU8[i12 + 82 >> 0] | 0) * Math_fround(-1.0)));
    STACKTOP = i13;
    return;
   }
  case 2:
   {
    if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15 | 0) HEAP8[(HEAP32[i10 >> 2] | 0) + 83 >> 0] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] & 15;
    i12 = HEAP32[i10 >> 2] | 0;
    _jar_xm_pitch_slide(HEAP32[i11 >> 2] | 0, i12 | 0, Math_fround(HEAPU8[i12 + 83 >> 0] | 0));
    STACKTOP = i13;
    return;
   }
  default:
   {
    STACKTOP = i13;
    return;
   }
  }
 default:
  {
   STACKTOP = i13;
   return;
  }
 } while (0);
}

function _stbtt__GetGlyphShapeTT(i8, i7, i13) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, f53 = f0, f54 = f0, f55 = f0;
 i29 = 0;
 i51 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 i49 = i1 + 164 | 0;
 i21 = i1 + 160 | 0;
 i52 = i1 + 156 | 0;
 i48 = i1 + 152 | 0;
 i11 = i1 + 180 | 0;
 i32 = i1 + 148 | 0;
 i2 = i1 + 144 | 0;
 i50 = i1 + 140 | 0;
 i47 = i1 + 136 | 0;
 i6 = i1 + 132 | 0;
 i33 = i1 + 183 | 0;
 i5 = i1 + 182 | 0;
 i9 = i1 + 128 | 0;
 i34 = i1 + 124 | 0;
 i35 = i1 + 120 | 0;
 i10 = i1 + 116 | 0;
 i36 = i1 + 112 | 0;
 i37 = i1 + 108 | 0;
 i44 = i1 + 104 | 0;
 i38 = i1 + 100 | 0;
 i41 = i1 + 96 | 0;
 i45 = i1 + 92 | 0;
 i46 = i1 + 88 | 0;
 i30 = i1 + 84 | 0;
 i31 = i1 + 80 | 0;
 i42 = i1 + 76 | 0;
 i43 = i1 + 72 | 0;
 i39 = i1 + 68 | 0;
 i40 = i1 + 64 | 0;
 i12 = i1 + 60 | 0;
 i3 = i1 + 178 | 0;
 i4 = i1 + 176 | 0;
 i23 = i1 + 56 | 0;
 i15 = i1 + 52 | 0;
 i18 = i1 + 174 | 0;
 i19 = i1 + 172 | 0;
 i16 = i1 + 48 | 0;
 i20 = i1 + 44 | 0;
 i17 = i1 + 40 | 0;
 i26 = i1 + 36 | 0;
 i24 = i1;
 i22 = i1 + 32 | 0;
 i25 = i1 + 28 | 0;
 i27 = i1 + 24 | 0;
 i28 = i1 + 170 | 0;
 i14 = i1 + 168 | 0;
 HEAP32[i21 >> 2] = i8;
 HEAP32[i52 >> 2] = i7;
 HEAP32[i48 >> 2] = i13;
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2];
 HEAP32[i50 >> 2] = 0;
 HEAP32[i47 >> 2] = 0;
 i13 = _stbtt__GetGlyfOffset(HEAP32[i21 >> 2] | 0, HEAP32[i52 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i13;
 HEAP32[HEAP32[i48 >> 2] >> 2] = 0;
 if ((HEAP32[i6 >> 2] | 0) < 0) {
  HEAP32[i49 >> 2] = 0;
  i52 = HEAP32[i49 >> 2] | 0;
  STACKTOP = i51;
  return i52 | 0;
 }
 i52 = _ttSHORT((HEAP32[i2 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0;
 HEAP16[i11 >> 1] = i52;
 L5 : do if ((HEAP16[i11 >> 1] | 0) > 0) {
  HEAP8[i33 >> 0] = 0;
  HEAP32[i35 >> 2] = 0;
  HEAP32[i44 >> 2] = 0;
  HEAP32[i41 >> 2] = 0;
  HEAP32[i32 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + 10;
  i52 = (_ttUSHORT((HEAP32[i2 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + 10 + (HEAP16[i11 >> 1] << 1) | 0) | 0) & 65535;
  HEAP32[i9 >> 2] = i52;
  HEAP32[i12 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + 10 + (HEAP16[i11 >> 1] << 1) + 2 + (HEAP32[i9 >> 2] | 0);
  i52 = 1 + ((_ttUSHORT((HEAP32[i32 >> 2] | 0) + (HEAP16[i11 >> 1] << 1) + -2 | 0) | 0) & 65535) | 0;
  HEAP32[i36 >> 2] = i52;
  HEAP32[i10 >> 2] = (HEAP32[i36 >> 2] | 0) + (HEAP16[i11 >> 1] << 1);
  i52 = _malloc((HEAP32[i10 >> 2] | 0) * 14 | 0) | 0;
  HEAP32[i50 >> 2] = i52;
  if (!(HEAP32[i50 >> 2] | 0)) {
   HEAP32[i49 >> 2] = 0;
   i52 = HEAP32[i49 >> 2] | 0;
   STACKTOP = i51;
   return i52 | 0;
  }
  HEAP32[i37 >> 2] = 0;
  HEAP8[i5 >> 0] = 0;
  HEAP32[i38 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i36 >> 2] | 0);
  HEAP32[i34 >> 2] = 0;
  while (1) {
   if ((HEAP32[i34 >> 2] | 0) >= (HEAP32[i36 >> 2] | 0)) break;
   if (!(HEAPU8[i5 >> 0] | 0)) {
    i52 = HEAP32[i12 >> 2] | 0;
    HEAP32[i12 >> 2] = i52 + 1;
    HEAP8[i33 >> 0] = HEAP8[i52 >> 0] | 0;
    if (HEAPU8[i33 >> 0] & 8 | 0) {
     i52 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i52 + 1;
     HEAP8[i5 >> 0] = HEAP8[i52 >> 0] | 0;
    }
   } else HEAP8[i5 >> 0] = (HEAP8[i5 >> 0] | 0) + -1 << 24 >> 24;
   HEAP8[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] = HEAP8[i33 >> 0] | 0;
   HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
  }
  HEAP32[i45 >> 2] = 0;
  HEAP32[i34 >> 2] = 0;
  while (1) {
   if ((HEAP32[i34 >> 2] | 0) >= (HEAP32[i36 >> 2] | 0)) break;
   HEAP8[i33 >> 0] = HEAP8[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] | 0;
   if (HEAPU8[i33 >> 0] & 2 | 0) {
    i52 = HEAP32[i12 >> 2] | 0;
    HEAP32[i12 >> 2] = i52 + 1;
    HEAP16[i3 >> 1] = HEAPU8[i52 >> 0] | 0;
    i52 = HEAP16[i3 >> 1] | 0;
    HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + (HEAPU8[i33 >> 0] & 16 | 0 ? i52 : 0 - i52 | 0);
   } else if (!(HEAPU8[i33 >> 0] & 16)) {
    HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + (((HEAPU8[HEAP32[i12 >> 2] >> 0] << 8) + (HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) & 65535) << 16 >> 16);
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 2;
   }
   HEAP16[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0) * 14 | 0) >> 1] = HEAP32[i45 >> 2];
   HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
  }
  HEAP32[i46 >> 2] = 0;
  HEAP32[i34 >> 2] = 0;
  while (1) {
   if ((HEAP32[i34 >> 2] | 0) >= (HEAP32[i36 >> 2] | 0)) break;
   HEAP8[i33 >> 0] = HEAP8[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] | 0;
   if (HEAPU8[i33 >> 0] & 4 | 0) {
    i52 = HEAP32[i12 >> 2] | 0;
    HEAP32[i12 >> 2] = i52 + 1;
    HEAP16[i4 >> 1] = HEAPU8[i52 >> 0] | 0;
    i52 = HEAP16[i4 >> 1] | 0;
    HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + (HEAPU8[i33 >> 0] & 32 | 0 ? i52 : 0 - i52 | 0);
   } else if (!(HEAPU8[i33 >> 0] & 32)) {
    HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + (((HEAPU8[HEAP32[i12 >> 2] >> 0] << 8) + (HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) & 65535) << 16 >> 16);
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 2;
   }
   HEAP16[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0) * 14 | 0) + 2 >> 1] = HEAP32[i46 >> 2];
   HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
  }
  HEAP32[i47 >> 2] = 0;
  HEAP32[i40 >> 2] = 0;
  HEAP32[i39 >> 2] = 0;
  HEAP32[i31 >> 2] = 0;
  HEAP32[i30 >> 2] = 0;
  HEAP32[i43 >> 2] = 0;
  HEAP32[i42 >> 2] = 0;
  HEAP32[i34 >> 2] = 0;
  while (1) {
   i1 = HEAP32[i50 >> 2] | 0;
   if ((HEAP32[i34 >> 2] | 0) >= (HEAP32[i36 >> 2] | 0)) break;
   HEAP8[i33 >> 0] = HEAP8[i1 + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] | 0;
   HEAP32[i45 >> 2] = HEAP16[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0) * 14 | 0) >> 1];
   HEAP32[i46 >> 2] = HEAP16[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0) * 14 | 0) + 2 >> 1];
   do if ((HEAP32[i37 >> 2] | 0) == (HEAP32[i34 >> 2] | 0)) {
    if (HEAP32[i34 >> 2] | 0) {
     i52 = _stbtt__close_shape(HEAP32[i50 >> 2] | 0, HEAP32[i47 >> 2] | 0, HEAP32[i44 >> 2] | 0, HEAP32[i41 >> 2] | 0, HEAP32[i42 >> 2] | 0, HEAP32[i43 >> 2] | 0, HEAP32[i39 >> 2] | 0, HEAP32[i40 >> 2] | 0, HEAP32[i30 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0;
     HEAP32[i47 >> 2] = i52;
    }
    HEAP32[i41 >> 2] = ((HEAPU8[i33 >> 0] & 1 | 0) != 0 ^ 1) & 1;
    i1 = HEAP32[i45 >> 2] | 0;
    do if (HEAP32[i41 >> 2] | 0) {
     HEAP32[i39 >> 2] = i1;
     HEAP32[i40 >> 2] = HEAP32[i46 >> 2];
     if (HEAPU8[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) + 1 | 0) * 14 | 0) + 12 >> 0] & 1 | 0) {
      HEAP32[i42 >> 2] = HEAP16[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) + 1 | 0) * 14 | 0) >> 1];
      HEAP32[i43 >> 2] = HEAP16[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) + 1 | 0) * 14 | 0) + 2 >> 1];
      HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
      break;
     } else {
      HEAP32[i42 >> 2] = (HEAP32[i45 >> 2] | 0) + (HEAP16[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) + 1 | 0) * 14 | 0) >> 1] | 0) >> 1;
      HEAP32[i43 >> 2] = (HEAP32[i46 >> 2] | 0) + (HEAP16[(HEAP32[i50 >> 2] | 0) + (((HEAP32[i38 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) + 1 | 0) * 14 | 0) + 2 >> 1] | 0) >> 1;
      break;
     }
    } else {
     HEAP32[i42 >> 2] = i1;
     HEAP32[i43 >> 2] = HEAP32[i46 >> 2];
    } while (0);
    i29 = HEAP32[i50 >> 2] | 0;
    i52 = HEAP32[i47 >> 2] | 0;
    HEAP32[i47 >> 2] = i52 + 1;
    _stbtt_setvertex(i29 + (i52 * 14 | 0) | 0, 1, HEAP32[i42 >> 2] | 0, HEAP32[i43 >> 2] | 0, 0, 0);
    HEAP32[i44 >> 2] = 0;
    i52 = 1 + ((_ttUSHORT((HEAP32[i32 >> 2] | 0) + (HEAP32[i35 >> 2] << 1) | 0) | 0) & 65535) | 0;
    HEAP32[i37 >> 2] = i52;
    HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + 1;
   } else {
    i4 = (HEAP32[i44 >> 2] | 0) != 0;
    if (!(HEAPU8[i33 >> 0] & 1)) {
     if (i4) {
      i27 = HEAP32[i50 >> 2] | 0;
      i28 = HEAP32[i47 >> 2] | 0;
      HEAP32[i47 >> 2] = i28 + 1;
      i29 = HEAP32[i30 >> 2] | 0;
      i52 = HEAP32[i31 >> 2] | 0;
      _stbtt_setvertex(i27 + (i28 * 14 | 0) | 0, 3, i29 + (HEAP32[i45 >> 2] | 0) >> 1, i52 + (HEAP32[i46 >> 2] | 0) >> 1, i29 | 0, i52 | 0);
     }
     HEAP32[i30 >> 2] = HEAP32[i45 >> 2];
     HEAP32[i31 >> 2] = HEAP32[i46 >> 2];
     HEAP32[i44 >> 2] = 1;
     break;
    }
    i1 = HEAP32[i50 >> 2] | 0;
    i3 = HEAP32[i47 >> 2] | 0;
    HEAP32[i47 >> 2] = i3 + 1;
    i3 = i1 + (i3 * 14 | 0) | 0;
    i1 = HEAP32[i45 >> 2] | 0;
    i2 = HEAP32[i46 >> 2] | 0;
    if (i4) _stbtt_setvertex(i3, 3, i1, i2, HEAP32[i30 >> 2] | 0, HEAP32[i31 >> 2] | 0); else _stbtt_setvertex(i3, 2, i1, i2, 0, 0);
    HEAP32[i44 >> 2] = 0;
   } while (0);
   HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
  }
  i52 = _stbtt__close_shape(i1, HEAP32[i47 >> 2] | 0, HEAP32[i44 >> 2] | 0, HEAP32[i41 >> 2] | 0, HEAP32[i42 >> 2] | 0, HEAP32[i43 >> 2] | 0, HEAP32[i39 >> 2] | 0, HEAP32[i40 >> 2] | 0, HEAP32[i30 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0;
  HEAP32[i47 >> 2] = i52;
 } else {
  if ((HEAP16[i11 >> 1] | 0) != -1) {
   if ((HEAP16[i11 >> 1] | 0) >= 0) break;
   ___assert_fail(53776, 52491, 1841, 52943);
  }
  HEAP32[i23 >> 2] = 1;
  HEAP32[i15 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + 10;
  HEAP32[i47 >> 2] = 0;
  HEAP32[i50 >> 2] = 0;
  while (1) {
   if (!(HEAP32[i23 >> 2] | 0)) break L5;
   HEAP32[i16 >> 2] = 0;
   HEAP32[i17 >> 2] = 0;
   HEAP32[i26 >> 2] = 0;
   HEAP32[i24 >> 2] = HEAP32[6496];
   HEAP32[i24 + 4 >> 2] = HEAP32[6497];
   HEAP32[i24 + 8 >> 2] = HEAP32[6498];
   HEAP32[i24 + 12 >> 2] = HEAP32[6499];
   HEAP32[i24 + 16 >> 2] = HEAP32[6500];
   HEAP32[i24 + 20 >> 2] = HEAP32[6501];
   i52 = _ttSHORT(HEAP32[i15 >> 2] | 0) | 0;
   HEAP16[i18 >> 1] = i52;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
   i52 = _ttSHORT(HEAP32[i15 >> 2] | 0) | 0;
   HEAP16[i19 >> 1] = i52;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
   if (!(HEAPU16[i18 >> 1] & 2)) {
    i29 = 55;
    break;
   }
   i1 = HEAP32[i15 >> 2] | 0;
   if (HEAPU16[i18 >> 1] & 1 | 0) {
    f53 = Math_fround((_ttSHORT(i1) | 0) << 16 >> 16);
    HEAPF32[i24 + 16 >> 2] = f53;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
    f53 = Math_fround((_ttSHORT(HEAP32[i15 >> 2] | 0) | 0) << 16 >> 16);
    HEAPF32[i24 + 20 >> 2] = f53;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
   } else {
    f53 = Math_fround(HEAP8[i1 >> 0] | 0);
    HEAPF32[i24 + 16 >> 2] = f53;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    f53 = Math_fround(HEAP8[HEAP32[i15 >> 2] >> 0] | 0);
    HEAPF32[i24 + 20 >> 2] = f53;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   do if (HEAPU16[i18 >> 1] & 8 | 0) {
    f53 = Math_fround(Math_fround((_ttSHORT(HEAP32[i15 >> 2] | 0) | 0) << 16 >> 16 | 0) / Math_fround(16384.0));
    HEAPF32[i24 + 12 >> 2] = f53;
    HEAPF32[i24 >> 2] = f53;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
    HEAPF32[i24 + 8 >> 2] = Math_fround(0.0);
    HEAPF32[i24 + 4 >> 2] = Math_fround(0.0);
   } else {
    if (HEAPU16[i18 >> 1] & 64 | 0) {
     f53 = Math_fround(Math_fround((_ttSHORT(HEAP32[i15 >> 2] | 0) | 0) << 16 >> 16 | 0) / Math_fround(16384.0));
     HEAPF32[i24 >> 2] = f53;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     HEAPF32[i24 + 8 >> 2] = Math_fround(0.0);
     HEAPF32[i24 + 4 >> 2] = Math_fround(0.0);
     f53 = Math_fround(Math_fround((_ttSHORT(HEAP32[i15 >> 2] | 0) | 0) << 16 >> 16 | 0) / Math_fround(16384.0));
     HEAPF32[i24 + 12 >> 2] = f53;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     break;
    }
    if (HEAPU16[i18 >> 1] & 128 | 0) {
     f53 = Math_fround(Math_fround((_ttSHORT(HEAP32[i15 >> 2] | 0) | 0) << 16 >> 16 | 0) / Math_fround(16384.0));
     HEAPF32[i24 >> 2] = f53;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     f53 = Math_fround(Math_fround((_ttSHORT(HEAP32[i15 >> 2] | 0) | 0) << 16 >> 16 | 0) / Math_fround(16384.0));
     HEAPF32[i24 + 4 >> 2] = f53;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     f53 = Math_fround(Math_fround((_ttSHORT(HEAP32[i15 >> 2] | 0) | 0) << 16 >> 16 | 0) / Math_fround(16384.0));
     HEAPF32[i24 + 8 >> 2] = f53;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     f53 = Math_fround(Math_fround((_ttSHORT(HEAP32[i15 >> 2] | 0) | 0) << 16 >> 16 | 0) / Math_fround(16384.0));
     HEAPF32[i24 + 12 >> 2] = f53;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
    }
   } while (0);
   f53 = Math_fround(HEAPF32[i24 >> 2]);
   f53 = Math_fround(f53 * Math_fround(HEAPF32[i24 >> 2]));
   f54 = Math_fround(HEAPF32[i24 + 4 >> 2]);
   f54 = Math_fround(+Math_sqrt(+(+Math_fround(f53 + Math_fround(f54 * Math_fround(HEAPF32[i24 + 4 >> 2]))))));
   HEAPF32[i22 >> 2] = f54;
   f54 = Math_fround(HEAPF32[i24 + 8 >> 2]);
   f54 = Math_fround(f54 * Math_fround(HEAPF32[i24 + 8 >> 2]));
   f53 = Math_fround(HEAPF32[i24 + 12 >> 2]);
   f53 = Math_fround(+Math_sqrt(+(+Math_fround(f54 + Math_fround(f53 * Math_fround(HEAPF32[i24 + 12 >> 2]))))));
   HEAPF32[i25 >> 2] = f53;
   i52 = _stbtt_GetGlyphShape(HEAP32[i21 >> 2] | 0, HEAPU16[i19 >> 1] | 0, i17) | 0;
   HEAP32[i16 >> 2] = i52;
   if ((HEAP32[i16 >> 2] | 0) > 0) {
    HEAP32[i20 >> 2] = 0;
    while (1) {
     if ((HEAP32[i20 >> 2] | 0) >= (HEAP32[i16 >> 2] | 0)) break;
     HEAP32[i27 >> 2] = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) * 14 | 0);
     HEAP16[i28 >> 1] = HEAP16[HEAP32[i27 >> 2] >> 1] | 0;
     HEAP16[i14 >> 1] = HEAP16[(HEAP32[i27 >> 2] | 0) + 2 >> 1] | 0;
     f53 = Math_fround(HEAPF32[i22 >> 2]);
     f55 = Math_fround(HEAPF32[i24 >> 2]);
     f55 = Math_fround(f55 * Math_fround(HEAP16[i28 >> 1] | 0));
     f54 = Math_fround(HEAPF32[i24 + 8 >> 2]);
     f54 = Math_fround(f55 + Math_fround(f54 * Math_fround(HEAP16[i14 >> 1] | 0)));
     i52 = ~~Math_fround(f53 * Math_fround(f54 + Math_fround(HEAPF32[i24 + 16 >> 2])));
     HEAP16[HEAP32[i27 >> 2] >> 1] = i52;
     f54 = Math_fround(HEAPF32[i25 >> 2]);
     f53 = Math_fround(HEAPF32[i24 + 4 >> 2]);
     f53 = Math_fround(f53 * Math_fround(HEAP16[i28 >> 1] | 0));
     f55 = Math_fround(HEAPF32[i24 + 12 >> 2]);
     f55 = Math_fround(f53 + Math_fround(f55 * Math_fround(HEAP16[i14 >> 1] | 0)));
     i52 = ~~Math_fround(f54 * Math_fround(f55 + Math_fround(HEAPF32[i24 + 20 >> 2])));
     HEAP16[(HEAP32[i27 >> 2] | 0) + 2 >> 1] = i52;
     HEAP16[i28 >> 1] = HEAP16[(HEAP32[i27 >> 2] | 0) + 4 >> 1] | 0;
     HEAP16[i14 >> 1] = HEAP16[(HEAP32[i27 >> 2] | 0) + 6 >> 1] | 0;
     f55 = Math_fround(HEAPF32[i22 >> 2]);
     f54 = Math_fround(HEAPF32[i24 >> 2]);
     f54 = Math_fround(f54 * Math_fround(HEAP16[i28 >> 1] | 0));
     f53 = Math_fround(HEAPF32[i24 + 8 >> 2]);
     f53 = Math_fround(f54 + Math_fround(f53 * Math_fround(HEAP16[i14 >> 1] | 0)));
     i52 = ~~Math_fround(f55 * Math_fround(f53 + Math_fround(HEAPF32[i24 + 16 >> 2])));
     HEAP16[(HEAP32[i27 >> 2] | 0) + 4 >> 1] = i52;
     f53 = Math_fround(HEAPF32[i25 >> 2]);
     f55 = Math_fround(HEAPF32[i24 + 4 >> 2]);
     f55 = Math_fround(f55 * Math_fround(HEAP16[i28 >> 1] | 0));
     f54 = Math_fround(HEAPF32[i24 + 12 >> 2]);
     f54 = Math_fround(f55 + Math_fround(f54 * Math_fround(HEAP16[i14 >> 1] | 0)));
     i52 = ~~Math_fround(f53 * Math_fround(f54 + Math_fround(HEAPF32[i24 + 20 >> 2])));
     HEAP16[(HEAP32[i27 >> 2] | 0) + 6 >> 1] = i52;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
    }
    i52 = _malloc(((HEAP32[i47 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) | 0) * 14 | 0) | 0;
    HEAP32[i26 >> 2] = i52;
    if (!(HEAP32[i26 >> 2] | 0)) break;
    if ((HEAP32[i47 >> 2] | 0) > 0) _memcpy(HEAP32[i26 >> 2] | 0, HEAP32[i50 >> 2] | 0, (HEAP32[i47 >> 2] | 0) * 14 | 0) | 0;
    _memcpy((HEAP32[i26 >> 2] | 0) + ((HEAP32[i47 >> 2] | 0) * 14 | 0) | 0, HEAP32[i17 >> 2] | 0, (HEAP32[i16 >> 2] | 0) * 14 | 0) | 0;
    if (HEAP32[i50 >> 2] | 0) _free(HEAP32[i50 >> 2] | 0);
    HEAP32[i50 >> 2] = HEAP32[i26 >> 2];
    _free(HEAP32[i17 >> 2] | 0);
    HEAP32[i47 >> 2] = (HEAP32[i47 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
   }
   HEAP32[i23 >> 2] = HEAPU16[i18 >> 1] & 32;
  }
  if ((i29 | 0) == 55) ___assert_fail(53776, 52491, 1788, 52943);
  if (HEAP32[i50 >> 2] | 0) _free(HEAP32[i50 >> 2] | 0);
  if (HEAP32[i17 >> 2] | 0) _free(HEAP32[i17 >> 2] | 0);
  HEAP32[i49 >> 2] = 0;
  i52 = HEAP32[i49 >> 2] | 0;
  STACKTOP = i51;
  return i52 | 0;
 } while (0);
 HEAP32[HEAP32[i48 >> 2] >> 2] = HEAP32[i50 >> 2];
 HEAP32[i49 >> 2] = HEAP32[i47 >> 2];
 i52 = HEAP32[i49 >> 2] | 0;
 STACKTOP = i51;
 return i52 | 0;
}

function _ma_src_read_deinterleaved__sinc(i7, i3, i4, i9, i8) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, f2 = f0, i5 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, f61 = f0, f62 = f0;
 i60 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 1504 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1504);
 i56 = i1 + 1488 | 0;
 i58 = i1 + 1484 | 0;
 i16 = i1 + 1480 | 0;
 i43 = i1 + 1476 | 0;
 i44 = i1 + 1472 | 0;
 i37 = i1 + 1468 | 0;
 i55 = i1 + 1464 | 0;
 i57 = i1 + 1460 | 0;
 i31 = i1 + 1456 | 0;
 i17 = i1 + 1452 | 0;
 i36 = i1 + 1448 | 0;
 i20 = i1 + 1312 | 0;
 i10 = i1 + 1444 | 0;
 i38 = i1 + 1440 | 0;
 i19 = i1 + 1436 | 0;
 i30 = i1 + 1432 | 0;
 i11 = i1 + 1428 | 0;
 i54 = i1 + 1424 | 0;
 i12 = i1 + 1420 | 0;
 i13 = i1 + 1416 | 0;
 i40 = i1 + 1152 | 0;
 i6 = i1 + 640 | 0;
 i53 = i1 + 1412 | 0;
 i5 = i1 + 128 | 0;
 i29 = i1 + 1408 | 0;
 i23 = i1 + 1404 | 0;
 i59 = i1 + 1304 | 0;
 i32 = i1 + 1400 | 0;
 i50 = i1 + 1396 | 0;
 i51 = i1 + 1392 | 0;
 i33 = i1 + 1296 | 0;
 i34 = i1 + 1288 | 0;
 i35 = i1 + 1280 | 0;
 i24 = i1 + 1388 | 0;
 i41 = i1 + 1384 | 0;
 i18 = i1 + 1380 | 0;
 i49 = i1 + 1376 | 0;
 i25 = i1 + 1372 | 0;
 i46 = i1 + 1368 | 0;
 i27 = i1 + 1364 | 0;
 i26 = i1 + 1360 | 0;
 i28 = i1 + 1356 | 0;
 i48 = i1 + 1352 | 0;
 i45 = i1 + 1348 | 0;
 i52 = i1 + 1344 | 0;
 i15 = i1 + 1340 | 0;
 i42 = i1 + 1336 | 0;
 i47 = i1 + 1332 | 0;
 i39 = i1;
 i22 = i1 + 1328 | 0;
 i21 = i1 + 1324 | 0;
 i14 = i1 + 1320 | 0;
 HEAP32[i36 >> 2] = i7;
 i7 = i20;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i7 + 4 >> 2] = i4;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i38 >> 2] = i8;
 if (!(HEAP32[i36 >> 2] | 0)) ___assert_fail(44155, 36381, 31589, 44174);
 i9 = i20;
 i8 = HEAP32[i9 + 4 >> 2] | 0;
 if (!(i8 >>> 0 > 0 | (i8 | 0) == 0 & (HEAP32[i9 >> 2] | 0) >>> 0 > 0)) ___assert_fail(36454, 36381, 31590, 44174);
 if (!(HEAP32[i10 >> 2] | 0)) ___assert_fail(44206, 36381, 31591, 44174);
 f2 = Math_fround((HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 >> 2] | 0) >>> 0);
 f2 = Math_fround(f2 / Math_fround((HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 4 >> 2] | 0) >>> 0));
 HEAPF32[i19 >> 2] = f2;
 f2 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i19 >> 2]));
 HEAPF32[i30 >> 2] = f2;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 28 + 4 >> 2];
 HEAP32[i54 >> 2] = HEAP32[i11 >> 2] << 1;
 HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
 do if ((HEAPU8[(HEAP32[i36 >> 2] | 0) + 42084 >> 0] | 0) >>> 4 & 1 | 0) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1 & -2; else {
  if ((HEAPU8[(HEAP32[i36 >> 2] | 0) + 42084 >> 0] | 0) >>> 3 & 1 | 0) {
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 7 & -8;
   break;
  }
  if ((HEAPU8[(HEAP32[i36 >> 2] | 0) + 42084 >> 0] | 0) >>> 2 & 1 | 0) {
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 3 & -4;
   break;
  }
  if ((HEAPU8[(HEAP32[i36 >> 2] | 0) + 42084 >> 0] | 0) >>> 1 & 1 | 0) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1 & -2;
 } while (0);
 HEAP32[i13 >> 2] = HEAP32[i12 >> 2] << 1;
 _memcpy(i40 | 0, HEAP32[i10 >> 2] | 0, HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 8 >> 2] << 2 | 0) | 0;
 HEAP32[i53 >> 2] = i6 + 64 - 1 & -64;
 _memset(HEAP32[i53 >> 2] | 0, 0, 256) | 0;
 HEAP32[i29 >> 2] = i5 + 64 - 1 & -64;
 _memset(HEAP32[i29 >> 2] | 0, 0, 256) | 0;
 HEAP32[i23 >> 2] = 0;
 while (1) {
  if ((HEAP32[i23 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break;
  f2 = Math_fround((HEAP32[i23 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0);
  HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i23 >> 2] << 2) >> 2] = f2;
  HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
 }
 i13 = i59;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 L25 : while (1) {
  i12 = i59;
  i10 = HEAP32[i12 + 4 >> 2] | 0;
  i13 = i20;
  i11 = HEAP32[i13 + 4 >> 2] | 0;
  if (!(i10 >>> 0 < i11 >>> 0 ? 1 : (i10 | 0) == (i11 | 0) ? (HEAP32[i12 >> 2] | 0) >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0 : 0)) {
   i1 = 73;
   break;
  }
  i13 = HEAP32[i36 >> 2] | 0;
  HEAP32[i32 >> 2] = 320 - (HEAP32[i13 + 42048 + 28 + 4 >> 2] << 1) - (HEAP32[i13 + 40968 >> 2] | 0);
  if ((HEAP32[i32 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[i36 >> 2] | 0) + 40964 >> 2] | 0) >>> 0) HEAP32[i32 >> 2] = HEAP32[(HEAP32[i36 >> 2] | 0) + 40964 >> 2];
  do if (HEAP8[(HEAP32[i36 >> 2] | 0) + 42048 + 16 >> 0] & 1 | 0) if ((HEAP32[i32 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 28 + 4 >> 2] | 0) >>> 0) {
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) - (HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 28 + 4 >> 2] | 0);
   break;
  } else {
   HEAP32[i32 >> 2] = 0;
   break;
  } while (0);
  f2 = Math_fround(HEAPF32[(HEAP32[i36 >> 2] | 0) + 40960 >> 2]);
  HEAPF32[i50 >> 2] = f2;
  f2 = Math_fround(((HEAP32[(HEAP32[i36 >> 2] | 0) + 40968 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) | 0) >>> 0);
  HEAPF32[i51 >> 2] = f2;
  if (!(Math_fround(HEAPF32[i50 >> 2]) >= Math_fround(0.0))) {
   i1 = 27;
   break;
  }
  f2 = Math_fround(HEAPF32[i50 >> 2]);
  if (!(f2 <= Math_fround(HEAPF32[i51 >> 2]))) {
   i1 = 29;
   break;
  }
  f2 = Math_fround(HEAPF32[i51 >> 2]);
  f2 = Math_fround(f2 - Math_fround(HEAPF32[i50 >> 2]));
  f2 = Math_fround(f2 * Math_fround(HEAPF32[i30 >> 2]));
  i12 = +Math_abs(+f2) >= 1.0 ? (+f2 > 0.0 ? ~~+Math_min(+Math_floor(+f2 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil((+f2 - +(~~+f2 >>> 0)) / 4294967296.0) >>> 0) : 0;
  i10 = i33;
  HEAP32[i10 >> 2] = ~~+f2 >>> 0;
  HEAP32[i10 + 4 >> 2] = i12;
  i10 = i20;
  i12 = i59;
  i12 = _i64Subtract(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0) | 0;
  i10 = getTempRet0() | 0;
  i13 = i34;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i13 + 4 >> 2] = i10;
  i13 = i34;
  i10 = HEAP32[i13 + 4 >> 2] | 0;
  i12 = i35;
  HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i12 + 4 >> 2] = i10;
  i12 = i35;
  i10 = HEAP32[i12 + 4 >> 2] | 0;
  i13 = i33;
  i11 = HEAP32[i13 + 4 >> 2] | 0;
  if (i10 >>> 0 > i11 >>> 0 ? 1 : (i10 | 0) == (i11 | 0) ? (HEAP32[i12 >> 2] | 0) >>> 0 > (HEAP32[i13 >> 2] | 0) >>> 0 : 0) {
   i11 = i33;
   i12 = HEAP32[i11 + 4 >> 2] | 0;
   i13 = i35;
   HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i13 + 4 >> 2] = i12;
  }
  HEAP32[i24 >> 2] = 0;
  while (1) {
   if ((HEAP32[i24 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break;
   f2 = Math_fround(HEAPF32[i50 >> 2]);
   HEAPF32[i49 >> 2] = f2;
   HEAP32[i25 >> 2] = 0;
   while (1) {
    i13 = i35;
    i12 = HEAP32[i13 + 4 >> 2] | 0;
    if (!(0 < i12 >>> 0 ? 1 : 0 == (i12 | 0) ? (HEAP32[i25 >> 2] | 0) >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0 : 0)) break;
    HEAPF32[i46 >> 2] = Math_fround(0.0);
    f2 = Math_fround(+Math_floor(+(+Math_fround(HEAPF32[i49 >> 2]))));
    HEAPF32[i27 >> 2] = f2;
    i13 = ~~Math_fround(HEAPF32[i27 >> 2]) >>> 0;
    HEAP32[i26 >> 2] = i13;
    HEAP32[i28 >> 2] = 0;
    HEAPF32[HEAP32[i53 >> 2] >> 2] = Math_fround(0.0);
    HEAP32[i23 >> 2] = 1;
    while (1) {
     if ((HEAP32[i23 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break;
     f2 = Math_fround(HEAPF32[(HEAP32[i36 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 1280 | 0) + ((HEAP32[i26 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[i53 >> 2] | 0) + (HEAP32[i23 >> 2] << 2) >> 2] = f2;
     HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
    }
    HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
    f2 = Math_fround(HEAPF32[i49 >> 2]);
    f2 = Math_fround(f2 - Math_fround((HEAP32[i26 >> 2] | 0) >>> 0));
    HEAPF32[i48 >> 2] = f2;
    while (1) {
     if ((HEAP32[i28 >> 2] | 0) >= (HEAP32[i54 >> 2] | 0)) break;
     f2 = Math_fround(HEAPF32[(HEAP32[i53 >> 2] | 0) + (HEAP32[i28 >> 2] << 2) >> 2]);
     HEAPF32[i45 >> 2] = f2;
     f2 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i28 >> 2] << 2) >> 2]);
     HEAPF32[i52 >> 2] = f2;
     f2 = Math_fround(HEAPF32[i48 >> 2]);
     f2 = Math_fround(f2 - Math_fround(HEAPF32[i52 >> 2]));
     HEAP32[i37 >> 2] = HEAP32[i36 >> 2];
     HEAPF32[i55 >> 2] = f2;
     if (!(HEAP32[i37 >> 2] | 0)) {
      i1 = 42;
      break L25;
     }
     f62 = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[i55 >> 2]))));
     HEAPF32[i57 >> 2] = f62;
     f62 = Math_fround(Math_fround(HEAPF32[i57 >> 2]) * Math_fround(8.0));
     HEAPF32[i57 >> 2] = f62;
     i13 = ~~Math_fround(HEAPF32[i57 >> 2]);
     HEAP32[i31 >> 2] = i13;
     f62 = Math_fround(HEAPF32[i57 >> 2]);
     f62 = Math_fround(f62 - Math_fround(HEAP32[i31 >> 2] | 0));
     HEAPF32[i17 >> 2] = f62;
     f62 = Math_fround(HEAPF32[(HEAP32[i37 >> 2] | 0) + 40972 + (HEAP32[i31 >> 2] << 2) >> 2]);
     f61 = Math_fround(HEAPF32[(HEAP32[i37 >> 2] | 0) + 40972 + ((HEAP32[i31 >> 2] | 0) + 1 << 2) >> 2]);
     f2 = Math_fround(HEAPF32[i17 >> 2]);
     HEAPF32[i56 >> 2] = f62;
     HEAPF32[i58 >> 2] = f61;
     HEAPF32[i16 >> 2] = f2;
     f2 = Math_fround(HEAPF32[i58 >> 2]);
     f2 = Math_fround(f2 - Math_fround(HEAPF32[i56 >> 2]));
     HEAPF32[i43 >> 2] = f2;
     f2 = Math_fround(HEAPF32[i43 >> 2]);
     f2 = Math_fround(f2 * Math_fround(HEAPF32[i16 >> 2]));
     HEAPF32[i44 >> 2] = f2;
     f2 = Math_fround(HEAPF32[i56 >> 2]);
     f2 = Math_fround(f2 + Math_fround(HEAPF32[i44 >> 2]));
     HEAPF32[i15 >> 2] = f2;
     f2 = Math_fround(HEAPF32[i45 >> 2]);
     f2 = Math_fround(f2 * Math_fround(HEAPF32[i15 >> 2]));
     HEAPF32[i42 >> 2] = f2;
     f2 = Math_fround(HEAPF32[i42 >> 2]);
     f2 = Math_fround(Math_fround(HEAPF32[i46 >> 2]) + f2);
     HEAPF32[i46 >> 2] = f2;
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
    }
    f62 = Math_fround(HEAPF32[i46 >> 2]);
    HEAPF32[(HEAP32[i40 + (HEAP32[i24 >> 2] << 2) >> 2] | 0) + (HEAP32[i25 >> 2] << 2) >> 2] = f62;
    f62 = Math_fround(HEAPF32[i19 >> 2]);
    f62 = Math_fround(Math_fround(HEAPF32[i49 >> 2]) + f62);
    HEAPF32[i49 >> 2] = f62;
    HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
   }
   i13 = i40 + (HEAP32[i24 >> 2] << 2) | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i35 >> 2] << 2);
   HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
  }
  i11 = i35;
  i12 = i59;
  i11 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0) | 0;
  i12 = getTempRet0() | 0;
  i13 = i59;
  HEAP32[i13 >> 2] = i11;
  HEAP32[i13 + 4 >> 2] = i12;
  HEAP32[i41 >> 2] = HEAP32[(HEAP32[i36 >> 2] | 0) + 40968 >> 2];
  i13 = i35;
  f62 = Math_fround(+((HEAP32[i13 >> 2] | 0) >>> 0) + 4294967296.0 * +(HEAP32[i13 + 4 >> 2] | 0));
  f62 = Math_fround(f62 * Math_fround(HEAPF32[i19 >> 2]));
  i13 = (HEAP32[i36 >> 2] | 0) + 40960 | 0;
  f62 = Math_fround(Math_fround(HEAPF32[i13 >> 2]) + f62);
  HEAPF32[i13 >> 2] = f62;
  i13 = ~~Math_fround(HEAPF32[(HEAP32[i36 >> 2] | 0) + 40960 >> 2]) >>> 0;
  HEAP32[(HEAP32[i36 >> 2] | 0) + 40968 >> 2] = i13;
  i13 = (HEAP32[i36 >> 2] | 0) + 40964 | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - ((HEAP32[(HEAP32[i36 >> 2] | 0) + 40968 >> 2] | 0) - (HEAP32[i41 >> 2] | 0));
  f62 = Math_fround(HEAPF32[i51 >> 2]);
  f62 = Math_fround(f62 - Math_fround(HEAPF32[(HEAP32[i36 >> 2] | 0) + 40960 >> 2]));
  i13 = ~~Math_fround(f62 * Math_fround(HEAPF32[i30 >> 2])) >>> 0;
  HEAP32[i18 >> 2] = i13;
  L59 : do if (!(HEAP32[i18 >> 2] | 0)) {
   HEAP32[i47 >> 2] = 320 - (HEAP32[(HEAP32[i36 >> 2] | 0) + 40968 >> 2] | 0);
   f62 = Math_fround(+Math_floor(+(+Math_fround(HEAPF32[(HEAP32[i36 >> 2] | 0) + 40960 >> 2]))));
   i13 = (HEAP32[i36 >> 2] | 0) + 40960 | 0;
   f62 = Math_fround(Math_fround(HEAPF32[i13 >> 2]) - f62);
   HEAPF32[i13 >> 2] = f62;
   HEAP32[(HEAP32[i36 >> 2] | 0) + 40968 >> 2] = 0;
   HEAP32[i24 >> 2] = 0;
   while (1) {
    if ((HEAP32[i24 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break L59;
    i13 = (HEAP32[i36 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 1280 | 0) | 0;
    _memmove(i13 | 0, i13 + 1280 + (0 - (HEAP32[i47 >> 2] | 0) << 2) | 0, HEAP32[i47 >> 2] << 2 | 0) | 0;
    HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
   }
  } while (0);
  i4 = (HEAP32[i36 >> 2] | 0) + 42084 | 0;
  i3 = HEAP8[i4 >> 0] | 0;
  if (HEAP8[(HEAP32[i36 >> 2] | 0) + 42084 >> 0] & 1 | 0) {
   i1 = 51;
   break;
  }
  if (i3 & 1 | 0) {
   i1 = 53;
   break;
  }
  L67 : do if ((HEAP32[i18 >> 2] | 0) == 0 ? 1 : (HEAP32[(HEAP32[i36 >> 2] | 0) + 40964 >> 2] | 0) >>> 0 <= (HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 28 + 4 >> 2] | 0) >>> 0) {
   i1 = i39;
   i3 = i1 + 128 | 0;
   do {
    HEAP32[i1 >> 2] = 0;
    i1 = i1 + 4 | 0;
   } while ((i1 | 0) < (i3 | 0));
   HEAP32[i24 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i36 >> 2] | 0;
    if ((HEAP32[i24 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break;
    i13 = HEAP32[i36 >> 2] | 0;
    HEAP32[i39 + (HEAP32[i24 >> 2] << 2) >> 2] = i1 + ((HEAP32[i24 >> 2] | 0) * 1280 | 0) + (HEAP32[i13 + 42048 + 28 + 4 >> 2] << 2) + (HEAP32[i13 + 40964 >> 2] << 2);
    HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
   }
   HEAP32[i22 >> 2] = 320 - ((HEAP32[i1 + 42048 + 28 + 4 >> 2] | 0) + (HEAP32[(HEAP32[i36 >> 2] | 0) + 40964 >> 2] | 0));
   HEAP32[i21 >> 2] = 0;
   if ((HEAP32[i22 >> 2] | 0) >>> 0 > 0) {
    i13 = HEAP32[i36 >> 2] | 0;
    i13 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 42048 + 20 >> 2] & 15](i13 | 0, HEAP32[i22 >> 2] | 0, i39, HEAP32[i38 >> 2] | 0) | 0;
    HEAP32[i21 >> 2] = i13;
   }
   i3 = (HEAP32[i36 >> 2] | 0) + 42084 | 0;
   i1 = HEAP8[i3 >> 0] & -2;
   if ((HEAP32[i21 >> 2] | 0) != (HEAP32[i22 >> 2] | 0)) HEAP8[i3 >> 0] = i1 | 1; else HEAP8[i3 >> 0] = i1;
   do if (HEAP32[i21 >> 2] | 0) {
    i13 = (HEAP32[i36 >> 2] | 0) + 40964 | 0;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i21 >> 2] | 0);
   } else {
    f2 = Math_fround((HEAP32[(HEAP32[i36 >> 2] | 0) + 40964 >> 2] | 0) >>> 0);
    f2 = Math_fround(f2 * Math_fround(HEAPF32[i30 >> 2]));
    if (HEAP8[(HEAP32[i36 >> 2] | 0) + 42048 + 16 >> 0] & 1 | 0) if (f2 <= Math_fround((HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 28 + 4 >> 2] | 0) >>> 0)) {
     i1 = 73;
     break L25;
    } else break; else if (f2 < Math_fround(1.0)) {
     i1 = 73;
     break L25;
    } else break;
   } while (0);
   i13 = HEAP32[i36 >> 2] | 0;
   HEAP32[i14 >> 2] = 320 - ((HEAP32[i13 + 42048 + 28 + 4 >> 2] | 0) + (HEAP32[i13 + 40964 >> 2] | 0));
   if ((HEAP32[i14 >> 2] | 0) >>> 0 > 0) {
    HEAP32[i24 >> 2] = 0;
    while (1) {
     if ((HEAP32[i24 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i36 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break L67;
     i13 = HEAP32[i36 >> 2] | 0;
     _memset(i13 + ((HEAP32[i24 >> 2] | 0) * 1280 | 0) + (HEAP32[i13 + 42048 + 28 + 4 >> 2] << 2) + (HEAP32[i13 + 40964 >> 2] << 2) | 0, 0, HEAP32[i14 >> 2] << 2 | 0) | 0;
     HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
    }
   }
  } while (0);
 }
 if ((i1 | 0) == 27) ___assert_fail(44233, 36381, 31662, 44174); else if ((i1 | 0) == 29) ___assert_fail(44248, 36381, 31663, 44174); else if ((i1 | 0) == 42) ___assert_fail(44155, 36381, 31418, 44271); else if ((i1 | 0) == 51) {
  HEAP8[i4 >> 0] = i3 & -2;
  i58 = i59;
  i59 = i58;
  i59 = HEAP32[i59 >> 2] | 0;
  i58 = i58 + 4 | 0;
  i58 = HEAP32[i58 >> 2] | 0;
  setTempRet0(i58 | 0);
  STACKTOP = i60;
  return i59 | 0;
 } else if ((i1 | 0) == 53) ___assert_fail(44305, 36381, 31861, 44174); else if ((i1 | 0) == 73) {
  i58 = i59;
  i59 = i58;
  i59 = HEAP32[i59 >> 2] | 0;
  i58 = i58 + 4 | 0;
  i58 = HEAP32[i58 >> 2] | 0;
  setTempRet0(i58 | 0);
  STACKTOP = i60;
  return i59 | 0;
 }
 return 0;
}

function _vfscanf(i35, i2, i29) {
 i35 = i35 | 0;
 i2 = i2 | 0;
 i29 = i29 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, f37 = f0;
 i34 = 0;
 i36 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 i31 = i1 + 264 | 0;
 i30 = i1;
 i32 = i1 + 260 | 0;
 i20 = i1 + 272 | 0;
 if ((HEAP32[i35 + 76 >> 2] | 0) > -1) i33 = ___lockfile(i35) | 0; else i33 = 0;
 i1 = HEAP8[i2 >> 0] | 0;
 L4 : do if (!(i1 << 24 >> 24)) i1 = 0; else {
  i26 = i35 + 4 | 0;
  i28 = i35 + 104 | 0;
  i27 = i35 + 120 | 0;
  i25 = i35 + 8 | 0;
  i21 = i30 + 10 | 0;
  i22 = i30 + 33 | 0;
  i23 = i30 + 46 | 0;
  i24 = i30 + 94 | 0;
  i19 = i31 + 4 | 0;
  i3 = 0;
  i4 = i1;
  i13 = 0;
  i14 = 0;
  i1 = 0;
  i8 = i2;
  i2 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace(i4 & 255) | 0)) {
    i6 = (HEAP8[i8 >> 0] | 0) == 37;
    L10 : do if (i6) {
     i4 = i8 + 1 | 0;
     i5 = HEAP8[i4 >> 0] | 0;
     L12 : do switch (i5 << 24 >> 24) {
     case 37:
      break L10;
     case 42:
      {
       i18 = 0;
       i4 = i8 + 2 | 0;
       break;
      }
     default:
      {
       if (_isdigit(i5 & 255) | 0) if ((HEAP8[i8 + 2 >> 0] | 0) == 36) {
        i18 = _arg_n_262(i29, (HEAPU8[i4 >> 0] | 0) + -48 | 0) | 0;
        i4 = i8 + 3 | 0;
        break L12;
       }
       i17 = (HEAP32[i29 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i18 = HEAP32[i17 >> 2] | 0;
       HEAP32[i29 >> 2] = i17 + 4;
      }
     } while (0);
     if (!(_isdigit(HEAPU8[i4 >> 0] | 0) | 0)) {
      i10 = i4;
      i5 = 0;
     } else {
      i5 = 0;
      do {
       i5 = (i5 * 10 | 0) + -48 + (HEAPU8[i4 >> 0] | 0) | 0;
       i4 = i4 + 1 | 0;
      } while ((_isdigit(HEAPU8[i4 >> 0] | 0) | 0) != 0);
      i10 = i4;
     }
     i4 = HEAP8[i10 >> 0] | 0;
     i6 = i10 + 1 | 0;
     if (i4 << 24 >> 24 == 109) {
      i3 = 0;
      i8 = HEAP8[i6 >> 0] | 0;
      i4 = (i18 | 0) != 0 & 1;
      i9 = i10 + 2 | 0;
      i2 = 0;
     } else {
      i8 = i4;
      i4 = 0;
      i9 = i6;
      i6 = i10;
     }
     switch (i8 << 24 >> 24) {
     case 104:
      {
       i17 = (HEAP8[i9 >> 0] | 0) == 104;
       i9 = i17 ? i6 + 2 | 0 : i9;
       i6 = i17 ? -2 : -1;
       break;
      }
     case 108:
      {
       i17 = (HEAP8[i9 >> 0] | 0) == 108;
       i9 = i17 ? i6 + 2 | 0 : i9;
       i6 = i17 ? 3 : 1;
       break;
      }
     case 106:
      {
       i6 = 3;
       break;
      }
     case 116:
     case 122:
      {
       i6 = 1;
       break;
      }
     case 76:
      {
       i6 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       i9 = i6;
       i6 = 0;
       break;
      }
     default:
      {
       i34 = 143;
       break L6;
      }
     }
     i11 = HEAPU8[i9 >> 0] | 0;
     i12 = (i11 & 47 | 0) == 3;
     i11 = i12 ? i11 | 32 : i11;
     i12 = i12 ? 1 : i6;
     i10 = i11 & 255;
     switch (i10 << 24 >> 24) {
     case 99:
      {
       i17 = i13;
       i5 = (i5 | 0) > 1 ? i5 : 1;
       break;
      }
     case 91:
      {
       i17 = i13;
       break;
      }
     case 110:
      {
       _store_int_263(i18, i12, i13, i14);
       i6 = i13;
       i10 = i14;
       i4 = i9;
       break L8;
      }
     default:
      {
       ___shlim(i35, 0, 0);
       do {
        i6 = HEAP32[i26 >> 2] | 0;
        if (i6 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
         HEAP32[i26 >> 2] = i6 + 1;
         i6 = HEAPU8[i6 >> 0] | 0;
        } else i6 = ___shgetc(i35) | 0;
       } while ((_isspace(i6) | 0) != 0);
       if (!(HEAP32[i28 >> 2] | 0)) i6 = HEAP32[i26 >> 2] | 0; else {
        i6 = (HEAP32[i26 >> 2] | 0) + -1 | 0;
        HEAP32[i26 >> 2] = i6;
       }
       i16 = i27;
       i17 = i6 - (HEAP32[i25 >> 2] | 0) | 0;
       i14 = _i64Add(HEAP32[i16 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0, i13 | 0, i14 | 0) | 0;
       i17 = _i64Add(i14 | 0, getTempRet0() | 0, i17 | 0, ((i17 | 0) < 0) << 31 >> 31 | 0) | 0;
       i14 = getTempRet0() | 0;
      }
     }
     i16 = ((i5 | 0) < 0) << 31 >> 31;
     ___shlim(i35, i5, i16);
     i8 = HEAP32[i26 >> 2] | 0;
     i6 = HEAP32[i28 >> 2] | 0;
     if (i8 >>> 0 < i6 >>> 0) HEAP32[i26 >> 2] = i8 + 1; else {
      if ((___shgetc(i35) | 0) < 0) {
       i34 = 143;
       break L6;
      }
      i6 = HEAP32[i28 >> 2] | 0;
     }
     if (i6 | 0) HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + -1;
     L59 : do switch (i10 << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       i15 = (i11 | 0) == 99;
       L61 : do if ((i11 | 16 | 0) == 115) {
        _memset(i30 | 0, -1, 257) | 0;
        HEAP8[i30 >> 0] = 0;
        if ((i11 | 0) == 115) {
         HEAP8[i22 >> 0] = 0;
         HEAP16[i21 >> 1] = 0;
         HEAP16[i21 + 2 >> 1] = 0;
         HEAP8[i21 + 4 >> 0] = 0;
         i6 = i9;
        } else i6 = i9;
       } else {
        i6 = i9 + 1 | 0;
        i13 = (HEAP8[i6 >> 0] | 0) == 94;
        i8 = i13 & 1;
        i6 = i13 ? i9 + 2 | 0 : i6;
        _memset(i30 | 0, i8 | 0, 257) | 0;
        HEAP8[i30 >> 0] = 0;
        switch (HEAP8[i6 >> 0] | 0) {
        case 45:
         {
          i10 = (i8 ^ 1) & 255;
          HEAP8[i23 >> 0] = i10;
          i6 = i6 + 1 | 0;
          break;
         }
        case 93:
         {
          i10 = (i8 ^ 1) & 255;
          HEAP8[i24 >> 0] = i10;
          i6 = i6 + 1 | 0;
          break;
         }
        default:
         i10 = (i8 ^ 1) & 255;
        }
        while (1) {
         i8 = HEAP8[i6 >> 0] | 0;
         L72 : do switch (i8 << 24 >> 24) {
         case 0:
          {
           i34 = 143;
           break L6;
          }
         case 93:
          break L61;
         case 45:
          {
           i9 = i6 + 1 | 0;
           i8 = HEAP8[i9 >> 0] | 0;
           switch (i8 << 24 >> 24) {
           case 93:
           case 0:
            {
             i8 = 45;
             break L72;
            }
           default:
            {}
           }
           i6 = HEAP8[i6 + -1 >> 0] | 0;
           if ((i6 & 255) < (i8 & 255)) {
            i6 = i6 & 255;
            do {
             i6 = i6 + 1 | 0;
             HEAP8[i30 + i6 >> 0] = i10;
             i8 = HEAP8[i9 >> 0] | 0;
            } while (i6 >>> 0 < (i8 & 255) >>> 0);
            i6 = i9;
           } else i6 = i9;
           break;
          }
         default:
          {}
         } while (0);
         HEAP8[i30 + ((i8 & 255) + 1) >> 0] = i10;
         i6 = i6 + 1 | 0;
        }
       } while (0);
       i9 = i15 ? i5 + 1 | 0 : 31;
       i12 = (i12 | 0) == 1;
       i13 = (i4 | 0) != 0;
       L80 : do if (i12) {
        if (i13) {
         i3 = _malloc(i9 << 2) | 0;
         if (!i3) {
          i3 = 0;
          i2 = 0;
          i34 = 143;
          break L6;
         }
        } else i3 = i18;
        HEAP32[i31 >> 2] = 0;
        HEAP32[i19 >> 2] = 0;
        i2 = 0;
        L85 : while (1) {
         i10 = (i3 | 0) == 0;
         i8 = i2;
         do {
          L89 : while (1) {
           i2 = HEAP32[i26 >> 2] | 0;
           if (i2 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
            HEAP32[i26 >> 2] = i2 + 1;
            i2 = HEAPU8[i2 >> 0] | 0;
           } else i2 = ___shgetc(i35) | 0;
           if (!(HEAP8[i30 + (i2 + 1) >> 0] | 0)) break L85;
           HEAP8[i20 >> 0] = i2;
           switch (_mbrtowc(i32, i20, 1, i31) | 0) {
           case -1:
            {
             i2 = 0;
             i34 = 143;
             break L6;
            }
           case -2:
            break;
           default:
            break L89;
           }
          }
          if (!i10) {
           HEAP32[i3 + (i8 << 2) >> 2] = HEAP32[i32 >> 2];
           i8 = i8 + 1 | 0;
          }
         } while (!(i13 & (i8 | 0) == (i9 | 0)));
         i9 = i9 << 1 | 1;
         i2 = _realloc(i3, i9 << 2) | 0;
         if (!i2) {
          i2 = 0;
          i34 = 143;
          break L6;
         } else {
          i3 = i2;
          i2 = i8;
         }
        }
        if (!(_mbsinit(i31) | 0)) {
         i2 = 0;
         i34 = 143;
         break L6;
        } else {
         i11 = i3;
         i2 = 0;
         i10 = i3;
        }
       } else {
        if (i13) {
         i2 = _malloc(i9) | 0;
         if (!i2) {
          i3 = 0;
          i2 = 0;
          i34 = 143;
          break L6;
         }
         i8 = 0;
         while (1) {
          do {
           i3 = HEAP32[i26 >> 2] | 0;
           if (i3 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
            HEAP32[i26 >> 2] = i3 + 1;
            i3 = HEAPU8[i3 >> 0] | 0;
           } else i3 = ___shgetc(i35) | 0;
           if (!(HEAP8[i30 + (i3 + 1) >> 0] | 0)) {
            i11 = 0;
            i10 = 0;
            break L80;
           }
           i11 = i8;
           i8 = i8 + 1 | 0;
           HEAP8[i2 + i11 >> 0] = i3;
          } while ((i8 | 0) != (i9 | 0));
          i9 = i9 << 1 | 1;
          i3 = _realloc(i2, i9) | 0;
          if (!i3) {
           i3 = 0;
           i34 = 143;
           break L6;
          } else i2 = i3;
         }
        }
        if (!i18) while (1) {
         i2 = HEAP32[i26 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
          HEAP32[i26 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i35) | 0;
         if (!(HEAP8[i30 + (i2 + 1) >> 0] | 0)) {
          i11 = 0;
          i8 = 0;
          i2 = 0;
          i10 = 0;
          break L80;
         }
        }
        i3 = 0;
        while (1) {
         i2 = HEAP32[i26 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
          HEAP32[i26 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i35) | 0;
         if (!(HEAP8[i30 + (i2 + 1) >> 0] | 0)) {
          i11 = 0;
          i8 = i3;
          i2 = i18;
          i10 = 0;
          break L80;
         }
         HEAP8[i18 + i3 >> 0] = i2;
         i3 = i3 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[i28 >> 2] | 0)) i3 = HEAP32[i26 >> 2] | 0; else {
        i3 = (HEAP32[i26 >> 2] | 0) + -1 | 0;
        HEAP32[i26 >> 2] = i3;
       }
       i9 = i27;
       i3 = i3 - (HEAP32[i25 >> 2] | 0) | 0;
       i3 = _i64Add(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, i3 | 0, ((i3 | 0) < 0) << 31 >> 31 | 0) | 0;
       i9 = getTempRet0() | 0;
       if ((i3 | 0) == 0 & (i9 | 0) == 0) {
        i3 = i11;
        break L6;
       }
       if (!((i3 | 0) == (i5 | 0) & (i9 | 0) == (i16 | 0) | i15 ^ 1)) {
        i3 = i11;
        break L6;
       }
       do if (i13) if (i12) {
        HEAP32[i18 >> 2] = i10;
        break;
       } else {
        HEAP32[i18 >> 2] = i2;
        break;
       } while (0);
       if (i15) {
        i3 = i11;
        i4 = i6;
       } else {
        if (i10 | 0) HEAP32[i10 + (i8 << 2) >> 2] = 0;
        if (!i2) {
         i3 = i11;
         i4 = i6;
         i2 = 0;
         break L59;
        }
        HEAP8[i2 + i8 >> 0] = 0;
        i3 = i11;
        i4 = i6;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       i5 = 16;
       i34 = 131;
       break;
      }
     case 111:
      {
       i5 = 8;
       i34 = 131;
       break;
      }
     case 117:
     case 100:
      {
       i5 = 10;
       i34 = 131;
       break;
      }
     case 105:
      {
       i5 = 0;
       i34 = 131;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       d7 = +___floatscan(i35, i12, 0);
       i16 = i27;
       i13 = HEAP32[i16 >> 2] | 0;
       i16 = HEAP32[i16 + 4 >> 2] | 0;
       i15 = (HEAP32[i26 >> 2] | 0) - (HEAP32[i25 >> 2] | 0) | 0;
       i15 = _i64Subtract(0, 0, i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0) | 0;
       if ((i13 | 0) == (i15 | 0) & (i16 | 0) == (getTempRet0() | 0)) break L6;
       if (!i18) i4 = i9; else switch (i12 | 0) {
       case 0:
        {
         f37 = Math_fround(d7);
         HEAPF32[i18 >> 2] = f37;
         i4 = i9;
         break L59;
        }
       case 1:
        {
         HEAPF64[i18 >> 3] = d7;
         i4 = i9;
         break L59;
        }
       case 2:
        {
         HEAPF64[i18 >> 3] = d7;
         i4 = i9;
         break L59;
        }
       default:
        {
         i4 = i9;
         break L59;
        }
       }
       break;
      }
     default:
      i4 = i9;
     } while (0);
     do if ((i34 | 0) == 131) {
      i34 = 0;
      i5 = ___intscan(i35, i5, 0, -1, -1) | 0;
      i6 = getTempRet0() | 0;
      i16 = i27;
      i13 = HEAP32[i16 >> 2] | 0;
      i16 = HEAP32[i16 + 4 >> 2] | 0;
      i15 = (HEAP32[i26 >> 2] | 0) - (HEAP32[i25 >> 2] | 0) | 0;
      i15 = _i64Subtract(0, 0, i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0) | 0;
      if ((i13 | 0) == (i15 | 0) & (i16 | 0) == (getTempRet0() | 0)) break L6;
      if ((i18 | 0) != 0 & (i11 | 0) == 112) {
       HEAP32[i18 >> 2] = i5;
       i4 = i9;
       break;
      } else {
       _store_int_263(i18, i12, i5, i6);
       i4 = i9;
       break;
      }
     } while (0);
     i10 = i27;
     i6 = (HEAP32[i26 >> 2] | 0) - (HEAP32[i25 >> 2] | 0) | 0;
     i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, i17 | 0, i14 | 0) | 0;
     i6 = _i64Add(i10 | 0, getTempRet0() | 0, i6 | 0, ((i6 | 0) < 0) << 31 >> 31 | 0) | 0;
     i10 = getTempRet0() | 0;
     i1 = i1 + ((i18 | 0) != 0 & 1) | 0;
     break L8;
    } while (0);
    i5 = i8 + (i6 & 1) | 0;
    ___shlim(i35, 0, 0);
    i4 = HEAP32[i26 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
     HEAP32[i26 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i35) | 0;
    if ((i4 | 0) != (HEAPU8[i5 >> 0] | 0)) {
     i34 = 23;
     break L6;
    }
    i6 = _i64Add(i13 | 0, i14 | 0, 1, 0) | 0;
    i10 = getTempRet0() | 0;
    i4 = i5;
   } else {
    i5 = i8;
    while (1) {
     i4 = i5 + 1 | 0;
     if (!(_isspace(HEAPU8[i4 >> 0] | 0) | 0)) break; else i5 = i4;
    }
    ___shlim(i35, 0, 0);
    do {
     i4 = HEAP32[i26 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
      HEAP32[i26 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i35) | 0;
    } while ((_isspace(i4) | 0) != 0);
    if (!(HEAP32[i28 >> 2] | 0)) i4 = HEAP32[i26 >> 2] | 0; else {
     i4 = (HEAP32[i26 >> 2] | 0) + -1 | 0;
     HEAP32[i26 >> 2] = i4;
    }
    i10 = i27;
    i6 = i4 - (HEAP32[i25 >> 2] | 0) | 0;
    i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, i13 | 0, i14 | 0) | 0;
    i6 = _i64Add(i10 | 0, getTempRet0() | 0, i6 | 0, ((i6 | 0) < 0) << 31 >> 31 | 0) | 0;
    i10 = getTempRet0() | 0;
    i4 = i5;
   } while (0);
   i8 = i4 + 1 | 0;
   i4 = HEAP8[i8 >> 0] | 0;
   if (!(i4 << 24 >> 24)) break L4; else {
    i13 = i6;
    i14 = i10;
   }
  }
  if ((i34 | 0) == 23) {
   if (HEAP32[i28 >> 2] | 0) HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + -1;
   if ((i1 | 0) != 0 | (i4 | 0) > -1) break; else {
    i1 = i3;
    i4 = 0;
    i34 = 144;
   }
  } else if ((i34 | 0) == 143) if (!i1) {
   i1 = i3;
   i34 = 144;
  }
  if ((i34 | 0) == 144) {
   i3 = i1;
   i1 = -1;
  }
  if (i4) {
   _free(i2);
   _free(i3);
  }
 } while (0);
 if (i33 | 0) ___unlockfile(i35);
 STACKTOP = i36;
 return i1 | 0;
}

function _ImageFormat(i20, i27) {
 i20 = i20 | 0;
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, f35 = f0;
 i33 = STACKTOP;
 i34 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i1 = i34 + 76 | 0;
 i21 = i34 + 72 | 0;
 i28 = i34 + 68 | 0;
 i29 = i34 + 64 | 0;
 i22 = i34 + 60 | 0;
 i10 = i34 + 56 | 0;
 i18 = i34 + 52 | 0;
 i30 = i34 + 106 | 0;
 i7 = i34 + 105 | 0;
 i4 = i34 + 104 | 0;
 i19 = i34 + 48 | 0;
 i11 = i34 + 44 | 0;
 i23 = i34 + 40 | 0;
 i31 = i34 + 103 | 0;
 i8 = i34 + 102 | 0;
 i5 = i34 + 101 | 0;
 i2 = i34 + 100 | 0;
 i12 = i34 + 36 | 0;
 i32 = i34 + 99 | 0;
 i9 = i34 + 98 | 0;
 i6 = i34 + 97 | 0;
 i3 = i34 + 96 | 0;
 i13 = i34 + 32 | 0;
 i14 = i34 + 28 | 0;
 i24 = i34 + 24 | 0;
 i15 = i34 + 20 | 0;
 i16 = i34 + 16 | 0;
 i25 = i34 + 12 | 0;
 i17 = i34 + 8 | 0;
 i26 = i34 + 4 | 0;
 HEAP32[i21 >> 2] = i20;
 HEAP32[i28 >> 2] = i27;
 if (!(HEAP32[HEAP32[i21 >> 2] >> 2] | 0)) {
  STACKTOP = i33;
  return;
 }
 if (!(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i33;
  return;
 }
 if (!(HEAP32[i28 >> 2] | 0 ? (HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) != 0 : 0)) {
  STACKTOP = i33;
  return;
 }
 if ((HEAP32[(HEAP32[i21 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[i28 >> 2] | 0)) {
  STACKTOP = i33;
  return;
 }
 if (!((HEAP32[i28 >> 2] | 0) < 11 ? (HEAP32[(HEAP32[i21 >> 2] | 0) + 16 >> 2] | 0) < 11 : 0)) {
  _TraceLog(4, 58653, i34);
  STACKTOP = i33;
  return;
 }
 i34 = HEAP32[i21 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i34 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i34 + 16 >> 2];
 i34 = _GetImageDataNormalized(i1) | 0;
 HEAP32[i29 >> 2] = i34;
 _free(HEAP32[HEAP32[i21 >> 2] >> 2] | 0);
 HEAP32[HEAP32[i21 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[i21 >> 2] | 0) + 16 >> 2] = HEAP32[i28 >> 2];
 HEAP32[i22 >> 2] = 0;
 L17 : do switch (HEAP32[(HEAP32[i21 >> 2] | 0) + 16 >> 2] | 0) {
 case 1:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc(Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP32[i10 >> 2] = 0;
   while (1) {
    if ((HEAP32[i10 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    f35 = Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i10 >> 2] << 4) >> 2]) * Math_fround(.298999995));
    f35 = Math_fround(f35 + Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i10 >> 2] << 4) + 4 >> 2]) * Math_fround(.587000012)));
    i34 = ~~Math_fround(Math_fround(f35 + Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i10 >> 2] << 4) + 8 >> 2]) * Math_fround(.114))) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] = i34;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   }
  }
 case 2:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc((Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP32[i18 >> 2] = 0;
   while (1) {
    if ((HEAP32[i18 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0) << 1 | 0)) break L17;
    f35 = Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i22 >> 2] << 4) >> 2]) * Math_fround(.298999995));
    f35 = Math_fround(f35 + Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i22 >> 2] << 4) + 4 >> 2]) * Math_fround(.587000012)));
    i34 = ~~Math_fround(Math_fround(f35 + Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i22 >> 2] << 4) + 8 >> 2]) * Math_fround(.114))) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i18 >> 2] | 0) >> 0] = i34;
    i34 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i22 >> 2] << 4) + 12 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + 1) >> 0] = i34;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 2;
    HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
   }
  }
 case 3:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc((Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP8[i30 >> 0] = 0;
   HEAP8[i7 >> 0] = 0;
   HEAP8[i4 >> 0] = 0;
   HEAP32[i19 >> 2] = 0;
   while (1) {
    if ((HEAP32[i19 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i19 >> 2] << 4) >> 2]) * Math_fround(31.0)))) & 255;
    HEAP8[i30 >> 0] = i34;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i19 >> 2] << 4) + 4 >> 2]) * Math_fround(63.0)))) & 255;
    HEAP8[i7 >> 0] = i34;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i19 >> 2] << 4) + 8 >> 2]) * Math_fround(31.0)))) & 255;
    HEAP8[i4 >> 0] = i34;
    HEAP16[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i19 >> 2] << 1) >> 1] = (HEAPU8[i30 >> 0] & 65535) << 11 | (HEAPU8[i7 >> 0] & 65535) << 5 | HEAPU8[i4 >> 0] & 65535;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
  }
 case 4:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc((Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) * 3 | 0) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i23 >> 2] = 0;
   while (1) {
    if ((HEAP32[i11 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0) * 3 | 0)) break L17;
    i34 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i23 >> 2] << 4) >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] = i34;
    i34 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i23 >> 2] << 4) + 4 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + 1) >> 0] = i34;
    i34 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i23 >> 2] << 4) + 8 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + 2) >> 0] = i34;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 3;
    HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
   }
  }
 case 5:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc((Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP8[i31 >> 0] = 0;
   HEAP8[i8 >> 0] = 0;
   HEAP8[i5 >> 0] = 0;
   HEAP8[i2 >> 0] = 0;
   HEAP32[i12 >> 2] = 0;
   while (1) {
    if ((HEAP32[i12 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i12 >> 2] << 4) >> 2]) * Math_fround(31.0)))) & 255;
    HEAP8[i31 >> 0] = i34;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i12 >> 2] << 4) + 4 >> 2]) * Math_fround(31.0)))) & 255;
    HEAP8[i8 >> 0] = i34;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i12 >> 2] << 4) + 8 >> 2]) * Math_fround(31.0)))) & 255;
    HEAP8[i5 >> 0] = i34;
    i34 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i12 >> 2] << 4) + 12 >> 2]) > Math_fround(.196078435);
    HEAP8[i2 >> 0] = i34 ? 1 : 0;
    HEAP16[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i12 >> 2] << 1) >> 1] = (HEAPU8[i31 >> 0] & 65535) << 11 | (HEAPU8[i8 >> 0] & 65535) << 6 | (HEAPU8[i5 >> 0] & 65535) << 1 | HEAPU8[i2 >> 0] & 65535;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   }
  }
 case 6:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc((Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP8[i32 >> 0] = 0;
   HEAP8[i9 >> 0] = 0;
   HEAP8[i6 >> 0] = 0;
   HEAP8[i3 >> 0] = 0;
   HEAP32[i13 >> 2] = 0;
   while (1) {
    if ((HEAP32[i13 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i13 >> 2] << 4) >> 2]) * Math_fround(15.0)))) & 255;
    HEAP8[i32 >> 0] = i34;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i13 >> 2] << 4) + 4 >> 2]) * Math_fround(15.0)))) & 255;
    HEAP8[i9 >> 0] = i34;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i13 >> 2] << 4) + 8 >> 2]) * Math_fround(15.0)))) & 255;
    HEAP8[i6 >> 0] = i34;
    i34 = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i13 >> 2] << 4) + 12 >> 2]) * Math_fround(15.0)))) & 255;
    HEAP8[i3 >> 0] = i34;
    HEAP16[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i13 >> 2] << 1) >> 1] = (HEAPU8[i32 >> 0] & 65535) << 12 | (HEAPU8[i9 >> 0] & 65535) << 8 | (HEAPU8[i6 >> 0] & 65535) << 4 | HEAPU8[i3 >> 0] & 65535;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
  }
 case 7:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc((Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) << 2) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP32[i14 >> 2] = 0;
   HEAP32[i24 >> 2] = 0;
   while (1) {
    if ((HEAP32[i14 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0) << 2 | 0)) break L17;
    i34 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i24 >> 2] << 4) >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] | 0) >> 0] = i34;
    i34 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i24 >> 2] << 4) + 4 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + 1) >> 0] = i34;
    i34 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i24 >> 2] << 4) + 8 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + 2) >> 0] = i34;
    i34 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i24 >> 2] << 4) + 12 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + 3) >> 0] = i34;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 4;
    HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
   }
  }
 case 8:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc((Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) << 2) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP32[i15 >> 2] = 0;
   while (1) {
    if ((HEAP32[i15 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    f35 = Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i15 >> 2] << 4) >> 2]) * Math_fround(.298999995));
    f35 = Math_fround(f35 + Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i15 >> 2] << 4) + 4 >> 2]) * Math_fround(.587000012)));
    f35 = Math_fround(f35 + Math_fround(Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i15 >> 2] << 4) + 8 >> 2]) * Math_fround(.114)));
    HEAPF32[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] = f35;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
  }
 case 9:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc((Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) * 3 << 2) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP32[i16 >> 2] = 0;
   HEAP32[i25 >> 2] = 0;
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0) * 3 | 0)) break L17;
    f35 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i25 >> 2] << 4) >> 2]);
    HEAPF32[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] = f35;
    f35 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i25 >> 2] << 4) + 4 >> 2]);
    HEAPF32[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) + 1 << 2) >> 2] = f35;
    f35 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i25 >> 2] << 4) + 8 >> 2]);
    HEAPF32[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) + 2 << 2) >> 2] = f35;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 3;
    HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
   }
  }
 case 10:
  {
   i34 = HEAP32[i21 >> 2] | 0;
   i34 = _malloc((Math_imul(HEAP32[i34 + 4 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0) | 0) << 2 << 2) | 0;
   HEAP32[HEAP32[i21 >> 2] >> 2] = i34;
   HEAP32[i17 >> 2] = 0;
   HEAP32[i26 >> 2] = 0;
   while (1) {
    if ((HEAP32[i17 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i21 >> 2] | 0) + 8 >> 2] | 0) | 0) << 2 | 0)) break L17;
    f35 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i26 >> 2] << 4) >> 2]);
    HEAPF32[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i17 >> 2] << 2) >> 2] = f35;
    f35 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i26 >> 2] << 4) + 4 >> 2]);
    HEAPF32[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) + 1 << 2) >> 2] = f35;
    f35 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i26 >> 2] << 4) + 8 >> 2]);
    HEAPF32[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) + 2 << 2) >> 2] = f35;
    f35 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i26 >> 2] << 4) + 12 >> 2]);
    HEAPF32[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) + 3 << 2) >> 2] = f35;
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 4;
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
   }
  }
 default:
  {}
 } while (0);
 _free(HEAP32[i29 >> 2] | 0);
 HEAP32[i29 >> 2] = 0;
 if ((HEAP32[(HEAP32[i21 >> 2] | 0) + 12 >> 2] | 0) <= 1) {
  STACKTOP = i33;
  return;
 }
 HEAP32[(HEAP32[i21 >> 2] | 0) + 12 >> 2] = 1;
 if (!(HEAP32[HEAP32[i21 >> 2] >> 2] | 0)) {
  STACKTOP = i33;
  return;
 }
 _ImageMipmaps(HEAP32[i21 >> 2] | 0);
 STACKTOP = i33;
 return;
}

function _ma_pcm_f32_to_s16__optimized(i6, i7, i3, i4, i5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var f1 = f0, i2 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, f78 = f0, f79 = f0;
 i75 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i68 = i2 + 292 | 0;
 i64 = i2 + 288 | 0;
 i58 = i2 + 284 | 0;
 i59 = i2 + 280 | 0;
 i66 = i2 + 276 | 0;
 i62 = i2 + 272 | 0;
 i73 = i2 + 268 | 0;
 i70 = i2 + 264 | 0;
 i67 = i2 + 260 | 0;
 i63 = i2 + 256 | 0;
 i44 = i2 + 252 | 0;
 i32 = i2 + 248 | 0;
 i11 = i2 + 244 | 0;
 i15 = i2 + 240 | 0;
 i37 = i2 + 236 | 0;
 i25 = i2 + 232 | 0;
 i53 = i2 + 228 | 0;
 i48 = i2 + 224 | 0;
 i40 = i2 + 220 | 0;
 i28 = i2 + 216 | 0;
 i43 = i2 + 212 | 0;
 i31 = i2 + 208 | 0;
 i10 = i2 + 204 | 0;
 i14 = i2 + 200 | 0;
 i36 = i2 + 196 | 0;
 i24 = i2 + 192 | 0;
 i52 = i2 + 188 | 0;
 i47 = i2 + 184 | 0;
 i39 = i2 + 180 | 0;
 i27 = i2 + 176 | 0;
 i42 = i2 + 172 | 0;
 i30 = i2 + 168 | 0;
 i9 = i2 + 164 | 0;
 i13 = i2 + 160 | 0;
 i35 = i2 + 156 | 0;
 i23 = i2 + 152 | 0;
 i51 = i2 + 148 | 0;
 i46 = i2 + 144 | 0;
 i38 = i2 + 140 | 0;
 i26 = i2 + 136 | 0;
 i41 = i2 + 132 | 0;
 i29 = i2 + 128 | 0;
 i8 = i2 + 124 | 0;
 i12 = i2 + 120 | 0;
 i34 = i2 + 116 | 0;
 i22 = i2 + 112 | 0;
 i50 = i2 + 108 | 0;
 i45 = i2 + 104 | 0;
 i33 = i2 + 100 | 0;
 i21 = i2 + 96 | 0;
 i77 = i2 + 92 | 0;
 i76 = i2 + 88 | 0;
 i60 = i2 + 24 | 0;
 i69 = i2 + 84 | 0;
 i72 = i2 + 16 | 0;
 i49 = i2 + 8 | 0;
 i16 = i2;
 i71 = i2 + 80 | 0;
 i74 = i2 + 76 | 0;
 i65 = i2 + 72 | 0;
 i61 = i2 + 68 | 0;
 i17 = i2 + 64 | 0;
 i18 = i2 + 60 | 0;
 i19 = i2 + 56 | 0;
 i20 = i2 + 52 | 0;
 i54 = i2 + 48 | 0;
 i55 = i2 + 44 | 0;
 i56 = i2 + 40 | 0;
 i57 = i2 + 36 | 0;
 i2 = i2 + 32 | 0;
 HEAP32[i77 >> 2] = i6;
 HEAP32[i76 >> 2] = i7;
 i7 = i60;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i7 + 4 >> 2] = i4;
 HEAP32[i69 >> 2] = i5;
 HEAP32[i71 >> 2] = HEAP32[i77 >> 2];
 HEAP32[i74 >> 2] = HEAP32[i76 >> 2];
 HEAPF32[i65 >> 2] = Math_fround(0.0);
 HEAPF32[i61 >> 2] = Math_fround(0.0);
 if (HEAP32[i69 >> 2] | 0) {
  HEAPF32[i65 >> 2] = Math_fround(-.0000305175781);
  HEAPF32[i61 >> 2] = Math_fround(.0000305185094);
 }
 i7 = i72;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 i7 = i60;
 i7 = _bitshift64Lshr(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 2) | 0;
 i76 = getTempRet0() | 0;
 i77 = i16;
 HEAP32[i77 >> 2] = i7;
 HEAP32[i77 + 4 >> 2] = i76;
 i77 = i49;
 HEAP32[i77 >> 2] = 0;
 HEAP32[i77 + 4 >> 2] = 0;
 while (1) {
  i76 = i49;
  i6 = HEAP32[i76 + 4 >> 2] | 0;
  i77 = i16;
  i7 = HEAP32[i77 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i7 >>> 0 | ((i6 | 0) == (i7 | 0) ? (HEAP32[i76 >> 2] | 0) >>> 0 < (HEAP32[i77 >> 2] | 0) >>> 0 : 0))) break;
  f78 = Math_fround(HEAPF32[i65 >> 2]);
  f1 = Math_fround(HEAPF32[i61 >> 2]);
  HEAP32[i45 >> 2] = HEAP32[i69 >> 2];
  HEAPF32[i33 >> 2] = f78;
  HEAPF32[i21 >> 2] = f1;
  do if ((HEAP32[i45 >> 2] | 0) == 1) {
   f1 = Math_fround(HEAPF32[i33 >> 2]);
   f78 = Math_fround(HEAPF32[i21 >> 2]);
   HEAPF32[i34 >> 2] = f1;
   HEAPF32[i22 >> 2] = f78;
   f78 = Math_fround(HEAPF32[i34 >> 2]);
   f78 = Math_fround(_ma_rand_range_f32(f78, Math_fround(HEAPF32[i22 >> 2])));
   HEAPF32[i50 >> 2] = f78;
  } else if ((HEAP32[i45 >> 2] | 0) == 2) {
   f1 = Math_fround(HEAPF32[i33 >> 2]);
   f78 = Math_fround(HEAPF32[i21 >> 2]);
   HEAPF32[i41 >> 2] = f1;
   HEAPF32[i29 >> 2] = f78;
   f78 = Math_fround(_ma_rand_range_f32(Math_fround(HEAPF32[i41 >> 2]), Math_fround(0.0)));
   HEAPF32[i8 >> 2] = f78;
   f78 = Math_fround(_ma_rand_range_f32(Math_fround(0.0), Math_fround(HEAPF32[i29 >> 2])));
   HEAPF32[i12 >> 2] = f78;
   f78 = Math_fround(HEAPF32[i8 >> 2]);
   f78 = Math_fround(f78 + Math_fround(HEAPF32[i12 >> 2]));
   HEAPF32[i50 >> 2] = f78;
   break;
  } else {
   HEAPF32[i50 >> 2] = Math_fround(0.0);
   break;
  } while (0);
  f1 = Math_fround(HEAPF32[i50 >> 2]);
  HEAPF32[i17 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i65 >> 2]);
  f78 = Math_fround(HEAPF32[i61 >> 2]);
  HEAP32[i46 >> 2] = HEAP32[i69 >> 2];
  HEAPF32[i38 >> 2] = f1;
  HEAPF32[i26 >> 2] = f78;
  do if ((HEAP32[i46 >> 2] | 0) == 1) {
   f1 = Math_fround(HEAPF32[i38 >> 2]);
   f78 = Math_fround(HEAPF32[i26 >> 2]);
   HEAPF32[i35 >> 2] = f1;
   HEAPF32[i23 >> 2] = f78;
   f78 = Math_fround(HEAPF32[i35 >> 2]);
   f78 = Math_fround(_ma_rand_range_f32(f78, Math_fround(HEAPF32[i23 >> 2])));
   HEAPF32[i51 >> 2] = f78;
  } else if ((HEAP32[i46 >> 2] | 0) == 2) {
   f1 = Math_fround(HEAPF32[i38 >> 2]);
   f78 = Math_fround(HEAPF32[i26 >> 2]);
   HEAPF32[i42 >> 2] = f1;
   HEAPF32[i30 >> 2] = f78;
   f78 = Math_fround(_ma_rand_range_f32(Math_fround(HEAPF32[i42 >> 2]), Math_fround(0.0)));
   HEAPF32[i9 >> 2] = f78;
   f78 = Math_fround(_ma_rand_range_f32(Math_fround(0.0), Math_fround(HEAPF32[i30 >> 2])));
   HEAPF32[i13 >> 2] = f78;
   f78 = Math_fround(HEAPF32[i9 >> 2]);
   f78 = Math_fround(f78 + Math_fround(HEAPF32[i13 >> 2]));
   HEAPF32[i51 >> 2] = f78;
   break;
  } else {
   HEAPF32[i51 >> 2] = Math_fround(0.0);
   break;
  } while (0);
  f1 = Math_fround(HEAPF32[i51 >> 2]);
  HEAPF32[i18 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i65 >> 2]);
  f78 = Math_fround(HEAPF32[i61 >> 2]);
  HEAP32[i47 >> 2] = HEAP32[i69 >> 2];
  HEAPF32[i39 >> 2] = f1;
  HEAPF32[i27 >> 2] = f78;
  do if ((HEAP32[i47 >> 2] | 0) == 1) {
   f1 = Math_fround(HEAPF32[i39 >> 2]);
   f78 = Math_fround(HEAPF32[i27 >> 2]);
   HEAPF32[i36 >> 2] = f1;
   HEAPF32[i24 >> 2] = f78;
   f78 = Math_fround(HEAPF32[i36 >> 2]);
   f78 = Math_fround(_ma_rand_range_f32(f78, Math_fround(HEAPF32[i24 >> 2])));
   HEAPF32[i52 >> 2] = f78;
  } else if ((HEAP32[i47 >> 2] | 0) == 2) {
   f1 = Math_fround(HEAPF32[i39 >> 2]);
   f78 = Math_fround(HEAPF32[i27 >> 2]);
   HEAPF32[i43 >> 2] = f1;
   HEAPF32[i31 >> 2] = f78;
   f78 = Math_fround(_ma_rand_range_f32(Math_fround(HEAPF32[i43 >> 2]), Math_fround(0.0)));
   HEAPF32[i10 >> 2] = f78;
   f78 = Math_fround(_ma_rand_range_f32(Math_fround(0.0), Math_fround(HEAPF32[i31 >> 2])));
   HEAPF32[i14 >> 2] = f78;
   f78 = Math_fround(HEAPF32[i10 >> 2]);
   f78 = Math_fround(f78 + Math_fround(HEAPF32[i14 >> 2]));
   HEAPF32[i52 >> 2] = f78;
   break;
  } else {
   HEAPF32[i52 >> 2] = Math_fround(0.0);
   break;
  } while (0);
  f1 = Math_fround(HEAPF32[i52 >> 2]);
  HEAPF32[i19 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i65 >> 2]);
  f78 = Math_fround(HEAPF32[i61 >> 2]);
  HEAP32[i48 >> 2] = HEAP32[i69 >> 2];
  HEAPF32[i40 >> 2] = f1;
  HEAPF32[i28 >> 2] = f78;
  do if ((HEAP32[i48 >> 2] | 0) == 1) {
   f1 = Math_fround(HEAPF32[i40 >> 2]);
   f78 = Math_fround(HEAPF32[i28 >> 2]);
   HEAPF32[i37 >> 2] = f1;
   HEAPF32[i25 >> 2] = f78;
   f78 = Math_fround(HEAPF32[i37 >> 2]);
   f78 = Math_fround(_ma_rand_range_f32(f78, Math_fround(HEAPF32[i25 >> 2])));
   HEAPF32[i53 >> 2] = f78;
  } else if ((HEAP32[i48 >> 2] | 0) == 2) {
   f1 = Math_fround(HEAPF32[i40 >> 2]);
   f78 = Math_fround(HEAPF32[i28 >> 2]);
   HEAPF32[i44 >> 2] = f1;
   HEAPF32[i32 >> 2] = f78;
   f78 = Math_fround(_ma_rand_range_f32(Math_fround(HEAPF32[i44 >> 2]), Math_fround(0.0)));
   HEAPF32[i11 >> 2] = f78;
   f78 = Math_fround(_ma_rand_range_f32(Math_fround(0.0), Math_fround(HEAPF32[i32 >> 2])));
   HEAPF32[i15 >> 2] = f78;
   f78 = Math_fround(HEAPF32[i11 >> 2]);
   f78 = Math_fround(f78 + Math_fround(HEAPF32[i15 >> 2]));
   HEAPF32[i53 >> 2] = f78;
   break;
  } else {
   HEAPF32[i53 >> 2] = Math_fround(0.0);
   break;
  } while (0);
  f78 = Math_fround(HEAPF32[i53 >> 2]);
  HEAPF32[i20 >> 2] = f78;
  i77 = HEAP32[i74 >> 2] | 0;
  i76 = i72;
  i76 = _i64Add(HEAP32[i76 >> 2] | 0, HEAP32[i76 + 4 >> 2] | 0, 0, 0) | 0;
  getTempRet0() | 0;
  f78 = Math_fround(HEAPF32[i77 + (i76 << 2) >> 2]);
  HEAPF32[i54 >> 2] = f78;
  i76 = HEAP32[i74 >> 2] | 0;
  i77 = i72;
  i77 = _i64Add(HEAP32[i77 >> 2] | 0, HEAP32[i77 + 4 >> 2] | 0, 1, 0) | 0;
  getTempRet0() | 0;
  f78 = Math_fround(HEAPF32[i76 + (i77 << 2) >> 2]);
  HEAPF32[i55 >> 2] = f78;
  i77 = HEAP32[i74 >> 2] | 0;
  i76 = i72;
  i76 = _i64Add(HEAP32[i76 >> 2] | 0, HEAP32[i76 + 4 >> 2] | 0, 2, 0) | 0;
  getTempRet0() | 0;
  f78 = Math_fround(HEAPF32[i77 + (i76 << 2) >> 2]);
  HEAPF32[i56 >> 2] = f78;
  i76 = HEAP32[i74 >> 2] | 0;
  i77 = i72;
  i77 = _i64Add(HEAP32[i77 >> 2] | 0, HEAP32[i77 + 4 >> 2] | 0, 3, 0) | 0;
  getTempRet0() | 0;
  f78 = Math_fround(HEAPF32[i76 + (i77 << 2) >> 2]);
  HEAPF32[i57 >> 2] = f78;
  f78 = Math_fround(HEAPF32[i54 >> 2]);
  f78 = Math_fround(f78 + Math_fround(HEAPF32[i17 >> 2]));
  HEAPF32[i54 >> 2] = f78;
  f78 = Math_fround(HEAPF32[i55 >> 2]);
  f78 = Math_fround(f78 + Math_fround(HEAPF32[i18 >> 2]));
  HEAPF32[i55 >> 2] = f78;
  f78 = Math_fround(HEAPF32[i56 >> 2]);
  f78 = Math_fround(f78 + Math_fround(HEAPF32[i19 >> 2]));
  HEAPF32[i56 >> 2] = f78;
  f78 = Math_fround(HEAPF32[i57 >> 2]);
  f78 = Math_fround(f78 + Math_fround(HEAPF32[i20 >> 2]));
  HEAPF32[i57 >> 2] = f78;
  if (Math_fround(HEAPF32[i54 >> 2]) < Math_fround(-1.0)) f1 = Math_fround(-1.0); else {
   i77 = Math_fround(HEAPF32[i54 >> 2]) > Math_fround(1.0);
   f1 = Math_fround(HEAPF32[i54 >> 2]);
   f1 = i77 ? Math_fround(1.0) : f1;
  }
  HEAPF32[i54 >> 2] = f1;
  if (Math_fround(HEAPF32[i55 >> 2]) < Math_fround(-1.0)) f1 = Math_fround(-1.0); else {
   i77 = Math_fround(HEAPF32[i55 >> 2]) > Math_fround(1.0);
   f1 = Math_fround(HEAPF32[i55 >> 2]);
   f1 = i77 ? Math_fround(1.0) : f1;
  }
  HEAPF32[i55 >> 2] = f1;
  if (Math_fround(HEAPF32[i56 >> 2]) < Math_fround(-1.0)) f1 = Math_fround(-1.0); else {
   i77 = Math_fround(HEAPF32[i56 >> 2]) > Math_fround(1.0);
   f1 = Math_fround(HEAPF32[i56 >> 2]);
   f1 = i77 ? Math_fround(1.0) : f1;
  }
  HEAPF32[i56 >> 2] = f1;
  if (Math_fround(HEAPF32[i57 >> 2]) < Math_fround(-1.0)) f1 = Math_fround(-1.0); else {
   i77 = Math_fround(HEAPF32[i57 >> 2]) > Math_fround(1.0);
   f1 = Math_fround(HEAPF32[i57 >> 2]);
   f1 = i77 ? Math_fround(1.0) : f1;
  }
  HEAPF32[i57 >> 2] = f1;
  f78 = Math_fround(Math_fround(HEAPF32[i54 >> 2]) * Math_fround(32767.0));
  HEAPF32[i54 >> 2] = f78;
  f78 = Math_fround(Math_fround(HEAPF32[i55 >> 2]) * Math_fround(32767.0));
  HEAPF32[i55 >> 2] = f78;
  f78 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) * Math_fround(32767.0));
  HEAPF32[i56 >> 2] = f78;
  f78 = Math_fround(Math_fround(HEAPF32[i57 >> 2]) * Math_fround(32767.0));
  HEAPF32[i57 >> 2] = f78;
  i77 = ~~Math_fround(HEAPF32[i54 >> 2]);
  i76 = HEAP32[i71 >> 2] | 0;
  i7 = i72;
  i7 = _i64Add(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 0, 0) | 0;
  getTempRet0() | 0;
  HEAP16[i76 + (i7 << 1) >> 1] = i77;
  i7 = ~~Math_fround(HEAPF32[i55 >> 2]);
  i76 = HEAP32[i71 >> 2] | 0;
  i77 = i72;
  i77 = _i64Add(HEAP32[i77 >> 2] | 0, HEAP32[i77 + 4 >> 2] | 0, 1, 0) | 0;
  getTempRet0() | 0;
  HEAP16[i76 + (i77 << 1) >> 1] = i7;
  i77 = ~~Math_fround(HEAPF32[i56 >> 2]);
  i76 = HEAP32[i71 >> 2] | 0;
  i7 = i72;
  i7 = _i64Add(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 2, 0) | 0;
  getTempRet0() | 0;
  HEAP16[i76 + (i7 << 1) >> 1] = i77;
  i7 = ~~Math_fround(HEAPF32[i57 >> 2]);
  i76 = HEAP32[i71 >> 2] | 0;
  i77 = i72;
  i77 = _i64Add(HEAP32[i77 >> 2] | 0, HEAP32[i77 + 4 >> 2] | 0, 3, 0) | 0;
  getTempRet0() | 0;
  HEAP16[i76 + (i77 << 1) >> 1] = i7;
  i77 = i72;
  i77 = _i64Add(HEAP32[i77 >> 2] | 0, HEAP32[i77 + 4 >> 2] | 0, 4, 0) | 0;
  i76 = getTempRet0() | 0;
  i7 = i72;
  HEAP32[i7 >> 2] = i77;
  HEAP32[i7 + 4 >> 2] = i76;
  i7 = i49;
  i7 = _i64Add(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 1, 0) | 0;
  i76 = getTempRet0() | 0;
  i77 = i49;
  HEAP32[i77 >> 2] = i7;
  HEAP32[i77 + 4 >> 2] = i76;
 }
 while (1) {
  i76 = i72;
  i56 = HEAP32[i76 + 4 >> 2] | 0;
  i77 = i60;
  i57 = HEAP32[i77 + 4 >> 2] | 0;
  if (!(i56 >>> 0 < i57 >>> 0 | ((i56 | 0) == (i57 | 0) ? (HEAP32[i76 >> 2] | 0) >>> 0 < (HEAP32[i77 >> 2] | 0) >>> 0 : 0))) break;
  f1 = Math_fround(HEAPF32[(HEAP32[i74 >> 2] | 0) + (HEAP32[i72 >> 2] << 2) >> 2]);
  HEAPF32[i2 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i2 >> 2]);
  f79 = Math_fround(HEAPF32[i65 >> 2]);
  f78 = Math_fround(HEAPF32[i61 >> 2]);
  HEAP32[i70 >> 2] = HEAP32[i69 >> 2];
  HEAPF32[i67 >> 2] = f79;
  HEAPF32[i63 >> 2] = f78;
  do if ((HEAP32[i70 >> 2] | 0) == 1) {
   f78 = Math_fround(HEAPF32[i67 >> 2]);
   f79 = Math_fround(HEAPF32[i63 >> 2]);
   HEAPF32[i66 >> 2] = f78;
   HEAPF32[i62 >> 2] = f79;
   f79 = Math_fround(HEAPF32[i66 >> 2]);
   f79 = Math_fround(_ma_rand_range_f32(f79, Math_fround(HEAPF32[i62 >> 2])));
   HEAPF32[i73 >> 2] = f79;
  } else if ((HEAP32[i70 >> 2] | 0) == 2) {
   f78 = Math_fround(HEAPF32[i67 >> 2]);
   f79 = Math_fround(HEAPF32[i63 >> 2]);
   HEAPF32[i68 >> 2] = f78;
   HEAPF32[i64 >> 2] = f79;
   f79 = Math_fround(_ma_rand_range_f32(Math_fround(HEAPF32[i68 >> 2]), Math_fround(0.0)));
   HEAPF32[i58 >> 2] = f79;
   f79 = Math_fround(_ma_rand_range_f32(Math_fround(0.0), Math_fround(HEAPF32[i64 >> 2])));
   HEAPF32[i59 >> 2] = f79;
   f79 = Math_fround(HEAPF32[i58 >> 2]);
   f79 = Math_fround(f79 + Math_fround(HEAPF32[i59 >> 2]));
   HEAPF32[i73 >> 2] = f79;
   break;
  } else {
   HEAPF32[i73 >> 2] = Math_fround(0.0);
   break;
  } while (0);
  f79 = Math_fround(f1 + Math_fround(HEAPF32[i73 >> 2]));
  HEAPF32[i2 >> 2] = f79;
  if (Math_fround(HEAPF32[i2 >> 2]) < Math_fround(-1.0)) f1 = Math_fround(-1.0); else {
   i77 = Math_fround(HEAPF32[i2 >> 2]) > Math_fround(1.0);
   f1 = Math_fround(HEAPF32[i2 >> 2]);
   f1 = i77 ? Math_fround(1.0) : f1;
  }
  HEAPF32[i2 >> 2] = f1;
  f79 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) * Math_fround(32767.0));
  HEAPF32[i2 >> 2] = f79;
  i57 = ~~Math_fround(HEAPF32[i2 >> 2]);
  HEAP16[(HEAP32[i71 >> 2] | 0) + (HEAP32[i72 >> 2] << 1) >> 1] = i57;
  i57 = i72;
  i57 = _i64Add(HEAP32[i57 >> 2] | 0, HEAP32[i57 + 4 >> 2] | 0, 1, 0) | 0;
  i76 = getTempRet0() | 0;
  i77 = i72;
  HEAP32[i77 >> 2] = i57;
  HEAP32[i77 + 4 >> 2] = i76;
 }
 STACKTOP = i75;
 return;
}

function _stbi_zlib_compress(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i28 = 0;
 i29 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i25 = i1 + 84 | 0;
 i18 = i1 + 80 | 0;
 i19 = i1 + 76 | 0;
 i24 = i1 + 72 | 0;
 i14 = i1 + 68 | 0;
 i15 = i1 + 64 | 0;
 i21 = i1 + 60 | 0;
 i22 = i1 + 56 | 0;
 i16 = i1 + 52 | 0;
 i23 = i1 + 48 | 0;
 i20 = i1 + 44 | 0;
 i11 = i1 + 40 | 0;
 i6 = i1 + 36 | 0;
 i7 = i1 + 32 | 0;
 i12 = i1 + 28 | 0;
 i13 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i26 = i1 + 8 | 0;
 i27 = i1 + 4 | 0;
 i17 = i1;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i19 >> 2] = i3;
 HEAP32[i24 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 i5 = _malloc(65536) | 0;
 HEAP32[i20 >> 2] = i5;
 if (!(HEAP32[i20 >> 2] | 0)) {
  HEAP32[i25 >> 2] = 0;
  i28 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 if ((HEAP32[i14 >> 2] | 0) < 5) HEAP32[i14 >> 2] = 5;
 if (!(HEAP32[i23 >> 2] | 0)) i28 = 7; else if (((HEAP32[(HEAP32[i23 >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[i23 >> 2] | 0) + -8 >> 2] | 0)) i28 = 7;
 if ((i28 | 0) == 7) _stbiw__sbgrowf(i23, 1, 1) | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i4 = i3 | 0;
 i3 = i3 + -8 + 4 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i5 + 1;
 HEAP8[i4 + i5 >> 0] = 120;
 if (!(HEAP32[i23 >> 2] | 0)) i28 = 10; else if (((HEAP32[(HEAP32[i23 >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[i23 >> 2] | 0) + -8 >> 2] | 0)) i28 = 10;
 if ((i28 | 0) == 10) _stbiw__sbgrowf(i23, 1, 1) | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i4 = i3 | 0;
 i3 = i3 + -8 + 4 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i5 + 1;
 HEAP8[i4 + i5 >> 0] = 94;
 HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 1 << HEAP32[i16 >> 2];
 HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
 HEAP32[i23 >> 2] = i5;
 HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 1 << HEAP32[i16 >> 2];
 HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 2;
 i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
 HEAP32[i23 >> 2] = i5;
 HEAP32[i21 >> 2] = 0;
 while (1) {
  if ((HEAP32[i21 >> 2] | 0) >= 16384) break;
  HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i21 >> 2] << 2) >> 2] = 0;
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
 }
 HEAP32[i21 >> 2] = 0;
 while (1) {
  if ((HEAP32[i21 >> 2] | 0) >= ((HEAP32[i19 >> 2] | 0) - 3 | 0)) break;
  i5 = (_stbiw__zhash((HEAP32[i18 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) | 0) | 0) & 16383;
  HEAP32[i11 >> 2] = i5;
  HEAP32[i6 >> 2] = 3;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i12 >> 2] = HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2];
  if (HEAP32[i12 >> 2] | 0) i1 = HEAP32[(HEAP32[i12 >> 2] | 0) + -8 + 4 >> 2] | 0; else i1 = 0;
  HEAP32[i13 >> 2] = i1;
  HEAP32[i22 >> 2] = 0;
  while (1) {
   if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) break;
   if (((HEAP32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i22 >> 2] << 2) >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0) > ((HEAP32[i21 >> 2] | 0) - 32768 | 0)) {
    i5 = HEAP32[i21 >> 2] | 0;
    i5 = _stbiw__zlib_countm(HEAP32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i22 >> 2] << 2) >> 2] | 0, (HEAP32[i18 >> 2] | 0) + i5 | 0, (HEAP32[i19 >> 2] | 0) - i5 | 0) | 0;
    HEAP32[i8 >> 2] = i5;
    if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
     HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
     HEAP32[i7 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i22 >> 2] << 2) >> 2];
    }
   }
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
  }
  if (HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) + -8 + 4 >> 2] | 0) == (HEAP32[i14 >> 2] << 1 | 0)) {
   i4 = HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
   i5 = HEAP32[i14 >> 2] << 2 | 0;
   _memmove(i4 | 0, i4 + i5 | 0, i5 | 0) | 0;
   HEAP32[(HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) + -8 + 4 >> 2] = HEAP32[i14 >> 2];
  }
  if (!(HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0)) i28 = 29; else if (((HEAP32[(HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) + -8 >> 2] | 0)) i28 = 29;
  if ((i28 | 0) == 29) {
   i28 = 0;
   _stbiw__sbgrowf((HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) | 0, 1, 4) | 0;
  }
  i3 = (HEAP32[i18 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
  i4 = i2 | 0;
  i2 = i2 + -8 + 4 | 0;
  i5 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i5 + 1;
  HEAP32[i4 + (i5 << 2) >> 2] = i3;
  L45 : do if (HEAP32[i7 >> 2] | 0) {
   i5 = (_stbiw__zhash((HEAP32[i18 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) + 1 | 0) | 0) & 16383;
   HEAP32[i11 >> 2] = i5;
   HEAP32[i12 >> 2] = HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2];
   if (HEAP32[i12 >> 2] | 0) i1 = HEAP32[(HEAP32[i12 >> 2] | 0) + -8 + 4 >> 2] | 0; else i1 = 0;
   HEAP32[i13 >> 2] = i1;
   HEAP32[i22 >> 2] = 0;
   while (1) {
    if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) break L45;
    if (((HEAP32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i22 >> 2] << 2) >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0) > ((HEAP32[i21 >> 2] | 0) - 32767 | 0)) {
     i5 = HEAP32[i21 >> 2] | 0;
     i5 = _stbiw__zlib_countm(HEAP32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i22 >> 2] << 2) >> 2] | 0, (HEAP32[i18 >> 2] | 0) + i5 + 1 | 0, (HEAP32[i19 >> 2] | 0) - i5 - 1 | 0) | 0;
     HEAP32[i10 >> 2] = i5;
     if ((HEAP32[i10 >> 2] | 0) > (HEAP32[i6 >> 2] | 0)) break;
    }
    HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
   }
   HEAP32[i7 >> 2] = 0;
  } while (0);
  i1 = (HEAP32[i18 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) | 0;
  if (HEAP32[i7 >> 2] | 0) {
   HEAP32[i9 >> 2] = i1 - (HEAP32[i7 >> 2] | 0);
   if (!((HEAP32[i9 >> 2] | 0) <= 32767 & (HEAP32[i6 >> 2] | 0) <= 258)) {
    i28 = 41;
    break;
   }
   HEAP32[i22 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i22 >> 2] | 0;
    if ((HEAP32[i6 >> 2] | 0) <= ((HEAPU16[27040 + ((HEAP32[i22 >> 2] | 0) + 1 << 1) >> 1] | 0) - 1 | 0)) break;
    HEAP32[i22 >> 2] = i1 + 1;
   }
   i2 = (HEAP32[i22 >> 2] | 0) + 257 | 0;
   do if ((i1 + 257 | 0) <= 143) {
    i5 = _stbiw__zlib_bitrev(48 + i2 | 0, 8) | 0;
    HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i5 << HEAP32[i16 >> 2];
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 8;
    i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
    HEAP32[i23 >> 2] = i5;
   } else {
    i3 = (HEAP32[i22 >> 2] | 0) + 257 | 0;
    if ((i2 | 0) <= 255) {
     i5 = _stbiw__zlib_bitrev(400 + i3 - 144 | 0, 9) | 0;
     HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i5 << HEAP32[i16 >> 2];
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 9;
     i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
     HEAP32[i23 >> 2] = i5;
     break;
    }
    i1 = (HEAP32[i22 >> 2] | 0) + 257 | 0;
    if ((i3 | 0) <= 279) {
     i5 = _stbiw__zlib_bitrev(0 + i1 - 256 | 0, 7) | 0;
     HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i5 << HEAP32[i16 >> 2];
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 7;
     i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
     HEAP32[i23 >> 2] = i5;
     break;
    } else {
     i5 = _stbiw__zlib_bitrev(192 + i1 - 280 | 0, 8) | 0;
     HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i5 << HEAP32[i16 >> 2];
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 8;
     i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
     HEAP32[i23 >> 2] = i5;
     break;
    }
   } while (0);
   if (HEAP8[27104 + (HEAP32[i22 >> 2] | 0) >> 0] | 0) {
    HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | (HEAP32[i6 >> 2] | 0) - (HEAPU16[27040 + (HEAP32[i22 >> 2] << 1) >> 1] | 0) << HEAP32[i16 >> 2];
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAPU8[27104 + (HEAP32[i22 >> 2] | 0) >> 0] | 0);
    i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
    HEAP32[i23 >> 2] = i5;
   }
   HEAP32[i22 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i22 >> 2] | 0;
    if ((HEAP32[i9 >> 2] | 0) <= ((HEAPU16[27136 + ((HEAP32[i22 >> 2] | 0) + 1 << 1) >> 1] | 0) - 1 | 0)) break;
    HEAP32[i22 >> 2] = i1 + 1;
   }
   i5 = _stbiw__zlib_bitrev(i1, 5) | 0;
   HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i5 << HEAP32[i16 >> 2];
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 5;
   i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
   HEAP32[i23 >> 2] = i5;
   if (HEAP8[27200 + (HEAP32[i22 >> 2] | 0) >> 0] | 0) {
    HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | (HEAP32[i9 >> 2] | 0) - (HEAPU16[27136 + (HEAP32[i22 >> 2] << 1) >> 1] | 0) << HEAP32[i16 >> 2];
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAPU8[27200 + (HEAP32[i22 >> 2] | 0) >> 0] | 0);
    i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
    HEAP32[i23 >> 2] = i5;
   }
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
  } else {
   i2 = HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) >> 0] | 0;
   if ((HEAPU8[i1 >> 0] | 0) <= 143) {
    i5 = _stbiw__zlib_bitrev(48 + i2 | 0, 8) | 0;
    HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i5 << HEAP32[i16 >> 2];
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 8;
    i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
    HEAP32[i23 >> 2] = i5;
   } else {
    i5 = _stbiw__zlib_bitrev(400 + i2 - 144 | 0, 9) | 0;
    HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i5 << HEAP32[i16 >> 2];
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 9;
    i5 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
    HEAP32[i23 >> 2] = i5;
   }
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
  }
 }
 if ((i28 | 0) == 41) ___assert_fail(54733, 54694, 922, 54759);
 while (1) {
  if ((HEAP32[i21 >> 2] | 0) >= (HEAP32[i19 >> 2] | 0)) break;
  i1 = HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) >> 0] | 0;
  if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) >> 0] | 0) <= 143) {
   i14 = _stbiw__zlib_bitrev(48 + i1 | 0, 8) | 0;
   HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i14 << HEAP32[i16 >> 2];
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 8;
   i14 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
   HEAP32[i23 >> 2] = i14;
  } else {
   i14 = _stbiw__zlib_bitrev(400 + i1 - 144 | 0, 9) | 0;
   HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i14 << HEAP32[i16 >> 2];
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 9;
   i14 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
   HEAP32[i23 >> 2] = i14;
  }
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
 }
 i14 = _stbiw__zlib_bitrev(0, 7) | 0;
 HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | i14 << HEAP32[i16 >> 2];
 HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 7;
 i14 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
 HEAP32[i23 >> 2] = i14;
 while (1) {
  if (!(HEAP32[i16 >> 2] | 0)) break;
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 0 << HEAP32[i16 >> 2];
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  i14 = _stbiw__zlib_flushf(HEAP32[i23 >> 2] | 0, i15, i16) | 0;
  HEAP32[i23 >> 2] = i14;
 }
 HEAP32[i21 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i20 >> 2] | 0;
  if ((HEAP32[i21 >> 2] | 0) >= 16384) break;
  if (HEAP32[i1 + (HEAP32[i21 >> 2] << 2) >> 2] | 0) _free((HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i21 >> 2] << 2) >> 2] | 0) + -8 | 0);
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
 }
 _free(i1);
 HEAP32[i26 >> 2] = 1;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i17 >> 2] = (HEAP32[i19 >> 2] | 0) % 5552 | 0;
 HEAP32[i22 >> 2] = 0;
 while (1) {
  if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i19 >> 2] | 0)) break;
  HEAP32[i21 >> 2] = 0;
  while (1) {
   if ((HEAP32[i21 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
   HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + (HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + (HEAP32[i21 >> 2] | 0)) >> 0] | 0);
   HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i26 >> 2] | 0);
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
  }
  HEAP32[i26 >> 2] = ((HEAP32[i26 >> 2] | 0) >>> 0) % 65521 | 0;
  HEAP32[i27 >> 2] = ((HEAP32[i27 >> 2] | 0) >>> 0) % 65521 | 0;
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
  HEAP32[i17 >> 2] = 5552;
 }
 if (!(HEAP32[i23 >> 2] | 0)) i28 = 87; else if (((HEAP32[(HEAP32[i23 >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[i23 >> 2] | 0) + -8 >> 2] | 0)) i28 = 87;
 if ((i28 | 0) == 87) _stbiw__sbgrowf(i23, 1, 1) | 0;
 i20 = (HEAP32[i27 >> 2] | 0) >>> 8 & 255;
 i19 = HEAP32[i23 >> 2] | 0;
 i21 = i19 | 0;
 i19 = i19 + -8 + 4 | 0;
 i22 = HEAP32[i19 >> 2] | 0;
 HEAP32[i19 >> 2] = i22 + 1;
 HEAP8[i21 + i22 >> 0] = i20;
 if (!(HEAP32[i23 >> 2] | 0)) i28 = 90; else if (((HEAP32[(HEAP32[i23 >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[i23 >> 2] | 0) + -8 >> 2] | 0)) i28 = 90;
 if ((i28 | 0) == 90) _stbiw__sbgrowf(i23, 1, 1) | 0;
 i21 = HEAP32[i27 >> 2] & 255;
 i20 = HEAP32[i23 >> 2] | 0;
 i22 = i20 | 0;
 i20 = i20 + -8 + 4 | 0;
 i27 = HEAP32[i20 >> 2] | 0;
 HEAP32[i20 >> 2] = i27 + 1;
 HEAP8[i22 + i27 >> 0] = i21;
 if (!(HEAP32[i23 >> 2] | 0)) i28 = 93; else if (((HEAP32[(HEAP32[i23 >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[i23 >> 2] | 0) + -8 >> 2] | 0)) i28 = 93;
 if ((i28 | 0) == 93) _stbiw__sbgrowf(i23, 1, 1) | 0;
 i21 = (HEAP32[i26 >> 2] | 0) >>> 8 & 255;
 i20 = HEAP32[i23 >> 2] | 0;
 i22 = i20 | 0;
 i20 = i20 + -8 + 4 | 0;
 i27 = HEAP32[i20 >> 2] | 0;
 HEAP32[i20 >> 2] = i27 + 1;
 HEAP8[i22 + i27 >> 0] = i21;
 if (!(HEAP32[i23 >> 2] | 0)) i28 = 96; else if (((HEAP32[(HEAP32[i23 >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[i23 >> 2] | 0) + -8 >> 2] | 0)) i28 = 96;
 if ((i28 | 0) == 96) _stbiw__sbgrowf(i23, 1, 1) | 0;
 i26 = HEAP32[i26 >> 2] & 255;
 i22 = HEAP32[i23 >> 2] | 0;
 i27 = i22 | 0;
 i22 = i22 + -8 + 4 | 0;
 i28 = HEAP32[i22 >> 2] | 0;
 HEAP32[i22 >> 2] = i28 + 1;
 HEAP8[i27 + i28 >> 0] = i26;
 HEAP32[HEAP32[i24 >> 2] >> 2] = HEAP32[(HEAP32[i23 >> 2] | 0) + -8 + 4 >> 2];
 i28 = HEAP32[i23 >> 2] | 0;
 _memmove(i28 + -8 | 0, i28 | 0, HEAP32[HEAP32[i24 >> 2] >> 2] | 0) | 0;
 HEAP32[i25 >> 2] = (HEAP32[i23 >> 2] | 0) + -8;
 i28 = HEAP32[i25 >> 2] | 0;
 STACKTOP = i29;
 return i28 | 0;
}

function _jar_xm_tick(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0, d18 = 0.0, d19 = 0.0, f20 = f0;
 i12 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i1 + 24 | 0;
 i9 = i1 + 29 | 0;
 i5 = i1 + 20 | 0;
 i4 = i1 + 28 | 0;
 i7 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i11 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0)) _jar_xm_row(HEAP32[i6 >> 2] | 0);
 HEAP8[i9 >> 0] = 0;
 while (1) {
  i1 = HEAP32[i6 >> 2] | 0;
  if ((HEAPU8[i9 >> 0] | 0) >= (HEAPU16[(HEAP32[i6 >> 2] | 0) + 4 + 46 >> 1] | 0)) break;
  HEAP32[i5 >> 2] = (HEAP32[i1 + 384 >> 2] | 0) + ((HEAPU8[i9 >> 0] | 0) * 288 | 0);
  _jar_xm_envelopes(HEAP32[i5 >> 2] | 0);
  _jar_xm_autovibrato(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
  do if (HEAP8[(HEAP32[i5 >> 2] | 0) + 72 >> 0] & 1) {
   if (!(HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 3 >> 0] | 0)) if (HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] | 0) break;
   HEAP8[(HEAP32[i5 >> 2] | 0) + 72 >> 0] = 0;
   HEAP8[(HEAP32[i5 >> 2] | 0) + 73 >> 0] = 0;
   _jar_xm_update_frequency(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
  } while (0);
  if (HEAP8[(HEAP32[i5 >> 2] | 0) + 96 >> 0] & 1) if ((HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 3 >> 0] | 0) != 4) if ((HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] | 0) != 6) if ((HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 2 >> 0] >> 4 | 0) != 11) {
   HEAP8[(HEAP32[i5 >> 2] | 0) + 96 >> 0] = 0;
   HEAPF32[(HEAP32[i5 >> 2] | 0) + 108 >> 2] = Math_fround(0.0);
   _jar_xm_update_frequency(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
  }
  switch (HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 2 >> 0] >> 4 | 0) {
  case 6:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i2 = HEAP32[i5 >> 2] | 0;
     _jar_xm_volume_slide(i2 | 0, HEAPU8[(HEAP32[i2 + 16 >> 2] | 0) + 2 >> 0] & 15);
    }
    break;
   }
  case 7:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i2 = HEAP32[i5 >> 2] | 0;
     _jar_xm_volume_slide(i2 | 0, HEAPU8[(HEAP32[i2 + 16 >> 2] | 0) + 2 >> 0] << 4 & 255);
    }
    break;
   }
  case 11:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     HEAP8[(HEAP32[i5 >> 2] | 0) + 96 >> 0] = 0;
     i15 = HEAP32[i6 >> 2] | 0;
     i16 = HEAP32[i5 >> 2] | 0;
     i14 = i16 | 0;
     i1 = HEAP8[i16 + 105 >> 0] | 0;
     i16 = i16 + 106 | 0;
     i2 = HEAP16[i16 >> 1] | 0;
     HEAP16[i16 >> 1] = i2 + 1 << 16 >> 16;
     _jar_xm_vibrato(i15, i14, i1, i2);
    }
    break;
   }
  case 13:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i16 = HEAP32[i5 >> 2] | 0;
     _jar_xm_panning_slide(i16 | 0, HEAPU8[(HEAP32[i16 + 16 >> 2] | 0) + 2 >> 0] & 15);
    }
    break;
   }
  case 14:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i16 = HEAP32[i5 >> 2] | 0;
     _jar_xm_panning_slide(i16 | 0, HEAPU8[(HEAP32[i16 + 16 >> 2] | 0) + 2 >> 0] << 4 & 255);
    }
    break;
   }
  case 15:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) _jar_xm_tone_portamento(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
    break;
   }
  default:
   {}
  }
  L33 : do switch (HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 3 >> 0] | 0) {
  case 0:
   {
    if ((HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] | 0) > 0) {
     HEAP8[i4 >> 0] = (HEAPU16[(HEAP32[i6 >> 2] | 0) + 328 >> 1] | 0) % 3 | 0;
     switch (HEAP8[i4 >> 0] | 0) {
     case 2:
      {
       if ((HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) == 1) {
        HEAP8[(HEAP32[i5 >> 2] | 0) + 72 >> 0] = 1;
        i16 = HEAP32[i5 >> 2] | 0;
        HEAP8[i16 + 73 >> 0] = HEAPU8[(HEAP32[i16 + 16 >> 2] | 0) + 4 >> 0] >> 4;
        _jar_xm_update_frequency(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
        break L33;
       } else i12 = 32;
       break;
      }
     case 1:
      {
       i12 = 32;
       break;
      }
     case 0:
      break;
     default:
      break L33;
     }
     if ((i12 | 0) == 32) {
      i12 = 0;
      if (!(HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0)) {
       HEAP8[(HEAP32[i5 >> 2] | 0) + 72 >> 0] = 0;
       HEAP8[(HEAP32[i5 >> 2] | 0) + 73 >> 0] = 0;
       _jar_xm_update_frequency(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
       break L33;
      }
     }
     i15 = HEAP32[i5 >> 2] | 0;
     i16 = HEAP32[i6 >> 2] | 0;
     _jar_xm_arpeggio(i16 | 0, i15 | 0, HEAP8[(HEAP32[i15 + 16 >> 2] | 0) + 4 >> 0] | 0, (HEAPU16[i16 + 350 >> 1] | 0) - (HEAP8[i4 >> 0] | 0) & 65535);
    }
    break;
   }
  case 1:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i16 = HEAP32[i5 >> 2] | 0;
     _jar_xm_pitch_slide(HEAP32[i6 >> 2] | 0, i16 | 0, Math_fround(0 - (HEAPU8[i16 + 78 >> 0] | 0) | 0));
    }
    break;
   }
  case 2:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i16 = HEAP32[i5 >> 2] | 0;
     _jar_xm_pitch_slide(HEAP32[i6 >> 2] | 0, i16 | 0, Math_fround(HEAPU8[i16 + 79 >> 0] | 0));
    }
    break;
   }
  case 3:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) _jar_xm_tone_portamento(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
    break;
   }
  case 4:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     HEAP8[(HEAP32[i5 >> 2] | 0) + 96 >> 0] = 1;
     i2 = HEAP32[i6 >> 2] | 0;
     i1 = HEAP32[i5 >> 2] | 0;
     i14 = i1 | 0;
     i15 = HEAP8[i1 + 105 >> 0] | 0;
     i1 = i1 + 106 | 0;
     i16 = HEAP16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = i16 + 1 << 16 >> 16;
     _jar_xm_vibrato(i2, i14, i15, i16);
    }
    break;
   }
  case 5:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     _jar_xm_tone_portamento(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
     i16 = HEAP32[i5 >> 2] | 0;
     _jar_xm_volume_slide(i16 | 0, HEAP8[i16 + 74 >> 0] | 0);
    }
    break;
   }
  case 6:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     HEAP8[(HEAP32[i5 >> 2] | 0) + 96 >> 0] = 1;
     i2 = HEAP32[i6 >> 2] | 0;
     i1 = HEAP32[i5 >> 2] | 0;
     i14 = i1 | 0;
     i15 = HEAP8[i1 + 105 >> 0] | 0;
     i1 = i1 + 106 | 0;
     i16 = HEAP16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = i16 + 1 << 16 >> 16;
     _jar_xm_vibrato(i2, i14, i15, i16);
     i16 = HEAP32[i5 >> 2] | 0;
     _jar_xm_volume_slide(i16 | 0, HEAP8[i16 + 74 >> 0] | 0);
    }
    break;
   }
  case 7:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i2 = HEAP32[i6 >> 2] | 0;
     i1 = HEAP32[i5 >> 2] | 0;
     i14 = i1 | 0;
     i15 = HEAP8[i1 + 117 >> 0] | 0;
     i1 = i1 + 118 | 0;
     i16 = HEAP8[i1 >> 0] | 0;
     HEAP8[i1 >> 0] = i16 + 1 << 24 >> 24;
     _jar_xm_tremolo(i2, i14, i15, i16 & 255);
    }
    break;
   }
  case 10:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i16 = HEAP32[i5 >> 2] | 0;
     _jar_xm_volume_slide(i16 | 0, HEAP8[i16 + 74 >> 0] | 0);
    }
    break;
   }
  case 14:
   switch (HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] >> 4 | 0) {
   case 9:
    {
     if (!(HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0)) break L33;
     if (!(HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] & 15)) break L33;
     if ((HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) % (HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] & 15 | 0) | 0 | 0) break L33;
     _jar_xm_trigger_note(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0);
     _jar_xm_envelopes(HEAP32[i5 >> 2] | 0);
     break L33;
    }
   case 12:
    {
     if ((HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] & 15 | 0) != (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0)) break L33;
     _jar_xm_cut_note(HEAP32[i5 >> 2] | 0);
     break L33;
    }
   case 13:
    {
     if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 93 >> 0] | 0) != (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0)) break L33;
     i16 = HEAP32[i5 >> 2] | 0;
     _jar_xm_handle_note_and_instrument(HEAP32[i6 >> 2] | 0, i16 | 0, HEAP32[i16 + 16 >> 2] | 0);
     _jar_xm_envelopes(HEAP32[i5 >> 2] | 0);
     break L33;
    }
   default:
    break L33;
   }
  case 17:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 76 >> 0] & 240 | 0) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 76 >> 0] & 15 | 0) break L33;
     i1 = HEAPU8[(HEAP32[i5 >> 2] | 0) + 76 >> 0] | 0;
     if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 76 >> 0] & 240 | 0) {
      f17 = Math_fround(Math_fround(i1 >> 4 | 0) / Math_fround(64.0));
      HEAPF32[i7 >> 2] = f17;
      f17 = Math_fround(HEAPF32[i7 >> 2]);
      i16 = (HEAP32[i6 >> 2] | 0) + 332 | 0;
      f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
      HEAPF32[i16 >> 2] = f17;
      if (!(Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 332 >> 2]) > Math_fround(1.0))) break L33;
      HEAPF32[(HEAP32[i6 >> 2] | 0) + 332 >> 2] = Math_fround(1.0);
      break L33;
     } else {
      f17 = Math_fround(Math_fround(i1 & 15 | 0) / Math_fround(64.0));
      HEAPF32[i8 >> 2] = f17;
      f17 = Math_fround(HEAPF32[i8 >> 2]);
      i16 = (HEAP32[i6 >> 2] | 0) + 332 | 0;
      f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) - f17);
      HEAPF32[i16 >> 2] = f17;
      if (!(Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 332 >> 2]) < Math_fround(0.0))) break L33;
      HEAPF32[(HEAP32[i6 >> 2] | 0) + 332 >> 2] = Math_fround(0.0);
      break L33;
     }
    }
    break;
   }
  case 20:
   {
    if ((HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) == (HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 0] | 0)) _jar_xm_key_off(HEAP32[i5 >> 2] | 0);
    break;
   }
  case 25:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i16 = HEAP32[i5 >> 2] | 0;
     _jar_xm_panning_slide(i16 | 0, HEAP8[i16 + 77 >> 0] | 0);
    }
    break;
   }
  case 27:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 92 >> 0] & 15 | 0) if (!((HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) % (HEAPU8[(HEAP32[i5 >> 2] | 0) + 92 >> 0] & 15 | 0) | 0)) {
     f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 40 >> 2]);
     f17 = Math_fround(f17 * Math_fround(HEAPF32[14608 + (HEAPU8[(HEAP32[i5 >> 2] | 0) + 92 >> 0] >> 4 << 2) >> 2]));
     f17 = Math_fround(f17 + Math_fround(HEAPF32[14672 + (HEAPU8[(HEAP32[i5 >> 2] | 0) + 92 >> 0] >> 4 << 2) >> 2]));
     HEAPF32[i11 >> 2] = f17;
     if (Math_fround(HEAPF32[i11 >> 2]) > Math_fround(1.0)) HEAPF32[i11 >> 2] = Math_fround(1.0); else if (Math_fround(HEAPF32[i11 >> 2]) < Math_fround(0.0)) HEAPF32[i11 >> 2] = Math_fround(0.0);
     _jar_xm_trigger_note(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0);
     f17 = Math_fround(HEAPF32[i11 >> 2]);
     HEAPF32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] = f17;
    }
    break;
   }
  case 29:
   {
    if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) {
     i16 = HEAP32[i5 >> 2] | 0;
     i14 = (HEAP32[i5 >> 2] | 0) + 124 | 0;
     i15 = HEAPU8[(HEAP32[i5 >> 2] | 0) + 124 >> 0] >> 4 | 0;
     HEAP8[i16 + 125 >> 0] = (((HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) - 1 | 0) % (i15 + (HEAPU8[i14 >> 0] & 15) + 2 | 0) | 0 | 0) > (i15 | 0) & 1;
    }
    break;
   }
  default:
   {}
  } while (0);
  d19 = +Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 44 >> 2]);
  d18 = +Math_fround(Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 60 >> 2]) - Math_fround(.5));
  f17 = Math_fround(d19 + d18 * (.5 - +Math_abs(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 44 >> 2]) - Math_fround(.5))))) * 2.0);
  HEAPF32[i10 >> 2] = f17;
  if (HEAP8[(HEAP32[i5 >> 2] | 0) + 125 >> 0] & 1) HEAPF32[i3 >> 2] = Math_fround(0.0); else {
   f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 40 >> 2]);
   f17 = Math_fround(f17 + Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 120 >> 2]));
   HEAPF32[i3 >> 2] = f17;
   if (Math_fround(HEAPF32[i3 >> 2]) > Math_fround(1.0)) HEAPF32[i3 >> 2] = Math_fround(1.0); else if (Math_fround(HEAPF32[i3 >> 2]) < Math_fround(0.0)) HEAPF32[i3 >> 2] = Math_fround(0.0);
   f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 52 >> 2]);
   f17 = Math_fround(f17 * Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 56 >> 2]));
   f17 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) * f17);
   HEAPF32[i3 >> 2] = f17;
  }
  f17 = Math_fround(HEAPF32[i10 >> 2]);
  HEAPF32[(HEAP32[i5 >> 2] | 0) + 140 >> 2] = f17;
  f17 = Math_fround(HEAPF32[i3 >> 2]);
  HEAPF32[(HEAP32[i5 >> 2] | 0) + 144 >> 2] = f17;
  HEAP8[i9 >> 0] = (HEAP8[i9 >> 0] | 0) + 1 << 24 >> 24;
 }
 i16 = i1 + 350 | 0;
 HEAP16[i16 >> 1] = (HEAP16[i16 >> 1] | 0) + 1 << 16 >> 16;
 if ((HEAPU16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] | 0) < ((HEAPU16[(HEAP32[i6 >> 2] | 0) + 328 >> 1] | 0) + (HEAPU16[(HEAP32[i6 >> 2] | 0) + 372 >> 1] | 0) | 0)) {
  i16 = HEAP32[i6 >> 2] | 0;
  i16 = i16 + 324 | 0;
  i16 = HEAP32[i16 >> 2] | 0;
  f20 = Math_fround(i16 >>> 0);
  i16 = HEAP32[i6 >> 2] | 0;
  i16 = i16 + 330 | 0;
  i16 = HEAP16[i16 >> 1] | 0;
  f17 = Math_fround(i16 & 65535);
  f17 = Math_fround(f17 * Math_fround(.400000006));
  f17 = Math_fround(f20 / f17);
  i16 = HEAP32[i6 >> 2] | 0;
  i16 = i16 + 352 | 0;
  f20 = Math_fround(HEAPF32[i16 >> 2]);
  f17 = Math_fround(f20 + f17);
  HEAPF32[i16 >> 2] = f17;
  STACKTOP = i13;
  return;
 }
 HEAP16[(HEAP32[i6 >> 2] | 0) + 350 >> 1] = 0;
 HEAP16[(HEAP32[i6 >> 2] | 0) + 372 >> 1] = 0;
 i16 = HEAP32[i6 >> 2] | 0;
 i16 = i16 + 324 | 0;
 i16 = HEAP32[i16 >> 2] | 0;
 f17 = Math_fround(i16 >>> 0);
 i16 = HEAP32[i6 >> 2] | 0;
 i16 = i16 + 330 | 0;
 i16 = HEAP16[i16 >> 1] | 0;
 f20 = Math_fround(i16 & 65535);
 f20 = Math_fround(f20 * Math_fround(.400000006));
 f20 = Math_fround(f17 / f20);
 i16 = HEAP32[i6 >> 2] | 0;
 i16 = i16 + 352 | 0;
 f17 = Math_fround(HEAPF32[i16 >> 2]);
 f20 = Math_fround(f17 + f20);
 HEAPF32[i16 >> 2] = f20;
 STACKTOP = i13;
 return;
}

function _stbir__decode_scanline(i30, i28) {
 i30 = i30 | 0;
 i28 = i28 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i29 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, f39 = f0;
 i33 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i31 = i1 + 136 | 0;
 i29 = i1 + 132 | 0;
 i3 = i1 + 128 | 0;
 i4 = i1 + 124 | 0;
 i2 = i1 + 120 | 0;
 i36 = i1 + 116 | 0;
 i35 = i1 + 112 | 0;
 i26 = i1 + 108 | 0;
 i38 = i1 + 104 | 0;
 i6 = i1 + 100 | 0;
 i16 = i1 + 96 | 0;
 i34 = i1 + 92 | 0;
 i37 = i1 + 88 | 0;
 i17 = i1 + 84 | 0;
 i27 = i1 + 80 | 0;
 i5 = i1 + 76 | 0;
 i32 = i1 + 72 | 0;
 i7 = i1 + 68 | 0;
 i18 = i1 + 64 | 0;
 i14 = i1 + 60 | 0;
 i24 = i1 + 56 | 0;
 i15 = i1 + 52 | 0;
 i25 = i1 + 48 | 0;
 i8 = i1 + 44 | 0;
 i19 = i1 + 40 | 0;
 i9 = i1 + 36 | 0;
 i20 = i1 + 32 | 0;
 i10 = i1 + 28 | 0;
 i21 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i22 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i23 = i1 + 8 | 0;
 i13 = i1 + 4 | 0;
 HEAP32[i31 >> 2] = i30;
 HEAP32[i29 >> 2] = i28;
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i31 >> 2] | 0) + 64 >> 2];
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[i31 >> 2] | 0) + 68 >> 2];
 HEAP32[i36 >> 2] = HEAP32[(HEAP32[i31 >> 2] | 0) + 76 >> 2];
 HEAP32[i35 >> 2] = HEAP32[(HEAP32[i31 >> 2] | 0) + 96 >> 2];
 HEAP32[i26 >> 2] = HEAP32[(HEAP32[i31 >> 2] | 0) + 4 >> 2];
 HEAP32[i38 >> 2] = HEAP32[(HEAP32[i31 >> 2] | 0) + 12 >> 2];
 i30 = _stbir__get_decode_buffer(HEAP32[i31 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i30;
 HEAP32[i16 >> 2] = HEAP32[(HEAP32[i31 >> 2] | 0) + 88 >> 2];
 HEAP32[i34 >> 2] = HEAP32[(HEAP32[i31 >> 2] | 0) + 92 >> 2];
 i30 = _stbir__edge_wrap(HEAP32[i34 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] | 0) | 0;
 i30 = Math_imul(i30, HEAP32[i38 >> 2] | 0) | 0;
 HEAP32[i37 >> 2] = i30;
 HEAP32[i17 >> 2] = (HEAP32[HEAP32[i31 >> 2] >> 2] | 0) + (HEAP32[i37 >> 2] | 0);
 HEAP32[i27 >> 2] = (HEAP32[i26 >> 2] | 0) + (HEAP32[(HEAP32[i31 >> 2] | 0) + 144 >> 2] | 0);
 HEAP32[i5 >> 2] = (HEAP32[i36 >> 2] << 1) + (HEAP32[i35 >> 2] | 0);
 HEAP32[i32 >> 2] = 0 - (HEAP32[(HEAP32[i31 >> 2] | 0) + 144 >> 2] | 0);
 do if ((HEAP32[i34 >> 2] | 0) == 4) {
  if ((HEAP32[i29 >> 2] | 0) >= 0) if ((HEAP32[i29 >> 2] | 0) < (HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] | 0)) break;
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break;
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
    HEAPF32[(HEAP32[i6 >> 2] | 0) + (i38 + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = Math_fround(0.0);
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
  STACKTOP = i33;
  return;
 } while (0);
 L15 : do switch (HEAP32[i5 >> 2] | 0) {
 case 0:
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break L15;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i38;
   i38 = _stbir__edge_wrap(HEAP32[i16 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
   i38 = Math_imul(i38, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i18 >> 2] = i38;
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    f39 = Math_fround(Math_fround(HEAPU8[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + (HEAP32[i3 >> 2] | 0)) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = f39;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
 case 1:
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break L15;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i14 >> 2] = i38;
   i38 = _stbir__edge_wrap(HEAP32[i16 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
   i38 = Math_imul(i38, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i24 >> 2] = i38;
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    f39 = Math_fround(HEAPF32[28400 + ((HEAPU8[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) + (HEAP32[i3 >> 2] | 0)) >> 0] | 0) << 2) >> 2]);
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = f39;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   if (!(HEAP32[(HEAP32[i31 >> 2] | 0) + 72 >> 2] & 2)) {
    f39 = Math_fround(Math_fround(HEAPU8[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) + (HEAP32[i2 >> 2] | 0)) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) >> 2] = f39;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
 case 2:
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break L15;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i15 >> 2] = i38;
   i38 = _stbir__edge_wrap(HEAP32[i16 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
   i38 = Math_imul(i38, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i25 >> 2] = i38;
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    f39 = Math_fround(Math_fround(HEAPU16[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 1) >> 1] | 0) / Math_fround(65535.0));
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = f39;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
 case 3:
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break L15;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = i38;
   i38 = _stbir__edge_wrap(HEAP32[i16 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
   i38 = Math_imul(i38, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i19 >> 2] = i38;
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    f39 = Math_fround(_stbir__srgb_to_linear(Math_fround(Math_fround(HEAPU16[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 1) >> 1] | 0) / Math_fround(65535.0))));
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = f39;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   if (!(HEAP32[(HEAP32[i31 >> 2] | 0) + 72 >> 2] & 2)) {
    f39 = Math_fround(Math_fround(HEAPU16[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 1) >> 1] | 0) / Math_fround(65535.0));
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) >> 2] = f39;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
 case 4:
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break L15;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i9 >> 2] = i38;
   i38 = _stbir__edge_wrap(HEAP32[i16 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
   i38 = Math_imul(i38, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = i38;
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    f39 = Math_fround(+((HEAP32[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] | 0) >>> 0) / 4294967295.0);
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = f39;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
 case 5:
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break L15;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i38;
   i38 = _stbir__edge_wrap(HEAP32[i16 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
   i38 = Math_imul(i38, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i21 >> 2] = i38;
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    f39 = Math_fround(_stbir__srgb_to_linear(Math_fround(+((HEAP32[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] | 0) >>> 0) / 4294967295.0)));
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = f39;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   if (!(HEAP32[(HEAP32[i31 >> 2] | 0) + 72 >> 2] & 2)) {
    f39 = Math_fround(+((HEAP32[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) >> 2] | 0) >>> 0) / 4294967295.0);
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) >> 2] = f39;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
 case 6:
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break L15;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i11 >> 2] = i38;
   i38 = _stbir__edge_wrap(HEAP32[i16 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
   i38 = Math_imul(i38, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i22 >> 2] = i38;
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    f39 = Math_fround(HEAPF32[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2]);
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = f39;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
 case 7:
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break L15;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i12 >> 2] = i38;
   i38 = _stbir__edge_wrap(HEAP32[i16 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
   i38 = Math_imul(i38, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i23 >> 2] = i38;
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    f39 = Math_fround(_stbir__srgb_to_linear(Math_fround(HEAPF32[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i23 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2])));
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = f39;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   if (!(HEAP32[(HEAP32[i31 >> 2] | 0) + 72 >> 2] & 2)) {
    f39 = Math_fround(HEAPF32[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i23 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) >> 2]);
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) >> 2] = f39;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
 default:
  ___assert_fail(56195, 54884, 1368, 56244);
 } while (0);
 L94 : do if (!(HEAP32[(HEAP32[i31 >> 2] | 0) + 72 >> 2] & 1)) {
  HEAP32[i32 >> 2] = 0 - (HEAP32[(HEAP32[i31 >> 2] | 0) + 144 >> 2] | 0);
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break L94;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i13 >> 2] = i38;
   f39 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) >> 2]);
   HEAPF32[i1 >> 2] = f39;
   if ((HEAP32[(HEAP32[i31 >> 2] | 0) + 76 >> 2] | 0) != 3) {
    f39 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) + Math_fround(8.27180613e-25));
    HEAPF32[i1 >> 2] = f39;
    f39 = Math_fround(HEAPF32[i1 >> 2]);
    HEAPF32[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) >> 2] = f39;
   }
   HEAP32[i3 >> 2] = 0;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
    if ((HEAP32[i3 >> 2] | 0) != (HEAP32[i2 >> 2] | 0)) {
     f39 = Math_fround(HEAPF32[i1 >> 2]);
     i38 = (HEAP32[i6 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) << 2) | 0;
     f39 = Math_fround(Math_fround(HEAPF32[i38 >> 2]) * f39);
     HEAPF32[i38 >> 2] = f39;
    }
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
 } while (0);
 if ((HEAP32[i16 >> 2] | 0) != 4) {
  STACKTOP = i33;
  return;
 }
 HEAP32[i32 >> 2] = 0 - (HEAP32[(HEAP32[i31 >> 2] | 0) + 144 >> 2] | 0);
 while (1) {
  if ((HEAP32[i32 >> 2] | 0) >= 0) break;
  HEAP32[i3 >> 2] = 0;
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAPF32[(HEAP32[i6 >> 2] | 0) + (i38 + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = Math_fround(0.0);
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  }
  HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
 }
 HEAP32[i32 >> 2] = HEAP32[i26 >> 2];
 while (1) {
  if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i27 >> 2] | 0)) break;
  HEAP32[i3 >> 2] = 0;
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
   i38 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAPF32[(HEAP32[i6 >> 2] | 0) + (i38 + (HEAP32[i3 >> 2] | 0) << 2) >> 2] = Math_fround(0.0);
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  }
  HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
 }
 STACKTOP = i33;
 return;
}

function _stbir__resample_vertical_upsample(i40, i24) {
 i40 = i40 | 0;
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, f51 = f0;
 i44 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 i41 = i1 + 184 | 0;
 i45 = i1 + 180 | 0;
 i43 = i1 + 176 | 0;
 i23 = i1 + 172 | 0;
 i29 = i1 + 168 | 0;
 i47 = i1 + 164 | 0;
 i42 = i1 + 160 | 0;
 i3 = i1 + 156 | 0;
 i2 = i1 + 152 | 0;
 i50 = i1 + 148 | 0;
 i49 = i1 + 144 | 0;
 i32 = i1 + 140 | 0;
 i27 = i1 + 136 | 0;
 i17 = i1 + 132 | 0;
 i16 = i1 + 128 | 0;
 i48 = i1 + 124 | 0;
 i9 = i1 + 120 | 0;
 i46 = i1 + 116 | 0;
 i30 = i1 + 112 | 0;
 i31 = i1 + 108 | 0;
 i38 = i1 + 104 | 0;
 i39 = i1 + 100 | 0;
 i25 = i1 + 96 | 0;
 i26 = i1 + 92 | 0;
 i28 = i1 + 88 | 0;
 i10 = i1 + 84 | 0;
 i11 = i1 + 80 | 0;
 i33 = i1 + 76 | 0;
 i4 = i1 + 72 | 0;
 i18 = i1 + 68 | 0;
 i14 = i1 + 64 | 0;
 i36 = i1 + 60 | 0;
 i7 = i1 + 56 | 0;
 i21 = i1 + 52 | 0;
 i15 = i1 + 48 | 0;
 i37 = i1 + 44 | 0;
 i8 = i1 + 40 | 0;
 i22 = i1 + 36 | 0;
 i12 = i1 + 32 | 0;
 i34 = i1 + 28 | 0;
 i5 = i1 + 24 | 0;
 i19 = i1 + 20 | 0;
 i13 = i1 + 16 | 0;
 i35 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i20 = i1 + 4 | 0;
 HEAP32[i41 >> 2] = i40;
 HEAP32[i45 >> 2] = i24;
 HEAP32[i29 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 20 >> 2];
 HEAP32[i47 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 108 >> 2];
 HEAP32[i42 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 112 >> 2];
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 64 >> 2];
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 68 >> 2];
 HEAP32[i50 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 76 >> 2];
 HEAP32[i49 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 96 >> 2];
 HEAP32[i32 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 164 >> 2];
 HEAP32[i27 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 16 >> 2];
 HEAP32[i17 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 184 >> 2];
 HEAP32[i16 >> 2] = (HEAP32[i50 >> 2] << 1) + (HEAP32[i49 >> 2] | 0);
 HEAP32[i48 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 132 >> 2];
 HEAP32[i46 >> 2] = HEAP32[i45 >> 2];
 HEAP32[i30 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 180 >> 2];
 HEAP32[i31 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 176 >> 2];
 HEAP32[i38 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 168 >> 2];
 HEAP32[i39 >> 2] = ((HEAP32[(HEAP32[i41 >> 2] | 0) + 160 >> 2] | 0) >>> 0) / 4 | 0;
 i40 = Math_imul(HEAP32[i48 >> 2] | 0, HEAP32[i46 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = i40;
 HEAP32[i25 >> 2] = HEAP32[(HEAP32[i47 >> 2] | 0) + (HEAP32[i46 >> 2] << 3) >> 2];
 HEAP32[i26 >> 2] = HEAP32[(HEAP32[i47 >> 2] | 0) + (HEAP32[i46 >> 2] << 3) + 4 >> 2];
 i40 = Math_imul(HEAP32[i45 >> 2] | 0, HEAP32[(HEAP32[i41 >> 2] | 0) + 28 >> 2] | 0) | 0;
 HEAP32[i28 >> 2] = i40;
 if (!(_stbir__use_height_upsampling(HEAP32[i41 >> 2] | 0) | 0)) ___assert_fail(56399, 54884, 1897, 56548);
 _memset(HEAP32[i17 >> 2] | 0, 0, Math_imul(HEAP32[i29 >> 2] << 2, HEAP32[i3 >> 2] | 0) | 0) | 0;
 HEAP32[i9 >> 2] = 0;
 switch (HEAP32[i3 >> 2] | 0) {
 case 1:
  {
   HEAP32[i23 >> 2] = HEAP32[i25 >> 2];
   while (1) {
    if ((HEAP32[i23 >> 2] | 0) > (HEAP32[i26 >> 2] | 0)) break;
    i50 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i50 + 1;
    HEAP32[i11 >> 2] = i50;
    i50 = _stbir__get_ring_buffer_scanline(HEAP32[i23 >> 2] | 0, HEAP32[i30 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i38 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i39 >> 2] | 0) | 0;
    HEAP32[i33 >> 2] = i50;
    f51 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]);
    HEAPF32[i4 >> 2] = f51;
    HEAP32[i43 >> 2] = 0;
    while (1) {
     if ((HEAP32[i43 >> 2] | 0) >= (HEAP32[i29 >> 2] | 0)) break;
     HEAP32[i18 >> 2] = HEAP32[i43 >> 2];
     f51 = Math_fround(HEAPF32[(HEAP32[i33 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + 0 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i4 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + 0 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + 1;
    }
    HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
   }
   i43 = HEAP32[i41 >> 2] | 0;
   i45 = HEAP32[i29 >> 2] | 0;
   i47 = HEAP32[i27 >> 2] | 0;
   i46 = HEAP32[i28 >> 2] | 0;
   i46 = i47 + i46 | 0;
   i47 = HEAP32[i17 >> 2] | 0;
   i48 = HEAP32[i3 >> 2] | 0;
   i49 = HEAP32[i2 >> 2] | 0;
   i50 = HEAP32[i16 >> 2] | 0;
   _stbir__encode_scanline(i43, i45, i46, i47, i48, i49, i50);
   STACKTOP = i44;
   return;
  }
 case 2:
  {
   HEAP32[i23 >> 2] = HEAP32[i25 >> 2];
   while (1) {
    if ((HEAP32[i23 >> 2] | 0) > (HEAP32[i26 >> 2] | 0)) break;
    i50 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i50 + 1;
    HEAP32[i14 >> 2] = i50;
    i50 = _stbir__get_ring_buffer_scanline(HEAP32[i23 >> 2] | 0, HEAP32[i30 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i38 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i39 >> 2] | 0) | 0;
    HEAP32[i36 >> 2] = i50;
    f51 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) << 2) >> 2]);
    HEAPF32[i7 >> 2] = f51;
    HEAP32[i43 >> 2] = 0;
    while (1) {
     if ((HEAP32[i43 >> 2] | 0) >= (HEAP32[i29 >> 2] | 0)) break;
     HEAP32[i21 >> 2] = HEAP32[i43 >> 2] << 1;
     f51 = Math_fround(HEAPF32[(HEAP32[i36 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) + 0 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i7 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) + 0 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     f51 = Math_fround(HEAPF32[(HEAP32[i36 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) + 1 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i7 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) + 1 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + 1;
    }
    HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
   }
   i43 = HEAP32[i41 >> 2] | 0;
   i45 = HEAP32[i29 >> 2] | 0;
   i47 = HEAP32[i27 >> 2] | 0;
   i46 = HEAP32[i28 >> 2] | 0;
   i46 = i47 + i46 | 0;
   i47 = HEAP32[i17 >> 2] | 0;
   i48 = HEAP32[i3 >> 2] | 0;
   i49 = HEAP32[i2 >> 2] | 0;
   i50 = HEAP32[i16 >> 2] | 0;
   _stbir__encode_scanline(i43, i45, i46, i47, i48, i49, i50);
   STACKTOP = i44;
   return;
  }
 case 3:
  {
   HEAP32[i23 >> 2] = HEAP32[i25 >> 2];
   while (1) {
    if ((HEAP32[i23 >> 2] | 0) > (HEAP32[i26 >> 2] | 0)) break;
    i50 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i50 + 1;
    HEAP32[i15 >> 2] = i50;
    i50 = _stbir__get_ring_buffer_scanline(HEAP32[i23 >> 2] | 0, HEAP32[i30 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i38 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i39 >> 2] | 0) | 0;
    HEAP32[i37 >> 2] = i50;
    f51 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) << 2) >> 2]);
    HEAPF32[i8 >> 2] = f51;
    HEAP32[i43 >> 2] = 0;
    while (1) {
     if ((HEAP32[i43 >> 2] | 0) >= (HEAP32[i29 >> 2] | 0)) break;
     HEAP32[i22 >> 2] = (HEAP32[i43 >> 2] | 0) * 3;
     f51 = Math_fround(HEAPF32[(HEAP32[i37 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 0 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i8 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 0 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     f51 = Math_fround(HEAPF32[(HEAP32[i37 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 1 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i8 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 1 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     f51 = Math_fround(HEAPF32[(HEAP32[i37 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 2 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i8 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 2 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + 1;
    }
    HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
   }
   i43 = HEAP32[i41 >> 2] | 0;
   i45 = HEAP32[i29 >> 2] | 0;
   i47 = HEAP32[i27 >> 2] | 0;
   i46 = HEAP32[i28 >> 2] | 0;
   i46 = i47 + i46 | 0;
   i47 = HEAP32[i17 >> 2] | 0;
   i48 = HEAP32[i3 >> 2] | 0;
   i49 = HEAP32[i2 >> 2] | 0;
   i50 = HEAP32[i16 >> 2] | 0;
   _stbir__encode_scanline(i43, i45, i46, i47, i48, i49, i50);
   STACKTOP = i44;
   return;
  }
 case 4:
  {
   HEAP32[i23 >> 2] = HEAP32[i25 >> 2];
   while (1) {
    if ((HEAP32[i23 >> 2] | 0) > (HEAP32[i26 >> 2] | 0)) break;
    i50 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i50 + 1;
    HEAP32[i12 >> 2] = i50;
    i50 = _stbir__get_ring_buffer_scanline(HEAP32[i23 >> 2] | 0, HEAP32[i30 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i38 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i39 >> 2] | 0) | 0;
    HEAP32[i34 >> 2] = i50;
    f51 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) << 2) >> 2]);
    HEAPF32[i5 >> 2] = f51;
    HEAP32[i43 >> 2] = 0;
    while (1) {
     if ((HEAP32[i43 >> 2] | 0) >= (HEAP32[i29 >> 2] | 0)) break;
     HEAP32[i19 >> 2] = HEAP32[i43 >> 2] << 2;
     f51 = Math_fround(HEAPF32[(HEAP32[i34 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 0 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i5 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 0 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     f51 = Math_fround(HEAPF32[(HEAP32[i34 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i5 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     f51 = Math_fround(HEAPF32[(HEAP32[i34 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i5 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     f51 = Math_fround(HEAPF32[(HEAP32[i34 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 3 << 2) >> 2]);
     f51 = Math_fround(f51 * Math_fround(HEAPF32[i5 >> 2]));
     i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 3 << 2) | 0;
     f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
     HEAPF32[i50 >> 2] = f51;
     HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + 1;
    }
    HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
   }
   i43 = HEAP32[i41 >> 2] | 0;
   i45 = HEAP32[i29 >> 2] | 0;
   i47 = HEAP32[i27 >> 2] | 0;
   i46 = HEAP32[i28 >> 2] | 0;
   i46 = i47 + i46 | 0;
   i47 = HEAP32[i17 >> 2] | 0;
   i48 = HEAP32[i3 >> 2] | 0;
   i49 = HEAP32[i2 >> 2] | 0;
   i50 = HEAP32[i16 >> 2] | 0;
   _stbir__encode_scanline(i43, i45, i46, i47, i48, i49, i50);
   STACKTOP = i44;
   return;
  }
 default:
  {
   HEAP32[i23 >> 2] = HEAP32[i25 >> 2];
   while (1) {
    if ((HEAP32[i23 >> 2] | 0) > (HEAP32[i26 >> 2] | 0)) break;
    i50 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i50 + 1;
    HEAP32[i13 >> 2] = i50;
    i50 = _stbir__get_ring_buffer_scanline(HEAP32[i23 >> 2] | 0, HEAP32[i30 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i38 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i39 >> 2] | 0) | 0;
    HEAP32[i35 >> 2] = i50;
    f51 = Math_fround(HEAPF32[(HEAP32[i42 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) << 2) >> 2]);
    HEAPF32[i6 >> 2] = f51;
    HEAP32[i43 >> 2] = 0;
    while (1) {
     if ((HEAP32[i43 >> 2] | 0) >= (HEAP32[i29 >> 2] | 0)) break;
     i50 = Math_imul(HEAP32[i43 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
     HEAP32[i20 >> 2] = i50;
     HEAP32[i1 >> 2] = 0;
     while (1) {
      if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i3 >> 2] | 0)) break;
      f51 = Math_fround(HEAPF32[(HEAP32[i35 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) << 2) >> 2]);
      f51 = Math_fround(f51 * Math_fround(HEAPF32[i6 >> 2]));
      i50 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) << 2) | 0;
      f51 = Math_fround(Math_fround(HEAPF32[i50 >> 2]) + f51);
      HEAPF32[i50 >> 2] = f51;
      HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
     }
     HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + 1;
    }
    HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
   }
   i43 = HEAP32[i41 >> 2] | 0;
   i45 = HEAP32[i29 >> 2] | 0;
   i47 = HEAP32[i27 >> 2] | 0;
   i46 = HEAP32[i28 >> 2] | 0;
   i46 = i47 + i46 | 0;
   i47 = HEAP32[i17 >> 2] | 0;
   i48 = HEAP32[i3 >> 2] | 0;
   i49 = HEAP32[i2 >> 2] | 0;
   i50 = HEAP32[i16 >> 2] | 0;
   _stbir__encode_scanline(i43, i45, i46, i47, i48, i49, i50);
   STACKTOP = i44;
   return;
  }
 }
}

function _stbir__resample_horizontal_downsample(i52, i50) {
 i52 = i52 | 0;
 i50 = i50 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i51 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, f57 = f0;
 i54 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i55 = i1 + 208 | 0;
 i51 = i1 + 204 | 0;
 i53 = i1 + 200 | 0;
 i28 = i1 + 196 | 0;
 i56 = i1 + 192 | 0;
 i3 = i1 + 188 | 0;
 i14 = i1 + 184 | 0;
 i17 = i1 + 180 | 0;
 i16 = i1 + 176 | 0;
 i13 = i1 + 172 | 0;
 i15 = i1 + 168 | 0;
 i34 = i1 + 164 | 0;
 i35 = i1 + 160 | 0;
 i40 = i1 + 156 | 0;
 i23 = i1 + 152 | 0;
 i18 = i1 + 148 | 0;
 i29 = i1 + 144 | 0;
 i8 = i1 + 140 | 0;
 i45 = i1 + 136 | 0;
 i4 = i1 + 132 | 0;
 i38 = i1 + 128 | 0;
 i43 = i1 + 124 | 0;
 i26 = i1 + 120 | 0;
 i21 = i1 + 116 | 0;
 i32 = i1 + 112 | 0;
 i11 = i1 + 108 | 0;
 i48 = i1 + 104 | 0;
 i7 = i1 + 100 | 0;
 i39 = i1 + 96 | 0;
 i44 = i1 + 92 | 0;
 i27 = i1 + 88 | 0;
 i22 = i1 + 84 | 0;
 i33 = i1 + 80 | 0;
 i12 = i1 + 76 | 0;
 i49 = i1 + 72 | 0;
 i5 = i1 + 68 | 0;
 i36 = i1 + 64 | 0;
 i41 = i1 + 60 | 0;
 i24 = i1 + 56 | 0;
 i19 = i1 + 52 | 0;
 i30 = i1 + 48 | 0;
 i9 = i1 + 44 | 0;
 i46 = i1 + 40 | 0;
 i6 = i1 + 36 | 0;
 i37 = i1 + 32 | 0;
 i42 = i1 + 28 | 0;
 i25 = i1 + 24 | 0;
 i20 = i1 + 20 | 0;
 i31 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i2 = i1 + 8 | 0;
 i47 = i1 + 4 | 0;
 HEAP32[i55 >> 2] = i52;
 HEAP32[i51 >> 2] = i50;
 HEAP32[i56 >> 2] = HEAP32[(HEAP32[i55 >> 2] | 0) + 4 >> 2];
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[i55 >> 2] | 0) + 64 >> 2];
 i52 = _stbir__get_decode_buffer(HEAP32[i55 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = i52;
 HEAP32[i17 >> 2] = HEAP32[(HEAP32[i55 >> 2] | 0) + 100 >> 2];
 HEAP32[i16 >> 2] = HEAP32[(HEAP32[i55 >> 2] | 0) + 104 >> 2];
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i55 >> 2] | 0) + 128 >> 2];
 HEAP32[i15 >> 2] = HEAP32[(HEAP32[i55 >> 2] | 0) + 144 >> 2];
 HEAP32[i34 >> 2] = (HEAP32[i56 >> 2] | 0) + (HEAP32[i15 >> 2] << 1);
 if (_stbir__use_width_upsampling(HEAP32[i55 >> 2] | 0) | 0) ___assert_fail(55814, 54884, 1536, 55855);
 switch (HEAP32[i3 >> 2] | 0) {
 case 1:
  {
   HEAP32[i53 >> 2] = 0;
   L22 : while (1) {
    if ((HEAP32[i53 >> 2] | 0) >= (HEAP32[i34 >> 2] | 0)) {
     i1 = 47;
     break;
    }
    HEAP32[i35 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) >> 2];
    HEAP32[i40 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) + 4 >> 2];
    HEAP32[i23 >> 2] = (HEAP32[i53 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
    HEAP32[i18 >> 2] = HEAP32[i23 >> 2];
    HEAP32[i29 >> 2] = HEAP32[i40 >> 2];
    i56 = Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i53 >> 2] | 0) | 0;
    HEAP32[i8 >> 2] = i56;
    HEAP32[i28 >> 2] = HEAP32[i35 >> 2];
    while (1) {
     if ((HEAP32[i28 >> 2] | 0) > (HEAP32[i29 >> 2] | 0)) break;
     HEAP32[i45 >> 2] = HEAP32[i28 >> 2];
     f57 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i28 >> 2] | 0) - (HEAP32[i35 >> 2] | 0) << 2) >> 2]);
     HEAPF32[i4 >> 2] = f57;
     if (!(Math_fround(HEAPF32[i4 >> 2]) != Math_fround(0.0))) {
      i1 = 9;
      break L22;
     }
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + 0 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i4 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i45 >> 2] | 0) + 0 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
    }
    HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
   }
   if ((i1 | 0) == 9) ___assert_fail(55893, 54884, 1554, 55855); else if ((i1 | 0) == 47) {
    STACKTOP = i54;
    return;
   }
   break;
  }
 case 2:
  {
   HEAP32[i53 >> 2] = 0;
   L34 : while (1) {
    if ((HEAP32[i53 >> 2] | 0) >= (HEAP32[i34 >> 2] | 0)) {
     i1 = 47;
     break;
    }
    HEAP32[i38 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) >> 2];
    HEAP32[i43 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) + 4 >> 2];
    HEAP32[i26 >> 2] = (HEAP32[i53 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
    HEAP32[i21 >> 2] = HEAP32[i26 >> 2] << 1;
    HEAP32[i32 >> 2] = HEAP32[i43 >> 2];
    i56 = Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i53 >> 2] | 0) | 0;
    HEAP32[i11 >> 2] = i56;
    HEAP32[i28 >> 2] = HEAP32[i38 >> 2];
    while (1) {
     if ((HEAP32[i28 >> 2] | 0) > (HEAP32[i32 >> 2] | 0)) break;
     HEAP32[i48 >> 2] = HEAP32[i28 >> 2] << 1;
     f57 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + (HEAP32[i28 >> 2] | 0) - (HEAP32[i38 >> 2] | 0) << 2) >> 2]);
     HEAPF32[i7 >> 2] = f57;
     if (!(Math_fround(HEAPF32[i7 >> 2]) != Math_fround(0.0))) {
      i1 = 17;
      break L34;
     }
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) + 0 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i7 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i48 >> 2] | 0) + 0 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) + 1 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i7 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i48 >> 2] | 0) + 1 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
    }
    HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
   }
   if ((i1 | 0) == 17) ___assert_fail(55893, 54884, 1575, 55855); else if ((i1 | 0) == 47) {
    STACKTOP = i54;
    return;
   }
   break;
  }
 case 3:
  {
   HEAP32[i53 >> 2] = 0;
   L46 : while (1) {
    if ((HEAP32[i53 >> 2] | 0) >= (HEAP32[i34 >> 2] | 0)) {
     i1 = 47;
     break;
    }
    HEAP32[i39 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) >> 2];
    HEAP32[i44 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) + 4 >> 2];
    HEAP32[i27 >> 2] = (HEAP32[i53 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
    HEAP32[i22 >> 2] = (HEAP32[i27 >> 2] | 0) * 3;
    HEAP32[i33 >> 2] = HEAP32[i44 >> 2];
    i56 = Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i53 >> 2] | 0) | 0;
    HEAP32[i12 >> 2] = i56;
    HEAP32[i28 >> 2] = HEAP32[i39 >> 2];
    while (1) {
     if ((HEAP32[i28 >> 2] | 0) > (HEAP32[i33 >> 2] | 0)) break;
     HEAP32[i49 >> 2] = (HEAP32[i28 >> 2] | 0) * 3;
     f57 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + (HEAP32[i28 >> 2] | 0) - (HEAP32[i39 >> 2] | 0) << 2) >> 2]);
     HEAPF32[i5 >> 2] = f57;
     if (!(Math_fround(HEAPF32[i5 >> 2]) != Math_fround(0.0))) {
      i1 = 25;
      break L46;
     }
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 0 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i5 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i49 >> 2] | 0) + 0 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 1 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i5 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i49 >> 2] | 0) + 1 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 2 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i5 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i49 >> 2] | 0) + 2 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
    }
    HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
   }
   if ((i1 | 0) == 25) ___assert_fail(55893, 54884, 1597, 55855); else if ((i1 | 0) == 47) {
    STACKTOP = i54;
    return;
   }
   break;
  }
 case 4:
  {
   HEAP32[i53 >> 2] = 0;
   L58 : while (1) {
    if ((HEAP32[i53 >> 2] | 0) >= (HEAP32[i34 >> 2] | 0)) {
     i1 = 47;
     break;
    }
    HEAP32[i36 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) >> 2];
    HEAP32[i41 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) + 4 >> 2];
    HEAP32[i24 >> 2] = (HEAP32[i53 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
    HEAP32[i19 >> 2] = HEAP32[i24 >> 2] << 2;
    HEAP32[i30 >> 2] = HEAP32[i41 >> 2];
    i56 = Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i53 >> 2] | 0) | 0;
    HEAP32[i9 >> 2] = i56;
    HEAP32[i28 >> 2] = HEAP32[i36 >> 2];
    while (1) {
     if ((HEAP32[i28 >> 2] | 0) > (HEAP32[i30 >> 2] | 0)) break;
     HEAP32[i46 >> 2] = HEAP32[i28 >> 2] << 2;
     f57 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + (HEAP32[i28 >> 2] | 0) - (HEAP32[i36 >> 2] | 0) << 2) >> 2]);
     HEAPF32[i6 >> 2] = f57;
     if (!(Math_fround(HEAPF32[i6 >> 2]) != Math_fround(0.0))) {
      i1 = 33;
      break L58;
     }
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 0 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i6 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) + 0 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i6 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) + 1 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i6 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) + 2 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 3 << 2) >> 2]);
     f57 = Math_fround(f57 * Math_fround(HEAPF32[i6 >> 2]));
     i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i46 >> 2] | 0) + 3 << 2) | 0;
     f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
     HEAPF32[i56 >> 2] = f57;
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
    }
    HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
   }
   if ((i1 | 0) == 33) ___assert_fail(55893, 54884, 1620, 55855); else if ((i1 | 0) == 47) {
    STACKTOP = i54;
    return;
   }
   break;
  }
 default:
  {
   HEAP32[i53 >> 2] = 0;
   L6 : while (1) {
    if ((HEAP32[i53 >> 2] | 0) >= (HEAP32[i34 >> 2] | 0)) {
     i1 = 47;
     break;
    }
    HEAP32[i37 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) >> 2];
    HEAP32[i42 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i53 >> 2] << 3) + 4 >> 2];
    HEAP32[i25 >> 2] = (HEAP32[i53 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
    i56 = Math_imul(HEAP32[i25 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
    HEAP32[i20 >> 2] = i56;
    HEAP32[i31 >> 2] = HEAP32[i42 >> 2];
    i56 = Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i53 >> 2] | 0) | 0;
    HEAP32[i10 >> 2] = i56;
    HEAP32[i28 >> 2] = HEAP32[i37 >> 2];
    while (1) {
     if ((HEAP32[i28 >> 2] | 0) > (HEAP32[i31 >> 2] | 0)) break;
     i56 = Math_imul(HEAP32[i28 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
     HEAP32[i47 >> 2] = i56;
     f57 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i28 >> 2] | 0) - (HEAP32[i37 >> 2] | 0) << 2) >> 2]);
     HEAPF32[i1 >> 2] = f57;
     if (!(Math_fround(HEAPF32[i1 >> 2]) != Math_fround(0.0))) {
      i1 = 41;
      break L6;
     }
     HEAP32[i2 >> 2] = 0;
     while (1) {
      if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i3 >> 2] | 0)) break;
      f57 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) >> 2]);
      f57 = Math_fround(f57 * Math_fround(HEAPF32[i1 >> 2]));
      i56 = (HEAP32[i51 >> 2] | 0) + ((HEAP32[i47 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) << 2) | 0;
      f57 = Math_fround(Math_fround(HEAPF32[i56 >> 2]) + f57);
      HEAPF32[i56 >> 2] = f57;
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
     }
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
    }
    HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + 1;
   }
   if ((i1 | 0) == 41) ___assert_fail(55893, 54884, 1645, 55855); else if ((i1 | 0) == 47) {
    STACKTOP = i54;
    return;
   }
  }
 }
}
function _ma_channel_router_init(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, f28 = f0;
 i26 = 0;
 i27 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i24 = i1 + 40 | 0;
 i4 = i1 + 36 | 0;
 i23 = i1 + 32 | 0;
 i19 = i1 + 28 | 0;
 i20 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i8 = i1 + 54 | 0;
 i14 = i1 + 53 | 0;
 i9 = i1 + 52 | 0;
 i15 = i1 + 51 | 0;
 i21 = i1 + 12 | 0;
 i10 = i1 + 50 | 0;
 i22 = i1 + 8 | 0;
 i16 = i1 + 49 | 0;
 i11 = i1 + 48 | 0;
 i12 = i1 + 47 | 0;
 i17 = i1 + 46 | 0;
 i25 = i1 + 4 | 0;
 i18 = i1 + 45 | 0;
 i13 = i1 + 44 | 0;
 i7 = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i23 >> 2] = i3;
 if (!(HEAP32[i23 >> 2] | 0)) {
  HEAP32[i24 >> 2] = -2;
  i26 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 _memset(HEAP32[i23 >> 2] | 0, 0, 4220) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i24 >> 2] = -2;
  i26 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 4176 >> 2] | 0)) {
  HEAP32[i24 >> 2] = -2;
  i26 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 if (!(_ma_channel_map_valid(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, (HEAP32[i4 >> 2] | 0) + 8 | 0) | 0)) {
  HEAP32[i24 >> 2] = -2;
  i26 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 if (!(_ma_channel_map_valid(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i4 >> 2] | 0) + 40 | 0) | 0)) {
  HEAP32[i24 >> 2] = -2;
  i26 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 _memcpy(HEAP32[i23 >> 2] | 0, HEAP32[i4 >> 2] | 0, 4184) | 0;
 if (0) i1 = (HEAP8[(HEAP32[i4 >> 2] | 0) + 4172 >> 0] & 1 | 0) != 0 ^ 1; else i1 = 0;
 i3 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
 HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -17 | (i1 & 1) << 4 & 255;
 if (0) i1 = ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 4172 >> 0] | 0) >>> 1 & 1 | 0) != 0 ^ 1; else i1 = 0;
 i3 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
 HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -33 | (i1 & 1) << 5 & 255;
 if (0) i1 = ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 4172 >> 0] | 0) >>> 2 & 1 | 0) != 0 ^ 1; else i1 = 0;
 i3 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
 HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -65 | (i1 & 1) << 6 & 255;
 if (0) i1 = ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 4172 >> 0] | 0) >>> 3 & 1 | 0) != 0 ^ 1; else i1 = 0;
 i4 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
 HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & 127 | (i1 & 1) << 7 & 255;
 do if ((HEAP32[HEAP32[i23 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0)) {
  if (_ma_channel_map_equal(HEAP32[HEAP32[i23 >> 2] >> 2] | 0, (HEAP32[i23 >> 2] | 0) + 8 | 0, (HEAP32[i23 >> 2] | 0) + 40 | 0) | 0) {
   i4 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
   HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -2 | 1;
  }
  if (!(_ma_channel_map_blank(HEAP32[HEAP32[i23 >> 2] >> 2] | 0, (HEAP32[i23 >> 2] | 0) + 8 | 0) | 0)) if (!(_ma_channel_map_blank(HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i23 >> 2] | 0) + 40 | 0) | 0)) break;
  i4 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
  HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -2 | 1;
 } while (0);
 if (!(HEAP8[(HEAP32[i23 >> 2] | 0) + 4184 >> 0] & 1)) if ((HEAP32[HEAP32[i23 >> 2] >> 2] | 0) == 1) if ((HEAPU8[(HEAP32[i23 >> 2] | 0) + 8 >> 0] | 0 | 0) == 1) {
  i4 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
  HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -5 | 4;
  if (_ma_channel_map_contains_channel_position(HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i23 >> 2] | 0) + 40 | 0, 5) | 0) {
   i4 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
   HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -5;
  }
 }
 if (!(HEAP8[(HEAP32[i23 >> 2] | 0) + 4184 >> 0] & 1)) if ((HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) == 1) if ((HEAPU8[(HEAP32[i23 >> 2] | 0) + 40 >> 0] | 0 | 0) == 1) if ((HEAP32[HEAP32[i23 >> 2] >> 2] | 0) == 2) {
  i4 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
  HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -9 | 8;
  if (_ma_channel_map_contains_channel_position(HEAP32[HEAP32[i23 >> 2] >> 2] | 0, (HEAP32[i23 >> 2] | 0) + 8 | 0, 5) | 0) {
   i4 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
   HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -9;
  }
 }
 L55 : do if (!(HEAP8[(HEAP32[i23 >> 2] | 0) + 4184 >> 0] & 1)) if ((HEAP32[HEAP32[i23 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 1;
  HEAP32[i19 >> 2] = 0;
  while (1) {
   if ((HEAP32[i19 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) >>> 0) break;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i20 >> 2] = 0;
   while (1) {
    if ((HEAP32[i20 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
    if ((HEAPU8[(HEAP32[i23 >> 2] | 0) + 8 + (HEAP32[i19 >> 2] | 0) >> 0] | 0 | 0) == (HEAPU8[(HEAP32[i23 >> 2] | 0) + 40 + (HEAP32[i20 >> 2] | 0) >> 0] | 0 | 0)) {
     i26 = 43;
     break;
    }
    HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
   }
   if ((i26 | 0) == 43) {
    i26 = 0;
    HEAP32[i6 >> 2] = 1;
   }
   if (!(HEAP32[i6 >> 2] | 0)) {
    i26 = 46;
    break;
   }
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
  }
  if ((i26 | 0) == 46) HEAP32[i5 >> 2] = 0;
  if (HEAP32[i5 >> 2] | 0) {
   i6 = (HEAP32[i23 >> 2] | 0) + 4184 | 0;
   HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -3 | 2;
   HEAP32[i19 >> 2] = 0;
   while (1) {
    if ((HEAP32[i19 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) >>> 0) break L55;
    HEAP32[i20 >> 2] = 0;
    while (1) {
     if ((HEAP32[i20 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
     i1 = HEAP32[i20 >> 2] | 0;
     if ((HEAPU8[(HEAP32[i23 >> 2] | 0) + 8 + (HEAP32[i19 >> 2] | 0) >> 0] | 0 | 0) == (HEAPU8[(HEAP32[i23 >> 2] | 0) + 40 + (HEAP32[i20 >> 2] | 0) >> 0] | 0 | 0)) {
      i26 = 54;
      break;
     }
     HEAP32[i20 >> 2] = i1 + 1;
    }
    if ((i26 | 0) == 54) {
     i26 = 0;
     HEAP8[(HEAP32[i23 >> 2] | 0) + 4185 + (HEAP32[i19 >> 2] | 0) >> 0] = i1;
    }
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
  }
 } while (0);
 HEAP32[i19 >> 2] = 0;
 while (1) {
  if ((HEAP32[i19 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) >>> 0) break;
  HEAP8[i8 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 8 + (HEAP32[i19 >> 2] | 0) >> 0] | 0;
  HEAP32[i20 >> 2] = 0;
  while (1) {
   if ((HEAP32[i20 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
   HEAP8[i14 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 40 + (HEAP32[i20 >> 2] | 0) >> 0] | 0;
   if ((HEAPU8[i8 >> 0] | 0 | 0) == (HEAPU8[i14 >> 0] | 0 | 0)) HEAPF32[(HEAP32[i23 >> 2] | 0) + 76 + (HEAP32[i19 >> 2] << 7) + (HEAP32[i20 >> 2] << 2) >> 2] = Math_fround(1.0);
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  }
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
 }
 HEAP32[i19 >> 2] = 0;
 while (1) {
  if ((HEAP32[i19 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) >>> 0) break;
  HEAP8[i9 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 8 + (HEAP32[i19 >> 2] | 0) >> 0] | 0;
  L98 : do if ((HEAPU8[i9 >> 0] | 0 | 0) == 1) {
   HEAP32[i20 >> 2] = 0;
   while (1) {
    if ((HEAP32[i20 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break L98;
    HEAP8[i15 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 40 + (HEAP32[i20 >> 2] | 0) >> 0] | 0;
    do if (HEAPU8[i15 >> 0] | 0 | 0) {
     if ((HEAPU8[i15 >> 0] | 0 | 0) == 1) break;
     if ((HEAPU8[i15 >> 0] | 0 | 0) == 5) break;
     HEAPF32[(HEAP32[i23 >> 2] | 0) + 76 + (HEAP32[i19 >> 2] << 7) + (HEAP32[i20 >> 2] << 2) >> 2] = Math_fround(1.0);
    } while (0);
    HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
 }
 HEAP32[i21 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 while (1) {
  if ((HEAP32[i19 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) >>> 0) break;
  HEAP8[i10 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 8 + (HEAP32[i19 >> 2] | 0) >> 0] | 0;
  if (HEAPU8[i10 >> 0] | 0 | 0) if ((HEAPU8[i10 >> 0] | 0 | 0) != 1) if ((HEAPU8[i10 >> 0] | 0 | 0) != 5) HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
 }
 L119 : do if ((HEAP32[i21 >> 2] | 0) >>> 0 > 0) {
  f28 = Math_fround(Math_fround(1.0) / Math_fround((HEAP32[i21 >> 2] | 0) >>> 0));
  HEAPF32[i22 >> 2] = f28;
  HEAP32[i20 >> 2] = 0;
  while (1) {
   if ((HEAP32[i20 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break L119;
   HEAP8[i16 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 40 + (HEAP32[i20 >> 2] | 0) >> 0] | 0;
   L124 : do if ((HEAPU8[i16 >> 0] | 0 | 0) == 1) {
    HEAP32[i19 >> 2] = 0;
    while (1) {
     if ((HEAP32[i19 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) >>> 0) break L124;
     HEAP8[i11 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 8 + (HEAP32[i19 >> 2] | 0) >> 0] | 0;
     do if (HEAPU8[i11 >> 0] | 0 | 0) {
      if ((HEAPU8[i11 >> 0] | 0 | 0) == 1) break;
      if ((HEAPU8[i11 >> 0] | 0 | 0) == 5) break;
      f28 = Math_fround(HEAPF32[i22 >> 2]);
      i26 = (HEAP32[i23 >> 2] | 0) + 76 + (HEAP32[i19 >> 2] << 7) + (HEAP32[i20 >> 2] << 2) | 0;
      f28 = Math_fround(Math_fround(HEAPF32[i26 >> 2]) + f28);
      HEAPF32[i26 >> 2] = f28;
     } while (0);
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  }
 } while (0);
 L136 : do if (!(HEAP32[(HEAP32[i23 >> 2] | 0) + 72 >> 2] | 0)) {
  HEAP32[i19 >> 2] = 0;
  while (1) {
   if ((HEAP32[i19 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) >>> 0) break;
   HEAP8[i12 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 8 + (HEAP32[i19 >> 2] | 0) >> 0] | 0;
   L141 : do if (_ma_channel_router__is_spatial_channel_position(HEAP32[i23 >> 2] | 0, HEAP8[i12 >> 0] | 0) | 0) {
    if (_ma_channel_map_contains_channel_position(HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i23 >> 2] | 0) + 40 | 0, HEAP8[i12 >> 0] | 0) | 0) break;
    HEAP32[i20 >> 2] = 0;
    while (1) {
     if ((HEAP32[i20 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break L141;
     HEAP8[i17 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 40 + (HEAP32[i20 >> 2] | 0) >> 0] | 0;
     do if (_ma_channel_router__is_spatial_channel_position(HEAP32[i23 >> 2] | 0, HEAP8[i17 >> 0] | 0) | 0) {
      HEAPF32[i25 >> 2] = Math_fround(0.0);
      if (!(HEAP32[(HEAP32[i23 >> 2] | 0) + 72 >> 2] | 0)) {
       f28 = Math_fround(_ma_channel_router__calculate_input_channel_planar_weight(HEAP32[i23 >> 2] | 0, HEAP8[i12 >> 0] | 0, HEAP8[i17 >> 0] | 0));
       HEAPF32[i25 >> 2] = f28;
      }
      if (!(Math_fround(HEAPF32[(HEAP32[i23 >> 2] | 0) + 76 + (HEAP32[i19 >> 2] << 7) + (HEAP32[i20 >> 2] << 2) >> 2]) == Math_fround(0.0))) break;
      f28 = Math_fround(HEAPF32[i25 >> 2]);
      HEAPF32[(HEAP32[i23 >> 2] | 0) + 76 + (HEAP32[i19 >> 2] << 7) + (HEAP32[i20 >> 2] << 2) >> 2] = f28;
     } while (0);
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
  }
  HEAP32[i20 >> 2] = 0;
  while (1) {
   if ((HEAP32[i20 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break L136;
   HEAP8[i18 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 40 + (HEAP32[i20 >> 2] | 0) >> 0] | 0;
   L159 : do if (_ma_channel_router__is_spatial_channel_position(HEAP32[i23 >> 2] | 0, HEAP8[i18 >> 0] | 0) | 0) {
    if (_ma_channel_map_contains_channel_position(HEAP32[HEAP32[i23 >> 2] >> 2] | 0, (HEAP32[i23 >> 2] | 0) + 8 | 0, HEAP8[i18 >> 0] | 0) | 0) break;
    HEAP32[i19 >> 2] = 0;
    while (1) {
     if ((HEAP32[i19 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) >>> 0) break L159;
     HEAP8[i13 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + 8 + (HEAP32[i19 >> 2] | 0) >> 0] | 0;
     do if (_ma_channel_router__is_spatial_channel_position(HEAP32[i23 >> 2] | 0, HEAP8[i13 >> 0] | 0) | 0) {
      HEAPF32[i7 >> 2] = Math_fround(0.0);
      if (!(HEAP32[(HEAP32[i23 >> 2] | 0) + 72 >> 2] | 0)) {
       f28 = Math_fround(_ma_channel_router__calculate_input_channel_planar_weight(HEAP32[i23 >> 2] | 0, HEAP8[i13 >> 0] | 0, HEAP8[i18 >> 0] | 0));
       HEAPF32[i7 >> 2] = f28;
      }
      if (!(Math_fround(HEAPF32[(HEAP32[i23 >> 2] | 0) + 76 + (HEAP32[i19 >> 2] << 7) + (HEAP32[i20 >> 2] << 2) >> 2]) == Math_fround(0.0))) break;
      f28 = Math_fround(HEAPF32[i7 >> 2]);
      HEAPF32[(HEAP32[i23 >> 2] | 0) + 76 + (HEAP32[i19 >> 2] << 7) + (HEAP32[i20 >> 2] << 2) >> 2] = f28;
     } while (0);
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i24 >> 2] = 0;
 i26 = HEAP32[i24 >> 2] | 0;
 STACKTOP = i27;
 return i26 | 0;
}

function _jar_mod_fillbuffer(i2, i4, i3, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i15 = i1 + 60 | 0;
 i18 = i1 + 56 | 0;
 i16 = i1 + 52 | 0;
 i23 = i1 + 48 | 0;
 i9 = i1 + 44 | 0;
 i10 = i1 + 40 | 0;
 i11 = i1 + 36 | 0;
 i7 = i1 + 66 | 0;
 i20 = i1 + 32 | 0;
 i12 = i1 + 28 | 0;
 i19 = i1 + 24 | 0;
 i13 = i1 + 20 | 0;
 i14 = i1 + 16 | 0;
 i21 = i1 + 12 | 0;
 i22 = i1 + 8 | 0;
 i8 = i1 + 64 | 0;
 i17 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i18 >> 2] = i4;
 HEAP32[i16 >> 2] = i3;
 HEAP32[i23 >> 2] = i5;
 if (!((HEAP32[i15 >> 2] | 0) != 0 & (HEAP32[i18 >> 2] | 0) != 0)) {
  STACKTOP = i24;
  return;
 }
 if (!(HEAP16[(HEAP32[i15 >> 2] | 0) + 5858 >> 1] | 0)) {
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAP32[i16 >> 2] | 0) >>> 0) break;
   HEAP16[(HEAP32[i18 >> 2] | 0) + (HEAP32[i9 >> 2] << 1 << 1) >> 1] = 0;
   HEAP16[(HEAP32[i18 >> 2] | 0) + ((HEAP32[i9 >> 2] << 1) + 1 << 1) >> 1] = 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  if (!(HEAP32[i23 >> 2] | 0)) {
   STACKTOP = i24;
   return;
  }
  HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[i23 >> 2] | 0) + 8 >> 2] = 0;
  HEAP8[(HEAP32[i23 >> 2] | 0) + 16 >> 0] = 0;
  _memclear(HEAP32[(HEAP32[i23 >> 2] | 0) + 948 >> 2] | 0, 0, (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) * 348 | 0);
  _memclear((HEAP32[i23 >> 2] | 0) + 80 | 0, 0, 868);
  STACKTOP = i24;
  return;
 }
 HEAP32[i20 >> 2] = 0;
 L15 : do if (HEAP32[i23 >> 2] | 0) {
  HEAP32[(HEAP32[i23 >> 2] | 0) + 8 >> 2] = 0;
  _memcopy((HEAP32[i23 >> 2] | 0) + 16 | 0, HEAP32[i15 >> 2] | 0, 20);
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >>> 0 >= 31) break L15;
   i5 = HEAP32[i9 >> 2] | 0;
   _memcopy((HEAP32[i23 >> 2] | 0) + 80 + ((i5 | 0) * 28 | 0) | 0, (HEAP32[i15 >> 2] | 0) + 20 + ((i5 | 0) * 30 | 0) | 0, 22);
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i13 >> 2] = HEAP16[(HEAP32[i15 >> 2] | 0) + 5862 >> 1];
 HEAP32[i14 >> 2] = HEAP16[(HEAP32[i15 >> 2] | 0) + 5860 >> 1];
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAP32[i16 >> 2] | 0) >>> 0) break;
  i4 = (HEAP32[i15 >> 2] | 0) + 1740 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i5 + 1;
  do if (i5 >>> 0 > (HEAP32[(HEAP32[i15 >> 2] | 0) + 1748 >> 2] | 0) >>> 0) {
   i1 = HEAP32[i15 >> 2] | 0;
   if (HEAP16[(HEAP32[i15 >> 2] | 0) + 1732 >> 1] | 0) {
    i5 = i1 + 1732 | 0;
    HEAP16[i5 >> 1] = (HEAP16[i5 >> 1] | 0) + -1 << 16 >> 16;
    HEAP32[(HEAP32[i15 >> 2] | 0) + 1740 >> 2] = 0;
    HEAP32[(HEAP32[i15 >> 2] | 0) + 1744 >> 2] = 0;
    break;
   }
   i5 = HEAP32[i15 >> 2] | 0;
   HEAP32[i17 >> 2] = HEAP32[i1 + 1212 + (HEAPU8[i5 + 952 + (HEAPU16[i5 + 1728 >> 1] | 0) >> 0] << 2) >> 2];
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAPU16[(HEAP32[i15 >> 2] | 0) + 1730 >> 1] << 2);
   HEAP32[i6 >> 2] = (HEAP32[i15 >> 2] | 0) + 1760;
   HEAP32[(HEAP32[i15 >> 2] | 0) + 1740 >> 2] = 0;
   HEAP32[(HEAP32[i15 >> 2] | 0) + 1744 >> 2] = 0;
   HEAP8[i7 >> 0] = 0;
   while (1) {
    if ((HEAPU8[i7 >> 0] | 0) >= (HEAPU16[(HEAP32[i15 >> 2] | 0) + 3552 >> 1] | 0)) break;
    i5 = HEAPU8[i7 >> 0] | 0;
    _worknote((HEAP32[i17 >> 2] | 0) + (HEAPU8[i7 >> 0] << 2) | 0, (HEAP32[i6 >> 2] | 0) + ((i5 | 0) * 56 | 0) | 0, i5 + 1 & 255, HEAP32[i15 >> 2] | 0);
    HEAP8[i7 >> 0] = (HEAP8[i7 >> 0] | 0) + 1 << 24 >> 24;
   }
   i1 = HEAP32[i15 >> 2] | 0;
   if (HEAP16[(HEAP32[i15 >> 2] | 0) + 1734 >> 1] | 0) HEAP16[i1 + 1734 >> 1] = 0; else {
    i5 = (HEAP32[i15 >> 2] | 0) + 1730 | 0;
    HEAP16[i5 >> 1] = (HEAPU16[i5 >> 1] | 0) + (HEAPU16[i1 + 3552 >> 1] | 0);
   }
   if ((HEAPU16[(HEAP32[i15 >> 2] | 0) + 1730 >> 1] | 0) == (HEAPU16[(HEAP32[i15 >> 2] | 0) + 3552 >> 1] << 6 | 0)) {
    i5 = (HEAP32[i15 >> 2] | 0) + 1728 | 0;
    HEAP16[i5 >> 1] = (HEAP16[i5 >> 1] | 0) + 1 << 16 >> 16;
    HEAP16[(HEAP32[i15 >> 2] | 0) + 1730 >> 1] = 0;
    if ((HEAPU16[(HEAP32[i15 >> 2] | 0) + 1728 >> 1] | 0) >= (HEAPU8[(HEAP32[i15 >> 2] | 0) + 950 >> 0] | 0)) {
     HEAP16[(HEAP32[i15 >> 2] | 0) + 1728 >> 1] = 0;
     i5 = (HEAP32[i15 >> 2] | 0) + 5880 | 0;
     HEAP16[i5 >> 1] = (HEAP16[i5 >> 1] | 0) + 1 << 16 >> 16;
    }
   }
  } while (0);
  i4 = (HEAP32[i15 >> 2] | 0) + 1744 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i5 + 1;
  if (i5 >>> 0 > (((HEAP32[(HEAP32[i15 >> 2] | 0) + 1748 >> 2] | 0) >>> 0) / ((HEAPU8[(HEAP32[i15 >> 2] | 0) + 1084 >> 0] | 0) >>> 0) | 0) >>> 0) {
   i5 = HEAP32[i15 >> 2] | 0;
   HEAP32[i17 >> 2] = HEAP32[i5 + 1212 + (HEAPU8[i5 + 952 + (HEAPU16[i5 + 1728 >> 1] | 0) >> 0] << 2) >> 2];
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAPU16[(HEAP32[i15 >> 2] | 0) + 1730 >> 1] << 2);
   HEAP32[i6 >> 2] = (HEAP32[i15 >> 2] | 0) + 1760;
   HEAP8[i7 >> 0] = 0;
   while (1) {
    if ((HEAPU8[i7 >> 0] | 0) >= (HEAPU16[(HEAP32[i15 >> 2] | 0) + 3552 >> 1] | 0)) break;
    _workeffect((HEAP32[i17 >> 2] | 0) + (HEAPU8[i7 >> 0] << 2) | 0, (HEAP32[i6 >> 2] | 0) + ((HEAPU8[i7 >> 0] | 0) * 56 | 0) | 0);
    HEAP8[i7 >> 0] = (HEAP8[i7 >> 0] | 0) + 1 << 24 >> 24;
   }
   HEAP32[(HEAP32[i15 >> 2] | 0) + 1744 >> 2] = 0;
  }
  if (!((HEAP32[i23 >> 2] | 0) == 0 | (HEAP32[i20 >> 2] | 0) != 0)) if ((HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[HEAP32[i23 >> 2] >> 2] | 0)) {
   i5 = HEAP32[i23 >> 2] | 0;
   _memclear((HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) | 0, 0, 348);
  }
  HEAP32[i12 >> 2] = 0;
  HEAP32[i19 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i6 >> 2] = (HEAP32[i15 >> 2] | 0) + 1760;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >>> 0 >= (HEAPU16[(HEAP32[i15 >> 2] | 0) + 3552 >> 1] | 0) >>> 0) break;
   if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 16 >> 1] | 0) {
    i5 = HEAP32[i6 >> 2] | 0;
    HEAP16[i8 >> 1] = (HEAPU16[i5 + 16 >> 1] | 0) - (HEAP16[i5 + 28 >> 1] | 0) - (HEAP16[i5 + 34 >> 1] | 0);
    if (HEAP16[i8 >> 1] | 0) {
     i5 = (HEAP32[i6 >> 2] | 0) + 12 | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + ((HEAP32[(HEAP32[i15 >> 2] | 0) + 1752 >> 2] << 10 >>> 0) / ((HEAP16[i8 >> 1] | 0) >>> 0) | 0);
    }
    i1 = (HEAP32[i6 >> 2] | 0) + 20 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
    i1 = HEAP32[i6 >> 2] | 0;
    i2 = (HEAP32[i1 + 12 >> 2] | 0) >>> 10;
    i1 = i1 | 0;
    do if ((HEAPU16[(HEAP32[i6 >> 2] | 0) + 10 >> 1] | 0) <= 2) {
     if (i2 >>> 0 >= (HEAPU16[i1 + 6 >> 1] | 0) >>> 0) {
      HEAP16[(HEAP32[i6 >> 2] | 0) + 6 >> 1] = 0;
      HEAP16[(HEAP32[i6 >> 2] | 0) + 8 >> 1] = 0;
      i1 = (HEAP32[i6 >> 2] | 0) + 12 | 0;
      if (HEAP16[(HEAP32[i6 >> 2] | 0) + 6 >> 1] | 0) {
       i5 = HEAP32[i6 >> 2] | 0;
       HEAP32[i5 + 12 >> 2] = ((HEAP32[i1 >> 2] | 0) >>> 0) % (HEAPU16[i5 + 6 >> 1] << 10 >>> 0) | 0;
       break;
      } else {
       HEAP32[i1 >> 2] = 0;
       break;
      }
     }
    } else if (i2 >>> 0 >= ((HEAPU16[i1 + 10 >> 1] | 0) + (HEAPU16[(HEAP32[i6 >> 2] | 0) + 8 >> 1] | 0) | 0) >>> 0) {
     i3 = HEAP32[i6 >> 2] | 0;
     i5 = (HEAP32[i6 >> 2] | 0) + 12 | 0;
     i4 = (HEAP32[i6 >> 2] | 0) + 8 | 0;
     HEAP32[i5 >> 2] = (HEAPU16[i4 >> 1] << 10) + (((HEAP32[i5 >> 2] | 0) >>> 0) % ((HEAPU16[i3 + 10 >> 1] | 0) + (HEAPU16[i4 >> 1] | 0) << 10 >>> 0) | 0);
    } while (0);
    HEAP32[i11 >> 2] = (HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) >>> 10;
    do if (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) {
     if ((HEAP32[i10 >> 2] & 3 | 0) != 1) if ((HEAP32[i10 >> 2] & 3 | 0) != 2) break;
     i5 = Math_imul(HEAP8[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[i6 >> 2] | 0) + 18 >> 0] | 0) | 0;
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + i5;
    } while (0);
    do if (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) {
     if (HEAP32[i10 >> 2] & 3 | 0) if ((HEAP32[i10 >> 2] & 3 | 0) != 3) break;
     i5 = Math_imul(HEAP8[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[i6 >> 2] | 0) + 18 >> 0] | 0) | 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i5;
    } while (0);
    if (!((HEAP32[i23 >> 2] | 0) == 0 | (HEAP32[i20 >> 2] | 0) != 0)) if ((HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[HEAP32[i23 >> 2] >> 2] | 0)) {
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) >> 2] = HEAPU16[(HEAP32[i15 >> 2] | 0) + 3552 >> 1];
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 24 >> 2] = HEAP32[i9 >> 2];
     i5 = HEAP32[i23 >> 2] | 0;
     i4 = HEAP32[i15 >> 2] | 0;
     HEAP32[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 12 >> 2] = HEAPU8[i4 + 952 + (HEAPU16[i4 + 1728 >> 1] | 0) >> 0];
     i5 = HEAP32[i23 >> 2] | 0;
     i4 = HEAP32[i15 >> 2] | 0;
     HEAP32[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 16 >> 2] = (HEAPU16[i4 + 1730 >> 1] | 0) / (HEAPU16[i4 + 3552 >> 1] | 0) | 0;
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 20 >> 2] = HEAPU16[(HEAP32[i15 >> 2] | 0) + 1728 >> 1];
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 4 >> 2] = HEAPU8[(HEAP32[i15 >> 2] | 0) + 1736 >> 0];
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 8 >> 2] = HEAPU8[(HEAP32[i15 >> 2] | 0) + 1084 >> 0];
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP16[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 28 + ((HEAP32[i10 >> 2] | 0) * 10 | 0) + 6 >> 1] = HEAP16[(HEAP32[i6 >> 2] | 0) + 26 >> 1] | 0;
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP16[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 28 + ((HEAP32[i10 >> 2] | 0) * 10 | 0) + 8 >> 1] = HEAPU8[(HEAP32[i6 >> 2] | 0) + 25 >> 0] | 0;
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP16[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 28 + ((HEAP32[i10 >> 2] | 0) * 10 | 0) + 2 >> 1] = HEAP16[i8 >> 1] | 0;
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP8[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 28 + ((HEAP32[i10 >> 2] | 0) * 10 | 0) + 4 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + 18 >> 0] | 0;
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP8[(HEAP32[i5 + 948 >> 2] | 0) + ((HEAP32[i5 + 4 >> 2] | 0) * 348 | 0) + 28 + ((HEAP32[i10 >> 2] | 0) * 10 | 0) >> 0] = HEAP16[(HEAP32[i6 >> 2] | 0) + 4 >> 1];
    }
   }
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 56;
  }
  if ((HEAP32[i23 >> 2] | 0) == 0 | (HEAP32[i20 >> 2] | 0) != 0) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1; else {
   HEAP32[i20 >> 2] = HEAP32[(HEAP32[i23 >> 2] | 0) + 12 >> 2];
   if ((HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[HEAP32[i23 >> 2] >> 2] | 0)) {
    i5 = (HEAP32[i23 >> 2] | 0) + 4 | 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   }
  }
  HEAP32[i21 >> 2] = (HEAP32[i12 >> 2] & 65535) << 16 >> 16;
  HEAP32[i22 >> 2] = (HEAP32[i19 >> 2] & 65535) << 16 >> 16;
  if (HEAP16[(HEAP32[i15 >> 2] | 0) + 5870 >> 1] | 0) {
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) >> 1;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) >> 1;
  }
  if ((HEAP16[(HEAP32[i15 >> 2] | 0) + 5866 >> 1] | 0) == 1) {
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i19 >> 2] >> 1);
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i12 >> 2] >> 1);
  }
  if ((HEAP32[i12 >> 2] | 0) > 32767) HEAP32[i12 >> 2] = 32767;
  if ((HEAP32[i12 >> 2] | 0) < -32768) HEAP32[i12 >> 2] = -32768;
  if ((HEAP32[i19 >> 2] | 0) > 32767) HEAP32[i19 >> 2] = 32767;
  if ((HEAP32[i19 >> 2] | 0) < -32768) HEAP32[i19 >> 2] = -32768;
  HEAP16[(HEAP32[i18 >> 2] | 0) + (HEAP32[i9 >> 2] << 1 << 1) >> 1] = HEAP32[i12 >> 2];
  HEAP16[(HEAP32[i18 >> 2] | 0) + ((HEAP32[i9 >> 2] << 1) + 1 << 1) >> 1] = HEAP32[i19 >> 2];
  HEAP32[i13 >> 2] = HEAP32[i21 >> 2];
  HEAP32[i14 >> 2] = HEAP32[i22 >> 2];
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 HEAP16[(HEAP32[i15 >> 2] | 0) + 5862 >> 1] = HEAP32[i13 >> 2];
 HEAP16[(HEAP32[i15 >> 2] | 0) + 5860 >> 1] = HEAP32[i14 >> 2];
 i23 = (HEAP32[i15 >> 2] | 0) + 1756 | 0;
 HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
 STACKTOP = i24;
 return;
}

function _LoadFontFromImage(i20, i16, i17, i3) {
 i20 = i20 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, f31 = f0;
 i30 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 5328 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(5328);
 i23 = i2 + 5300 | 0;
 i22 = i2 + 5128 | 0;
 i29 = i2 + 5120 | 0;
 i10 = i2 + 5296 | 0;
 i8 = i2 + 5292 | 0;
 i11 = i2 + 5288 | 0;
 i4 = i2 + 5284 | 0;
 i5 = i2 + 5280 | 0;
 i27 = i2 + 4096 | 0;
 i26 = i2;
 i18 = i2 + 5276 | 0;
 i7 = i2 + 5272 | 0;
 i6 = i2 + 5268 | 0;
 i25 = i2 + 5264 | 0;
 i12 = i2 + 5260 | 0;
 i13 = i2 + 5256 | 0;
 i9 = i2 + 5252 | 0;
 i15 = i2 + 5248 | 0;
 i14 = i2 + 5320 | 0;
 i21 = i2 + 5228 | 0;
 i1 = i2 + 5192 | 0;
 i28 = i2 + 5172 | 0;
 i24 = i2 + 5168 | 0;
 i19 = i2 + 5148 | 0;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i23 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
 HEAP32[i23 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
 HEAP32[i23 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
 HEAP32[i23 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
 i3 = _GetImageData(i23) | 0;
 HEAP32[i18 >> 2] = i3;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i16 + 8 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i16 + 4 >> 2] | 0)) break;
   i3 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
   if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i3 + (HEAP32[i4 >> 2] | 0) << 2) >> 0] | 0) != (HEAPU8[i17 >> 0] | 0)) break;
   i3 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
   if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i3 + (HEAP32[i4 >> 2] | 0) << 2) + 1 >> 0] | 0) != (HEAPU8[i17 + 1 >> 0] | 0)) break;
   i3 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
   if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i3 + (HEAP32[i4 >> 2] | 0) << 2) + 2 >> 0] | 0) != (HEAPU8[i17 + 2 >> 0] | 0)) break;
   i3 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
   if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i3 + (HEAP32[i4 >> 2] | 0) << 2) + 3 >> 0] | 0) != (HEAPU8[i17 + 3 >> 0] | 0)) break;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  i3 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
  if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i3 + (HEAP32[i4 >> 2] | 0) << 2) >> 0] | 0) != (HEAPU8[i17 >> 0] | 0)) break;
  i3 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
  if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i3 + (HEAP32[i4 >> 2] | 0) << 2) + 1 >> 0] | 0) != (HEAPU8[i17 + 1 >> 0] | 0)) break;
  i3 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
  if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i3 + (HEAP32[i4 >> 2] | 0) << 2) + 2 >> 0] | 0) != (HEAPU8[i17 + 2 >> 0] | 0)) break;
  i3 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
  if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i3 + (HEAP32[i4 >> 2] | 0) << 2) + 3 >> 0] | 0) != (HEAPU8[i17 + 3 >> 0] | 0)) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  i5 = Math_imul((HEAP32[i11 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
  if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i5 + (HEAP32[i8 >> 2] | 0) << 2) >> 0] | 0) == (HEAPU8[i17 >> 0] | 0)) {
   i5 = Math_imul((HEAP32[i11 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
   if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i5 + (HEAP32[i8 >> 2] | 0) << 2) + 1 >> 0] | 0) == (HEAPU8[i17 + 1 >> 0] | 0)) {
    i5 = Math_imul((HEAP32[i11 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
    if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i5 + (HEAP32[i8 >> 2] | 0) << 2) + 2 >> 0] | 0) == (HEAPU8[i17 + 2 >> 0] | 0)) {
     i2 = Math_imul((HEAP32[i11 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i16 + 4 >> 2] | 0) | 0;
     i2 = (HEAPU8[(HEAP32[i18 >> 2] | 0) + (i2 + (HEAP32[i8 >> 2] | 0) << 2) + 3 >> 0] | 0) == (HEAPU8[i17 + 3 >> 0] | 0);
    } else i2 = 0;
   } else i2 = 0;
  } else i2 = 0;
  i3 = HEAP32[i6 >> 2] | 0;
  if (!(i2 ^ 1)) break;
  HEAP32[i6 >> 2] = i3 + 1;
 }
 HEAP32[i7 >> 2] = i3;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = HEAP32[i8 >> 2];
 while (1) {
  i6 = HEAP32[i11 >> 2] | 0;
  i6 = i6 + (Math_imul(HEAP32[i12 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + i6 | 0) | 0) | 0;
  if ((i6 | 0) >= (HEAP32[i16 + 8 >> 2] | 0)) break;
  while (1) {
   if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i16 + 4 >> 2] | 0)) break;
   i6 = HEAP32[i11 >> 2] | 0;
   i6 = i6 + (Math_imul((HEAP32[i7 >> 2] | 0) + i6 | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
   i6 = Math_imul(i6, HEAP32[i16 + 4 >> 2] | 0) | 0;
   if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i6 + (HEAP32[i13 >> 2] | 0) << 2) >> 0] | 0) == (HEAPU8[i17 >> 0] | 0)) {
    i6 = HEAP32[i11 >> 2] | 0;
    i6 = i6 + (Math_imul((HEAP32[i7 >> 2] | 0) + i6 | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
    i6 = Math_imul(i6, HEAP32[i16 + 4 >> 2] | 0) | 0;
    if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i6 + (HEAP32[i13 >> 2] | 0) << 2) + 1 >> 0] | 0) == (HEAPU8[i17 + 1 >> 0] | 0)) {
     i6 = HEAP32[i11 >> 2] | 0;
     i6 = i6 + (Math_imul((HEAP32[i7 >> 2] | 0) + i6 | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
     i6 = Math_imul(i6, HEAP32[i16 + 4 >> 2] | 0) | 0;
     if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i6 + (HEAP32[i13 >> 2] | 0) << 2) + 2 >> 0] | 0) == (HEAPU8[i17 + 2 >> 0] | 0)) {
      i2 = HEAP32[i11 >> 2] | 0;
      i2 = i2 + (Math_imul((HEAP32[i7 >> 2] | 0) + i2 | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
      i2 = Math_imul(i2, HEAP32[i16 + 4 >> 2] | 0) | 0;
      i2 = (HEAPU8[(HEAP32[i18 >> 2] | 0) + (i2 + (HEAP32[i13 >> 2] | 0) << 2) + 3 >> 0] | 0) == (HEAPU8[i17 + 3 >> 0] | 0);
     } else i2 = 0;
    } else i2 = 0;
   } else i2 = 0;
   if (!(i2 ^ 1)) break;
   HEAP32[i27 + (HEAP32[i25 >> 2] << 2) >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i25 >> 2] | 0);
   f31 = Math_fround(HEAP32[i13 >> 2] | 0);
   HEAPF32[i26 + (HEAP32[i25 >> 2] << 4) >> 2] = f31;
   i6 = HEAP32[i11 >> 2] | 0;
   f31 = Math_fround(i6 + (Math_imul(HEAP32[i12 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + i6 | 0) | 0) | 0);
   HEAPF32[i26 + (HEAP32[i25 >> 2] << 4) + 4 >> 2] = f31;
   f31 = Math_fround(HEAP32[i7 >> 2] | 0);
   HEAPF32[i26 + (HEAP32[i25 >> 2] << 4) + 12 >> 2] = f31;
   HEAP32[i9 >> 2] = 0;
   while (1) {
    i6 = HEAP32[i11 >> 2] | 0;
    i6 = i6 + (Math_imul((HEAP32[i7 >> 2] | 0) + i6 | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
    i6 = Math_imul(i6, HEAP32[i16 + 4 >> 2] | 0) | 0;
    if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i6 + (HEAP32[i13 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) << 2) >> 0] | 0) == (HEAPU8[i17 >> 0] | 0)) {
     i6 = HEAP32[i11 >> 2] | 0;
     i6 = i6 + (Math_imul((HEAP32[i7 >> 2] | 0) + i6 | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
     i6 = Math_imul(i6, HEAP32[i16 + 4 >> 2] | 0) | 0;
     if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i6 + (HEAP32[i13 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) << 2) + 1 >> 0] | 0) == (HEAPU8[i17 + 1 >> 0] | 0)) {
      i6 = HEAP32[i11 >> 2] | 0;
      i6 = i6 + (Math_imul((HEAP32[i7 >> 2] | 0) + i6 | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
      i6 = Math_imul(i6, HEAP32[i16 + 4 >> 2] | 0) | 0;
      if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (i6 + (HEAP32[i13 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) << 2) + 2 >> 0] | 0) == (HEAPU8[i17 + 2 >> 0] | 0)) {
       i2 = HEAP32[i11 >> 2] | 0;
       i2 = i2 + (Math_imul((HEAP32[i7 >> 2] | 0) + i2 | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
       i2 = Math_imul(i2, HEAP32[i16 + 4 >> 2] | 0) | 0;
       i2 = (HEAPU8[(HEAP32[i18 >> 2] | 0) + (i2 + (HEAP32[i13 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) << 2) + 3 >> 0] | 0) == (HEAPU8[i17 + 3 >> 0] | 0);
      } else i2 = 0;
     } else i2 = 0;
    } else i2 = 0;
    i3 = HEAP32[i9 >> 2] | 0;
    if (!(i2 ^ 1)) break;
    HEAP32[i9 >> 2] = i3 + 1;
   }
   f31 = Math_fround(i3 | 0);
   HEAPF32[i26 + (HEAP32[i25 >> 2] << 4) + 8 >> 2] = f31;
   HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + (HEAP32[i8 >> 2] | 0));
  }
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  HEAP32[i13 >> 2] = HEAP32[i8 >> 2];
 }
 _TraceLog(2, 51899, i22);
 HEAP32[i15 >> 2] = 0;
 while (1) {
  i13 = (HEAP32[i15 >> 2] | 0) < (Math_imul(HEAP32[i16 + 8 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0) | 0);
  i2 = HEAP32[i18 >> 2] | 0;
  if (!i13) break;
  if ((HEAPU8[i2 + (HEAP32[i15 >> 2] << 2) >> 0] | 0) == (HEAPU8[i17 >> 0] | 0)) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) + 1 >> 0] | 0) == (HEAPU8[i17 + 1 >> 0] | 0)) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) + 2 >> 0] | 0) == (HEAPU8[i17 + 2 >> 0] | 0)) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) + 3 >> 0] | 0) == (HEAPU8[i17 + 3 >> 0] | 0)) {
   i13 = (HEAP32[i18 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) | 0;
   HEAP8[i14 >> 0] = 0;
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 + 2 >> 0] = 0;
   HEAP8[i14 + 3 >> 0] = 0;
   HEAP8[i13 >> 0] = HEAP8[i14 >> 0] | 0;
   HEAP8[i13 + 1 >> 0] = HEAP8[i14 + 1 >> 0] | 0;
   HEAP8[i13 + 2 >> 0] = HEAP8[i14 + 2 >> 0] | 0;
   HEAP8[i13 + 3 >> 0] = HEAP8[i14 + 3 >> 0] | 0;
  }
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
 }
 _LoadImageEx(i21, i2, HEAP32[i16 + 4 >> 2] | 0, HEAP32[i16 + 8 >> 2] | 0);
 _free(HEAP32[i18 >> 2] | 0);
 i2 = i1;
 i3 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 i18 = i1 + 8 | 0;
 HEAP32[i23 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
 HEAP32[i23 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 HEAP32[i23 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
 HEAP32[i23 + 16 >> 2] = HEAP32[i21 + 16 >> 2];
 _LoadTextureFromImage(i28, i23);
 HEAP32[i18 >> 2] = HEAP32[i28 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
 HEAP32[i18 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
 HEAP32[i18 + 12 >> 2] = HEAP32[i28 + 12 >> 2];
 HEAP32[i18 + 16 >> 2] = HEAP32[i28 + 16 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i25 >> 2];
 i28 = _malloc((HEAP32[i1 + 4 >> 2] | 0) * 36 | 0) | 0;
 HEAP32[i1 + 32 >> 2] = i28;
 i28 = _malloc(HEAP32[i1 + 4 >> 2] << 4) | 0;
 HEAP32[i1 + 28 >> 2] = i28;
 HEAP32[i24 >> 2] = 0;
 while (1) {
  if ((HEAP32[i24 >> 2] | 0) >= (HEAP32[i1 + 4 >> 2] | 0)) break;
  HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 36 | 0) >> 2] = HEAP32[i27 + (HEAP32[i24 >> 2] << 2) >> 2];
  i25 = HEAP32[i24 >> 2] << 4 | 0;
  i28 = (HEAP32[i1 + 28 >> 2] | 0) + i25 | 0;
  i25 = i26 + i25 | 0;
  HEAP32[i28 >> 2] = HEAP32[i25 >> 2];
  HEAP32[i28 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
  HEAP32[i28 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
  HEAP32[i28 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
  HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 36 | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 36 | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 36 | 0) + 12 >> 2] = 0;
  i28 = (HEAP32[i1 + 32 >> 2] | 0) + ((HEAP32[i24 >> 2] | 0) * 36 | 0) + 16 | 0;
  i25 = i26 + (HEAP32[i24 >> 2] << 4) | 0;
  HEAP32[i22 >> 2] = HEAP32[i21 >> 2];
  HEAP32[i22 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
  HEAP32[i22 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
  HEAP32[i22 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
  HEAP32[i22 + 16 >> 2] = HEAP32[i21 + 16 >> 2];
  HEAP32[i23 >> 2] = HEAP32[i25 >> 2];
  HEAP32[i23 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
  HEAP32[i23 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
  HEAP32[i23 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
  _ImageFromImage(i19, i22, i23);
  HEAP32[i28 >> 2] = HEAP32[i19 >> 2];
  HEAP32[i28 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
  HEAP32[i28 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAP32[i28 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
  HEAP32[i28 + 16 >> 2] = HEAP32[i19 + 16 >> 2];
  HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
 }
 HEAP32[i23 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
 HEAP32[i23 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 HEAP32[i23 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
 HEAP32[i23 + 16 >> 2] = HEAP32[i21 + 16 >> 2];
 _UnloadImage(i23);
 i2 = ~~Math_fround(HEAPF32[(HEAP32[i1 + 28 >> 2] | 0) + 12 >> 2]);
 HEAP32[i1 >> 2] = i2;
 _TraceLog(3, 51937, i29);
 i2 = i20;
 i3 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 STACKTOP = i30;
 return;
}

function _ma_device_process_pcm_frames_capture__webaudio(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0;
 i54 = 0;
 i55 = STACKTOP;
 STACKTOP = STACKTOP + 12496 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(12496);
 i36 = i55 + 12484 | 0;
 i25 = i55 + 12480 | 0;
 i14 = i55 + 12476 | 0;
 i21 = i55 + 12472 | 0;
 i12 = i55 + 12468 | 0;
 i19 = i55 + 12464 | 0;
 i10 = i55 + 12460 | 0;
 i41 = i55 + 12456 | 0;
 i48 = i55 + 12452 | 0;
 i44 = i55 + 12448 | 0;
 i27 = i55 + 12444 | 0;
 i34 = i55 + 12440 | 0;
 i5 = i55 + 12436 | 0;
 i7 = i55 + 12432 | 0;
 i53 = i55 + 12428 | 0;
 i32 = i55 + 12424 | 0;
 i17 = i55 + 12420 | 0;
 i8 = i55 + 12416 | 0;
 i35 = i55 + 12412 | 0;
 i24 = i55 + 12408 | 0;
 i13 = i55 + 12404 | 0;
 i20 = i55 + 12400 | 0;
 i11 = i55 + 12396 | 0;
 i18 = i55 + 12392 | 0;
 i9 = i55 + 12388 | 0;
 i39 = i55 + 12384 | 0;
 i47 = i55 + 12380 | 0;
 i43 = i55 + 12376 | 0;
 i23 = i55 + 12372 | 0;
 i33 = i55 + 12368 | 0;
 i51 = i55 + 4096 | 0;
 i4 = i55 + 12364 | 0;
 i6 = i55 + 12360 | 0;
 i52 = i55 + 12356 | 0;
 i31 = i55 + 12352 | 0;
 i40 = i55 + 12348 | 0;
 i26 = i55 + 12344 | 0;
 i42 = i55 + 12340 | 0;
 i15 = i55;
 i16 = i55 + 12336 | 0;
 i28 = i55 + 12332 | 0;
 i38 = i55 + 12328 | 0;
 i22 = i55 + 12324 | 0;
 i46 = i55 + 12320 | 0;
 i49 = i55 + 12316 | 0;
 i50 = i55 + 12312 | 0;
 i29 = i55 + 12308 | 0;
 i30 = i55 + 12304 | 0;
 i45 = i55 + 12300 | 0;
 i37 = i55 + 12296 | 0;
 i57 = i55 + 12292 | 0;
 i56 = i55 + 12288 | 0;
 HEAP32[i37 >> 2] = i2;
 HEAP32[i57 >> 2] = i1;
 HEAP32[i56 >> 2] = i3;
 i1 = HEAP32[i37 >> 2] | 0;
 i2 = HEAP32[i57 >> 2] | 0;
 i3 = HEAP32[i56 >> 2] | 0;
 if ((HEAP32[(HEAP32[i37 >> 2] | 0) + 4 >> 2] | 0) == 3) {
  i57 = (HEAP32[i37 >> 2] | 0) + 94336 + 8 | 0;
  HEAP32[i38 >> 2] = i1;
  HEAP32[i22 >> 2] = i2;
  HEAP32[i46 >> 2] = i3;
  HEAP32[i49 >> 2] = i57;
  if (!(HEAP32[i38 >> 2] | 0)) ___assert_fail(36359, 36381, 5896, 36772);
  if ((HEAP32[i22 >> 2] | 0) >>> 0 <= 0) ___assert_fail(36454, 36381, 5897, 36772);
  if (!(HEAP32[i46 >> 2] | 0)) ___assert_fail(36469, 36381, 5898, 36772);
  if (!(HEAP32[i49 >> 2] | 0)) ___assert_fail(36507, 36381, 5899, 36772);
  HEAP32[(HEAP32[i38 >> 2] | 0) + 47360 + 46912 >> 2] = HEAP32[i22 >> 2];
  HEAP32[(HEAP32[i38 >> 2] | 0) + 47360 + 46916 >> 2] = HEAP32[i46 >> 2];
  while (1) {
   HEAP32[i30 >> 2] = 256;
   i57 = _ma_pcm_rb_acquire_write(HEAP32[i49 >> 2] | 0, i30, i45) | 0;
   HEAP32[i50 >> 2] = i57;
   if (HEAP32[i50 >> 2] | 0) {
    i54 = 12;
    break;
   }
   if (!(HEAP32[i30 >> 2] | 0)) {
    i57 = _ma_pcm_rb_pointer_disance(HEAP32[i49 >> 2] | 0) | 0;
    if ((i57 | 0) == (_ma_pcm_rb_get_subbuffer_size(HEAP32[i49 >> 2] | 0) | 0)) {
     i54 = 64;
     break;
    }
   }
   i57 = _ma_pcm_converter_read((HEAP32[i38 >> 2] | 0) + 47360 + 384 | 0, HEAP32[i45 >> 2] | 0, HEAP32[i30 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAP32[i29 >> 2] = i57;
   i57 = _ma_pcm_rb_commit_write(HEAP32[i49 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[i45 >> 2] | 0) | 0;
   HEAP32[i50 >> 2] = i57;
   if (HEAP32[i50 >> 2] | 0) {
    i54 = 16;
    break;
   }
   if ((HEAP32[i29 >> 2] | 0) >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
    i54 = 64;
    break;
   }
  }
  if ((i54 | 0) == 12) {
   _ma_post_error(HEAP32[i38 >> 2] | 0, 1, 36814, HEAP32[i50 >> 2] | 0) | 0;
   STACKTOP = i55;
   return;
  } else if ((i54 | 0) == 16) {
   _ma_post_error(HEAP32[i38 >> 2] | 0, 1, 36869, HEAP32[i50 >> 2] | 0) | 0;
   STACKTOP = i55;
   return;
  } else if ((i54 | 0) == 64) {
   STACKTOP = i55;
   return;
  }
 }
 HEAP32[i40 >> 2] = i1;
 HEAP32[i26 >> 2] = i2;
 HEAP32[i42 >> 2] = i3;
 if (!(HEAP32[i40 >> 2] | 0)) ___assert_fail(36359, 36381, 5862, 36921);
 if ((HEAP32[i26 >> 2] | 0) >>> 0 <= 0) ___assert_fail(36454, 36381, 5863, 36921);
 if (!(HEAP32[i42 >> 2] | 0)) ___assert_fail(36954, 36381, 5864, 36921);
 if ((HEAPU8[(HEAP32[i40 >> 2] | 0) + 47360 + 384 + 46464 >> 0] | 0) >>> 6 & 1 | 0) {
  i56 = HEAP32[i42 >> 2] | 0;
  i57 = HEAP32[i26 >> 2] | 0;
  HEAP32[i39 >> 2] = HEAP32[i40 >> 2];
  HEAP32[i47 >> 2] = 0;
  HEAP32[i43 >> 2] = i56;
  HEAP32[i23 >> 2] = i57;
  HEAP32[i33 >> 2] = HEAP32[(HEAP32[i39 >> 2] | 0) + 16 >> 2];
  if (!(HEAP32[i33 >> 2] | 0)) {
   STACKTOP = i55;
   return;
  }
  if (HEAP32[i47 >> 2] | 0 ? ((HEAPU8[(HEAP32[i39 >> 2] | 0) + 324 >> 0] | 0) >>> 4 & 1 | 0) == 0 : 0) {
   i57 = (HEAP32[i39 >> 2] | 0) + 384 | 0;
   _ma_zero_pcm_frames(HEAP32[i47 >> 2] | 0, HEAP32[i23 >> 2] | 0, HEAP32[i57 + 264 >> 2] | 0, HEAP32[i57 + 268 >> 2] | 0);
  }
  L48 : do if (HEAP32[i43 >> 2] | 0) if (Math_fround(HEAPF32[(HEAP32[i39 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0)) {
   i57 = HEAP32[(HEAP32[i39 >> 2] | 0) + 47360 + 268 >> 2] | 0;
   HEAP32[i18 >> 2] = HEAP32[(HEAP32[i39 >> 2] | 0) + 47360 + 264 >> 2];
   HEAP32[i9 >> 2] = i57;
   i57 = _ma_get_bytes_per_sample(HEAP32[i18 >> 2] | 0) | 0;
   i57 = Math_imul(i57, HEAP32[i9 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i57;
   i57 = HEAP32[(HEAP32[i39 >> 2] | 0) + 384 + 268 >> 2] | 0;
   HEAP32[i20 >> 2] = HEAP32[(HEAP32[i39 >> 2] | 0) + 384 + 264 >> 2];
   HEAP32[i11 >> 2] = i57;
   i57 = _ma_get_bytes_per_sample(HEAP32[i20 >> 2] | 0) | 0;
   i57 = Math_imul(i57, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i57;
   HEAP32[i52 >> 2] = 0;
   while (1) {
    if ((HEAP32[i52 >> 2] | 0) >>> 0 >= (HEAP32[i23 >> 2] | 0) >>> 0) break L48;
    HEAP32[i31 >> 2] = (HEAP32[i23 >> 2] | 0) - (HEAP32[i52 >> 2] | 0);
    if ((HEAP32[i31 >> 2] | 0) >>> 0 > (8192 / ((HEAP32[i4 >> 2] | 0) >>> 0) | 0) >>> 0) HEAP32[i31 >> 2] = 8192 / ((HEAP32[i4 >> 2] | 0) >>> 0) | 0;
    i53 = (HEAP32[i43 >> 2] | 0) + (Math_imul(HEAP32[i52 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0) | 0;
    i56 = (HEAP32[i39 >> 2] | 0) + 47360 | 0;
    i57 = HEAP32[i39 >> 2] | 0;
    _ma_copy_and_apply_volume_factor_pcm_frames(i51, i53, HEAP32[i31 >> 2] | 0, HEAP32[i56 + 264 >> 2] | 0, HEAP32[i56 + 268 >> 2] | 0, Math_fround(HEAPF32[i57 + 328 >> 2]));
    i57 = (HEAP32[i47 >> 2] | 0) + (Math_imul(HEAP32[i52 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
    FUNCTION_TABLE_viiii[HEAP32[i33 >> 2] & 31](HEAP32[i39 >> 2] | 0, i57, i51, HEAP32[i31 >> 2] | 0);
    HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + (HEAP32[i31 >> 2] | 0);
   }
  } else i54 = 36; else i54 = 36; while (0);
  if ((i54 | 0) == 36) FUNCTION_TABLE_viiii[HEAP32[i33 >> 2] & 31](HEAP32[i39 >> 2] | 0, HEAP32[i47 >> 2] | 0, HEAP32[i43 >> 2] | 0, HEAP32[i23 >> 2] | 0);
  if (!(HEAP32[i47 >> 2] | 0)) {
   STACKTOP = i55;
   return;
  }
  i57 = Math_fround(HEAPF32[(HEAP32[i39 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0);
  if (i57 & (HEAP32[i43 >> 2] | 0) == 0) {
   i56 = (HEAP32[i39 >> 2] | 0) + 384 | 0;
   i57 = HEAP32[i39 >> 2] | 0;
   _ma_apply_volume_factor_pcm_frames(HEAP32[i47 >> 2] | 0, HEAP32[i23 >> 2] | 0, HEAP32[i56 + 264 >> 2] | 0, HEAP32[i56 + 268 >> 2] | 0, Math_fround(HEAPF32[i57 + 328 >> 2]));
  }
  if ((HEAPU8[(HEAP32[i39 >> 2] | 0) + 324 >> 0] | 0) >>> 5 & 1 | 0) {
   STACKTOP = i55;
   return;
  }
  if ((HEAP32[(HEAP32[i39 >> 2] | 0) + 384 + 264 >> 2] | 0) != 5) {
   STACKTOP = i55;
   return;
  }
  i56 = HEAP32[i23 >> 2] | 0;
  i57 = HEAP32[(HEAP32[i39 >> 2] | 0) + 384 + 268 >> 2] | 0;
  HEAP32[i35 >> 2] = HEAP32[i47 >> 2];
  HEAP32[i24 >> 2] = i56;
  HEAP32[i13 >> 2] = i57;
  _ma_clip_samples_f32(HEAP32[i35 >> 2] | 0, Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0);
  STACKTOP = i55;
  return;
 }
 HEAP32[(HEAP32[i40 >> 2] | 0) + 47360 + 46912 >> 2] = HEAP32[i26 >> 2];
 HEAP32[(HEAP32[i40 >> 2] | 0) + 47360 + 46916 >> 2] = HEAP32[i42 >> 2];
 i57 = HEAP32[(HEAP32[i40 >> 2] | 0) + 47360 + 268 >> 2] | 0;
 HEAP32[i17 >> 2] = HEAP32[(HEAP32[i40 >> 2] | 0) + 47360 + 264 >> 2];
 HEAP32[i8 >> 2] = i57;
 i57 = _ma_get_bytes_per_sample(HEAP32[i17 >> 2] | 0) | 0;
 i57 = 4096 / ((Math_imul(i57, HEAP32[i8 >> 2] | 0) | 0) >>> 0) | 0;
 HEAP32[i16 >> 2] = i57;
 while (1) {
  i57 = _ma_pcm_converter_read((HEAP32[i40 >> 2] | 0) + 47360 + 384 | 0, i15, HEAP32[i16 >> 2] | 0, 0) | 0;
  getTempRet0() | 0;
  HEAP32[i28 >> 2] = i57;
  if (!(HEAP32[i28 >> 2] | 0)) {
   i54 = 64;
   break;
  }
  i57 = HEAP32[i28 >> 2] | 0;
  HEAP32[i41 >> 2] = HEAP32[i40 >> 2];
  HEAP32[i48 >> 2] = 0;
  HEAP32[i44 >> 2] = i15;
  HEAP32[i27 >> 2] = i57;
  HEAP32[i34 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 16 >> 2];
  if (HEAP32[i34 >> 2] | 0) {
   if (HEAP32[i48 >> 2] | 0 ? ((HEAPU8[(HEAP32[i41 >> 2] | 0) + 324 >> 0] | 0) >>> 4 & 1 | 0) == 0 : 0) {
    i57 = (HEAP32[i41 >> 2] | 0) + 384 | 0;
    _ma_zero_pcm_frames(HEAP32[i48 >> 2] | 0, HEAP32[i27 >> 2] | 0, HEAP32[i57 + 264 >> 2] | 0, HEAP32[i57 + 268 >> 2] | 0);
   }
   L82 : do if (HEAP32[i44 >> 2] | 0) if (Math_fround(HEAPF32[(HEAP32[i41 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0)) {
    i57 = HEAP32[(HEAP32[i41 >> 2] | 0) + 47360 + 268 >> 2] | 0;
    HEAP32[i19 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 47360 + 264 >> 2];
    HEAP32[i10 >> 2] = i57;
    i57 = _ma_get_bytes_per_sample(HEAP32[i19 >> 2] | 0) | 0;
    i57 = Math_imul(i57, HEAP32[i10 >> 2] | 0) | 0;
    HEAP32[i5 >> 2] = i57;
    i57 = HEAP32[(HEAP32[i41 >> 2] | 0) + 384 + 268 >> 2] | 0;
    HEAP32[i21 >> 2] = HEAP32[(HEAP32[i41 >> 2] | 0) + 384 + 264 >> 2];
    HEAP32[i12 >> 2] = i57;
    i57 = _ma_get_bytes_per_sample(HEAP32[i21 >> 2] | 0) | 0;
    i57 = Math_imul(i57, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i7 >> 2] = i57;
    HEAP32[i53 >> 2] = 0;
    while (1) {
     if ((HEAP32[i53 >> 2] | 0) >>> 0 >= (HEAP32[i27 >> 2] | 0) >>> 0) break L82;
     HEAP32[i32 >> 2] = (HEAP32[i27 >> 2] | 0) - (HEAP32[i53 >> 2] | 0);
     if ((HEAP32[i32 >> 2] | 0) >>> 0 > (8192 / ((HEAP32[i5 >> 2] | 0) >>> 0) | 0) >>> 0) HEAP32[i32 >> 2] = 8192 / ((HEAP32[i5 >> 2] | 0) >>> 0) | 0;
     i52 = (HEAP32[i44 >> 2] | 0) + (Math_imul(HEAP32[i53 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) | 0;
     i56 = (HEAP32[i41 >> 2] | 0) + 47360 | 0;
     i57 = HEAP32[i41 >> 2] | 0;
     _ma_copy_and_apply_volume_factor_pcm_frames(i51, i52, HEAP32[i32 >> 2] | 0, HEAP32[i56 + 264 >> 2] | 0, HEAP32[i56 + 268 >> 2] | 0, Math_fround(HEAPF32[i57 + 328 >> 2]));
     i57 = (HEAP32[i48 >> 2] | 0) + (Math_imul(HEAP32[i53 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) | 0;
     FUNCTION_TABLE_viiii[HEAP32[i34 >> 2] & 31](HEAP32[i41 >> 2] | 0, i57, i51, HEAP32[i32 >> 2] | 0);
     HEAP32[i53 >> 2] = (HEAP32[i53 >> 2] | 0) + (HEAP32[i32 >> 2] | 0);
    }
   } else i54 = 55; else i54 = 55; while (0);
   if ((i54 | 0) == 55) {
    i54 = 0;
    FUNCTION_TABLE_viiii[HEAP32[i34 >> 2] & 31](HEAP32[i41 >> 2] | 0, HEAP32[i48 >> 2] | 0, HEAP32[i44 >> 2] | 0, HEAP32[i27 >> 2] | 0);
   }
   if (HEAP32[i48 >> 2] | 0) {
    i57 = Math_fround(HEAPF32[(HEAP32[i41 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0);
    if (i57 & (HEAP32[i44 >> 2] | 0) == 0) {
     i56 = (HEAP32[i41 >> 2] | 0) + 384 | 0;
     i57 = HEAP32[i41 >> 2] | 0;
     _ma_apply_volume_factor_pcm_frames(HEAP32[i48 >> 2] | 0, HEAP32[i27 >> 2] | 0, HEAP32[i56 + 264 >> 2] | 0, HEAP32[i56 + 268 >> 2] | 0, Math_fround(HEAPF32[i57 + 328 >> 2]));
    }
    if (!((HEAPU8[(HEAP32[i41 >> 2] | 0) + 324 >> 0] | 0) >>> 5 & 1)) if ((HEAP32[(HEAP32[i41 >> 2] | 0) + 384 + 264 >> 2] | 0) == 5) {
     i56 = HEAP32[i27 >> 2] | 0;
     i57 = HEAP32[(HEAP32[i41 >> 2] | 0) + 384 + 268 >> 2] | 0;
     HEAP32[i36 >> 2] = HEAP32[i48 >> 2];
     HEAP32[i25 >> 2] = i56;
     HEAP32[i14 >> 2] = i57;
     _ma_clip_samples_f32(HEAP32[i36 >> 2] | 0, Math_imul(HEAP32[i25 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0);
    }
   }
  }
  if ((HEAP32[i28 >> 2] | 0) >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
   i54 = 64;
   break;
  }
 }
 if ((i54 | 0) == 64) {
  STACKTOP = i55;
  return;
 }
}

function _worknote(i3, i1, i5, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = 0;
 i15 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i16 = i7 + 8 | 0;
 i9 = i7 + 4 | 0;
 i12 = i7;
 i4 = i7 + 22 | 0;
 i14 = i7 + 20 | 0;
 i11 = i7 + 18 | 0;
 i13 = i7 + 16 | 0;
 i10 = i7 + 14 | 0;
 i8 = i7 + 12 | 0;
 HEAP32[i16 >> 2] = i3;
 HEAP32[i9 >> 2] = i1;
 HEAP8[i7 + 24 >> 0] = i5;
 HEAP32[i12 >> 2] = i2;
 HEAP16[i4 >> 1] = HEAPU8[HEAP32[i16 >> 2] >> 0] & 240 | HEAPU8[(HEAP32[i16 >> 2] | 0) + 2 >> 0] >> 4;
 HEAP16[i14 >> 1] = (HEAPU8[HEAP32[i16 >> 2] >> 0] & 15) << 8 | HEAPU8[(HEAP32[i16 >> 2] | 0) + 1 >> 0];
 i7 = HEAP32[i16 >> 2] | 0;
 HEAP16[i11 >> 1] = (HEAPU8[i7 + 2 >> 0] & 15) << 8 | HEAPU8[i7 + 3 >> 0];
 HEAP16[i13 >> 1] = HEAP16[(HEAP32[i9 >> 2] | 0) + 16 >> 1] | 0;
 if (HEAPU16[i14 >> 1] | 0) i6 = 3; else if (HEAPU16[i4 >> 1] | 0) i6 = 3;
 if ((i6 | 0) == 3) {
  if (HEAPU16[i4 >> 1] | 0) if ((HEAPU16[i4 >> 1] | 0) < 32) HEAP16[(HEAP32[i9 >> 2] | 0) + 4 >> 1] = (HEAPU16[i4 >> 1] | 0) - 1;
  if (HEAPU16[i14 >> 1] | 0) i6 = 8; else if (HEAPU16[i4 >> 1] | 0) i6 = 8;
  if ((i6 | 0) == 8) {
   HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 1088 + (HEAPU16[(HEAP32[i9 >> 2] | 0) + 4 >> 1] << 2) >> 2];
   i16 = HEAP32[i9 >> 2] | 0;
   HEAP16[i16 + 6 >> 1] = HEAP16[(HEAP32[i12 >> 2] | 0) + 20 + ((HEAPU16[i16 + 4 >> 1] | 0) * 30 | 0) + 22 >> 1] | 0;
   i16 = HEAP32[i9 >> 2] | 0;
   HEAP16[i16 + 8 >> 1] = HEAP16[(HEAP32[i12 >> 2] | 0) + 20 + ((HEAPU16[i16 + 4 >> 1] | 0) * 30 | 0) + 26 >> 1] | 0;
   i16 = HEAP32[i9 >> 2] | 0;
   HEAP16[i16 + 10 >> 1] = HEAP16[(HEAP32[i12 >> 2] | 0) + 20 + ((HEAPU16[i16 + 4 >> 1] | 0) * 30 | 0) + 28 >> 1] | 0;
   i16 = HEAP32[i9 >> 2] | 0;
   HEAP8[i16 + 49 >> 0] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 20 + ((HEAPU16[i16 + 4 >> 1] | 0) * 30 | 0) + 24 >> 0] & 15;
   if ((HEAPU16[i11 >> 1] >> 8 | 0) != 4) if ((HEAPU16[i11 >> 1] >> 8 | 0) != 6) {
    HEAP16[(HEAP32[i9 >> 2] | 0) + 34 >> 1] = 0;
    HEAP8[(HEAP32[i9 >> 2] | 0) + 48 >> 0] = 0;
   }
  }
  if (HEAPU16[i4 >> 1] | 0) if ((HEAPU16[i11 >> 1] >> 8 | 0) != 5) {
   i16 = HEAP32[i9 >> 2] | 0;
   HEAP8[i16 + 18 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 20 + ((HEAPU16[i16 + 4 >> 1] | 0) * 30 | 0) + 25 >> 0] | 0;
   HEAP8[(HEAP32[i9 >> 2] | 0) + 46 >> 0] = 0;
  }
  if ((HEAPU16[i11 >> 1] >> 8 | 0) != 3) if ((HEAPU16[i11 >> 1] >> 8 | 0) != 5) if (HEAPU16[i14 >> 1] | 0) HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] = 0;
  HEAP16[(HEAP32[i9 >> 2] | 0) + 28 >> 1] = 0;
  if (HEAP16[i14 >> 1] | 0) {
   do if (HEAP8[(HEAP32[i9 >> 2] | 0) + 49 >> 0] | 0) {
    i16 = (HEAPU8[(HEAP32[i9 >> 2] | 0) + 49 >> 0] | 0) <= 7;
    i3 = (HEAP32[i12 >> 2] | 0) + 3554 | 0;
    i1 = _getnote(HEAP32[i12 >> 2] | 0, HEAP16[i14 >> 1] | 0, 0) | 0;
    i2 = HEAPU8[(HEAP32[i9 >> 2] | 0) + 49 >> 0] | 0;
    if (i16) {
     HEAP16[i14 >> 1] = HEAP16[i3 + (i1 + i2 << 1) >> 1] | 0;
     break;
    } else {
     HEAP16[i14 >> 1] = HEAP16[i3 + (i1 - (16 - i2) << 1) >> 1] | 0;
     break;
    }
   } while (0);
   HEAP16[(HEAP32[i9 >> 2] | 0) + 16 >> 1] = HEAP16[i14 >> 1] | 0;
  }
 }
 HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 0;
 HEAP8[(HEAP32[i9 >> 2] | 0) + 25 >> 0] = 0;
 HEAP16[(HEAP32[i9 >> 2] | 0) + 26 >> 1] = HEAP16[i11 >> 1] | 0;
 do switch (HEAPU16[i11 >> 1] >> 8 | 0) {
 case 0:
  {
   if (!(HEAPU16[i11 >> 1] & 255)) {
    STACKTOP = i15;
    return;
   }
   HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 0;
   HEAP8[(HEAP32[i9 >> 2] | 0) + 25 >> 0] = HEAPU16[i11 >> 1] | 0;
   HEAP8[(HEAP32[i9 >> 2] | 0) + 42 >> 0] = 0;
   i16 = HEAP32[i9 >> 2] | 0;
   i16 = (_getnote(HEAP32[i12 >> 2] | 0, HEAP16[i16 + 16 >> 1] | 0, HEAPU8[i16 + 49 >> 0] | 0) | 0) & 65535;
   HEAP16[i10 >> 1] = i16;
   i16 = HEAP32[i9 >> 2] | 0;
   HEAP16[i16 + 36 >> 1] = HEAP16[i16 + 16 >> 1] | 0;
   i16 = (HEAPU16[i10 >> 1] | 0) + ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 25 >> 0] >> 4 & 15) << 3) & 65535;
   HEAP16[i8 >> 1] = i16;
   HEAP16[i8 >> 1] = (HEAPU16[i8 >> 1] | 0) >= 1152 ? 1151 : i16;
   HEAP16[(HEAP32[i9 >> 2] | 0) + 36 + 2 >> 1] = HEAP16[(HEAP32[i12 >> 2] | 0) + 3554 + (HEAPU16[i8 >> 1] << 1) >> 1] | 0;
   i16 = (HEAPU16[i10 >> 1] | 0) + ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 25 >> 0] & 15) << 3) & 65535;
   HEAP16[i8 >> 1] = i16;
   HEAP16[i8 >> 1] = (HEAPU16[i8 >> 1] | 0) >= 1152 ? 1151 : i16;
   HEAP16[(HEAP32[i9 >> 2] | 0) + 36 + 4 >> 1] = HEAP16[(HEAP32[i12 >> 2] | 0) + 3554 + (HEAPU16[i8 >> 1] << 1) >> 1] | 0;
   STACKTOP = i15;
   return;
  }
 case 1:
  {
   HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 1;
   HEAP8[(HEAP32[i9 >> 2] | 0) + 25 >> 0] = HEAPU16[i11 >> 1] | 0;
   STACKTOP = i15;
   return;
  }
 case 2:
  {
   HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 2;
   HEAP8[(HEAP32[i9 >> 2] | 0) + 25 >> 0] = HEAPU16[i11 >> 1] | 0;
   STACKTOP = i15;
   return;
  }
 case 3:
  {
   HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 3;
   if (HEAPU16[i11 >> 1] & 255 | 0) HEAP16[(HEAP32[i9 >> 2] | 0) + 30 >> 1] = HEAPU16[i11 >> 1] & 255;
   if (!(HEAPU16[i14 >> 1] | 0)) {
    STACKTOP = i15;
    return;
   }
   HEAP16[(HEAP32[i9 >> 2] | 0) + 32 >> 1] = HEAP16[i14 >> 1] | 0;
   HEAP16[(HEAP32[i9 >> 2] | 0) + 16 >> 1] = HEAP16[i13 >> 1] | 0;
   STACKTOP = i15;
   return;
  }
 case 4:
  {
   HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 4;
   if (HEAPU16[i11 >> 1] & 15 | 0) {
    i16 = (HEAP32[i9 >> 2] | 0) + 47 | 0;
    HEAP8[i16 >> 0] = HEAPU8[i16 >> 0] & 240 | HEAPU16[i11 >> 1] & 15;
   }
   if (!(HEAPU16[i11 >> 1] & 240)) {
    STACKTOP = i15;
    return;
   }
   i16 = (HEAP32[i9 >> 2] | 0) + 47 | 0;
   HEAP8[i16 >> 0] = HEAPU8[i16 >> 0] & 15 | HEAPU16[i11 >> 1] & 240;
   STACKTOP = i15;
   return;
  }
 case 5:
  {
   if (HEAPU16[i14 >> 1] | 0) {
    HEAP16[(HEAP32[i9 >> 2] | 0) + 32 >> 1] = HEAP16[i14 >> 1] | 0;
    HEAP16[(HEAP32[i9 >> 2] | 0) + 16 >> 1] = HEAP16[i13 >> 1] | 0;
   }
   HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 5;
   if (!(HEAPU16[i11 >> 1] & 255)) {
    STACKTOP = i15;
    return;
   }
   HEAP8[(HEAP32[i9 >> 2] | 0) + 46 >> 0] = HEAPU16[i11 >> 1] | 0;
   STACKTOP = i15;
   return;
  }
 case 6:
  {
   HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 6;
   if (!(HEAPU16[i11 >> 1] & 255)) {
    STACKTOP = i15;
    return;
   }
   HEAP8[(HEAP32[i9 >> 2] | 0) + 46 >> 0] = HEAPU16[i11 >> 1] | 0;
   STACKTOP = i15;
   return;
  }
 case 9:
  {
   HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] = (HEAPU16[i11 >> 1] >> 4 << 12) + ((HEAPU16[i11 >> 1] & 15) << 8);
   STACKTOP = i15;
   return;
  }
 case 10:
  {
   HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 10;
   HEAP8[(HEAP32[i9 >> 2] | 0) + 46 >> 0] = HEAPU16[i11 >> 1] | 0;
   STACKTOP = i15;
   return;
  }
 case 11:
  {
   HEAP16[(HEAP32[i12 >> 2] | 0) + 1728 >> 1] = HEAPU16[i11 >> 1] & 255;
   if ((HEAPU16[(HEAP32[i12 >> 2] | 0) + 1728 >> 1] | 0) >= (HEAPU8[(HEAP32[i12 >> 2] | 0) + 950 >> 0] | 0)) HEAP16[(HEAP32[i12 >> 2] | 0) + 1728 >> 1] = 0;
   HEAP16[(HEAP32[i12 >> 2] | 0) + 1730 >> 1] = 0;
   HEAP16[(HEAP32[i12 >> 2] | 0) + 1734 >> 1] = 1;
   STACKTOP = i15;
   return;
  }
 case 12:
  {
   HEAP8[(HEAP32[i9 >> 2] | 0) + 18 >> 0] = HEAPU16[i11 >> 1] | 0;
   STACKTOP = i15;
   return;
  }
 case 13:
  {
   i16 = (Math_imul(((HEAPU16[i11 >> 1] >> 4 & 15) * 10 | 0) + (HEAPU16[i11 >> 1] & 15) | 0, HEAPU16[(HEAP32[i12 >> 2] | 0) + 3552 >> 1] | 0) | 0) & 65535;
   HEAP16[(HEAP32[i12 >> 2] | 0) + 1730 >> 1] = i16;
   HEAP16[(HEAP32[i12 >> 2] | 0) + 1734 >> 1] = 1;
   i16 = (HEAP32[i12 >> 2] | 0) + 1728 | 0;
   HEAP16[i16 >> 1] = (HEAP16[i16 >> 1] | 0) + 1 << 16 >> 16;
   if ((HEAPU16[(HEAP32[i12 >> 2] | 0) + 1728 >> 1] | 0) < (HEAPU8[(HEAP32[i12 >> 2] | 0) + 950 >> 0] | 0)) {
    STACKTOP = i15;
    return;
   }
   HEAP16[(HEAP32[i12 >> 2] | 0) + 1728 >> 1] = 0;
   STACKTOP = i15;
   return;
  }
 case 14:
  switch (HEAPU16[i11 >> 1] >> 4 & 15 | 0) {
  case 1:
   {
    i16 = (HEAP32[i9 >> 2] | 0) + 16 | 0;
    HEAP16[i16 >> 1] = (HEAPU16[i16 >> 1] | 0) - (HEAPU16[i11 >> 1] & 15);
    if ((HEAPU16[(HEAP32[i9 >> 2] | 0) + 16 >> 1] | 0) >= 113) {
     STACKTOP = i15;
     return;
    }
    HEAP16[(HEAP32[i9 >> 2] | 0) + 16 >> 1] = 113;
    STACKTOP = i15;
    return;
   }
  case 2:
   {
    i16 = (HEAP32[i9 >> 2] | 0) + 16 | 0;
    HEAP16[i16 >> 1] = (HEAPU16[i16 >> 1] | 0) + (HEAPU16[i11 >> 1] & 15);
    if ((HEAPU16[(HEAP32[i9 >> 2] | 0) + 16 >> 1] | 0) <= 856) {
     STACKTOP = i15;
     return;
    }
    HEAP16[(HEAP32[i9 >> 2] | 0) + 16 >> 1] = 856;
    STACKTOP = i15;
    return;
   }
  case 10:
   {
    i16 = (HEAP32[i9 >> 2] | 0) + 18 | 0;
    HEAP8[i16 >> 0] = (HEAPU8[i16 >> 0] | 0) + (HEAPU16[i11 >> 1] & 15);
    if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 18 >> 0] | 0) <= 64) {
     STACKTOP = i15;
     return;
    }
    HEAP8[(HEAP32[i9 >> 2] | 0) + 18 >> 0] = 64;
    STACKTOP = i15;
    return;
   }
  case 11:
   {
    i16 = (HEAP32[i9 >> 2] | 0) + 18 | 0;
    HEAP8[i16 >> 0] = (HEAPU8[i16 >> 0] | 0) - (HEAPU16[i11 >> 1] & 15);
    if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 18 >> 0] | 0) <= 200) {
     STACKTOP = i15;
     return;
    }
    HEAP8[(HEAP32[i9 >> 2] | 0) + 18 >> 0] = 0;
    STACKTOP = i15;
    return;
   }
  case 6:
   {
    if (!(HEAPU16[i11 >> 1] & 15)) {
     HEAP16[(HEAP32[i9 >> 2] | 0) + 54 >> 1] = HEAP16[(HEAP32[i12 >> 2] | 0) + 1730 >> 1] | 0;
     STACKTOP = i15;
     return;
    }
    if (!(HEAP16[(HEAP32[i9 >> 2] | 0) + 52 >> 1] | 0)) {
     HEAP16[(HEAP32[i9 >> 2] | 0) + 52 >> 1] = HEAPU16[i11 >> 1] & 15;
     HEAP16[(HEAP32[i12 >> 2] | 0) + 1730 >> 1] = HEAP16[(HEAP32[i9 >> 2] | 0) + 54 >> 1] | 0;
     HEAP16[(HEAP32[i12 >> 2] | 0) + 1734 >> 1] = 1;
     STACKTOP = i15;
     return;
    }
    i16 = (HEAP32[i9 >> 2] | 0) + 52 | 0;
    HEAP16[i16 >> 1] = (HEAP16[i16 >> 1] | 0) + -1 << 16 >> 16;
    if (HEAP16[(HEAP32[i9 >> 2] | 0) + 52 >> 1] | 0) {
     HEAP16[(HEAP32[i12 >> 2] | 0) + 1730 >> 1] = HEAP16[(HEAP32[i9 >> 2] | 0) + 54 >> 1] | 0;
     HEAP16[(HEAP32[i12 >> 2] | 0) + 1734 >> 1] = 1;
     STACKTOP = i15;
     return;
    } else {
     HEAP16[(HEAP32[i9 >> 2] | 0) + 54 >> 1] = HEAP16[(HEAP32[i12 >> 2] | 0) + 1730 >> 1] | 0;
     STACKTOP = i15;
     return;
    }
   }
  case 14:
   {
    HEAP16[(HEAP32[i12 >> 2] | 0) + 1732 >> 1] = HEAPU16[i11 >> 1] & 15;
    STACKTOP = i15;
    return;
   }
  case 12:
   {
    HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] = 12;
    HEAP8[(HEAP32[i9 >> 2] | 0) + 50 >> 0] = HEAPU16[i11 >> 1] & 15;
    if (HEAP8[(HEAP32[i9 >> 2] | 0) + 50 >> 0] | 0) {
     STACKTOP = i15;
     return;
    }
    HEAP8[(HEAP32[i9 >> 2] | 0) + 18 >> 0] = 0;
    STACKTOP = i15;
    return;
   }
  default:
   {
    STACKTOP = i15;
    return;
   }
  }
 case 15:
  {
   if ((HEAPU16[i11 >> 1] & 255 | 0) < 33) if (HEAPU16[i11 >> 1] & 255 | 0) {
    HEAP8[(HEAP32[i12 >> 2] | 0) + 1084 >> 0] = HEAPU16[i11 >> 1] | 0;
    i16 = HEAP32[i12 >> 2] | 0;
    i16 = Math_imul(HEAPU8[i16 + 1084 >> 0] | 0, (((HEAP32[i16 + 1724 >> 2] | 0) * 5 | 0) >>> 0) / (HEAPU8[i16 + 1736 >> 0] << 1 >>> 0) | 0) | 0;
    HEAP32[(HEAP32[i12 >> 2] | 0) + 1748 >> 2] = i16;
   }
   if ((HEAPU16[i11 >> 1] & 255 | 0) < 33) {
    STACKTOP = i15;
    return;
   }
   HEAP8[(HEAP32[i12 >> 2] | 0) + 1736 >> 0] = HEAPU16[i11 >> 1] | 0;
   i16 = HEAP32[i12 >> 2] | 0;
   i16 = Math_imul(HEAPU8[i16 + 1084 >> 0] | 0, (((HEAP32[i16 + 1724 >> 2] | 0) * 5 | 0) >>> 0) / (HEAPU8[i16 + 1736 >> 0] << 1 >>> 0) | 0) | 0;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 1748 >> 2] = i16;
   STACKTOP = i15;
   return;
  }
 default:
  {
   STACKTOP = i15;
   return;
  }
 } while (0);
}

function _printf_core(i21, i2, i25, i26, i28, i22, i27) {
 i21 = i21 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i28 = i28 | 0;
 i22 = i22 | 0;
 i27 = i27 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i24 = 0, i29 = 0, i30 = 0;
 i13 = 0;
 i29 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i23 = i1 + 56 | 0;
 i20 = i1 + 40 | 0;
 i15 = i1;
 i24 = i1 + 48 | 0;
 i19 = i1 + 60 | 0;
 HEAP32[i23 >> 2] = i2;
 i18 = (i21 | 0) != 0;
 i14 = i15 + 40 | 0;
 i17 = i14;
 i15 = i15 + 39 | 0;
 i16 = i24 + 4 | 0;
 i1 = 0;
 i2 = 0;
 i5 = 0;
 L1 : while (1) {
  do {
   do if ((i1 | 0) > -1) if ((i2 | 0) > (2147483647 - i1 | 0)) {
    i1 = ___errno_location() | 0;
    HEAP32[i1 >> 2] = 61;
    i1 = -1;
    break;
   } else {
    i1 = i2 + i1 | 0;
    break;
   } while (0);
   i9 = HEAP32[i23 >> 2] | 0;
   i2 = HEAP8[i9 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i13 = 92;
    break L1;
   }
   i3 = i9;
   L12 : while (1) {
    switch (i2 << 24 >> 24) {
    case 37:
     {
      i13 = 10;
      break L12;
     }
    case 0:
     {
      i2 = i3;
      break L12;
     }
    default:
     {}
    }
    i12 = i3 + 1 | 0;
    HEAP32[i23 >> 2] = i12;
    i2 = HEAP8[i12 >> 0] | 0;
    i3 = i12;
   }
   L15 : do if ((i13 | 0) == 10) {
    i13 = 0;
    i4 = i3;
    i2 = i3;
    do {
     if ((HEAP8[i4 + 1 >> 0] | 0) != 37) break L15;
     i2 = i2 + 1 | 0;
     i4 = i4 + 2 | 0;
     HEAP32[i23 >> 2] = i4;
    } while ((HEAP8[i4 >> 0] | 0) == 37);
   } while (0);
   i2 = i2 - i9 | 0;
   if (i18) _out(i21, i9, i2);
  } while ((i2 | 0) != 0);
  i12 = (_isdigit(HEAP8[(HEAP32[i23 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  i2 = HEAP32[i23 >> 2] | 0;
  if (i12) {
   i3 = 1;
   i7 = -1;
   i6 = i5;
  } else if ((HEAP8[i2 + 2 >> 0] | 0) == 36) {
   i3 = 3;
   i7 = (HEAP8[i2 + 1 >> 0] | 0) + -48 | 0;
   i6 = 1;
  } else {
   i3 = 1;
   i7 = -1;
   i6 = i5;
  }
  i3 = i2 + i3 | 0;
  HEAP32[i23 >> 2] = i3;
  i2 = HEAP8[i3 >> 0] | 0;
  i4 = (i2 << 24 >> 24) + -32 | 0;
  if (i4 >>> 0 > 31 | (1 << i4 & 75913 | 0) == 0) i5 = 0; else {
   i2 = 0;
   while (1) {
    i5 = 1 << i4 | i2;
    i3 = i3 + 1 | 0;
    HEAP32[i23 >> 2] = i3;
    i2 = HEAP8[i3 >> 0] | 0;
    i4 = (i2 << 24 >> 24) + -32 | 0;
    if (i4 >>> 0 > 31 | (1 << i4 & 75913 | 0) == 0) break; else i2 = i5;
   }
  }
  if (i2 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[i3 + 1 >> 0] | 0) | 0)) i13 = 27; else {
    i2 = HEAP32[i23 >> 2] | 0;
    if ((HEAP8[i2 + 2 >> 0] | 0) == 36) {
     i12 = i2 + 1 | 0;
     HEAP32[i28 + ((HEAP8[i12 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i4 = 1;
     i3 = i2 + 3 | 0;
     i2 = HEAP32[i26 + ((HEAP8[i12 >> 0] | 0) + -48 << 3) >> 2] | 0;
    } else i13 = 27;
   }
   if ((i13 | 0) == 27) {
    i13 = 0;
    if (i6 | 0) {
     i1 = -1;
     break;
    }
    if (i18) {
     i12 = (HEAP32[i25 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     i2 = HEAP32[i12 >> 2] | 0;
     HEAP32[i25 >> 2] = i12 + 4;
    } else i2 = 0;
    i4 = 0;
    i3 = (HEAP32[i23 >> 2] | 0) + 1 | 0;
   }
   HEAP32[i23 >> 2] = i3;
   i11 = (i2 | 0) < 0;
   i5 = i11 ? i5 | 8192 : i5;
   i12 = i4;
   i11 = i11 ? 0 - i2 | 0 : i2;
  } else {
   i2 = _getint(i23) | 0;
   if ((i2 | 0) < 0) {
    i1 = -1;
    break;
   }
   i3 = HEAP32[i23 >> 2] | 0;
   i12 = i6;
   i11 = i2;
  }
  do if ((HEAP8[i3 >> 0] | 0) == 46) {
   i2 = i3 + 1 | 0;
   if ((HEAP8[i2 >> 0] | 0) != 42) {
    HEAP32[i23 >> 2] = i2;
    i10 = _getint(i23) | 0;
    i2 = HEAP32[i23 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[i3 + 2 >> 0] | 0) | 0) {
    i2 = HEAP32[i23 >> 2] | 0;
    if ((HEAP8[i2 + 3 >> 0] | 0) == 36) {
     i10 = i2 + 2 | 0;
     HEAP32[i28 + ((HEAP8[i10 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i10 = HEAP32[i26 + ((HEAP8[i10 >> 0] | 0) + -48 << 3) >> 2] | 0;
     i2 = i2 + 4 | 0;
     HEAP32[i23 >> 2] = i2;
     break;
    }
   }
   if (i12 | 0) {
    i1 = -1;
    break L1;
   }
   if (i18) {
    i10 = (HEAP32[i25 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i3 = HEAP32[i10 >> 2] | 0;
    HEAP32[i25 >> 2] = i10 + 4;
   } else i3 = 0;
   i2 = (HEAP32[i23 >> 2] | 0) + 2 | 0;
   HEAP32[i23 >> 2] = i2;
   i10 = i3;
  } else {
   i2 = i3;
   i10 = -1;
  } while (0);
  i8 = 0;
  while (1) {
   if (((HEAP8[i2 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    i1 = -1;
    break L1;
   }
   i3 = i2;
   i2 = i2 + 1 | 0;
   HEAP32[i23 >> 2] = i2;
   i3 = HEAP8[(HEAP8[i3 >> 0] | 0) + -65 + (30048 + (i8 * 58 | 0)) >> 0] | 0;
   i6 = i3 & 255;
   if ((i6 + -1 | 0) >>> 0 >= 8) break; else i8 = i6;
  }
  if (!(i3 << 24 >> 24)) {
   i1 = -1;
   break;
  }
  i4 = (i7 | 0) > -1;
  do if (i3 << 24 >> 24 == 19) if (i4) {
   i1 = -1;
   break L1;
  } else i13 = 54; else {
   if (i4) {
    HEAP32[i28 + (i7 << 2) >> 2] = i6;
    i6 = i26 + (i7 << 3) | 0;
    i7 = HEAP32[i6 + 4 >> 2] | 0;
    i13 = i20;
    HEAP32[i13 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i13 + 4 >> 2] = i7;
    i13 = 54;
    break;
   }
   if (!i18) {
    i1 = 0;
    break L1;
   }
   _pop_arg(i20, i6, i25, i27);
   i2 = HEAP32[i23 >> 2] | 0;
   i13 = 55;
  } while (0);
  if ((i13 | 0) == 54) {
   i13 = 0;
   if (i18) i13 = 55; else i2 = 0;
  }
  L77 : do if ((i13 | 0) == 55) {
   i13 = 0;
   i4 = HEAP8[i2 + -1 >> 0] | 0;
   i4 = (i8 | 0) != 0 & (i4 & 15 | 0) == 3 ? i4 & -33 : i4;
   i2 = i5 & -65537;
   i7 = (i5 & 8192 | 0) == 0 ? i5 : i2;
   L79 : do switch (i4 | 0) {
   case 110:
    switch ((i8 & 255) << 24 >> 24) {
    case 0:
     {
      HEAP32[HEAP32[i20 >> 2] >> 2] = i1;
      i2 = 0;
      break L77;
     }
    case 1:
     {
      HEAP32[HEAP32[i20 >> 2] >> 2] = i1;
      i2 = 0;
      break L77;
     }
    case 2:
     {
      i2 = HEAP32[i20 >> 2] | 0;
      HEAP32[i2 >> 2] = i1;
      HEAP32[i2 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
      i2 = 0;
      break L77;
     }
    case 3:
     {
      HEAP16[HEAP32[i20 >> 2] >> 1] = i1;
      i2 = 0;
      break L77;
     }
    case 4:
     {
      HEAP8[HEAP32[i20 >> 2] >> 0] = i1;
      i2 = 0;
      break L77;
     }
    case 6:
     {
      HEAP32[HEAP32[i20 >> 2] >> 2] = i1;
      i2 = 0;
      break L77;
     }
    case 7:
     {
      i2 = HEAP32[i20 >> 2] | 0;
      HEAP32[i2 >> 2] = i1;
      HEAP32[i2 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
      i2 = 0;
      break L77;
     }
    default:
     {
      i2 = 0;
      break L77;
     }
    }
   case 112:
    {
     i2 = i7 | 8;
     i3 = i10 >>> 0 > 8 ? i10 : 8;
     i4 = 120;
     i13 = 67;
     break;
    }
   case 88:
   case 120:
    {
     i2 = i7;
     i3 = i10;
     i13 = 67;
     break;
    }
   case 111:
    {
     i5 = i20;
     i5 = _fmt_o(HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, i14) | 0;
     i3 = i17 - i5 | 0;
     i2 = i7;
     i3 = (i7 & 8 | 0) == 0 | (i10 | 0) > (i3 | 0) ? i10 : i3 + 1 | 0;
     i8 = 0;
     i6 = 59256;
     i13 = 73;
     break;
    }
   case 105:
   case 100:
    {
     i3 = i20;
     i2 = HEAP32[i3 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     if ((i3 | 0) < 0) {
      i2 = _i64Subtract(0, 0, i2 | 0, i3 | 0) | 0;
      i3 = getTempRet0() | 0;
      i4 = i20;
      HEAP32[i4 >> 2] = i2;
      HEAP32[i4 + 4 >> 2] = i3;
      i4 = 1;
      i6 = 59256;
      i13 = 72;
      break L79;
     } else {
      i4 = (i7 & 2049 | 0) != 0 & 1;
      i6 = (i7 & 2048 | 0) == 0 ? ((i7 & 1 | 0) == 0 ? 59256 : 59258) : 59257;
      i13 = 72;
      break L79;
     }
    }
   case 117:
    {
     i3 = i20;
     i2 = HEAP32[i3 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     i4 = 0;
     i6 = 59256;
     i13 = 72;
     break;
    }
   case 99:
    {
     HEAP8[i15 >> 0] = HEAP32[i20 >> 2];
     i9 = i15;
     i7 = i2;
     i5 = 1;
     i4 = 0;
     i3 = 59256;
     i2 = i17;
     break;
    }
   case 115:
    {
     i6 = HEAP32[i20 >> 2] | 0;
     i6 = (i6 | 0) == 0 ? 59266 : i6;
     i8 = _memchr(i6, 0, i10) | 0;
     i30 = (i8 | 0) == 0;
     i9 = i6;
     i7 = i2;
     i5 = i30 ? i10 : i8 - i6 | 0;
     i4 = 0;
     i3 = 59256;
     i2 = i30 ? i6 + i10 | 0 : i8;
     break;
    }
   case 67:
    {
     HEAP32[i24 >> 2] = HEAP32[i20 >> 2];
     HEAP32[i16 >> 2] = 0;
     HEAP32[i20 >> 2] = i24;
     i5 = -1;
     i13 = 79;
     break;
    }
   case 83:
    {
     if (!i10) {
      _pad(i21, 32, i11, 0, i7);
      i2 = 0;
      i13 = 89;
     } else {
      i5 = i10;
      i13 = 79;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     i2 = FUNCTION_TABLE_iidiiii[i22 & 1](i21, +HEAPF64[i20 >> 3], i11, i10, i7, i4) | 0;
     break L77;
    }
   default:
    {
     i5 = i10;
     i4 = 0;
     i3 = 59256;
     i2 = i17;
    }
   } while (0);
   L102 : do if ((i13 | 0) == 67) {
    i5 = i20;
    i5 = _fmt_x(HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, i14, i4 & 32) | 0;
    i6 = i20;
    i6 = (i2 & 8 | 0) == 0 | (HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[i6 + 4 >> 2] | 0) == 0;
    i8 = i6 ? 0 : 2;
    i6 = i6 ? 59256 : 59256 + (i4 >>> 4) | 0;
    i13 = 73;
   } else if ((i13 | 0) == 72) {
    i5 = _fmt_u(i2, i3, i14) | 0;
    i2 = i7;
    i3 = i10;
    i8 = i4;
    i13 = 73;
   } else if ((i13 | 0) == 79) {
    i13 = 0;
    i2 = 0;
    i6 = HEAP32[i20 >> 2] | 0;
    while (1) {
     i3 = HEAP32[i6 >> 2] | 0;
     if (!i3) break;
     i3 = _wctomb(i19, i3) | 0;
     i4 = (i3 | 0) < 0;
     if (i4 | i3 >>> 0 > (i5 - i2 | 0) >>> 0) {
      i13 = 83;
      break;
     }
     i2 = i3 + i2 | 0;
     if (i5 >>> 0 > i2 >>> 0) i6 = i6 + 4 | 0; else break;
    }
    if ((i13 | 0) == 83) {
     i13 = 0;
     if (i4) {
      i1 = -1;
      break L1;
     }
    }
    _pad(i21, 32, i11, i2, i7);
    if (!i2) {
     i2 = 0;
     i13 = 89;
    } else {
     i4 = 0;
     i5 = HEAP32[i20 >> 2] | 0;
     while (1) {
      i3 = HEAP32[i5 >> 2] | 0;
      if (!i3) {
       i13 = 89;
       break L102;
      }
      i3 = _wctomb(i19, i3) | 0;
      i4 = i3 + i4 | 0;
      if ((i4 | 0) > (i2 | 0)) {
       i13 = 89;
       break L102;
      }
      _out(i21, i19, i3);
      if (i4 >>> 0 >= i2 >>> 0) {
       i13 = 89;
       break;
      } else i5 = i5 + 4 | 0;
     }
    }
   } while (0);
   if ((i13 | 0) == 73) {
    i13 = 0;
    i4 = i20;
    i4 = (HEAP32[i4 >> 2] | 0) != 0 | (HEAP32[i4 + 4 >> 2] | 0) != 0;
    i30 = (i3 | 0) != 0 | i4;
    i4 = i17 - i5 + ((i4 ^ 1) & 1) | 0;
    i9 = i30 ? i5 : i14;
    i7 = (i3 | 0) > -1 ? i2 & -65537 : i2;
    i5 = i30 ? ((i3 | 0) > (i4 | 0) ? i3 : i4) : 0;
    i4 = i8;
    i3 = i6;
    i2 = i17;
   } else if ((i13 | 0) == 89) {
    i13 = 0;
    _pad(i21, 32, i11, i2, i7 ^ 8192);
    i2 = (i11 | 0) > (i2 | 0) ? i11 : i2;
    break;
   }
   i10 = i2 - i9 | 0;
   i8 = (i5 | 0) < (i10 | 0) ? i10 : i5;
   i30 = i8 + i4 | 0;
   i2 = (i11 | 0) < (i30 | 0) ? i30 : i11;
   _pad(i21, 32, i2, i30, i7);
   _out(i21, i3, i4);
   _pad(i21, 48, i2, i30, i7 ^ 65536);
   _pad(i21, 48, i8, i10, 0);
   _out(i21, i9, i10);
   _pad(i21, 32, i2, i30, i7 ^ 8192);
  } while (0);
  i5 = i12;
 }
 L123 : do if ((i13 | 0) == 92) if (!i21) if (!i5) i1 = 0; else {
  i1 = 1;
  while (1) {
   i2 = HEAP32[i28 + (i1 << 2) >> 2] | 0;
   if (!i2) break;
   _pop_arg(i26 + (i1 << 3) | 0, i2, i25, i27);
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= 10) {
    i1 = 1;
    break L123;
   }
  }
  while (1) {
   if (HEAP32[i28 + (i1 << 2) >> 2] | 0) {
    i1 = -1;
    break L123;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= 10) {
    i1 = 1;
    break;
   }
  }
 } while (0);
 STACKTOP = i29;
 return i1 | 0;
}

function _fmt_fp(i25, d5, i27, i11, i26, i18) {
 i25 = i25 | 0;
 d5 = +d5;
 i27 = i27 | 0;
 i11 = i11 | 0;
 i26 = i26 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i28 = 0;
 i12 = 0;
 i28 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 i4 = i1 + 32 | 0;
 i13 = i1 + 536 | 0;
 i24 = i1;
 i23 = i24;
 i3 = i1 + 540 | 0;
 HEAP32[i13 >> 2] = 0;
 i22 = i3 + 12 | 0;
 ___DOUBLE_BITS(d5) | 0;
 i1 = getTempRet0() | 0;
 if ((i1 | 0) < 0) {
  d5 = -d5;
  ___DOUBLE_BITS(d5) | 0;
  i1 = getTempRet0() | 0;
  i21 = 1;
  i20 = 59273;
 } else {
  i21 = (i26 & 2049 | 0) != 0 & 1;
  i20 = (i26 & 2048 | 0) == 0 ? ((i26 & 1 | 0) == 0 ? 59274 : 59279) : 59276;
 }
 do if (0 == 0 & (i1 & 2146435072 | 0) == 2146435072) {
  i24 = (i18 & 32 | 0) != 0;
  i1 = i21 + 3 | 0;
  _pad(i25, 32, i27, i1, i26 & -65537);
  _out(i25, i20, i21);
  _out(i25, d5 != d5 | 0.0 != 0.0 ? (i24 ? 59319 : 59300) : i24 ? 59292 : 59296, 3);
  _pad(i25, 32, i27, i1, i26 ^ 8192);
 } else {
  d5 = +_frexp(d5, i13) * 2.0;
  i1 = d5 != 0.0;
  if (i1) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
  i15 = i18 | 32;
  if ((i15 | 0) == 97) {
   i8 = i18 & 32;
   i10 = (i8 | 0) == 0 ? i20 : i20 + 9 | 0;
   i9 = i21 | 2;
   i1 = 12 - i11 | 0;
   do if (!(i11 >>> 0 > 11 | (i1 | 0) == 0)) {
    d6 = 8.0;
    do {
     i1 = i1 + -1 | 0;
     d6 = d6 * 16.0;
    } while ((i1 | 0) != 0);
    if ((HEAP8[i10 >> 0] | 0) == 45) {
     d5 = -(d6 + (-d5 - d6));
     break;
    } else {
     d5 = d5 + d6 - d6;
     break;
    }
   } while (0);
   i2 = HEAP32[i13 >> 2] | 0;
   i1 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i1 = _fmt_u(i1, ((i1 | 0) < 0) << 31 >> 31, i22) | 0;
   if ((i1 | 0) == (i22 | 0)) {
    i1 = i3 + 11 | 0;
    HEAP8[i1 >> 0] = 48;
   }
   HEAP8[i1 + -1 >> 0] = (i2 >> 31 & 2) + 43;
   i7 = i1 + -2 | 0;
   HEAP8[i7 >> 0] = i18 + 15;
   i2 = (i11 | 0) < 1;
   i3 = (i26 & 8 | 0) == 0;
   i1 = i24;
   while (1) {
    i21 = ~~d5;
    i4 = i1 + 1 | 0;
    HEAP8[i1 >> 0] = i8 | HEAPU8[30512 + i21 >> 0];
    d5 = (d5 - +(i21 | 0)) * 16.0;
    if ((i4 - i23 | 0) == 1) if (!(i3 & (i2 & d5 == 0.0))) {
     HEAP8[i4 >> 0] = 46;
     i4 = i1 + 2 | 0;
    }
    if (!(d5 != 0.0)) break; else i1 = i4;
   }
   if (!i11) i12 = 25; else if ((-2 - i23 + i4 | 0) < (i11 | 0)) {
    i2 = i22;
    i3 = i7;
    i1 = i11 + 2 + i2 - i3 | 0;
   } else i12 = 25;
   if ((i12 | 0) == 25) {
    i2 = i22;
    i3 = i7;
    i1 = i2 - i23 - i3 + i4 | 0;
   }
   i22 = i1 + i9 | 0;
   _pad(i25, 32, i27, i22, i26);
   _out(i25, i10, i9);
   _pad(i25, 48, i27, i22, i26 ^ 65536);
   i23 = i4 - i23 | 0;
   _out(i25, i24, i23);
   i24 = i2 - i3 | 0;
   _pad(i25, 48, i1 - (i23 + i24) | 0, 0, 0);
   _out(i25, i7, i24);
   _pad(i25, 32, i27, i22, i26 ^ 8192);
   i1 = i22;
   break;
  }
  i2 = (i11 | 0) < 0 ? 6 : i11;
  if (i1) {
   i3 = (HEAP32[i13 >> 2] | 0) + -28 | 0;
   HEAP32[i13 >> 2] = i3;
   d5 = d5 * 268435456.0;
  } else i3 = HEAP32[i13 >> 2] | 0;
  i19 = (i3 | 0) < 0 ? i4 : i4 + 288 | 0;
  i4 = i19;
  do {
   i17 = ~~d5 >>> 0;
   HEAP32[i4 >> 2] = i17;
   i4 = i4 + 4 | 0;
   d5 = (d5 - +(i17 >>> 0)) * 1.0e9;
  } while (d5 != 0.0);
  i17 = i19;
  if ((i3 | 0) > 0) {
   i1 = i19;
   do {
    i8 = (i3 | 0) < 29 ? i3 : 29;
    i3 = i4 + -4 | 0;
    if (i3 >>> 0 >= i1 >>> 0) {
     i7 = 0;
     do {
      i12 = _bitshift64Shl(HEAP32[i3 >> 2] | 0, 0, i8 | 0) | 0;
      i12 = _i64Add(i12 | 0, getTempRet0() | 0, i7 | 0, 0) | 0;
      i14 = getTempRet0() | 0;
      i7 = ___udivdi3(i12 | 0, i14 | 0, 1e9, 0) | 0;
      i16 = ___muldi3(i7 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      i16 = _i64Subtract(i12 | 0, i14 | 0, i16 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[i3 >> 2] = i16;
      i3 = i3 + -4 | 0;
     } while (i3 >>> 0 >= i1 >>> 0);
     if (i7) {
      i1 = i1 + -4 | 0;
      HEAP32[i1 >> 2] = i7;
     }
    }
    L57 : do if (i4 >>> 0 > i1 >>> 0) while (1) {
     i3 = i4 + -4 | 0;
     if (HEAP32[i3 >> 2] | 0) break L57;
     if (i3 >>> 0 > i1 >>> 0) i4 = i3; else {
      i4 = i3;
      break;
     }
    } while (0);
    i3 = (HEAP32[i13 >> 2] | 0) - i8 | 0;
    HEAP32[i13 >> 2] = i3;
   } while ((i3 | 0) > 0);
  } else i1 = i19;
  if ((i3 | 0) < 0) {
   i11 = ((i2 + 25 | 0) / 9 | 0) + 1 | 0;
   i12 = (i15 | 0) == 102;
   do {
    i10 = 0 - i3 | 0;
    i10 = (i10 | 0) < 9 ? i10 : 9;
    if (i1 >>> 0 < i4 >>> 0) {
     i8 = (1 << i10) + -1 | 0;
     i7 = 1e9 >>> i10;
     i9 = 0;
     i3 = i1;
     do {
      i16 = HEAP32[i3 >> 2] | 0;
      HEAP32[i3 >> 2] = (i16 >>> i10) + i9;
      i9 = Math_imul(i16 & i8, i7) | 0;
      i3 = i3 + 4 | 0;
     } while (i3 >>> 0 < i4 >>> 0);
     i1 = (HEAP32[i1 >> 2] | 0) == 0 ? i1 + 4 | 0 : i1;
     if (i9) {
      HEAP32[i4 >> 2] = i9;
      i4 = i4 + 4 | 0;
     }
    } else i1 = (HEAP32[i1 >> 2] | 0) == 0 ? i1 + 4 | 0 : i1;
    i3 = i12 ? i19 : i1;
    i4 = (i4 - i3 >> 2 | 0) > (i11 | 0) ? i3 + (i11 << 2) | 0 : i4;
    i3 = (HEAP32[i13 >> 2] | 0) + i10 | 0;
    HEAP32[i13 >> 2] = i3;
   } while ((i3 | 0) < 0);
   i12 = i4;
  } else i12 = i4;
  if (i1 >>> 0 < i12 >>> 0) {
   i3 = (i17 - i1 >> 2) * 9 | 0;
   i7 = HEAP32[i1 >> 2] | 0;
   if (i7 >>> 0 >= 10) {
    i4 = 10;
    do {
     i4 = i4 * 10 | 0;
     i3 = i3 + 1 | 0;
    } while (i7 >>> 0 >= i4 >>> 0);
   }
  } else i3 = 0;
  i13 = (i15 | 0) == 103;
  i14 = (i2 | 0) != 0;
  i4 = i2 - ((i15 | 0) == 102 ? 0 : i3) + ((i14 & i13) << 31 >> 31) | 0;
  if ((i4 | 0) < (((i12 - i17 >> 2) * 9 | 0) + -9 | 0)) {
   i16 = i4 + 9216 | 0;
   i4 = (i16 | 0) / 9 | 0;
   i11 = i19 + 4 + (i4 + -1024 << 2) | 0;
   i4 = i16 - (i4 * 9 | 0) | 0;
   if ((i4 | 0) < 8) {
    i7 = 10;
    while (1) {
     i7 = i7 * 10 | 0;
     if ((i4 | 0) < 7) i4 = i4 + 1 | 0; else break;
    }
   } else i7 = 10;
   i9 = HEAP32[i11 >> 2] | 0;
   i4 = (i9 >>> 0) / (i7 >>> 0) | 0;
   i10 = i9 - (Math_imul(i4, i7) | 0) | 0;
   i8 = (i11 + 4 | 0) == (i12 | 0);
   if (i8 & (i10 | 0) == 0) i4 = i11; else {
    d6 = (i4 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    i16 = i7 >>> 1;
    d5 = i10 >>> 0 < i16 >>> 0 ? .5 : i8 & (i10 | 0) == (i16 | 0) ? 1.0 : 1.5;
    if (i21) {
     i16 = (HEAP8[i20 >> 0] | 0) == 45;
     d6 = i16 ? -d6 : d6;
     d5 = i16 ? -d5 : d5;
    }
    i4 = i9 - i10 | 0;
    HEAP32[i11 >> 2] = i4;
    if (d6 + d5 != d6) {
     i16 = i4 + i7 | 0;
     HEAP32[i11 >> 2] = i16;
     if (i16 >>> 0 > 999999999) {
      i3 = i11;
      while (1) {
       i4 = i3 + -4 | 0;
       HEAP32[i3 >> 2] = 0;
       if (i4 >>> 0 < i1 >>> 0) {
        i1 = i1 + -4 | 0;
        HEAP32[i1 >> 2] = 0;
       }
       i16 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
       HEAP32[i4 >> 2] = i16;
       if (i16 >>> 0 > 999999999) i3 = i4; else break;
      }
     } else i4 = i11;
     i3 = (i17 - i1 >> 2) * 9 | 0;
     i8 = HEAP32[i1 >> 2] | 0;
     if (i8 >>> 0 >= 10) {
      i7 = 10;
      do {
       i7 = i7 * 10 | 0;
       i3 = i3 + 1 | 0;
      } while (i8 >>> 0 >= i7 >>> 0);
     }
    } else i4 = i11;
   }
   i15 = i4 + 4 | 0;
   i16 = i1;
   i1 = i12 >>> 0 > i15 >>> 0 ? i15 : i12;
  } else {
   i16 = i1;
   i1 = i12;
  }
  i10 = 0 - i3 | 0;
  L109 : do if (i1 >>> 0 > i16 >>> 0) while (1) {
   i4 = i1 + -4 | 0;
   if (HEAP32[i4 >> 2] | 0) {
    i12 = 1;
    i15 = i1;
    break L109;
   }
   if (i4 >>> 0 > i16 >>> 0) i1 = i4; else {
    i12 = 0;
    i15 = i4;
    break;
   }
  } else {
   i12 = 0;
   i15 = i1;
  } while (0);
  do if (i13) {
   i1 = i2 + ((i14 ^ 1) & 1) | 0;
   if ((i1 | 0) > (i3 | 0) & (i3 | 0) > -5) {
    i2 = i1 + -1 - i3 | 0;
    i8 = i18 + -1 | 0;
   } else {
    i2 = i1 + -1 | 0;
    i8 = i18 + -2 | 0;
   }
   if (!(i26 & 8)) {
    if (i12) {
     i1 = HEAP32[i15 + -4 >> 2] | 0;
     if (!i1) i4 = 9; else if (!((i1 >>> 0) % 10 | 0)) {
      i7 = 10;
      i4 = 0;
      do {
       i7 = i7 * 10 | 0;
       i4 = i4 + 1 | 0;
      } while (!((i1 >>> 0) % (i7 >>> 0) | 0 | 0));
     } else i4 = 0;
    } else i4 = 9;
    i1 = ((i15 - i17 >> 2) * 9 | 0) + -9 | 0;
    if ((i8 | 32 | 0) == 102) {
     i18 = i1 - i4 | 0;
     i18 = (i18 | 0) > 0 ? i18 : 0;
     i2 = (i2 | 0) < (i18 | 0) ? i2 : i18;
     break;
    } else {
     i18 = i1 + i3 - i4 | 0;
     i18 = (i18 | 0) > 0 ? i18 : 0;
     i2 = (i2 | 0) < (i18 | 0) ? i2 : i18;
     break;
    }
   }
  } else i8 = i18; while (0);
  i11 = (i2 | 0) != 0;
  i7 = i11 ? 1 : i26 >>> 3 & 1;
  i9 = (i8 | 32 | 0) == 102;
  if (i9) {
   i14 = 0;
   i1 = (i3 | 0) > 0 ? i3 : 0;
  } else {
   i1 = (i3 | 0) < 0 ? i10 : i3;
   i1 = _fmt_u(i1, ((i1 | 0) < 0) << 31 >> 31, i22) | 0;
   i4 = i22;
   if ((i4 - i1 | 0) < 2) do {
    i1 = i1 + -1 | 0;
    HEAP8[i1 >> 0] = 48;
   } while ((i4 - i1 | 0) < 2);
   HEAP8[i1 + -1 >> 0] = (i3 >> 31 & 2) + 43;
   i1 = i1 + -2 | 0;
   HEAP8[i1 >> 0] = i8;
   i14 = i1;
   i1 = i4 - i1 | 0;
  }
  i1 = i21 + 1 + i2 + i7 + i1 | 0;
  _pad(i25, 32, i27, i1, i26);
  _out(i25, i20, i21);
  _pad(i25, 48, i27, i1, i26 ^ 65536);
  if (i9) {
   i8 = i16 >>> 0 > i19 >>> 0 ? i19 : i16;
   i10 = i24 + 9 | 0;
   i9 = i10;
   i7 = i24 + 8 | 0;
   i4 = i8;
   do {
    i3 = _fmt_u(HEAP32[i4 >> 2] | 0, 0, i10) | 0;
    if ((i4 | 0) == (i8 | 0)) {
     if ((i3 | 0) == (i10 | 0)) {
      HEAP8[i7 >> 0] = 48;
      i3 = i7;
     }
    } else if (i3 >>> 0 > i24 >>> 0) {
     _memset(i24 | 0, 48, i3 - i23 | 0) | 0;
     do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
    }
    _out(i25, i3, i9 - i3 | 0);
    i4 = i4 + 4 | 0;
   } while (i4 >>> 0 <= i19 >>> 0);
   if (!((i26 & 8 | 0) == 0 & (i11 ^ 1))) _out(i25, 59304, 1);
   if (i4 >>> 0 < i15 >>> 0 & (i2 | 0) > 0) while (1) {
    i3 = _fmt_u(HEAP32[i4 >> 2] | 0, 0, i10) | 0;
    if (i3 >>> 0 > i24 >>> 0) {
     _memset(i24 | 0, 48, i3 - i23 | 0) | 0;
     do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
    }
    _out(i25, i3, (i2 | 0) < 9 ? i2 : 9);
    i4 = i4 + 4 | 0;
    i3 = i2 + -9 | 0;
    if (!(i4 >>> 0 < i15 >>> 0 & (i2 | 0) > 9)) {
     i2 = i3;
     break;
    } else i2 = i3;
   }
   _pad(i25, 48, i2 + 9 | 0, 9, 0);
  } else {
   i11 = i12 ? i15 : i16 + 4 | 0;
   if (i16 >>> 0 < i11 >>> 0 & (i2 | 0) > -1) {
    i10 = i24 + 9 | 0;
    i13 = (i26 & 8 | 0) == 0;
    i12 = i10;
    i7 = 0 - i23 | 0;
    i9 = i24 + 8 | 0;
    i8 = i16;
    do {
     i3 = _fmt_u(HEAP32[i8 >> 2] | 0, 0, i10) | 0;
     if ((i3 | 0) == (i10 | 0)) {
      HEAP8[i9 >> 0] = 48;
      i3 = i9;
     }
     do if ((i8 | 0) == (i16 | 0)) {
      i4 = i3 + 1 | 0;
      _out(i25, i3, 1);
      if (i13 & (i2 | 0) < 1) {
       i3 = i4;
       break;
      }
      _out(i25, 59304, 1);
      i3 = i4;
     } else {
      if (i3 >>> 0 <= i24 >>> 0) break;
      _memset(i24 | 0, 48, i3 + i7 | 0) | 0;
      do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
     } while (0);
     i23 = i12 - i3 | 0;
     _out(i25, i3, (i2 | 0) > (i23 | 0) ? i23 : i2);
     i2 = i2 - i23 | 0;
     i8 = i8 + 4 | 0;
    } while (i8 >>> 0 < i11 >>> 0 & (i2 | 0) > -1);
   }
   _pad(i25, 48, i2 + 18 | 0, 18, 0);
   _out(i25, i14, i22 - i14 | 0);
  }
  _pad(i25, 32, i27, i1, i26 ^ 8192);
 } while (0);
 STACKTOP = i28;
 return ((i1 | 0) < (i27 | 0) ? i27 : i1) | 0;
}

function _decfloat(i23, i3, i26, i25, i24, i20) {
 i23 = i23 | 0;
 i3 = i3 | 0;
 i26 = i26 | 0;
 i25 = i25 | 0;
 i24 = i24 | 0;
 i20 = i20 | 0;
 var d1 = 0.0, i2 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0;
 i18 = 0;
 i30 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 i27 = i2;
 i28 = i25 + i26 | 0;
 i29 = 0 - i28 | 0;
 i21 = i23 + 4 | 0;
 i22 = i23 + 104 | 0;
 i5 = 0;
 L1 : while (1) {
  switch (i3 | 0) {
  case 46:
   {
    i18 = 7;
    break L1;
   }
  case 48:
   break;
  default:
   {
    i4 = 0;
    i2 = 0;
    i9 = 0;
    break L1;
   }
  }
  i2 = HEAP32[i21 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
   HEAP32[i21 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i23) | 0;
  i3 = i2;
  i5 = 1;
 }
 if ((i18 | 0) == 7) {
  i2 = HEAP32[i21 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
   HEAP32[i21 >> 2] = i2 + 1;
   i3 = HEAPU8[i2 >> 0] | 0;
  } else i3 = ___shgetc(i23) | 0;
  if ((i3 | 0) == 48) {
   i3 = 0;
   i2 = 0;
   while (1) {
    i4 = _i64Add(i3 | 0, i2 | 0, -1, -1) | 0;
    i2 = getTempRet0() | 0;
    i3 = HEAP32[i21 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
     HEAP32[i21 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
    } else i3 = ___shgetc(i23) | 0;
    if ((i3 | 0) == 48) i3 = i4; else {
     i5 = 1;
     i9 = 1;
     break;
    }
   }
  } else {
   i4 = 0;
   i2 = 0;
   i9 = 1;
  }
 }
 HEAP32[i27 >> 2] = 0;
 i14 = i3 + -48 | 0;
 i7 = (i3 | 0) == 46;
 L22 : do if (i7 | i14 >>> 0 < 10) {
  i19 = i27 + 496 | 0;
  i18 = i4;
  i17 = 0;
  i12 = 0;
  i15 = i7;
  i8 = 0;
  i4 = 0;
  i7 = 0;
  L24 : while (1) {
   do if (i15) if (!i9) {
    i18 = i17;
    i2 = i12;
    i9 = 1;
   } else break L24; else {
    i15 = _i64Add(i17 | 0, i12 | 0, 1, 0) | 0;
    i12 = getTempRet0() | 0;
    i16 = (i3 | 0) != 48;
    if ((i4 | 0) >= 125) {
     if (!i16) {
      i17 = i15;
      break;
     }
     HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 1;
     i17 = i15;
     break;
    }
    i5 = i27 + (i4 << 2) | 0;
    if (!i8) i3 = i14; else i3 = i3 + -48 + ((HEAP32[i5 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[i5 >> 2] = i3;
    i8 = i8 + 1 | 0;
    i14 = (i8 | 0) == 9;
    i17 = i15;
    i5 = 1;
    i8 = i14 ? 0 : i8;
    i4 = i4 + (i14 & 1) | 0;
    i7 = i16 ? i15 : i7;
   } while (0);
   i3 = HEAP32[i21 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
    HEAP32[i21 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i23) | 0;
   i14 = i3 + -48 | 0;
   i15 = (i3 | 0) == 46;
   if (!(i15 | i14 >>> 0 < 10)) {
    i14 = i17;
    i15 = i18;
    i18 = 31;
    break L22;
   }
  }
  i14 = i17;
  i9 = i18;
  i3 = (i5 | 0) != 0;
  i18 = 39;
 } else {
  i14 = 0;
  i15 = i4;
  i12 = 0;
  i8 = 0;
  i4 = 0;
  i7 = 0;
  i18 = 31;
 } while (0);
 do if ((i18 | 0) == 31) {
  i19 = (i9 | 0) == 0;
  i9 = i19 ? i14 : i15;
  i2 = i19 ? i12 : i2;
  i15 = (i5 | 0) != 0;
  if (!(i15 & (i3 | 32 | 0) == 101)) if ((i3 | 0) > -1) {
   i3 = i15;
   i18 = 39;
   break;
  } else {
   i5 = i12;
   i3 = i15;
   i18 = 41;
   break;
  }
  i5 = _scanexp(i23, i20) | 0;
  i3 = getTempRet0() | 0;
  if ((i5 | 0) == 0 & (i3 | 0) == -2147483648) {
   if (!i20) {
    ___shlim(i23, 0, 0);
    d1 = 0.0;
    break;
   }
   if (!(HEAP32[i22 >> 2] | 0)) {
    i5 = 0;
    i3 = 0;
   } else {
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
    i5 = 0;
    i3 = 0;
   }
  }
  i15 = _i64Add(i5 | 0, i3 | 0, i9 | 0, i2 | 0) | 0;
  i9 = i14;
  i2 = getTempRet0() | 0;
  i5 = i12;
  i18 = 43;
 } while (0);
 if ((i18 | 0) == 39) if (!(HEAP32[i22 >> 2] | 0)) {
  i5 = i12;
  i18 = 41;
 } else {
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
  if (i3) {
   i15 = i9;
   i9 = i14;
   i5 = i12;
   i18 = 43;
  } else i18 = 42;
 }
 if ((i18 | 0) == 41) if (i3) {
  i15 = i9;
  i9 = i14;
  i18 = 43;
 } else i18 = 42;
 do if ((i18 | 0) == 42) {
  i29 = ___errno_location() | 0;
  HEAP32[i29 >> 2] = 28;
  ___shlim(i23, 0, 0);
  d1 = 0.0;
 } else if ((i18 | 0) == 43) {
  i3 = HEAP32[i27 >> 2] | 0;
  if (!i3) {
   d1 = +(i24 | 0) * 0.0;
   break;
  }
  if (((i5 | 0) < 0 | (i5 | 0) == 0 & i9 >>> 0 < 10) & ((i15 | 0) == (i9 | 0) & (i2 | 0) == (i5 | 0))) if ((i26 | 0) > 30 | (i3 >>> i26 | 0) == 0) {
   d1 = +(i24 | 0) * +(i3 >>> 0);
   break;
  }
  i23 = (i25 | 0) / -2 | 0;
  i22 = ((i23 | 0) < 0) << 31 >> 31;
  if ((i2 | 0) > (i22 | 0) | (i2 | 0) == (i22 | 0) & i15 >>> 0 > i23 >>> 0) {
   i29 = ___errno_location() | 0;
   HEAP32[i29 >> 2] = 68;
   d1 = +(i24 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i23 = i25 + -106 | 0;
  i22 = ((i23 | 0) < 0) << 31 >> 31;
  if ((i2 | 0) < (i22 | 0) | (i2 | 0) == (i22 | 0) & i15 >>> 0 < i23 >>> 0) {
   i29 = ___errno_location() | 0;
   HEAP32[i29 >> 2] = 68;
   d1 = +(i24 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (i8) {
   if ((i8 | 0) < 9) {
    i5 = i27 + (i4 << 2) | 0;
    i2 = i8;
    i3 = HEAP32[i5 >> 2] | 0;
    while (1) {
     i3 = i3 * 10 | 0;
     if ((i2 | 0) >= 8) break; else i2 = i2 + 1 | 0;
    }
    HEAP32[i5 >> 2] = i3;
   }
   i4 = i4 + 1 | 0;
  }
  if ((i7 | 0) < 9) if ((i7 | 0) <= (i15 | 0) & (i15 | 0) < 18) {
   if ((i15 | 0) == 9) {
    d1 = +(i24 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0);
    break;
   }
   if ((i15 | 0) < 9) {
    d1 = +(i24 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0) / +(HEAP32[30528 + (8 - i15 << 2) >> 2] | 0);
    break;
   }
   i23 = i26 + 27 + (Math_imul(i15, -3) | 0) | 0;
   i2 = HEAP32[i27 >> 2] | 0;
   if ((i23 | 0) > 30 | (i2 >>> i23 | 0) == 0) {
    d1 = +(i24 | 0) * +(i2 >>> 0) * +(HEAP32[30528 + (i15 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  i2 = (i15 | 0) % 9 | 0;
  if (!i2) {
   i5 = 0;
   i3 = i15;
  } else {
   i12 = (i15 | 0) > -1 ? i2 : i2 + 9 | 0;
   i5 = HEAP32[30528 + (8 - i12 << 2) >> 2] | 0;
   if (!i4) {
    i3 = 0;
    i2 = i15;
    i4 = 0;
   } else {
    i8 = 1e9 / (i5 | 0) | 0;
    i3 = 0;
    i7 = 0;
    i9 = 0;
    i2 = i15;
    do {
     i21 = i27 + (i9 << 2) | 0;
     i22 = HEAP32[i21 >> 2] | 0;
     i23 = (i22 >>> 0) / (i5 >>> 0) | 0;
     i22 = i22 - (Math_imul(i23, i5) | 0) | 0;
     i23 = i23 + i7 | 0;
     HEAP32[i21 >> 2] = i23;
     i7 = Math_imul(i8, i22) | 0;
     i23 = (i9 | 0) == (i3 | 0) & (i23 | 0) == 0;
     i2 = i23 ? i2 + -9 | 0 : i2;
     i3 = i23 ? i3 + 1 & 127 : i3;
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) != (i4 | 0));
    if (i7) {
     HEAP32[i27 + (i4 << 2) >> 2] = i7;
     i4 = i4 + 1 | 0;
    }
   }
   i5 = i3;
   i3 = 9 - i12 + i2 | 0;
  }
  i2 = 0;
  L104 : while (1) {
   i16 = (i3 | 0) < 18;
   i17 = (i3 | 0) == 18;
   i15 = i27 + (i5 << 2) | 0;
   do {
    if (!i16) {
     if (!i17) break L104;
     if ((HEAP32[i15 >> 2] | 0) >>> 0 >= 9007199) {
      i3 = 18;
      break L104;
     }
    }
    i8 = 0;
    i7 = i4 + 127 | 0;
    while (1) {
     i12 = i7 & 127;
     i9 = i27 + (i12 << 2) | 0;
     i7 = _bitshift64Shl(HEAP32[i9 >> 2] | 0, 0, 29) | 0;
     i7 = _i64Add(i7 | 0, getTempRet0() | 0, i8 | 0, 0) | 0;
     i8 = getTempRet0() | 0;
     if (i8 >>> 0 > 0 | (i8 | 0) == 0 & i7 >>> 0 > 1e9) {
      i14 = ___udivdi3(i7 | 0, i8 | 0, 1e9, 0) | 0;
      i23 = ___muldi3(i14 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      i7 = _i64Subtract(i7 | 0, i8 | 0, i23 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
     } else i14 = 0;
     HEAP32[i9 >> 2] = i7;
     i23 = (i12 | 0) == (i5 | 0);
     i9 = (i12 | 0) != (i4 + 127 & 127 | 0) | i23 ? i4 : (i7 | 0) == 0 ? i12 : i4;
     if (i23) break; else {
      i8 = i14;
      i7 = i12 + -1 | 0;
      i4 = i9;
     }
    }
    i2 = i2 + -29 | 0;
   } while ((i14 | 0) == 0);
   i5 = i5 + 127 & 127;
   i7 = i9 + 127 & 127;
   i8 = i27 + ((i9 + 126 & 127) << 2) | 0;
   if ((i5 | 0) == (i9 | 0)) {
    HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | HEAP32[i27 + (i7 << 2) >> 2];
    i4 = i7;
   }
   HEAP32[i27 + (i5 << 2) >> 2] = i14;
   i3 = i3 + 9 | 0;
  }
  L123 : while (1) {
   i15 = i4 + 1 & 127;
   i16 = i27 + ((i4 + 127 & 127) << 2) | 0;
   while (1) {
    i9 = (i3 | 0) == 18;
    i14 = (i3 | 0) > 27 ? 9 : 1;
    i17 = i5;
    while (1) {
     i8 = 0;
     while (1) {
      i5 = i8 + i17 & 127;
      if ((i5 | 0) == (i4 | 0)) {
       i18 = 92;
       break;
      }
      i5 = HEAP32[i27 + (i5 << 2) >> 2] | 0;
      i7 = HEAP32[31776 + (i8 << 2) >> 2] | 0;
      if (i5 >>> 0 < i7 >>> 0) {
       i18 = 92;
       break;
      }
      if (i5 >>> 0 > i7 >>> 0) break;
      if ((i8 + 1 | 0) >>> 0 < 2) i8 = 1; else {
       i18 = 92;
       break;
      }
     }
     if ((i18 | 0) == 92) {
      i18 = 0;
      if (i9) break L123;
     }
     i2 = i14 + i2 | 0;
     if ((i17 | 0) == (i4 | 0)) i17 = i4; else break;
    }
    i12 = (1 << i14) + -1 | 0;
    i9 = 1e9 >>> i14;
    i5 = i17;
    i8 = 0;
    i7 = i17;
    do {
     i21 = i27 + (i7 << 2) | 0;
     i22 = HEAP32[i21 >> 2] | 0;
     i23 = (i22 >>> i14) + i8 | 0;
     HEAP32[i21 >> 2] = i23;
     i8 = Math_imul(i22 & i12, i9) | 0;
     i23 = (i7 | 0) == (i5 | 0) & (i23 | 0) == 0;
     i3 = i23 ? i3 + -9 | 0 : i3;
     i5 = i23 ? i5 + 1 & 127 : i5;
     i7 = i7 + 1 & 127;
    } while ((i7 | 0) != (i4 | 0));
    if (i8 | 0) {
     if ((i15 | 0) != (i5 | 0)) break;
     HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 1;
    }
   }
   HEAP32[i27 + (i4 << 2) >> 2] = i8;
   i4 = i15;
  }
  i7 = 0;
  d1 = 0.0;
  while (1) {
   i5 = i7 + i17 & 127;
   i3 = i4 + 1 & 127;
   if ((i5 | 0) == (i4 | 0)) HEAP32[i27 + (i3 + -1 << 2) >> 2] = 0; else i3 = i4;
   d1 = d1 * 1.0e9 + +((HEAP32[i27 + (i5 << 2) >> 2] | 0) >>> 0);
   i7 = i7 + 1 | 0;
   if ((i7 | 0) == 2) break; else i4 = i3;
  }
  d13 = +(i24 | 0);
  d6 = d1 * d13;
  i5 = i2 + 53 | 0;
  i9 = i5 - i25 | 0;
  i8 = (i9 | 0) < (i26 | 0);
  i7 = i8 ? ((i9 | 0) > 0 ? i9 : 0) : i26;
  if ((i7 | 0) < 53) {
   d31 = +_copysignl(+_scalbn(1.0, 105 - i7 | 0), d6);
   d10 = +_fmodl(d6, +_scalbn(1.0, 53 - i7 | 0));
   d11 = d31;
   d1 = d10;
   d10 = d31 + (d6 - d10);
  } else {
   d11 = 0.0;
   d1 = 0.0;
   d10 = d6;
  }
  i4 = i17 + 2 & 127;
  if ((i4 | 0) == (i3 | 0)) d6 = d1; else {
   i4 = HEAP32[i27 + (i4 << 2) >> 2] | 0;
   do if (i4 >>> 0 < 5e8) {
    if (!i4) if ((i17 + 3 & 127 | 0) == (i3 | 0)) break;
    d1 = d13 * .25 + d1;
   } else {
    if ((i4 | 0) != 5e8) {
     d1 = d13 * .75 + d1;
     break;
    }
    if ((i17 + 3 & 127 | 0) == (i3 | 0)) {
     d1 = d13 * .5 + d1;
     break;
    } else {
     d1 = d13 * .75 + d1;
     break;
    }
   } while (0);
   if ((53 - i7 | 0) > 1) if (+_fmodl(d1, 1.0) != 0.0) d6 = d1; else d6 = d1 + 1.0; else d6 = d1;
  }
  d1 = d10 + d6 - d11;
  do if ((i5 & 2147483647 | 0) > (-2 - i28 | 0)) {
   i3 = !(+Math_abs(+d1) >= 9007199254740992.0);
   i2 = i2 + ((i3 ^ 1) & 1) | 0;
   d1 = i3 ? d1 : d1 * .5;
   if ((i2 + 50 | 0) <= (i29 | 0)) if (!(d6 != 0.0 & (i8 & ((i7 | 0) != (i9 | 0) | i3)))) break;
   i29 = ___errno_location() | 0;
   HEAP32[i29 >> 2] = 68;
  } while (0);
  d1 = +_scalbnl(d1, i2);
 } while (0);
 STACKTOP = i30;
 return +d1;
}

function _drmp3_L3_huffman(i9, i3, i11, i25, i16) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 i25 = i25 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, f35 = f0, f36 = f0;
 i34 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i10 = i1 + 108 | 0;
 i32 = i1 + 104 | 0;
 i12 = i1 + 100 | 0;
 i26 = i1 + 96 | 0;
 i33 = i1 + 92 | 0;
 i23 = i1 + 88 | 0;
 i13 = i1 + 84 | 0;
 i2 = i1 + 80 | 0;
 i27 = i1 + 76 | 0;
 i5 = i1 + 72 | 0;
 i4 = i1 + 68 | 0;
 i24 = i1 + 64 | 0;
 i22 = i1 + 60 | 0;
 i6 = i1 + 56 | 0;
 i29 = i1 + 52 | 0;
 i28 = i1 + 48 | 0;
 i7 = i1 + 44 | 0;
 i19 = i1 + 40 | 0;
 i14 = i1 + 36 | 0;
 i30 = i1 + 32 | 0;
 i17 = i1 + 28 | 0;
 i20 = i1 + 24 | 0;
 i15 = i1 + 20 | 0;
 i31 = i1 + 16 | 0;
 i18 = i1 + 12 | 0;
 i21 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i32 >> 2] = i3;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i26 >> 2] = i25;
 HEAP32[i33 >> 2] = i16;
 HEAPF32[i23 >> 2] = Math_fround(0.0);
 HEAP32[i13 >> 2] = 0;
 HEAP32[i2 >> 2] = HEAPU16[(HEAP32[i12 >> 2] | 0) + 6 >> 1];
 HEAP32[i27 >> 2] = HEAP32[HEAP32[i12 >> 2] >> 2];
 HEAP32[i5 >> 2] = (HEAP32[HEAP32[i32 >> 2] >> 2] | 0) + ((HEAP32[(HEAP32[i32 >> 2] | 0) + 4 >> 2] | 0) / 8 | 0);
 i25 = HEAP32[i5 >> 2] | 0;
 HEAP32[i4 >> 2] = (((HEAPU8[HEAP32[i5 >> 2] >> 0] << 8) + (HEAPU8[i25 + 1 >> 0] | 0) << 8) + (HEAPU8[i25 + 2 >> 0] | 0) << 8) + (HEAPU8[i25 + 3 >> 0] | 0) << (HEAP32[(HEAP32[i32 >> 2] | 0) + 4 >> 2] & 7);
 HEAP32[i6 >> 2] = (HEAP32[(HEAP32[i32 >> 2] | 0) + 4 >> 2] & 7) - 8;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 4;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) <= 0) break;
  HEAP32[i29 >> 2] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 15 + (HEAP32[i13 >> 2] | 0) >> 0];
  i16 = (HEAP32[i12 >> 2] | 0) + 18 | 0;
  i25 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i25 + 1;
  HEAP32[i28 >> 2] = HEAPU8[i16 + i25 >> 0];
  HEAP32[i7 >> 2] = 16960 + (HEAP16[16896 + (HEAP32[i29 >> 2] << 1) >> 1] << 1);
  HEAP32[i19 >> 2] = HEAPU8[21296 + (HEAP32[i29 >> 2] | 0) >> 0];
  L4 : do if (HEAP32[i19 >> 2] | 0) do {
   i16 = HEAP32[i27 >> 2] | 0;
   HEAP32[i27 >> 2] = i16 + 1;
   HEAP32[i22 >> 2] = (HEAPU8[i16 >> 0] | 0) / 2 | 0;
   i16 = HEAP32[i22 >> 2] | 0;
   i25 = HEAP32[i2 >> 2] | 0;
   HEAP32[i24 >> 2] = (i25 | 0) > (i16 | 0) ? i16 | 0 : i25 | 0;
   i25 = HEAP32[i26 >> 2] | 0;
   HEAP32[i26 >> 2] = i25 + 4;
   f35 = Math_fround(HEAPF32[i25 >> 2]);
   HEAPF32[i23 >> 2] = f35;
   do {
    HEAP32[i30 >> 2] = 5;
    HEAP32[i17 >> 2] = HEAP16[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) >>> (32 - (HEAP32[i30 >> 2] | 0) | 0) << 1) >> 1];
    while (1) {
     if ((HEAP32[i17 >> 2] | 0) >= 0) break;
     HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << HEAP32[i30 >> 2];
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i30 >> 2] | 0);
     HEAP32[i30 >> 2] = HEAP32[i17 >> 2] & 7;
     HEAP32[i17 >> 2] = HEAP16[(HEAP32[i7 >> 2] | 0) + (((HEAP32[i4 >> 2] | 0) >>> (32 - (HEAP32[i30 >> 2] | 0) | 0)) - (HEAP32[i17 >> 2] >> 3) << 1) >> 1];
    }
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << (HEAP32[i17 >> 2] >> 8);
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i17 >> 2] >> 8);
    HEAP32[i14 >> 2] = 0;
    while (1) {
     if ((HEAP32[i14 >> 2] | 0) >= 2) break;
     HEAP32[i20 >> 2] = HEAP32[i17 >> 2] & 15;
     if ((HEAP32[i20 >> 2] | 0) == 15) {
      HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) >>> (32 - (HEAP32[i19 >> 2] | 0) | 0));
      HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << HEAP32[i19 >> 2];
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
      while (1) {
       if ((HEAP32[i6 >> 2] | 0) < 0) break;
       i25 = HEAP32[i5 >> 2] | 0;
       HEAP32[i5 >> 2] = i25 + 1;
       HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | HEAPU8[i25 >> 0] << HEAP32[i6 >> 2];
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - 8;
      }
      f35 = Math_fround(HEAPF32[i23 >> 2]);
      f35 = Math_fround(f35 * Math_fround(_drmp3_L3_pow_43(HEAP32[i20 >> 2] | 0)));
      f35 = Math_fround(f35 * Math_fround(((HEAP32[i4 >> 2] | 0) < 0 ? -1 : 1) | 0));
      HEAPF32[HEAP32[i10 >> 2] >> 2] = f35;
     } else {
      f35 = Math_fround(HEAPF32[21328 + (16 + (HEAP32[i20 >> 2] | 0) - ((HEAP32[i4 >> 2] | 0) >>> 31 << 4) << 2) >> 2]);
      f35 = Math_fround(f35 * Math_fround(HEAPF32[i23 >> 2]));
      HEAPF32[HEAP32[i10 >> 2] >> 2] = f35;
     }
     HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << (HEAP32[i20 >> 2] | 0 ? 1 : 0);
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i20 >> 2] | 0 ? 1 : 0);
     HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 4;
     HEAP32[i17 >> 2] = HEAP32[i17 >> 2] >> 4;
    }
    while (1) {
     if ((HEAP32[i6 >> 2] | 0) < 0) break;
     i25 = HEAP32[i5 >> 2] | 0;
     HEAP32[i5 >> 2] = i25 + 1;
     HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | HEAPU8[i25 >> 0] << HEAP32[i6 >> 2];
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - 8;
    }
    i25 = (HEAP32[i24 >> 2] | 0) + -1 | 0;
    HEAP32[i24 >> 2] = i25;
   } while ((i25 | 0) != 0);
   i25 = (HEAP32[i2 >> 2] | 0) - (HEAP32[i22 >> 2] | 0) | 0;
   HEAP32[i2 >> 2] = i25;
   if ((i25 | 0) <= 0) break L4;
   i25 = (HEAP32[i28 >> 2] | 0) + -1 | 0;
   HEAP32[i28 >> 2] = i25;
  } while ((i25 | 0) >= 0); else do {
   i16 = HEAP32[i27 >> 2] | 0;
   HEAP32[i27 >> 2] = i16 + 1;
   HEAP32[i22 >> 2] = (HEAPU8[i16 >> 0] | 0) / 2 | 0;
   i16 = HEAP32[i22 >> 2] | 0;
   i25 = HEAP32[i2 >> 2] | 0;
   HEAP32[i24 >> 2] = (i25 | 0) > (i16 | 0) ? i16 | 0 : i25 | 0;
   i25 = HEAP32[i26 >> 2] | 0;
   HEAP32[i26 >> 2] = i25 + 4;
   f35 = Math_fround(HEAPF32[i25 >> 2]);
   HEAPF32[i23 >> 2] = f35;
   do {
    HEAP32[i31 >> 2] = 5;
    HEAP32[i18 >> 2] = HEAP16[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) >>> (32 - (HEAP32[i31 >> 2] | 0) | 0) << 1) >> 1];
    while (1) {
     if ((HEAP32[i18 >> 2] | 0) >= 0) break;
     HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << HEAP32[i31 >> 2];
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i31 >> 2] | 0);
     HEAP32[i31 >> 2] = HEAP32[i18 >> 2] & 7;
     HEAP32[i18 >> 2] = HEAP16[(HEAP32[i7 >> 2] | 0) + (((HEAP32[i4 >> 2] | 0) >>> (32 - (HEAP32[i31 >> 2] | 0) | 0)) - (HEAP32[i18 >> 2] >> 3) << 1) >> 1];
    }
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << (HEAP32[i18 >> 2] >> 8);
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i18 >> 2] >> 8);
    HEAP32[i15 >> 2] = 0;
    while (1) {
     if ((HEAP32[i15 >> 2] | 0) >= 2) break;
     HEAP32[i21 >> 2] = HEAP32[i18 >> 2] & 15;
     f35 = Math_fround(HEAPF32[21328 + (16 + (HEAP32[i21 >> 2] | 0) - ((HEAP32[i4 >> 2] | 0) >>> 31 << 4) << 2) >> 2]);
     f35 = Math_fround(f35 * Math_fround(HEAPF32[i23 >> 2]));
     HEAPF32[HEAP32[i10 >> 2] >> 2] = f35;
     HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << (HEAP32[i21 >> 2] | 0 ? 1 : 0);
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i21 >> 2] | 0 ? 1 : 0);
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 4;
     HEAP32[i18 >> 2] = HEAP32[i18 >> 2] >> 4;
    }
    while (1) {
     if ((HEAP32[i6 >> 2] | 0) < 0) break;
     i25 = HEAP32[i5 >> 2] | 0;
     HEAP32[i5 >> 2] = i25 + 1;
     HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | HEAPU8[i25 >> 0] << HEAP32[i6 >> 2];
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - 8;
    }
    i25 = (HEAP32[i24 >> 2] | 0) + -1 | 0;
    HEAP32[i24 >> 2] = i25;
   } while ((i25 | 0) != 0);
   i25 = (HEAP32[i2 >> 2] | 0) - (HEAP32[i22 >> 2] | 0) | 0;
   HEAP32[i2 >> 2] = i25;
   if ((i25 | 0) <= 0) break L4;
   i25 = (HEAP32[i28 >> 2] | 0) + -1 | 0;
   HEAP32[i28 >> 2] = i25;
  } while ((i25 | 0) >= 0); while (0);
 }
 HEAP32[i22 >> 2] = 1 - (HEAP32[i2 >> 2] | 0);
 while (1) {
  HEAP32[i8 >> 2] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 26 >> 0] | 0 ? 21920 : 21936;
  HEAP32[i1 >> 2] = HEAPU8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) >>> 28) >> 0];
  if (!(HEAP32[i1 >> 2] & 8)) HEAP32[i1 >> 2] = HEAPU8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i1 >> 2] >> 3) + (HEAP32[i4 >> 2] << 4 >>> (32 - (HEAP32[i1 >> 2] & 3) | 0))) >> 0];
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << (HEAP32[i1 >> 2] & 7);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i1 >> 2] & 7);
  if ((((HEAP32[i5 >> 2] | 0) - (HEAP32[HEAP32[i32 >> 2] >> 2] | 0) << 3) - 24 + (HEAP32[i6 >> 2] | 0) | 0) > (HEAP32[i33 >> 2] | 0)) {
   i1 = 61;
   break;
  }
  i31 = (HEAP32[i22 >> 2] | 0) + -1 | 0;
  HEAP32[i22 >> 2] = i31;
  if (!i31) {
   i31 = HEAP32[i27 >> 2] | 0;
   HEAP32[i27 >> 2] = i31 + 1;
   HEAP32[i22 >> 2] = (HEAPU8[i31 >> 0] | 0) / 2 | 0;
   if (!(HEAP32[i22 >> 2] | 0)) {
    i1 = 61;
    break;
   }
   i31 = HEAP32[i26 >> 2] | 0;
   HEAP32[i26 >> 2] = i31 + 4;
   f35 = Math_fround(HEAPF32[i31 >> 2]);
   HEAPF32[i23 >> 2] = f35;
  }
  if (HEAP32[i1 >> 2] & 128 | 0) {
   f35 = Math_fround(HEAPF32[i23 >> 2]);
   f36 = Math_fround(-f35);
   HEAPF32[HEAP32[i10 >> 2] >> 2] = (HEAP32[i4 >> 2] | 0) < 0 ? f36 : f35;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << 1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  if (HEAP32[i1 >> 2] & 64 | 0) {
   f36 = Math_fround(HEAPF32[i23 >> 2]);
   f35 = Math_fround(-f36);
   HEAPF32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] = (HEAP32[i4 >> 2] | 0) < 0 ? f35 : f36;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << 1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  i31 = (HEAP32[i22 >> 2] | 0) + -1 | 0;
  HEAP32[i22 >> 2] = i31;
  if (!i31) {
   i31 = HEAP32[i27 >> 2] | 0;
   HEAP32[i27 >> 2] = i31 + 1;
   HEAP32[i22 >> 2] = (HEAPU8[i31 >> 0] | 0) / 2 | 0;
   if (!(HEAP32[i22 >> 2] | 0)) {
    i1 = 61;
    break;
   }
   i31 = HEAP32[i26 >> 2] | 0;
   HEAP32[i26 >> 2] = i31 + 4;
   f36 = Math_fround(HEAPF32[i31 >> 2]);
   HEAPF32[i23 >> 2] = f36;
  }
  if (HEAP32[i1 >> 2] & 32 | 0) {
   f36 = Math_fround(HEAPF32[i23 >> 2]);
   f35 = Math_fround(-f36);
   HEAPF32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = (HEAP32[i4 >> 2] | 0) < 0 ? f35 : f36;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << 1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  if (HEAP32[i1 >> 2] & 16 | 0) {
   f36 = Math_fround(HEAPF32[i23 >> 2]);
   f35 = Math_fround(-f36);
   HEAPF32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] = (HEAP32[i4 >> 2] | 0) < 0 ? f35 : f36;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << 1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) < 0) break;
   i31 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i31 + 1;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | HEAPU8[i31 >> 0] << HEAP32[i6 >> 2];
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - 8;
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 16;
 }
 if ((i1 | 0) == 61) {
  HEAP32[(HEAP32[i32 >> 2] | 0) + 4 >> 2] = HEAP32[i33 >> 2];
  STACKTOP = i34;
  return;
 }
}

function _ma_channel_router__do_routing(i4, i2, i3, i6, i5) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, f24 = f0;
 i23 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i16 = i1 + 88 | 0;
 i8 = i1 + 48 | 0;
 i18 = i1 + 84 | 0;
 i17 = i1 + 80 | 0;
 i10 = i1 + 76 | 0;
 i11 = i1 + 72 | 0;
 i12 = i1 + 40 | 0;
 i14 = i1 + 32 | 0;
 i15 = i1 + 24 | 0;
 i13 = i1 + 16 | 0;
 i19 = i1 + 68 | 0;
 i20 = i1 + 64 | 0;
 i21 = i1 + 60 | 0;
 i22 = i1 + 56 | 0;
 i9 = i1 + 8 | 0;
 i7 = i1;
 HEAP32[i16 >> 2] = i4;
 i4 = i8;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i18 >> 2] = i6;
 HEAP32[i17 >> 2] = i5;
 if (!(HEAP32[i16 >> 2] | 0)) ___assert_fail(43955, 36381, 30722, 44666);
 if (HEAP8[(HEAP32[i16 >> 2] | 0) + 4184 >> 0] & 1 | 0) ___assert_fail(44696, 36381, 30723, 44666);
 i2 = HEAP32[i16 >> 2] | 0;
 if ((HEAPU8[(HEAP32[i16 >> 2] | 0) + 4184 >> 0] | 0) >>> 1 & 1 | 0) {
  if ((HEAP32[i2 >> 2] | 0) != (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0)) ___assert_fail(44724, 36381, 30727, 44666);
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i16 >> 2] >> 2] | 0) >>> 0) break;
   HEAP32[i11 >> 2] = HEAPU8[(HEAP32[i16 >> 2] | 0) + 4185 + (HEAP32[i10 >> 2] | 0) >> 0];
   i20 = HEAP32[(HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
   i21 = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0;
   i22 = i8;
   i22 = ___muldi3(HEAP32[i22 >> 2] | 0, HEAP32[i22 + 4 >> 2] | 0, 4, 0) | 0;
   _ma_copy_memory_64(i20, i21, i22, getTempRet0() | 0);
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  STACKTOP = i23;
  return;
 }
 i1 = HEAP32[i16 >> 2] | 0;
 if ((HEAPU8[i2 + 4184 >> 0] | 0) >>> 2 & 1 | 0) {
  if ((HEAP32[i1 + 4 >> 2] | 0) == 2) {
   i22 = i12;
   HEAP32[i22 >> 2] = 0;
   HEAP32[i22 + 4 >> 2] = 0;
   while (1) {
    i21 = i12;
    i19 = HEAP32[i21 + 4 >> 2] | 0;
    i22 = i8;
    i20 = HEAP32[i22 + 4 >> 2] | 0;
    if (!(i19 >>> 0 < i20 >>> 0 | ((i19 | 0) == (i20 | 0) ? (HEAP32[i21 >> 2] | 0) >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0 : 0))) break;
    f24 = Math_fround(HEAPF32[(HEAP32[HEAP32[i17 >> 2] >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[HEAP32[i18 >> 2] >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] = f24;
    f24 = Math_fround(HEAPF32[(HEAP32[HEAP32[i17 >> 2] >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[(HEAP32[i18 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] = f24;
    i20 = i12;
    i20 = _i64Add(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 1, 0) | 0;
    i21 = getTempRet0() | 0;
    i22 = i12;
    HEAP32[i22 >> 2] = i20;
    HEAP32[i22 + 4 >> 2] = i21;
   }
   STACKTOP = i23;
   return;
  }
  HEAP32[i11 >> 2] = 0;
  while (1) {
   if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
   i22 = i14;
   HEAP32[i22 >> 2] = 0;
   HEAP32[i22 + 4 >> 2] = 0;
   while (1) {
    i21 = i14;
    i19 = HEAP32[i21 + 4 >> 2] | 0;
    i22 = i8;
    i20 = HEAP32[i22 + 4 >> 2] | 0;
    if (!(i19 >>> 0 < i20 >>> 0 | ((i19 | 0) == (i20 | 0) ? (HEAP32[i21 >> 2] | 0) >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0 : 0))) break;
    f24 = Math_fround(HEAPF32[(HEAP32[HEAP32[i17 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[(HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] = f24;
    i20 = i14;
    i20 = _i64Add(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 1, 0) | 0;
    i21 = getTempRet0() | 0;
    i22 = i14;
    HEAP32[i22 >> 2] = i20;
    HEAP32[i22 + 4 >> 2] = i21;
   }
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  STACKTOP = i23;
  return;
 }
 if ((HEAPU8[i1 + 4184 >> 0] | 0) >>> 3 & 1 | 0) {
  if ((HEAP32[HEAP32[i16 >> 2] >> 2] | 0) != 2) ___assert_fail(44782, 36381, 30752, 44666);
  if ((HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) != 1) ___assert_fail(44814, 36381, 30753, 44666);
  i22 = i15;
  HEAP32[i22 >> 2] = 0;
  HEAP32[i22 + 4 >> 2] = 0;
  while (1) {
   i21 = i15;
   i19 = HEAP32[i21 + 4 >> 2] | 0;
   i22 = i8;
   i20 = HEAP32[i22 + 4 >> 2] | 0;
   if (!(i19 >>> 0 < i20 >>> 0 | ((i19 | 0) == (i20 | 0) ? (HEAP32[i21 >> 2] | 0) >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0 : 0))) break;
   f24 = Math_fround(HEAPF32[(HEAP32[HEAP32[i17 >> 2] >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2]);
   f24 = Math_fround(Math_fround(f24 + Math_fround(HEAPF32[(HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2])) * Math_fround(.5));
   HEAPF32[(HEAP32[HEAP32[i18 >> 2] >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] = f24;
   i20 = i15;
   i20 = _i64Add(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 1, 0) | 0;
   i21 = getTempRet0() | 0;
   i22 = i15;
   HEAP32[i22 >> 2] = i20;
   HEAP32[i22 + 4 >> 2] = i21;
  }
  STACKTOP = i23;
  return;
 }
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
  i14 = HEAP32[(HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
  i15 = i8;
  i15 = ___muldi3(HEAP32[i15 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, 4, 0) | 0;
  _ma_zero_memory_64(i14, i15, getTempRet0() | 0);
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i16 >> 2] >> 2] | 0) >>> 0) break;
  HEAP32[i11 >> 2] = 0;
  while (1) {
   if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
   i12 = i13;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i12 + 4 >> 2] = 0;
   f24 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + 76 + (HEAP32[i10 >> 2] << 7) + (HEAP32[i11 >> 2] << 2) >> 2]);
   HEAPF32[i19 >> 2] = f24;
   f24 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + 76 + (HEAP32[i10 >> 2] << 7) + (HEAP32[i11 >> 2] << 2) >> 2]);
   HEAPF32[i20 >> 2] = f24;
   f24 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + 76 + (HEAP32[i10 >> 2] << 7) + (HEAP32[i11 >> 2] << 2) >> 2]);
   HEAPF32[i21 >> 2] = f24;
   f24 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + 76 + (HEAP32[i10 >> 2] << 7) + (HEAP32[i11 >> 2] << 2) >> 2]);
   HEAPF32[i22 >> 2] = f24;
   i12 = i8;
   i12 = ___udivdi3(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 4, 0) | 0;
   i14 = getTempRet0() | 0;
   i15 = i9;
   HEAP32[i15 >> 2] = i12;
   HEAP32[i15 + 4 >> 2] = i14;
   i15 = i7;
   HEAP32[i15 >> 2] = 0;
   HEAP32[i15 + 4 >> 2] = 0;
   while (1) {
    i14 = i7;
    i6 = HEAP32[i14 + 4 >> 2] | 0;
    i15 = i9;
    i12 = HEAP32[i15 + 4 >> 2] | 0;
    if (!(i6 >>> 0 < i12 >>> 0 | ((i6 | 0) == (i12 | 0) ? (HEAP32[i14 >> 2] | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0 : 0))) break;
    i15 = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0;
    i14 = i13;
    i14 = _i64Add(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 0, 0) | 0;
    getTempRet0() | 0;
    f24 = Math_fround(HEAPF32[i15 + (i14 << 2) >> 2]);
    f24 = Math_fround(f24 * Math_fround(HEAPF32[i19 >> 2]));
    i14 = HEAP32[(HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
    i15 = i13;
    i15 = _i64Add(HEAP32[i15 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, 0, 0) | 0;
    getTempRet0() | 0;
    i15 = i14 + (i15 << 2) | 0;
    f24 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f24);
    HEAPF32[i15 >> 2] = f24;
    i15 = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0;
    i14 = i13;
    i14 = _i64Add(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 1, 0) | 0;
    getTempRet0() | 0;
    f24 = Math_fround(HEAPF32[i15 + (i14 << 2) >> 2]);
    f24 = Math_fround(f24 * Math_fround(HEAPF32[i20 >> 2]));
    i14 = HEAP32[(HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
    i15 = i13;
    i15 = _i64Add(HEAP32[i15 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, 1, 0) | 0;
    getTempRet0() | 0;
    i15 = i14 + (i15 << 2) | 0;
    f24 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f24);
    HEAPF32[i15 >> 2] = f24;
    i15 = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0;
    i14 = i13;
    i14 = _i64Add(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 2, 0) | 0;
    getTempRet0() | 0;
    f24 = Math_fround(HEAPF32[i15 + (i14 << 2) >> 2]);
    f24 = Math_fround(f24 * Math_fround(HEAPF32[i21 >> 2]));
    i14 = HEAP32[(HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
    i15 = i13;
    i15 = _i64Add(HEAP32[i15 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, 2, 0) | 0;
    getTempRet0() | 0;
    i15 = i14 + (i15 << 2) | 0;
    f24 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f24);
    HEAPF32[i15 >> 2] = f24;
    i15 = HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0;
    i14 = i13;
    i14 = _i64Add(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 3, 0) | 0;
    getTempRet0() | 0;
    f24 = Math_fround(HEAPF32[i15 + (i14 << 2) >> 2]);
    f24 = Math_fround(f24 * Math_fround(HEAPF32[i22 >> 2]));
    i14 = HEAP32[(HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
    i15 = i13;
    i15 = _i64Add(HEAP32[i15 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, 3, 0) | 0;
    getTempRet0() | 0;
    i15 = i14 + (i15 << 2) | 0;
    f24 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f24);
    HEAPF32[i15 >> 2] = f24;
    i15 = i13;
    i15 = _i64Add(HEAP32[i15 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, 4, 0) | 0;
    i14 = getTempRet0() | 0;
    i12 = i13;
    HEAP32[i12 >> 2] = i15;
    HEAP32[i12 + 4 >> 2] = i14;
    i12 = i7;
    i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
    i14 = getTempRet0() | 0;
    i15 = i7;
    HEAP32[i15 >> 2] = i12;
    HEAP32[i15 + 4 >> 2] = i14;
   }
   while (1) {
    i14 = i13;
    i6 = HEAP32[i14 + 4 >> 2] | 0;
    i15 = i8;
    i12 = HEAP32[i15 + 4 >> 2] | 0;
    if (!(i6 >>> 0 < i12 >>> 0 | ((i6 | 0) == (i12 | 0) ? (HEAP32[i14 >> 2] | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0 : 0))) break;
    f24 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2]);
    f24 = Math_fround(f24 * Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + 76 + (HEAP32[i10 >> 2] << 7) + (HEAP32[i11 >> 2] << 2) >> 2]));
    i12 = (HEAP32[(HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) + (HEAP32[i13 >> 2] << 2) | 0;
    f24 = Math_fround(Math_fround(HEAPF32[i12 >> 2]) + f24);
    HEAPF32[i12 >> 2] = f24;
    i12 = i13;
    i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
    i14 = getTempRet0() | 0;
    i15 = i13;
    HEAP32[i15 >> 2] = i12;
    HEAP32[i15 + 4 >> 2] = i14;
   }
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 STACKTOP = i23;
 return;
}

function _stbir__encode_scanline(i9, i7, i8, i6, i4, i3, i5) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var f1 = f0, i2 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i39 = 0;
 i40 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i37 = i2 + 240 | 0;
 i25 = i2 + 236 | 0;
 i26 = i2 + 232 | 0;
 i14 = i2 + 228 | 0;
 i12 = i2 + 224 | 0;
 i11 = i2 + 220 | 0;
 i13 = i2 + 216 | 0;
 i38 = i2 + 212 | 0;
 i22 = i2 + 208 | 0;
 i24 = i2 + 204 | 0;
 i23 = i2;
 i27 = i2 + 200 | 0;
 i10 = i2 + 196 | 0;
 i36 = i2 + 192 | 0;
 i33 = i2 + 188 | 0;
 i15 = i2 + 184 | 0;
 i34 = i2 + 180 | 0;
 i21 = i2 + 176 | 0;
 i35 = i2 + 172 | 0;
 i16 = i2 + 168 | 0;
 i28 = i2 + 164 | 0;
 i17 = i2 + 160 | 0;
 i29 = i2 + 156 | 0;
 i18 = i2 + 152 | 0;
 i30 = i2 + 148 | 0;
 i19 = i2 + 144 | 0;
 i31 = i2 + 140 | 0;
 i20 = i2 + 136 | 0;
 i32 = i2 + 132 | 0;
 i2 = i2 + 128 | 0;
 HEAP32[i37 >> 2] = i9;
 HEAP32[i25 >> 2] = i7;
 HEAP32[i26 >> 2] = i8;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i13 >> 2] = i5;
 L1 : do if (!(HEAP32[(HEAP32[i37 >> 2] | 0) + 72 >> 2] & 1)) {
  HEAP32[i38 >> 2] = 0;
  while (1) {
   if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break L1;
   i9 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
   HEAP32[i27 >> 2] = i9;
   f1 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i27 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]);
   HEAPF32[i10 >> 2] = f1;
   if (Math_fround(HEAPF32[i10 >> 2]) != Math_fround(0.0)) f1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i10 >> 2])); else f1 = Math_fround(0.0);
   HEAPF32[i36 >> 2] = f1;
   HEAP32[i22 >> 2] = 0;
   while (1) {
    if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
    if ((HEAP32[i22 >> 2] | 0) != (HEAP32[i11 >> 2] | 0)) {
     f1 = Math_fround(HEAPF32[i36 >> 2]);
     i9 = (HEAP32[i14 >> 2] | 0) + ((HEAP32[i27 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) << 2) | 0;
     f1 = Math_fround(Math_fround(HEAPF32[i9 >> 2]) * f1);
     HEAPF32[i9 >> 2] = f1;
    }
    HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
   }
   HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i38 >> 2] = 0;
 HEAP32[i24 >> 2] = 0;
 while (1) {
  if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
  if ((HEAP32[i38 >> 2] | 0) != (HEAP32[i11 >> 2] | 0)) i39 = 16; else if (HEAP32[(HEAP32[i37 >> 2] | 0) + 72 >> 2] & 2 | 0) i39 = 16;
  if ((i39 | 0) == 16) {
   i39 = 0;
   i27 = HEAP32[i38 >> 2] & 65535;
   i36 = HEAP32[i24 >> 2] | 0;
   HEAP32[i24 >> 2] = i36 + 1;
   HEAP16[i23 + (i36 << 1) >> 1] = i27;
  }
  HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
 }
 switch (HEAP32[i13 >> 2] | 0) {
 case 0:
  {
   HEAP32[i38 >> 2] = 0;
   while (1) {
    if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break;
    i39 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i33 >> 2] = i39;
    HEAP32[i22 >> 2] = 0;
    while (1) {
     if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
     HEAP32[i15 >> 2] = (HEAP32[i33 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
     i39 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2]))) * Math_fround(255.0)) + .5) & 255;
     HEAP8[(HEAP32[i26 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = i39;
     HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    }
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
   }
   STACKTOP = i40;
   return;
  }
 case 1:
  {
   HEAP32[i38 >> 2] = 0;
   while (1) {
    if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break;
    i39 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i34 >> 2] = i39;
    HEAP32[i22 >> 2] = 0;
    while (1) {
     if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i24 >> 2] | 0)) break;
     HEAP32[i21 >> 2] = (HEAP32[i34 >> 2] | 0) + (HEAPU16[i23 + (HEAP32[i22 >> 2] << 1) >> 1] | 0);
     i39 = _stbir__linear_to_srgb_uchar(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i21 >> 2] << 2) >> 2])) | 0;
     HEAP8[(HEAP32[i26 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) >> 0] = i39;
     HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[i37 >> 2] | 0) + 72 >> 2] & 2)) {
     i39 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i34 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]))) * Math_fround(255.0)) + .5) & 255;
     HEAP8[(HEAP32[i26 >> 2] | 0) + ((HEAP32[i34 >> 2] | 0) + (HEAP32[i11 >> 2] | 0)) >> 0] = i39;
    }
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
   }
   STACKTOP = i40;
   return;
  }
 case 2:
  {
   HEAP32[i38 >> 2] = 0;
   while (1) {
    if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break;
    i39 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i35 >> 2] = i39;
    HEAP32[i22 >> 2] = 0;
    while (1) {
     if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
     HEAP32[i16 >> 2] = (HEAP32[i35 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
     i39 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2]))) * Math_fround(65535.0)) + .5) & 65535;
     HEAP16[(HEAP32[i26 >> 2] | 0) + (HEAP32[i16 >> 2] << 1) >> 1] = i39;
     HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    }
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
   }
   STACKTOP = i40;
   return;
  }
 case 3:
  {
   HEAP32[i38 >> 2] = 0;
   while (1) {
    if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break;
    i39 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i28 >> 2] = i39;
    HEAP32[i22 >> 2] = 0;
    while (1) {
     if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i24 >> 2] | 0)) break;
     HEAP32[i17 >> 2] = (HEAP32[i28 >> 2] | 0) + (HEAPU16[i23 + (HEAP32[i22 >> 2] << 1) >> 1] | 0);
     i39 = ~~(+Math_fround(Math_fround(_stbir__linear_to_srgb(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 2) >> 2]))))) * Math_fround(65535.0)) + .5) & 65535;
     HEAP16[(HEAP32[i26 >> 2] | 0) + (HEAP32[i17 >> 2] << 1) >> 1] = i39;
     HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[i37 >> 2] | 0) + 72 >> 2] & 2)) {
     i39 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i28 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]))) * Math_fround(65535.0)) + .5) & 65535;
     HEAP16[(HEAP32[i26 >> 2] | 0) + ((HEAP32[i28 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 1) >> 1] = i39;
    }
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
   }
   STACKTOP = i40;
   return;
  }
 case 4:
  {
   HEAP32[i38 >> 2] = 0;
   while (1) {
    if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break;
    i39 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i29 >> 2] = i39;
    HEAP32[i22 >> 2] = 0;
    while (1) {
     if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
     HEAP32[i18 >> 2] = (HEAP32[i29 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
     i39 = ~~(+Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2]))) * 4294967295.0 + .5) >>> 0;
     HEAP32[(HEAP32[i26 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] = i39;
     HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    }
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
   }
   STACKTOP = i40;
   return;
  }
 case 5:
  {
   HEAP32[i38 >> 2] = 0;
   while (1) {
    if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break;
    i39 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i30 >> 2] = i39;
    HEAP32[i22 >> 2] = 0;
    while (1) {
     if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i24 >> 2] | 0)) break;
     HEAP32[i19 >> 2] = (HEAP32[i30 >> 2] | 0) + (HEAPU16[i23 + (HEAP32[i22 >> 2] << 1) >> 1] | 0);
     i39 = ~~(+Math_fround(_stbir__linear_to_srgb(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i19 >> 2] << 2) >> 2]))))) * 4294967295.0 + .5) >>> 0;
     HEAP32[(HEAP32[i26 >> 2] | 0) + (HEAP32[i19 >> 2] << 2) >> 2] = i39;
     HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[i37 >> 2] | 0) + 72 >> 2] & 2)) {
     i39 = ~~(+Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i30 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]))) * 4294967295.0 + .5);
     HEAP32[(HEAP32[i26 >> 2] | 0) + ((HEAP32[i30 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2] = i39;
    }
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
   }
   STACKTOP = i40;
   return;
  }
 case 6:
  {
   HEAP32[i38 >> 2] = 0;
   while (1) {
    if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break;
    i39 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i31 >> 2] = i39;
    HEAP32[i22 >> 2] = 0;
    while (1) {
     if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
     HEAP32[i20 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
     f1 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i20 >> 2] << 2) >> 2]);
     HEAPF32[(HEAP32[i26 >> 2] | 0) + (HEAP32[i20 >> 2] << 2) >> 2] = f1;
     HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    }
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
   }
   STACKTOP = i40;
   return;
  }
 case 7:
  {
   HEAP32[i38 >> 2] = 0;
   while (1) {
    if ((HEAP32[i38 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break;
    i39 = Math_imul(HEAP32[i38 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i32 >> 2] = i39;
    HEAP32[i22 >> 2] = 0;
    while (1) {
     if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i24 >> 2] | 0)) break;
     HEAP32[i2 >> 2] = (HEAP32[i32 >> 2] | 0) + (HEAPU16[i23 + (HEAP32[i22 >> 2] << 1) >> 1] | 0);
     f1 = Math_fround(_stbir__linear_to_srgb(Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 2])));
     HEAPF32[(HEAP32[i26 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 2] = f1;
     HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[i37 >> 2] | 0) + 72 >> 2] & 2)) {
     f1 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i32 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[i26 >> 2] | 0) + ((HEAP32[i32 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2] = f1;
    }
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
   }
   STACKTOP = i40;
   return;
  }
 default:
  ___assert_fail(56195, 54884, 1861, 56316);
 }
}

function _ma_device_init(i4, i3, i5) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i10 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 i8 = i1 + 192 | 0;
 i6 = i1 + 188 | 0;
 i13 = i1 + 184 | 0;
 i15 = i1 + 180 | 0;
 i14 = i1 + 176 | 0;
 i11 = i1 + 172 | 0;
 i7 = i1 + 168 | 0;
 i12 = i1 + 164 | 0;
 i9 = i1 + 160 | 0;
 i2 = i1;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i12 >> 2] = i5;
 if (!(HEAP32[i11 >> 2] | 0)) {
  i15 = _ma_device_init_ex(0, 0, 0, HEAP32[i7 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = i15;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!(HEAP32[i12 >> 2] | 0)) {
  i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 45504, -2) | 0;
  HEAP32[i14 >> 2] = i15;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!(HEAP32[i7 >> 2] | 0)) {
  i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 45570, -2) | 0;
  HEAP32[i14 >> 2] = i15;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 _memcpy(i2 | 0, HEAP32[i7 >> 2] | 0, 160) | 0;
 if ((HEAP32[i2 >> 2] | 0) != 1) if ((HEAP32[i2 >> 2] | 0) != 2) if ((HEAP32[i2 >> 2] | 0) != 3) if ((HEAP32[i2 >> 2] | 0) != 4) {
  i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 45636, -106) | 0;
  HEAP32[i14 >> 2] = i15;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if ((HEAP32[i2 >> 2] | 0) == 2) i10 = 14; else if ((HEAP32[i2 >> 2] | 0) == 3) i10 = 14;
 if ((i10 | 0) == 14) {
  if ((HEAP32[i2 + 92 + 8 >> 2] | 0) >>> 0 > 32) {
   i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 45762, -106) | 0;
   HEAP32[i14 >> 2] = i15;
   i15 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!(_ma__is_channel_map_valid(i2 + 92 + 12 | 0, HEAP32[i2 + 92 + 8 >> 2] | 0) | 0)) {
   i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 45850, -106) | 0;
   HEAP32[i14 >> 2] = i15;
   i15 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 if ((HEAP32[i2 >> 2] | 0) == 1) i10 = 21; else if ((HEAP32[i2 >> 2] | 0) == 3) i10 = 21; else if ((HEAP32[i2 >> 2] | 0) == 4) i10 = 21;
 if ((i10 | 0) == 21) {
  if ((HEAP32[i2 + 44 + 8 >> 2] | 0) >>> 0 > 32) {
   i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 45927, -106) | 0;
   HEAP32[i14 >> 2] = i15;
   i15 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!(_ma__is_channel_map_valid(i2 + 44 + 12 | 0, HEAP32[i2 + 44 + 8 >> 2] | 0) | 0)) {
   i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 46016, -106) | 0;
   HEAP32[i14 >> 2] = i15;
   i15 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 _memset(HEAP32[i12 >> 2] | 0, 0, 94400) | 0;
 HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i11 >> 2];
 HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[(HEAP32[i12 >> 2] | 0) + 16 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] = HEAP32[i2 + 36 >> 2];
 if (((HEAP32[i12 >> 2] | 0) >>> 0) % 4 | 0 | 0) if (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) {
  i5 = HEAP32[i11 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[i5 + 4 >> 2] & 31](i5 | 0, HEAP32[i12 >> 2] | 0, 2, 46094);
 }
 i5 = (HEAP32[i12 >> 2] | 0) + 324 | 0;
 HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -17 | (HEAP32[i2 + 24 >> 2] & 1) << 4 & 255;
 i5 = (HEAP32[i12 >> 2] | 0) + 324 | 0;
 HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -33 | (HEAP32[i2 + 28 >> 2] & 1) << 5 & 255;
 HEAPF32[(HEAP32[i12 >> 2] | 0) + 328 >> 2] = Math_fround(1.0);
 if (!(HEAP32[i2 + 4 >> 2] | 0)) {
  HEAP32[i2 + 4 >> 2] = 48e3;
  i5 = (HEAP32[i12 >> 2] | 0) + 324 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -2 | 1;
 }
 if (!(HEAP32[i2 + 92 + 4 >> 2] | 0)) {
  HEAP32[i2 + 92 + 4 >> 2] = 5;
  i5 = (HEAP32[i12 >> 2] | 0) + 47360 + 260 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -2 | 1;
 }
 if (!(HEAP32[i2 + 92 + 8 >> 2] | 0)) {
  HEAP32[i2 + 92 + 8 >> 2] = 2;
  i5 = (HEAP32[i12 >> 2] | 0) + 47360 + 260 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -3 | 2;
 }
 if (!(HEAPU8[i2 + 92 + 12 >> 0] | 0)) {
  i5 = (HEAP32[i12 >> 2] | 0) + 47360 + 260 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -5 | 4;
 }
 if (!(HEAP32[i2 + 44 + 4 >> 2] | 0)) {
  HEAP32[i2 + 44 + 4 >> 2] = 5;
  i5 = (HEAP32[i12 >> 2] | 0) + 384 + 260 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -2 | 1;
 }
 if (!(HEAP32[i2 + 44 + 8 >> 2] | 0)) {
  HEAP32[i2 + 44 + 8 >> 2] = 2;
  i5 = (HEAP32[i12 >> 2] | 0) + 384 + 260 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -3 | 2;
 }
 if (!(HEAPU8[i2 + 44 + 12 >> 0] | 0)) {
  i5 = (HEAP32[i12 >> 2] | 0) + 384 + 260 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -5 | 4;
 }
 if (!(HEAP32[i2 + 12 >> 2] | 0)) if (!(HEAP32[i2 + 8 >> 2] | 0)) {
  HEAP32[i2 + 12 >> 2] = (HEAP32[i2 + 20 >> 2] | 0) == 0 ? 30 : 300;
  i5 = (HEAP32[i12 >> 2] | 0) + 324 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -3 | 2;
 }
 if (!(HEAP32[i2 + 16 >> 2] | 0)) {
  HEAP32[i2 + 16 >> 2] = 3;
  i5 = (HEAP32[i12 >> 2] | 0) + 324 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -5 | 4;
 }
 if ((HEAP32[i2 >> 2] | 0) == 3) if ((HEAP32[i2 + 16 >> 2] | 0) >>> 0 < 3) HEAP32[i2 + 16 >> 2] = 3;
 HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[(HEAP32[i12 >> 2] | 0) + 47360 + 256 >> 2] = HEAP32[i2 + 92 + 44 >> 2];
 HEAP32[(HEAP32[i12 >> 2] | 0) + 47360 + 264 >> 2] = HEAP32[i2 + 92 + 4 >> 2];
 i5 = i2 + 92 + 8 | 0;
 HEAP32[(HEAP32[i12 >> 2] | 0) + 47360 + 268 >> 2] = HEAP32[i5 >> 2];
 _ma_channel_map_copy((HEAP32[i12 >> 2] | 0) + 47360 + 272 | 0, i2 + 92 + 12 | 0, HEAP32[i5 >> 2] | 0);
 HEAP32[(HEAP32[i12 >> 2] | 0) + 384 + 256 >> 2] = HEAP32[i2 + 44 + 44 >> 2];
 HEAP32[(HEAP32[i12 >> 2] | 0) + 384 + 264 >> 2] = HEAP32[i2 + 44 + 4 >> 2];
 i5 = i2 + 44 + 8 | 0;
 HEAP32[(HEAP32[i12 >> 2] | 0) + 384 + 268 >> 2] = HEAP32[i5 >> 2];
 _ma_channel_map_copy((HEAP32[i12 >> 2] | 0) + 384 + 272 | 0, i2 + 44 + 12 | 0, HEAP32[i5 >> 2] | 0);
 i5 = (HEAP32[i12 >> 2] | 0) + 47360 | 0;
 HEAP32[i5 + 304 >> 2] = HEAP32[i5 + 264 >> 2];
 i5 = (HEAP32[i12 >> 2] | 0) + 47360 | 0;
 HEAP32[i5 + 308 >> 2] = HEAP32[i5 + 268 >> 2];
 i5 = HEAP32[i12 >> 2] | 0;
 HEAP32[i5 + 47360 + 312 >> 2] = HEAP32[i5 + 8 >> 2];
 i5 = (HEAP32[i12 >> 2] | 0) + 47360 | 0;
 _ma_channel_map_copy(i5 + 316 | 0, i5 + 272 | 0, HEAP32[i5 + 268 >> 2] | 0);
 i5 = (HEAP32[i12 >> 2] | 0) + 384 | 0;
 HEAP32[i5 + 304 >> 2] = HEAP32[i5 + 264 >> 2];
 i5 = (HEAP32[i12 >> 2] | 0) + 384 | 0;
 HEAP32[i5 + 308 >> 2] = HEAP32[i5 + 268 >> 2];
 i5 = HEAP32[i12 >> 2] | 0;
 HEAP32[i5 + 384 + 312 >> 2] = HEAP32[i5 + 8 >> 2];
 i5 = (HEAP32[i12 >> 2] | 0) + 384 | 0;
 _ma_channel_map_copy(i5 + 316 | 0, i5 + 272 | 0, HEAP32[i5 + 268 >> 2] | 0);
 i5 = (_ma_mutex_init(HEAP32[i11 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + 28 | 0) | 0) != 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if (i5) {
  i15 = _ma_context_post_error(i1, 0, 1, 46202, -311) | 0;
  HEAP32[i14 >> 2] = i15;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (_ma_event_init(i1, (HEAP32[i12 >> 2] | 0) + 60 | 0) | 0) {
  _ma_mutex_uninit((HEAP32[i12 >> 2] | 0) + 28 | 0);
  i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 46226, -312) | 0;
  HEAP32[i14 >> 2] = i15;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (_ma_event_init(HEAP32[i11 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + 144 | 0) | 0) {
  _ma_event_uninit((HEAP32[i12 >> 2] | 0) + 60 | 0);
  _ma_mutex_uninit((HEAP32[i12 >> 2] | 0) + 28 | 0);
  i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 46271, -312) | 0;
  HEAP32[i14 >> 2] = i15;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (_ma_event_init(HEAP32[i11 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + 228 | 0) | 0) {
  _ma_event_uninit((HEAP32[i12 >> 2] | 0) + 144 | 0);
  _ma_event_uninit((HEAP32[i12 >> 2] | 0) + 60 | 0);
  _ma_mutex_uninit((HEAP32[i12 >> 2] | 0) + 28 | 0);
  i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 46315, -312) | 0;
  HEAP32[i14 >> 2] = i15;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i5 = HEAP32[i11 >> 2] | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[i5 + 116 >> 2] & 15](i5 | 0, i2, HEAP32[i12 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i5;
 if (HEAP32[i9 >> 2] | 0) {
  HEAP32[i14 >> 2] = -103;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 _ma_device__post_init_setup(HEAP32[i12 >> 2] | 0, HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
 if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == 2) i10 = 62; else if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == 3) i10 = 62;
 do if ((i10 | 0) == 62) {
  if (HEAP8[(HEAP32[i12 >> 2] | 0) + 47360 >> 0] | 0) break;
  if (!(_ma_context__try_get_device_name_by_id(HEAP32[i11 >> 2] | 0, 2, HEAP32[i2 + 92 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + 47360 | 0, 256) | 0)) break;
  _ma_strncpy_s((HEAP32[i12 >> 2] | 0) + 47360 | 0, 256, (HEAP32[i2 + 92 >> 2] | 0) == 0 ? 37675 : 46358, -1) | 0;
 } while (0);
 do if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == 1) i10 = 68; else {
  if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == 3) {
   i10 = 68;
   break;
  }
  if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == 4) i10 = 68;
 } while (0);
 do if ((i10 | 0) == 68) {
  if (HEAP8[(HEAP32[i12 >> 2] | 0) + 384 >> 0] | 0) break;
  if (!(_ma_context__try_get_device_name_by_id(HEAP32[i11 >> 2] | 0, 1, HEAP32[i2 + 44 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + 384 | 0, 256) | 0)) break;
  _ma_strncpy_s((HEAP32[i12 >> 2] | 0) + 384 | 0, 256, (HEAP32[i2 + 44 >> 2] | 0) == 0 ? 37651 : 46373, -1) | 0;
 } while (0);
 do if (_ma_context_is_backend_asynchronous(HEAP32[i11 >> 2] | 0) | 0) {
  HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i6 >> 2] = 1;
  HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] = HEAP32[i6 >> 2];
 } else {
  i10 = HEAP32[i12 >> 2] | 0;
  i10 = (_ma_thread_create(HEAP32[i11 >> 2] | 0, i10 + 312 | 0, 14, i10 | 0) | 0) != 0;
  i1 = HEAP32[i12 >> 2] | 0;
  if (!i10) {
   _ma_event_wait(i1 + 228 | 0) | 0;
   break;
  }
  _ma_device_uninit(i1);
  i15 = _ma_context_post_error(HEAP32[i11 >> 2] | 0, 0, 1, 46389, -313) | 0;
  HEAP32[i14 >> 2] = i15;
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 } while (0);
 HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i15 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2];
 if ((HEAP32[i15 >> 2] | 0) != 1) ___assert_fail(46421, 36381, 26422, 46456);
 HEAP32[i14 >> 2] = 0;
 i15 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _drmp3d_DCT_II(i2, i6) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, f28 = f0;
 i27 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i3 = i1 + 216 | 0;
 i7 = i1 + 212 | 0;
 i4 = i1 + 208 | 0;
 i5 = i1 + 204 | 0;
 i8 = i1;
 i13 = i1 + 200 | 0;
 i26 = i1 + 196 | 0;
 i14 = i1 + 192 | 0;
 i16 = i1 + 188 | 0;
 i18 = i1 + 184 | 0;
 i20 = i1 + 180 | 0;
 i9 = i1 + 176 | 0;
 i10 = i1 + 172 | 0;
 i11 = i1 + 168 | 0;
 i12 = i1 + 164 | 0;
 i15 = i1 + 160 | 0;
 i17 = i1 + 156 | 0;
 i19 = i1 + 152 | 0;
 i21 = i1 + 148 | 0;
 i22 = i1 + 144 | 0;
 i23 = i1 + 140 | 0;
 i24 = i1 + 136 | 0;
 i25 = i1 + 132 | 0;
 i1 = i1 + 128 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  HEAP32[i26 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i5 >> 2] << 2);
  HEAP32[i13 >> 2] = i8;
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= 8) break;
   f28 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) * 18 << 2) >> 2]);
   HEAPF32[i14 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + ((15 - (HEAP32[i4 >> 2] | 0) | 0) * 18 << 2) >> 2]);
   HEAPF32[i16 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + ((16 + (HEAP32[i4 >> 2] | 0) | 0) * 18 << 2) >> 2]);
   HEAPF32[i18 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + ((31 - (HEAP32[i4 >> 2] | 0) | 0) * 18 << 2) >> 2]);
   HEAPF32[i20 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i14 >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i20 >> 2]));
   HEAPF32[i9 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i16 >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i18 >> 2]));
   HEAPF32[i10 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i16 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i18 >> 2]));
   f28 = Math_fround(f28 * Math_fround(HEAPF32[16400 + (((HEAP32[i4 >> 2] | 0) * 3 | 0) + 0 << 2) >> 2]));
   HEAPF32[i11 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i14 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i20 >> 2]));
   f28 = Math_fround(f28 * Math_fround(HEAPF32[16400 + (((HEAP32[i4 >> 2] | 0) * 3 | 0) + 1 << 2) >> 2]));
   HEAPF32[i12 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i9 >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i10 >> 2]));
   HEAPF32[HEAP32[i13 >> 2] >> 2] = f28;
   f28 = Math_fround(HEAPF32[i9 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i10 >> 2]));
   f28 = Math_fround(f28 * Math_fround(HEAPF32[16400 + (((HEAP32[i4 >> 2] | 0) * 3 | 0) + 2 << 2) >> 2]));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i12 >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i11 >> 2]));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 64 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i12 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i11 >> 2]));
   f28 = Math_fround(f28 * Math_fround(HEAPF32[16400 + (((HEAP32[i4 >> 2] | 0) * 3 | 0) + 2 << 2) >> 2]));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 96 >> 2] = f28;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
  }
  HEAP32[i13 >> 2] = i8;
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= 4) break;
   f28 = Math_fround(HEAPF32[HEAP32[i13 >> 2] >> 2]);
   HEAPF32[i15 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 4 >> 2]);
   HEAPF32[i17 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 8 >> 2]);
   HEAPF32[i19 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 12 >> 2]);
   HEAPF32[i21 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 16 >> 2]);
   HEAPF32[i22 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 20 >> 2]);
   HEAPF32[i23 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 24 >> 2]);
   HEAPF32[i24 >> 2] = f28;
   f28 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 28 >> 2]);
   HEAPF32[i25 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i15 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i25 >> 2]));
   HEAPF32[i1 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i25 >> 2]);
   f28 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f28);
   HEAPF32[i15 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i17 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i24 >> 2]));
   HEAPF32[i25 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i24 >> 2]);
   f28 = Math_fround(Math_fround(HEAPF32[i17 >> 2]) + f28);
   HEAPF32[i17 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i19 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i23 >> 2]));
   HEAPF32[i24 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i23 >> 2]);
   f28 = Math_fround(Math_fround(HEAPF32[i19 >> 2]) + f28);
   HEAPF32[i19 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i21 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i22 >> 2]));
   HEAPF32[i23 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i22 >> 2]);
   f28 = Math_fround(Math_fround(HEAPF32[i21 >> 2]) + f28);
   HEAPF32[i21 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i15 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i21 >> 2]));
   HEAPF32[i22 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i21 >> 2]);
   f28 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f28);
   HEAPF32[i15 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i17 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i19 >> 2]));
   HEAPF32[i21 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i19 >> 2]);
   f28 = Math_fround(Math_fround(HEAPF32[i17 >> 2]) + f28);
   HEAPF32[i17 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i15 >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i17 >> 2]));
   HEAPF32[HEAP32[i13 >> 2] >> 2] = f28;
   f28 = Math_fround(HEAPF32[i15 >> 2]);
   f28 = Math_fround(Math_fround(f28 - Math_fround(HEAPF32[i17 >> 2])) * Math_fround(.707106769));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i23 >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i24 >> 2]));
   HEAPF32[i23 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i24 >> 2]);
   f28 = Math_fround(Math_fround(f28 + Math_fround(HEAPF32[i25 >> 2])) * Math_fround(.707106769));
   HEAPF32[i24 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i25 >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i1 >> 2]));
   HEAPF32[i25 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i21 >> 2]);
   f28 = Math_fround(Math_fround(f28 + Math_fround(HEAPF32[i22 >> 2])) * Math_fround(.707106769));
   HEAPF32[i21 >> 2] = f28;
   f28 = Math_fround(Math_fround(HEAPF32[i25 >> 2]) * Math_fround(.198912367));
   f28 = Math_fround(Math_fround(HEAPF32[i23 >> 2]) - f28);
   HEAPF32[i23 >> 2] = f28;
   f28 = Math_fround(Math_fround(HEAPF32[i23 >> 2]) * Math_fround(.382683426));
   f28 = Math_fround(Math_fround(HEAPF32[i25 >> 2]) + f28);
   HEAPF32[i25 >> 2] = f28;
   f28 = Math_fround(Math_fround(HEAPF32[i25 >> 2]) * Math_fround(.198912367));
   f28 = Math_fround(Math_fround(HEAPF32[i23 >> 2]) - f28);
   HEAPF32[i23 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i1 >> 2]);
   f28 = Math_fround(f28 - Math_fround(HEAPF32[i24 >> 2]));
   HEAPF32[i15 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i24 >> 2]);
   f28 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) + f28);
   HEAPF32[i1 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i1 >> 2]);
   f28 = Math_fround(Math_fround(f28 + Math_fround(HEAPF32[i25 >> 2])) * Math_fround(.509795606));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i22 >> 2]);
   f28 = Math_fround(Math_fround(f28 + Math_fround(HEAPF32[i21 >> 2])) * Math_fround(.541196108));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i15 >> 2]);
   f28 = Math_fround(Math_fround(f28 - Math_fround(HEAPF32[i23 >> 2])) * Math_fround(.601344883));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i15 >> 2]);
   f28 = Math_fround(Math_fround(f28 + Math_fround(HEAPF32[i23 >> 2])) * Math_fround(.899976193));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i22 >> 2]);
   f28 = Math_fround(Math_fround(f28 - Math_fround(HEAPF32[i21 >> 2])) * Math_fround(1.30656302));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 24 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i1 >> 2]);
   f28 = Math_fround(Math_fround(f28 - Math_fround(HEAPF32[i25 >> 2])) * Math_fround(2.56291556));
   HEAPF32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] = f28;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 32;
  }
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= 7) break;
   f28 = Math_fround(HEAPF32[i8 + (HEAP32[i4 >> 2] << 2) >> 2]);
   HEAPF32[HEAP32[i26 >> 2] >> 2] = f28;
   f28 = Math_fround(HEAPF32[i8 + 64 + (HEAP32[i4 >> 2] << 2) >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i8 + 96 + (HEAP32[i4 >> 2] << 2) >> 2]));
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i8 + 96 + ((HEAP32[i4 >> 2] | 0) + 1 << 2) >> 2]));
   HEAPF32[(HEAP32[i26 >> 2] | 0) + 72 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i8 + 32 + (HEAP32[i4 >> 2] << 2) >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i8 + 32 + ((HEAP32[i4 >> 2] | 0) + 1 << 2) >> 2]));
   HEAPF32[(HEAP32[i26 >> 2] | 0) + 144 >> 2] = f28;
   f28 = Math_fround(HEAPF32[i8 + 64 + ((HEAP32[i4 >> 2] | 0) + 1 << 2) >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i8 + 96 + (HEAP32[i4 >> 2] << 2) >> 2]));
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i8 + 96 + ((HEAP32[i4 >> 2] | 0) + 1 << 2) >> 2]));
   HEAPF32[(HEAP32[i26 >> 2] | 0) + 216 >> 2] = f28;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 288;
  }
  f28 = Math_fround(HEAPF32[i8 + 28 >> 2]);
  HEAPF32[HEAP32[i26 >> 2] >> 2] = f28;
  f28 = Math_fround(HEAPF32[i8 + 64 + 28 >> 2]);
  i6 = i8 + 96 + 28 | 0;
  f28 = Math_fround(f28 + Math_fround(HEAPF32[i6 >> 2]));
  HEAPF32[(HEAP32[i26 >> 2] | 0) + 72 >> 2] = f28;
  f28 = Math_fround(HEAPF32[i8 + 32 + 28 >> 2]);
  HEAPF32[(HEAP32[i26 >> 2] | 0) + 144 >> 2] = f28;
  f28 = Math_fround(HEAPF32[i6 >> 2]);
  HEAPF32[(HEAP32[i26 >> 2] | 0) + 216 >> 2] = f28;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 STACKTOP = i27;
 return;
}

function _GifSplitPalette(i12, i21, i6, i13, i29, i27, i33, i4, i22) {
 i12 = i12 | 0;
 i21 = i21 | 0;
 i6 = i6 | 0;
 i13 = i13 | 0;
 i29 = i29 | 0;
 i27 = i27 | 0;
 i33 = i33 | 0;
 i4 = i4 | 0;
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i30 = 0, i31 = 0, i32 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0;
 i47 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i44 = i47 + 152 | 0;
 i45 = i47 + 148 | 0;
 i43 = i47 + 144 | 0;
 i14 = i47 + 140 | 0;
 i30 = i47 + 136 | 0;
 i28 = i47 + 132 | 0;
 i34 = i47 + 128 | 0;
 i5 = i47 + 156 | 0;
 i46 = i47 + 124 | 0;
 i41 = i47 + 120 | 0;
 i37 = i47 + 116 | 0;
 i35 = i47 + 112 | 0;
 i39 = i47 + 108 | 0;
 i42 = i47 + 104 | 0;
 i38 = i47 + 100 | 0;
 i36 = i47 + 96 | 0;
 i40 = i47 + 92 | 0;
 i23 = i47 + 16 | 0;
 i7 = i47 + 8 | 0;
 i1 = i47;
 i10 = i47 + 88 | 0;
 i20 = i47 + 84 | 0;
 i17 = i47 + 80 | 0;
 i19 = i47 + 76 | 0;
 i16 = i47 + 72 | 0;
 i18 = i47 + 68 | 0;
 i15 = i47 + 64 | 0;
 i11 = i47 + 60 | 0;
 i24 = i47 + 56 | 0;
 i8 = i47 + 52 | 0;
 i2 = i47 + 48 | 0;
 i25 = i47 + 44 | 0;
 i9 = i47 + 40 | 0;
 i3 = i47 + 36 | 0;
 i26 = i47 + 32 | 0;
 i31 = i47 + 28 | 0;
 i32 = i47 + 24 | 0;
 HEAP32[i44 >> 2] = i12;
 HEAP32[i45 >> 2] = i21;
 HEAP32[i43 >> 2] = i6;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i30 >> 2] = i29;
 HEAP32[i28 >> 2] = i27;
 HEAP32[i34 >> 2] = i33;
 HEAP8[i5 >> 0] = i4 & 1;
 HEAP32[i46 >> 2] = i22;
 if ((HEAP32[i45 >> 2] | 0) == 0 ? 1 : (HEAP32[i14 >> 2] | 0) <= (HEAP32[i43 >> 2] | 0)) {
  STACKTOP = i47;
  return;
 }
 if ((HEAP32[i14 >> 2] | 0) != ((HEAP32[i43 >> 2] | 0) + 1 | 0)) {
  HEAP32[i20 >> 2] = 255;
  HEAP32[i17 >> 2] = 0;
  HEAP32[i19 >> 2] = 255;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i18 >> 2] = 255;
  HEAP32[i15 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  while (1) {
   if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i45 >> 2] | 0)) break;
   HEAP32[i24 >> 2] = HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 0) >> 0];
   HEAP32[i8 >> 2] = HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 1) >> 0];
   HEAP32[i2 >> 2] = HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 2) >> 0];
   if ((HEAP32[i24 >> 2] | 0) > (HEAP32[i17 >> 2] | 0)) HEAP32[i17 >> 2] = HEAP32[i24 >> 2];
   if ((HEAP32[i24 >> 2] | 0) < (HEAP32[i20 >> 2] | 0)) HEAP32[i20 >> 2] = HEAP32[i24 >> 2];
   if ((HEAP32[i8 >> 2] | 0) > (HEAP32[i16 >> 2] | 0)) HEAP32[i16 >> 2] = HEAP32[i8 >> 2];
   if ((HEAP32[i8 >> 2] | 0) < (HEAP32[i19 >> 2] | 0)) HEAP32[i19 >> 2] = HEAP32[i8 >> 2];
   if ((HEAP32[i2 >> 2] | 0) > (HEAP32[i15 >> 2] | 0)) HEAP32[i15 >> 2] = HEAP32[i2 >> 2];
   if ((HEAP32[i2 >> 2] | 0) < (HEAP32[i18 >> 2] | 0)) HEAP32[i18 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  HEAP32[i25 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i20 >> 2] | 0);
  HEAP32[i9 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i19 >> 2] | 0);
  HEAP32[i3 >> 2] = (HEAP32[i15 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
  HEAP32[i26 >> 2] = 1;
  HEAP32[i26 >> 2] = (HEAP32[i3 >> 2] | 0) > (HEAP32[i9 >> 2] | 0) ? 2 : 1;
  if ((HEAP32[i25 >> 2] | 0) > (HEAP32[i3 >> 2] | 0)) if ((HEAP32[i25 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) HEAP32[i26 >> 2] = 0;
  i42 = Math_imul(HEAP32[i45 >> 2] | 0, (HEAP32[i30 >> 2] | 0) - (HEAP32[i43 >> 2] | 0) | 0) | 0;
  HEAP32[i31 >> 2] = (i42 | 0) / ((HEAP32[i14 >> 2] | 0) - (HEAP32[i43 >> 2] | 0) | 0) | 0;
  HEAP32[i32 >> 2] = (HEAP32[i45 >> 2] | 0) - (HEAP32[i31 >> 2] | 0);
  _GifPartitionByMedian(HEAP32[i44 >> 2] | 0, 0, HEAP32[i45 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i31 >> 2] | 0);
  HEAP8[(HEAP32[i46 >> 2] | 0) + 772 + (HEAP32[i34 >> 2] | 0) >> 0] = HEAP32[i26 >> 2];
  HEAP8[(HEAP32[i46 >> 2] | 0) + 1027 + (HEAP32[i34 >> 2] | 0) >> 0] = HEAP8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i31 >> 2] << 2) + (HEAP32[i26 >> 2] | 0)) >> 0] | 0;
  i42 = HEAP32[i30 >> 2] | 0;
  i45 = HEAP32[i28 >> 2] | 0;
  _GifSplitPalette(HEAP32[i44 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i43 >> 2] | 0, i42 | 0, i42 - i45 | 0, (i45 | 0) / 2 | 0, HEAP32[i34 >> 2] << 1, HEAP8[i5 >> 0] & 1, HEAP32[i46 >> 2] | 0);
  i43 = HEAP32[i30 >> 2] | 0;
  i45 = HEAP32[i28 >> 2] | 0;
  _GifSplitPalette((HEAP32[i44 >> 2] | 0) + (HEAP32[i31 >> 2] << 2) | 0, HEAP32[i32 >> 2] | 0, i43 | 0, HEAP32[i14 >> 2] | 0, i43 + i45 | 0, (i45 | 0) / 2 | 0, (HEAP32[i34 >> 2] << 1) + 1 | 0, HEAP8[i5 >> 0] & 1, HEAP32[i46 >> 2] | 0);
  STACKTOP = i47;
  return;
 }
 if (HEAP8[i5 >> 0] & 1) {
  if ((HEAP32[i43 >> 2] | 0) == 1) {
   HEAP32[i41 >> 2] = 255;
   HEAP32[i37 >> 2] = 255;
   HEAP32[i35 >> 2] = 255;
   HEAP32[i39 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i41 >> 2] | 0;
    if ((HEAP32[i39 >> 2] | 0) >= (HEAP32[i45 >> 2] | 0)) break;
    if (i1 >>> 0 < (HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i39 >> 2] << 2) + 0) >> 0] | 0) >>> 0) i1 = HEAP32[i41 >> 2] | 0; else i1 = HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i39 >> 2] << 2) + 0) >> 0] | 0;
    HEAP32[i41 >> 2] = i1;
    if ((HEAP32[i37 >> 2] | 0) >>> 0 < (HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i39 >> 2] << 2) + 1) >> 0] | 0) >>> 0) i1 = HEAP32[i37 >> 2] | 0; else i1 = HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i39 >> 2] << 2) + 1) >> 0] | 0;
    HEAP32[i37 >> 2] = i1;
    if ((HEAP32[i35 >> 2] | 0) >>> 0 < (HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i39 >> 2] << 2) + 2) >> 0] | 0) >>> 0) i1 = HEAP32[i35 >> 2] | 0; else i1 = HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i39 >> 2] << 2) + 2) >> 0] | 0;
    HEAP32[i35 >> 2] = i1;
    HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + 1;
   }
   HEAP8[(HEAP32[i46 >> 2] | 0) + 4 + (HEAP32[i43 >> 2] | 0) >> 0] = i1;
   HEAP8[(HEAP32[i46 >> 2] | 0) + 260 + (HEAP32[i43 >> 2] | 0) >> 0] = HEAP32[i37 >> 2];
   HEAP8[(HEAP32[i46 >> 2] | 0) + 516 + (HEAP32[i43 >> 2] | 0) >> 0] = HEAP32[i35 >> 2];
   STACKTOP = i47;
   return;
  }
  if ((HEAP32[i43 >> 2] | 0) == ((1 << HEAP32[HEAP32[i46 >> 2] >> 2]) - 1 | 0)) {
   HEAP32[i42 >> 2] = 0;
   HEAP32[i38 >> 2] = 0;
   HEAP32[i36 >> 2] = 0;
   HEAP32[i40 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i42 >> 2] | 0;
    if ((HEAP32[i40 >> 2] | 0) >= (HEAP32[i45 >> 2] | 0)) break;
    if (i1 >>> 0 > (HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i40 >> 2] << 2) + 0) >> 0] | 0) >>> 0) i1 = HEAP32[i42 >> 2] | 0; else i1 = HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i40 >> 2] << 2) + 0) >> 0] | 0;
    HEAP32[i42 >> 2] = i1;
    if ((HEAP32[i38 >> 2] | 0) >>> 0 > (HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i40 >> 2] << 2) + 1) >> 0] | 0) >>> 0) i1 = HEAP32[i38 >> 2] | 0; else i1 = HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i40 >> 2] << 2) + 1) >> 0] | 0;
    HEAP32[i38 >> 2] = i1;
    if ((HEAP32[i36 >> 2] | 0) >>> 0 > (HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i40 >> 2] << 2) + 2) >> 0] | 0) >>> 0) i1 = HEAP32[i36 >> 2] | 0; else i1 = HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i40 >> 2] << 2) + 2) >> 0] | 0;
    HEAP32[i36 >> 2] = i1;
    HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + 1;
   }
   HEAP8[(HEAP32[i46 >> 2] | 0) + 4 + (HEAP32[i43 >> 2] | 0) >> 0] = i1;
   HEAP8[(HEAP32[i46 >> 2] | 0) + 260 + (HEAP32[i43 >> 2] | 0) >> 0] = HEAP32[i38 >> 2];
   HEAP8[(HEAP32[i46 >> 2] | 0) + 516 + (HEAP32[i43 >> 2] | 0) >> 0] = HEAP32[i36 >> 2];
   STACKTOP = i47;
   return;
  }
 }
 i42 = i23;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 i42 = i7;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 i42 = i1;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i45 >> 2] | 0)) break;
  i40 = i23;
  i40 = _i64Add(HEAP32[i40 >> 2] | 0, HEAP32[i40 + 4 >> 2] | 0, HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i10 >> 2] << 2) + 0) >> 0] | 0, 0) | 0;
  i41 = getTempRet0() | 0;
  i42 = i23;
  HEAP32[i42 >> 2] = i40;
  HEAP32[i42 + 4 >> 2] = i41;
  i42 = i7;
  i42 = _i64Add(HEAP32[i42 >> 2] | 0, HEAP32[i42 + 4 >> 2] | 0, HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i10 >> 2] << 2) + 1) >> 0] | 0, 0) | 0;
  i41 = getTempRet0() | 0;
  i40 = i7;
  HEAP32[i40 >> 2] = i42;
  HEAP32[i40 + 4 >> 2] = i41;
  i40 = i1;
  i40 = _i64Add(HEAP32[i40 >> 2] | 0, HEAP32[i40 + 4 >> 2] | 0, HEAPU8[(HEAP32[i44 >> 2] | 0) + ((HEAP32[i10 >> 2] << 2) + 2) >> 0] | 0, 0) | 0;
  i41 = getTempRet0() | 0;
  i42 = i1;
  HEAP32[i42 >> 2] = i40;
  HEAP32[i42 + 4 >> 2] = i41;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 i41 = (HEAP32[i45 >> 2] | 0) / 2 | 0;
 i44 = i23;
 i41 = _i64Add(HEAP32[i44 >> 2] | 0, HEAP32[i44 + 4 >> 2] | 0, i41 | 0, ((i41 | 0) < 0) << 31 >> 31 | 0) | 0;
 i44 = getTempRet0() | 0;
 i42 = i23;
 HEAP32[i42 >> 2] = i41;
 HEAP32[i42 + 4 >> 2] = i44;
 i42 = (HEAP32[i45 >> 2] | 0) / 2 | 0;
 i44 = i7;
 i42 = _i64Add(HEAP32[i44 >> 2] | 0, HEAP32[i44 + 4 >> 2] | 0, i42 | 0, ((i42 | 0) < 0) << 31 >> 31 | 0) | 0;
 i44 = getTempRet0() | 0;
 i41 = i7;
 HEAP32[i41 >> 2] = i42;
 HEAP32[i41 + 4 >> 2] = i44;
 i41 = (HEAP32[i45 >> 2] | 0) / 2 | 0;
 i44 = i1;
 i41 = _i64Add(HEAP32[i44 >> 2] | 0, HEAP32[i44 + 4 >> 2] | 0, i41 | 0, ((i41 | 0) < 0) << 31 >> 31 | 0) | 0;
 i44 = getTempRet0() | 0;
 i42 = i1;
 HEAP32[i42 >> 2] = i41;
 HEAP32[i42 + 4 >> 2] = i44;
 i42 = HEAP32[i45 >> 2] | 0;
 i44 = i23;
 i42 = ___udivdi3(HEAP32[i44 >> 2] | 0, HEAP32[i44 + 4 >> 2] | 0, i42 | 0, ((i42 | 0) < 0) << 31 >> 31 | 0) | 0;
 i44 = getTempRet0() | 0;
 i41 = i23;
 HEAP32[i41 >> 2] = i42;
 HEAP32[i41 + 4 >> 2] = i44;
 i41 = HEAP32[i45 >> 2] | 0;
 i44 = i7;
 i41 = ___udivdi3(HEAP32[i44 >> 2] | 0, HEAP32[i44 + 4 >> 2] | 0, i41 | 0, ((i41 | 0) < 0) << 31 >> 31 | 0) | 0;
 i44 = getTempRet0() | 0;
 i42 = i7;
 HEAP32[i42 >> 2] = i41;
 HEAP32[i42 + 4 >> 2] = i44;
 i42 = HEAP32[i45 >> 2] | 0;
 i44 = i1;
 i42 = ___udivdi3(HEAP32[i44 >> 2] | 0, HEAP32[i44 + 4 >> 2] | 0, i42 | 0, ((i42 | 0) < 0) << 31 >> 31 | 0) | 0;
 i44 = getTempRet0() | 0;
 i45 = i1;
 HEAP32[i45 >> 2] = i42;
 HEAP32[i45 + 4 >> 2] = i44;
 HEAP8[(HEAP32[i46 >> 2] | 0) + 4 + (HEAP32[i43 >> 2] | 0) >> 0] = HEAP32[i23 >> 2];
 HEAP8[(HEAP32[i46 >> 2] | 0) + 260 + (HEAP32[i43 >> 2] | 0) >> 0] = HEAP32[i7 >> 2];
 HEAP8[(HEAP32[i46 >> 2] | 0) + 516 + (HEAP32[i43 >> 2] | 0) >> 0] = HEAP32[i1 >> 2];
 STACKTOP = i47;
 return;
}

function _stbir__resample_horizontal_upsample(i26, i23) {
 i26 = i26 | 0;
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, f30 = f0, i31 = 0;
 i29 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i27 = i1 + 100 | 0;
 i24 = i1 + 96 | 0;
 i28 = i1 + 92 | 0;
 i19 = i1 + 88 | 0;
 i25 = i1 + 84 | 0;
 i2 = i1 + 80 | 0;
 i11 = i1 + 76 | 0;
 i13 = i1 + 72 | 0;
 i12 = i1 + 68 | 0;
 i10 = i1 + 64 | 0;
 i20 = i1 + 60 | 0;
 i21 = i1 + 56 | 0;
 i22 = i1 + 52 | 0;
 i9 = i1 + 48 | 0;
 i8 = i1 + 44 | 0;
 i14 = i1 + 40 | 0;
 i3 = i1 + 36 | 0;
 i17 = i1 + 32 | 0;
 i6 = i1 + 28 | 0;
 i18 = i1 + 24 | 0;
 i7 = i1 + 20 | 0;
 i15 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i16 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i27 >> 2] = i26;
 HEAP32[i24 >> 2] = i23;
 HEAP32[i25 >> 2] = HEAP32[(HEAP32[i27 >> 2] | 0) + 20 >> 2];
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[i27 >> 2] | 0) + 64 >> 2];
 i26 = _stbir__get_decode_buffer(HEAP32[i27 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = i26;
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i27 >> 2] | 0) + 100 >> 2];
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i27 >> 2] | 0) + 104 >> 2];
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[i27 >> 2] | 0) + 128 >> 2];
 HEAP32[i28 >> 2] = 0;
 L1 : while (1) {
  if ((HEAP32[i28 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) {
   i1 = 43;
   break;
  }
  HEAP32[i20 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + (HEAP32[i28 >> 2] << 3) >> 2];
  HEAP32[i21 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + (HEAP32[i28 >> 2] << 3) + 4 >> 2];
  i26 = Math_imul(HEAP32[i28 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
  HEAP32[i22 >> 2] = i26;
  i26 = Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[i28 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = i26;
  HEAP32[i8 >> 2] = 0;
  if ((HEAP32[i21 >> 2] | 0) < (HEAP32[i20 >> 2] | 0)) {
   i1 = 4;
   break;
  }
  if ((HEAP32[i20 >> 2] | 0) < (0 - (HEAP32[(HEAP32[i27 >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   i1 = 6;
   break;
  }
  if ((HEAP32[i21 >> 2] | 0) < (0 - (HEAP32[(HEAP32[i27 >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   i1 = 8;
   break;
  }
  if ((HEAP32[i20 >> 2] | 0) >= ((HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[i27 >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   i1 = 10;
   break;
  }
  if ((HEAP32[i21 >> 2] | 0) >= ((HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[i27 >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   i1 = 12;
   break;
  }
  L9 : do switch (HEAP32[i2 >> 2] | 0) {
  case 1:
   {
    HEAP32[i19 >> 2] = HEAP32[i20 >> 2];
    while (1) {
     if ((HEAP32[i19 >> 2] | 0) > (HEAP32[i21 >> 2] | 0)) break L9;
     HEAP32[i14 >> 2] = HEAP32[i19 >> 2];
     i31 = HEAP32[i12 >> 2] | 0;
     i23 = HEAP32[i9 >> 2] | 0;
     i26 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i26 + 1;
     f30 = Math_fround(HEAPF32[i31 + (i23 + i26 << 2) >> 2]);
     HEAPF32[i3 >> 2] = f30;
     if (!(Math_fround(HEAPF32[i3 >> 2]) != Math_fround(0.0))) {
      i1 = 17;
      break L1;
     }
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + 0 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 0 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    }
   }
  case 2:
   {
    HEAP32[i19 >> 2] = HEAP32[i20 >> 2];
    while (1) {
     if ((HEAP32[i19 >> 2] | 0) > (HEAP32[i21 >> 2] | 0)) break L9;
     HEAP32[i17 >> 2] = HEAP32[i19 >> 2] << 1;
     i23 = HEAP32[i12 >> 2] | 0;
     i26 = HEAP32[i9 >> 2] | 0;
     i31 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i31 + 1;
     f30 = Math_fround(HEAPF32[i23 + (i26 + i31 << 2) >> 2]);
     HEAPF32[i6 >> 2] = f30;
     if (!(Math_fround(HEAPF32[i6 >> 2]) != Math_fround(0.0))) {
      i1 = 22;
      break L1;
     }
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) + 0 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i6 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 0 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) + 1 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i6 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 1 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    }
   }
  case 3:
   {
    HEAP32[i19 >> 2] = HEAP32[i20 >> 2];
    while (1) {
     if ((HEAP32[i19 >> 2] | 0) > (HEAP32[i21 >> 2] | 0)) break L9;
     HEAP32[i18 >> 2] = (HEAP32[i19 >> 2] | 0) * 3;
     i23 = HEAP32[i12 >> 2] | 0;
     i26 = HEAP32[i9 >> 2] | 0;
     i31 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i31 + 1;
     f30 = Math_fround(HEAPF32[i23 + (i26 + i31 << 2) >> 2]);
     HEAPF32[i7 >> 2] = f30;
     if (!(Math_fround(HEAPF32[i7 >> 2]) != Math_fround(0.0))) {
      i1 = 27;
      break L1;
     }
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + 0 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i7 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 0 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + 1 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i7 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 1 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + 2 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i7 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 2 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    }
   }
  case 4:
   {
    HEAP32[i19 >> 2] = HEAP32[i20 >> 2];
    while (1) {
     if ((HEAP32[i19 >> 2] | 0) > (HEAP32[i21 >> 2] | 0)) break L9;
     HEAP32[i15 >> 2] = HEAP32[i19 >> 2] << 2;
     i23 = HEAP32[i12 >> 2] | 0;
     i26 = HEAP32[i9 >> 2] | 0;
     i31 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i31 + 1;
     f30 = Math_fround(HEAPF32[i23 + (i26 + i31 << 2) >> 2]);
     HEAPF32[i4 >> 2] = f30;
     if (!(Math_fround(HEAPF32[i4 >> 2]) != Math_fround(0.0))) {
      i1 = 32;
      break L1;
     }
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + 0 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i4 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 0 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + 1 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i4 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 1 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + 2 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i4 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 2 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + 3 << 2) >> 2]);
     f30 = Math_fround(f30 * Math_fround(HEAPF32[i4 >> 2]));
     i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 3 << 2) | 0;
     f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
     HEAPF32[i31 >> 2] = f30;
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    }
   }
  default:
   {
    HEAP32[i19 >> 2] = HEAP32[i20 >> 2];
    while (1) {
     if ((HEAP32[i19 >> 2] | 0) > (HEAP32[i21 >> 2] | 0)) break L9;
     i23 = Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
     HEAP32[i16 >> 2] = i23;
     i23 = HEAP32[i12 >> 2] | 0;
     i26 = HEAP32[i9 >> 2] | 0;
     i31 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i31 + 1;
     f30 = Math_fround(HEAPF32[i23 + (i26 + i31 << 2) >> 2]);
     HEAPF32[i5 >> 2] = f30;
     if (!(Math_fround(HEAPF32[i5 >> 2]) != Math_fround(0.0))) {
      i1 = 37;
      break L1;
     }
     HEAP32[i1 >> 2] = 0;
     while (1) {
      if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i2 >> 2] | 0)) break;
      f30 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) << 2) >> 2]);
      f30 = Math_fround(f30 * Math_fround(HEAPF32[i5 >> 2]));
      i31 = (HEAP32[i24 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) << 2) | 0;
      f30 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f30);
      HEAPF32[i31 >> 2] = f30;
      HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
     }
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    }
   }
  } while (0);
  HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
 }
 switch (i1 | 0) {
 case 4:
  {
   ___assert_fail(55910, 54884, 1460, 55919);
   break;
  }
 case 6:
  {
   ___assert_fail(55955, 54884, 1461, 55919);
   break;
  }
 case 8:
  {
   ___assert_fail(56005, 54884, 1462, 55919);
   break;
  }
 case 10:
  {
   ___assert_fail(56055, 54884, 1463, 55919);
   break;
  }
 case 12:
  {
   ___assert_fail(56125, 54884, 1464, 55919);
   break;
  }
 case 17:
  {
   ___assert_fail(55893, 54884, 1472, 55919);
   break;
  }
 case 22:
  {
   ___assert_fail(55893, 54884, 1481, 55919);
   break;
  }
 case 27:
  {
   ___assert_fail(55893, 54884, 1491, 55919);
   break;
  }
 case 32:
  {
   ___assert_fail(55893, 54884, 1502, 55919);
   break;
  }
 case 37:
  {
   ___assert_fail(55893, 54884, 1515, 55919);
   break;
  }
 case 43:
  {
   STACKTOP = i29;
   return;
  }
 }
}

function _game_draw(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0, i9 = 0, i10 = 0, i11 = 0, f12 = f0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, f34 = f0;
 i23 = 0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(528);
 i30 = i33 + 512 | 0;
 i27 = i33 + 476 | 0;
 i26 = i33 + 400 | 0;
 i31 = i33 + 392 | 0;
 i9 = i33 + 384 | 0;
 i5 = i33 + 320 | 0;
 i6 = i33 + 256 | 0;
 i32 = i33;
 i1 = i33 + 472 | 0;
 i2 = i33 + 468 | 0;
 i7 = i33 + 440 | 0;
 i3 = i33 + 464 | 0;
 i4 = i33 + 508 | 0;
 i20 = i33 + 504 | 0;
 i16 = i33 + 460 | 0;
 i17 = i33 + 456 | 0;
 i18 = i33 + 500 | 0;
 i19 = i33 + 452 | 0;
 i28 = i33 + 496 | 0;
 i29 = i33 + 448 | 0;
 i10 = i5;
 i11 = i10 + 64 | 0;
 do {
  HEAP32[i10 >> 2] = 0;
  i10 = i10 + 4 | 0;
 } while ((i10 | 0) < (i11 | 0));
 i10 = i6;
 i11 = i10 + 64 | 0;
 do {
  HEAP32[i10 >> 2] = 0;
  i10 = i10 + 4 | 0;
 } while ((i10 | 0) < (i11 | 0));
 _memset(i32 | 0, 0, 255) | 0;
 if (!(HEAP32[i21 + 32 >> 2] | 0)) {
  HEAP32[i2 >> 2] = -1;
  HEAP32[i27 >> 2] = HEAP32[39210];
  HEAP32[i27 + 4 >> 2] = HEAP32[39211];
  HEAP32[i27 + 8 >> 2] = HEAP32[39212];
  HEAP32[i27 + 12 >> 2] = HEAP32[39213];
  HEAP32[i27 + 16 >> 2] = HEAP32[39214];
  HEAP8[i30 >> 0] = HEAP8[i2 >> 0] | 0;
  HEAP8[i30 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
  HEAP8[i30 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
  HEAP8[i30 + 3 >> 0] = HEAP8[i2 + 3 >> 0] | 0;
  _DrawTexture(i27, 0, 0, i30);
 } else {
  HEAP32[i1 >> 2] = -1;
  HEAP32[i27 >> 2] = HEAP32[39205];
  HEAP32[i27 + 4 >> 2] = HEAP32[39206];
  HEAP32[i27 + 8 >> 2] = HEAP32[39207];
  HEAP32[i27 + 12 >> 2] = HEAP32[39208];
  HEAP32[i27 + 16 >> 2] = HEAP32[39209];
  HEAP8[i30 >> 0] = HEAP8[i1 >> 0] | 0;
  HEAP8[i30 + 1 >> 0] = HEAP8[i1 + 1 >> 0] | 0;
  HEAP8[i30 + 2 >> 0] = HEAP8[i1 + 2 >> 0] | 0;
  HEAP8[i30 + 3 >> 0] = HEAP8[i1 + 3 >> 0] | 0;
  _DrawTexture(i27, 0, 0, i30);
 }
 HEAP32[i9 >> 2] = HEAP32[i21 >> 2];
 _sprintf(i5, 31933, i9) | 0;
 i24 = i21 + 8 | 0;
 i25 = i21 + 4 | 0;
 i10 = Math_imul(HEAP32[i25 >> 2] | 0, HEAP32[i24 >> 2] | 0) | 0;
 HEAP32[i26 >> 2] = i10;
 _sprintf(i6, 31933, i26) | 0;
 f12 = Math_fround(((Math_imul(_strlen(i5) | 0, -12) | 0) + 450 | 0) >>> 0);
 HEAPF32[i9 >> 2] = f12;
 HEAPF32[i9 + 4 >> 2] = Math_fround(35.0);
 f12 = Math_fround(((Math_imul(_strlen(i6) | 0, -12) | 0) + 890 | 0) >>> 0);
 HEAPF32[i7 >> 2] = f12;
 HEAPF32[i7 + 4 >> 2] = Math_fround(35.0);
 HEAP32[i3 >> 2] = -1;
 i10 = i26;
 i1 = 156992;
 i11 = i10 + 36 | 0;
 do {
  HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
  i10 = i10 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i10 | 0) < (i11 | 0));
 HEAP32[i27 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i27 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP8[i30 >> 0] = HEAP8[i3 >> 0] | 0;
 HEAP8[i30 + 1 >> 0] = HEAP8[i3 + 1 >> 0] | 0;
 HEAP8[i30 + 2 >> 0] = HEAP8[i3 + 2 >> 0] | 0;
 HEAP8[i30 + 3 >> 0] = HEAP8[i3 + 3 >> 0] | 0;
 _DrawTextEx(i26, i5, i27, Math_fround(32.0), Math_fround(2.0), i30);
 HEAP8[i4 >> 0] = -3;
 HEAP8[i4 + 1 >> 0] = -7;
 HEAP8[i4 + 2 >> 0] = 0;
 HEAP8[i4 + 3 >> 0] = -1;
 i10 = i26;
 i1 = 156992;
 i11 = i10 + 36 | 0;
 do {
  HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
  i10 = i10 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i10 | 0) < (i11 | 0));
 HEAP32[i27 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i27 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP8[i30 >> 0] = HEAP8[i4 >> 0] | 0;
 HEAP8[i30 + 1 >> 0] = HEAP8[i4 + 1 >> 0] | 0;
 HEAP8[i30 + 2 >> 0] = HEAP8[i4 + 2 >> 0] | 0;
 HEAP8[i30 + 3 >> 0] = HEAP8[i4 + 3 >> 0] | 0;
 _DrawTextEx(i26, i6, i27, Math_fround(32.0), Math_fround(2.0), i30);
 i15 = i21 + 160 | 0;
 i22 = i21 + 36 | 0;
 i14 = i21 + 16 | 0;
 i11 = i20 + 1 | 0;
 i9 = i20 + 2 | 0;
 i6 = i20 + 3 | 0;
 i10 = i18 + 1 | 0;
 i7 = i18 + 2 | 0;
 i5 = i18 + 3 | 0;
 i13 = 0;
 f8 = Math_fround(130.0);
 do {
  if (i13) f8 = Math_fround(f8 + Math_fround((HEAP32[39262] | 0) + 5 | 0));
  i3 = ~~f8;
  i4 = 0;
  do {
   f34 = Math_fround(Math_fround(Math_imul(HEAP32[39261] | 0, i4) | 0) + Math_fround(187.0));
   f12 = Math_fround(f34 + Math_fround(10.0));
   f12 = (i4 | 0) == 0 ? f34 : f12;
   do if (!(HEAP32[i15 >> 2] | 0)) if (!(HEAP32[i22 >> 2] | 0)) {
    i2 = 157040 + ((HEAP32[i21 + 40 + (i13 * 20 | 0) + (i4 << 2) >> 2] | 0) * 480 | 0) | 0;
    i1 = ~~f12;
    if (!(HEAP32[i14 >> 2] | 0)) {
     HEAP8[i18 >> 0] = -126;
     HEAP8[i10 >> 0] = -126;
     HEAP8[i7 >> 0] = -126;
     HEAP8[i5 >> 0] = -1;
     HEAP32[i27 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i27 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i27 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i27 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
     HEAP32[i27 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
     HEAP8[i30 >> 0] = HEAP8[i18 >> 0] | 0;
     HEAP8[i30 + 1 >> 0] = HEAP8[i18 + 1 >> 0] | 0;
     HEAP8[i30 + 2 >> 0] = HEAP8[i18 + 2 >> 0] | 0;
     HEAP8[i30 + 3 >> 0] = HEAP8[i18 + 3 >> 0] | 0;
     _DrawTexture(i27, i1, i3, i30);
     break;
    } else {
     HEAP32[i17 >> 2] = -1;
     HEAP32[i27 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i27 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i27 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i27 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
     HEAP32[i27 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
     HEAP8[i30 >> 0] = HEAP8[i17 >> 0] | 0;
     HEAP8[i30 + 1 >> 0] = HEAP8[i17 + 1 >> 0] | 0;
     HEAP8[i30 + 2 >> 0] = HEAP8[i17 + 2 >> 0] | 0;
     HEAP8[i30 + 3 >> 0] = HEAP8[i17 + 3 >> 0] | 0;
     _DrawTexture(i27, i1, i3, i30);
     break;
    }
   } else i23 = 12; else i23 = 12; while (0);
   do if ((i23 | 0) == 12) {
    i23 = 0;
    i2 = i21 + 100 + (i13 * 20 | 0) + (i4 << 2) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i2 = 157040 + ((HEAP32[i21 + 40 + (i13 * 20 | 0) + (i4 << 2) >> 2] | 0) * 480 | 0) | 0;
     HEAP8[i20 >> 0] = -126;
     HEAP8[i11 >> 0] = -126;
     HEAP8[i9 >> 0] = -126;
     HEAP8[i6 >> 0] = -1;
     HEAP32[i27 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i27 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i27 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i27 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
     HEAP32[i27 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
     HEAP8[i30 >> 0] = HEAP8[i20 >> 0] | 0;
     HEAP8[i30 + 1 >> 0] = HEAP8[i20 + 1 >> 0] | 0;
     HEAP8[i30 + 2 >> 0] = HEAP8[i20 + 2 >> 0] | 0;
     HEAP8[i30 + 3 >> 0] = HEAP8[i20 + 3 >> 0] | 0;
     _DrawTexture(i27, ~~f12, i3, i30);
     break;
    } else {
     i1 = (i1 | 0) > 22 ? 1 : i1 + 1 | 0;
     HEAP32[i2 >> 2] = i1;
     i2 = 157040 + ((HEAP32[i21 + 40 + (i13 * 20 | 0) + (i4 << 2) >> 2] | 0) * 480 | 0) + (i1 * 20 | 0) | 0;
     HEAP32[i16 >> 2] = -1;
     HEAP32[i27 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i27 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i27 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i27 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
     HEAP32[i27 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
     HEAP8[i30 >> 0] = HEAP8[i16 >> 0] | 0;
     HEAP8[i30 + 1 >> 0] = HEAP8[i16 + 1 >> 0] | 0;
     HEAP8[i30 + 2 >> 0] = HEAP8[i16 + 2 >> 0] | 0;
     HEAP8[i30 + 3 >> 0] = HEAP8[i16 + 3 >> 0] | 0;
     _DrawTexture(i27, ~~f12, i3, i30);
     break;
    }
   } while (0);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 5);
  i13 = i13 + 1 | 0;
 } while ((i13 | 0) != 3);
 if (HEAP32[i14 >> 2] | 0) {
  HEAP32[i19 >> 2] = -1;
  HEAP32[i27 >> 2] = HEAP32[39225];
  HEAP32[i27 + 4 >> 2] = HEAP32[39226];
  HEAP32[i27 + 8 >> 2] = HEAP32[39227];
  HEAP32[i27 + 12 >> 2] = HEAP32[39228];
  HEAP32[i27 + 16 >> 2] = HEAP32[39229];
  HEAP8[i30 >> 0] = HEAP8[i19 >> 0] | 0;
  HEAP8[i30 + 1 >> 0] = HEAP8[i19 + 1 >> 0] | 0;
  HEAP8[i30 + 2 >> 0] = HEAP8[i19 + 2 >> 0] | 0;
  HEAP8[i30 + 3 >> 0] = HEAP8[i19 + 3 >> 0] | 0;
  _DrawTexture(i27, 468, 705, i30);
 }
 if (HEAP32[i21 + 28 >> 2] | 0) {
  i1 = HEAP32[i25 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i4 = 0;
   do {
    i3 = 11520 + (i4 * 40 | 0) + 32 | 0;
    if ((HEAP32[i3 >> 2] | 0) > 0) {
     i1 = 11520 + (i4 * 40 | 0) + 36 | 0;
     i2 = 0;
     do {
      i23 = i2 << 1;
      i20 = 11520 + (i4 * 40 | 0) | 0;
      i21 = i20 + (i23 << 3) | 0;
      i23 = i20 + ((i23 | 1) << 3) | 0;
      HEAP32[i26 >> 2] = HEAP32[i21 >> 2];
      HEAP32[i26 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
      HEAP32[i27 >> 2] = HEAP32[i23 >> 2];
      HEAP32[i27 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
      HEAP8[i30 >> 0] = HEAP8[i1 >> 0] | 0;
      HEAP8[i30 + 1 >> 0] = HEAP8[i1 + 1 >> 0] | 0;
      HEAP8[i30 + 2 >> 0] = HEAP8[i1 + 2 >> 0] | 0;
      HEAP8[i30 + 3 >> 0] = HEAP8[i1 + 3 >> 0] | 0;
      _DrawLineEx(i26, i27, Math_fround(5.0), i30);
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
     i1 = HEAP32[i25 >> 2] | 0;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (i1 | 0));
  }
 }
 i1 = HEAP32[i15 >> 2] | 0;
 if (i1 | 0) {
  i10 = Math_imul(Math_imul(HEAP32[i24 >> 2] | 0, i1) | 0, HEAP32[i25 >> 2] | 0) | 0;
  HEAP32[i31 >> 2] = i1;
  HEAP32[i31 + 4 >> 2] = i10;
  _sprintf(i32, 31940, i31) | 0;
  HEAP8[i28 >> 0] = -1;
  HEAP8[i28 + 1 >> 0] = 109;
  HEAP8[i28 + 2 >> 0] = -62;
  HEAP8[i28 + 3 >> 0] = -1;
  i10 = i26;
  i1 = 156992;
  i11 = i10 + 36 | 0;
  do {
   HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
   i10 = i10 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i10 | 0) < (i11 | 0));
  HEAP32[i27 >> 2] = HEAP32[7866];
  HEAP32[i27 + 4 >> 2] = HEAP32[7867];
  HEAP8[i30 >> 0] = HEAP8[i28 >> 0] | 0;
  HEAP8[i30 + 1 >> 0] = HEAP8[i28 + 1 >> 0] | 0;
  HEAP8[i30 + 2 >> 0] = HEAP8[i28 + 2 >> 0] | 0;
  HEAP8[i30 + 3 >> 0] = HEAP8[i28 + 3 >> 0] | 0;
  _DrawTextEx(i26, i32, i27, Math_fround(42.0), Math_fround(2.0), i30);
 }
 if (HEAP32[i22 >> 2] | 0) {
  HEAP32[i29 >> 2] = -1;
  HEAP32[i27 >> 2] = HEAP32[39230];
  HEAP32[i27 + 4 >> 2] = HEAP32[39231];
  HEAP32[i27 + 8 >> 2] = HEAP32[39232];
  HEAP32[i27 + 12 >> 2] = HEAP32[39233];
  HEAP32[i27 + 16 >> 2] = HEAP32[39234];
  HEAP8[i30 >> 0] = HEAP8[i29 >> 0] | 0;
  HEAP8[i30 + 1 >> 0] = HEAP8[i29 + 1 >> 0] | 0;
  HEAP8[i30 + 2 >> 0] = HEAP8[i29 + 2 >> 0] | 0;
  HEAP8[i30 + 3 >> 0] = HEAP8[i29 + 3 >> 0] | 0;
  _DrawTexture(i27, 383, 560, i30);
 }
 STACKTOP = i33;
 return;
}

function _GifDitherImage(i3, i4, i6, i10, i1, i7) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i5 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i35 = 0;
 i40 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i18 = i40 + 120 | 0;
 i5 = i40 + 116 | 0;
 i38 = i40 + 112 | 0;
 i32 = i40 + 108 | 0;
 i17 = i40 + 104 | 0;
 i21 = i40 + 100 | 0;
 i37 = i40 + 96 | 0;
 i39 = i40 + 92 | 0;
 i2 = i40 + 88 | 0;
 i8 = i40 + 124 | 0;
 i9 = i40 + 84 | 0;
 i34 = i40 + 80 | 0;
 i33 = i40 + 76 | 0;
 i20 = i40 + 72 | 0;
 i19 = i40 + 68 | 0;
 i31 = i40 + 64 | 0;
 i16 = i40 + 60 | 0;
 i12 = i40 + 56 | 0;
 i13 = i40 + 52 | 0;
 i14 = i40 + 48 | 0;
 i30 = i40 + 44 | 0;
 i15 = i40 + 40 | 0;
 i11 = i40 + 36 | 0;
 i29 = i40 + 32 | 0;
 i27 = i40 + 28 | 0;
 i28 = i40 + 24 | 0;
 i26 = i40 + 20 | 0;
 i25 = i40 + 16 | 0;
 i23 = i40 + 12 | 0;
 i24 = i40 + 8 | 0;
 i22 = i40 + 4 | 0;
 i36 = i40;
 HEAP32[i18 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i38 >> 2] = i6;
 HEAP32[i32 >> 2] = i10;
 HEAP32[i17 >> 2] = i1;
 HEAP32[i21 >> 2] = i7;
 i10 = Math_imul(HEAP32[i32 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
 HEAP32[i37 >> 2] = i10;
 i10 = _malloc(HEAP32[i37 >> 2] << 2 << 2) | 0;
 HEAP32[i39 >> 2] = i10;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i37 >> 2] << 2 | 0)) break;
  HEAP8[i8 >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) >> 0] | 0;
  HEAP32[i9 >> 2] = (HEAPU8[i8 >> 0] | 0) << 8;
  HEAP32[(HEAP32[i39 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 2] = HEAP32[i9 >> 2];
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 HEAP32[i34 >> 2] = 0;
 while (1) {
  if ((HEAP32[i34 >> 2] | 0) >>> 0 >= (HEAP32[i17 >> 2] | 0) >>> 0) break;
  HEAP32[i33 >> 2] = 0;
  while (1) {
   if ((HEAP32[i33 >> 2] | 0) >>> 0 >= (HEAP32[i32 >> 2] | 0) >>> 0) break;
   i10 = Math_imul(HEAP32[i34 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = (HEAP32[i39 >> 2] | 0) + (i10 + (HEAP32[i33 >> 2] | 0) << 2 << 2);
   if (HEAP32[i18 >> 2] | 0) {
    i1 = Math_imul(HEAP32[i34 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
    i1 = (HEAP32[i18 >> 2] | 0) + (i1 + (HEAP32[i33 >> 2] | 0) << 2) | 0;
   } else i1 = 0;
   HEAP32[i19 >> 2] = i1;
   HEAP32[i31 >> 2] = ((HEAP32[HEAP32[i20 >> 2] >> 2] | 0) + 127 | 0) / 256 | 0;
   HEAP32[i16 >> 2] = ((HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] | 0) + 127 | 0) / 256 | 0;
   HEAP32[i12 >> 2] = ((HEAP32[(HEAP32[i20 >> 2] | 0) + 8 >> 2] | 0) + 127 | 0) / 256 | 0;
   if (HEAP32[i18 >> 2] | 0) if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0 | 0) == (HEAP32[i31 >> 2] | 0)) if ((HEAPU8[(HEAP32[i19 >> 2] | 0) + 1 >> 0] | 0 | 0) == (HEAP32[i16 >> 2] | 0)) if ((HEAPU8[(HEAP32[i19 >> 2] | 0) + 2 >> 0] | 0 | 0) == (HEAP32[i12 >> 2] | 0)) {
    HEAP32[HEAP32[i20 >> 2] >> 2] = HEAP32[i31 >> 2];
    HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] = HEAP32[i16 >> 2];
    HEAP32[(HEAP32[i20 >> 2] | 0) + 8 >> 2] = HEAP32[i12 >> 2];
    HEAP32[(HEAP32[i20 >> 2] | 0) + 12 >> 2] = 0;
   } else i35 = 15; else i35 = 15; else i35 = 15; else i35 = 15;
   if ((i35 | 0) == 15) {
    i35 = 0;
    HEAP32[i13 >> 2] = 1e6;
    HEAP32[i14 >> 2] = 0;
    _GifGetClosestPaletteColor(HEAP32[i21 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i12 >> 2] | 0, i14, i13, 1);
    HEAP32[i30 >> 2] = (HEAP32[HEAP32[i20 >> 2] >> 2] | 0) - ((HEAPU8[(HEAP32[i21 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] | 0) >> 0] | 0) << 8);
    HEAP32[i15 >> 2] = (HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] | 0) - ((HEAPU8[(HEAP32[i21 >> 2] | 0) + 260 + (HEAP32[i14 >> 2] | 0) >> 0] | 0) << 8);
    HEAP32[i11 >> 2] = (HEAP32[(HEAP32[i20 >> 2] | 0) + 8 >> 2] | 0) - ((HEAPU8[(HEAP32[i21 >> 2] | 0) + 516 + (HEAP32[i14 >> 2] | 0) >> 0] | 0) << 8);
    HEAP32[HEAP32[i20 >> 2] >> 2] = HEAPU8[(HEAP32[i21 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] | 0) >> 0];
    HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] = HEAPU8[(HEAP32[i21 >> 2] | 0) + 260 + (HEAP32[i14 >> 2] | 0) >> 0];
    HEAP32[(HEAP32[i20 >> 2] | 0) + 8 >> 2] = HEAPU8[(HEAP32[i21 >> 2] | 0) + 516 + (HEAP32[i14 >> 2] | 0) >> 0];
    HEAP32[(HEAP32[i20 >> 2] | 0) + 12 >> 2] = HEAP32[i14 >> 2];
    i10 = Math_imul(HEAP32[i34 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
    HEAP32[i29 >> 2] = i10 + (HEAP32[i33 >> 2] | 0) + 1;
    i10 = Math_imul(HEAP32[i34 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
    HEAP32[i27 >> 2] = i10 + (HEAP32[i32 >> 2] | 0) + (HEAP32[i33 >> 2] | 0) - 1;
    i10 = Math_imul(HEAP32[i34 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
    HEAP32[i28 >> 2] = i10 + (HEAP32[i32 >> 2] | 0) + (HEAP32[i33 >> 2] | 0);
    i10 = Math_imul(HEAP32[i34 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
    HEAP32[i26 >> 2] = i10 + (HEAP32[i32 >> 2] | 0) + (HEAP32[i33 >> 2] | 0) + 1;
    if ((HEAP32[i29 >> 2] | 0) < (HEAP32[i37 >> 2] | 0)) {
     HEAP32[i25 >> 2] = (HEAP32[i39 >> 2] | 0) + (HEAP32[i29 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[i25 >> 2] >> 2] | 0) | 0) > (((HEAP32[i30 >> 2] | 0) * 7 | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[HEAP32[i25 >> 2] >> 2] | 0) | 0; else i1 = ((HEAP32[i30 >> 2] | 0) * 7 | 0) / 16 | 0;
     i10 = HEAP32[i25 >> 2] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
     if ((0 - (HEAP32[(HEAP32[i25 >> 2] | 0) + 4 >> 2] | 0) | 0) > (((HEAP32[i15 >> 2] | 0) * 7 | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[(HEAP32[i25 >> 2] | 0) + 4 >> 2] | 0) | 0; else i1 = ((HEAP32[i15 >> 2] | 0) * 7 | 0) / 16 | 0;
     i10 = (HEAP32[i25 >> 2] | 0) + 4 | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
     if ((0 - (HEAP32[(HEAP32[i25 >> 2] | 0) + 8 >> 2] | 0) | 0) > (((HEAP32[i11 >> 2] | 0) * 7 | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[(HEAP32[i25 >> 2] | 0) + 8 >> 2] | 0) | 0; else i1 = ((HEAP32[i11 >> 2] | 0) * 7 | 0) / 16 | 0;
     i10 = (HEAP32[i25 >> 2] | 0) + 8 | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
    }
    if ((HEAP32[i27 >> 2] | 0) < (HEAP32[i37 >> 2] | 0)) {
     HEAP32[i23 >> 2] = (HEAP32[i39 >> 2] | 0) + (HEAP32[i27 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) | 0) > (((HEAP32[i30 >> 2] | 0) * 3 | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[HEAP32[i23 >> 2] >> 2] | 0) | 0; else i1 = ((HEAP32[i30 >> 2] | 0) * 3 | 0) / 16 | 0;
     i10 = HEAP32[i23 >> 2] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
     if ((0 - (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) | 0) > (((HEAP32[i15 >> 2] | 0) * 3 | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2] | 0) | 0; else i1 = ((HEAP32[i15 >> 2] | 0) * 3 | 0) / 16 | 0;
     i10 = (HEAP32[i23 >> 2] | 0) + 4 | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
     if ((0 - (HEAP32[(HEAP32[i23 >> 2] | 0) + 8 >> 2] | 0) | 0) > (((HEAP32[i11 >> 2] | 0) * 3 | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[(HEAP32[i23 >> 2] | 0) + 8 >> 2] | 0) | 0; else i1 = ((HEAP32[i11 >> 2] | 0) * 3 | 0) / 16 | 0;
     i10 = (HEAP32[i23 >> 2] | 0) + 8 | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
    }
    if ((HEAP32[i28 >> 2] | 0) < (HEAP32[i37 >> 2] | 0)) {
     HEAP32[i24 >> 2] = (HEAP32[i39 >> 2] | 0) + (HEAP32[i28 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[i24 >> 2] >> 2] | 0) | 0) > (((HEAP32[i30 >> 2] | 0) * 5 | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[HEAP32[i24 >> 2] >> 2] | 0) | 0; else i1 = ((HEAP32[i30 >> 2] | 0) * 5 | 0) / 16 | 0;
     i10 = HEAP32[i24 >> 2] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
     if ((0 - (HEAP32[(HEAP32[i24 >> 2] | 0) + 4 >> 2] | 0) | 0) > (((HEAP32[i15 >> 2] | 0) * 5 | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[(HEAP32[i24 >> 2] | 0) + 4 >> 2] | 0) | 0; else i1 = ((HEAP32[i15 >> 2] | 0) * 5 | 0) / 16 | 0;
     i10 = (HEAP32[i24 >> 2] | 0) + 4 | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
     if ((0 - (HEAP32[(HEAP32[i24 >> 2] | 0) + 8 >> 2] | 0) | 0) > (((HEAP32[i11 >> 2] | 0) * 5 | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[(HEAP32[i24 >> 2] | 0) + 8 >> 2] | 0) | 0; else i1 = ((HEAP32[i11 >> 2] | 0) * 5 | 0) / 16 | 0;
     i10 = (HEAP32[i24 >> 2] | 0) + 8 | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
    }
    if ((HEAP32[i26 >> 2] | 0) < (HEAP32[i37 >> 2] | 0)) {
     HEAP32[i22 >> 2] = (HEAP32[i39 >> 2] | 0) + (HEAP32[i26 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[i22 >> 2] >> 2] | 0) | 0) > ((HEAP32[i30 >> 2] | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[HEAP32[i22 >> 2] >> 2] | 0) | 0; else i1 = (HEAP32[i30 >> 2] | 0) / 16 | 0;
     i10 = HEAP32[i22 >> 2] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
     if ((0 - (HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] | 0) | 0) > ((HEAP32[i15 >> 2] | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] | 0) | 0; else i1 = (HEAP32[i15 >> 2] | 0) / 16 | 0;
     i10 = (HEAP32[i22 >> 2] | 0) + 4 | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
     if ((0 - (HEAP32[(HEAP32[i22 >> 2] | 0) + 8 >> 2] | 0) | 0) > ((HEAP32[i11 >> 2] | 0) / 16 | 0 | 0)) i1 = 0 - (HEAP32[(HEAP32[i22 >> 2] | 0) + 8 >> 2] | 0) | 0; else i1 = (HEAP32[i11 >> 2] | 0) / 16 | 0;
     i10 = (HEAP32[i22 >> 2] | 0) + 8 | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i1;
    }
   }
   HEAP32[i33 >> 2] = (HEAP32[i33 >> 2] | 0) + 1;
  }
  HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
 }
 HEAP32[i36 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i39 >> 2] | 0;
  if ((HEAP32[i36 >> 2] | 0) >= (HEAP32[i37 >> 2] << 2 | 0)) break;
  HEAP8[(HEAP32[i38 >> 2] | 0) + (HEAP32[i36 >> 2] | 0) >> 0] = HEAP32[i1 + (HEAP32[i36 >> 2] << 2) >> 2];
  HEAP32[i36 >> 2] = (HEAP32[i36 >> 2] | 0) + 1;
 }
 _free(i1);
 STACKTOP = i40;
 return;
}

function _GenImageFontAtlas(i22, i3, i2, i4, i5, i17, i15) {
 i22 = i22 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, f39 = f0;
 i38 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i35 = i1 + 8 | 0;
 i19 = i1;
 i25 = i1 + 132 | 0;
 i24 = i1 + 128 | 0;
 i26 = i1 + 124 | 0;
 i6 = i1 + 120 | 0;
 i32 = i1 + 116 | 0;
 i16 = i1 + 112 | 0;
 i23 = i1 + 92 | 0;
 i33 = i1 + 88 | 0;
 i18 = i1 + 84 | 0;
 i8 = i1 + 80 | 0;
 i7 = i1 + 76 | 0;
 i11 = i1 + 72 | 0;
 i13 = i1 + 68 | 0;
 i14 = i1 + 64 | 0;
 i10 = i1 + 60 | 0;
 i21 = i1 + 56 | 0;
 i20 = i1 + 52 | 0;
 i27 = i1 + 48 | 0;
 i31 = i1 + 44 | 0;
 i34 = i1 + 40 | 0;
 i9 = i1 + 36 | 0;
 i29 = i1 + 32 | 0;
 i37 = i1 + 28 | 0;
 i36 = i1 + 24 | 0;
 i28 = i1 + 20 | 0;
 i30 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 HEAP32[i25 >> 2] = i3;
 HEAP32[i24 >> 2] = i2;
 HEAP32[i26 >> 2] = i4;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i32 >> 2] = i17;
 HEAP32[i16 >> 2] = i15;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 HEAP32[i23 + 12 >> 2] = 0;
 HEAP32[i23 + 16 >> 2] = 0;
 HEAP32[HEAP32[i24 >> 2] >> 2] = 0;
 i17 = HEAP32[i26 >> 2] | 0;
 HEAP32[i26 >> 2] = (i17 | 0) > 0 ? i17 | 0 : 95;
 i17 = _malloc(HEAP32[i26 >> 2] << 4) | 0;
 HEAP32[i33 >> 2] = i17;
 HEAPF32[i18 >> 2] = Math_fround(0.0);
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i26 >> 2] | 0)) break;
  i15 = (HEAP32[i25 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) * 36 | 0) + 16 | 0;
  i17 = HEAP32[i32 >> 2] << 1 | 0;
  f39 = Math_fround(Math_imul((HEAP32[i15 + 4 >> 2] | 0) + i17 | 0, (HEAP32[i15 + 8 >> 2] | 0) + i17 | 0) | 0);
  f39 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f39);
  HEAPF32[i18 >> 2] = f39;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 f39 = Math_fround(Math_fround(Math_sqrt(Math_fround(HEAPF32[i18 >> 2]))) * Math_fround(1.29999995));
 HEAPF32[i7 >> 2] = f39;
 i18 = ~~Math_fround(+Math_pow(2.0, +Math_fround(Math_ceil(Math_fround(Math_fround(+Math_log(+Math_fround(HEAPF32[i7 >> 2]))) / Math_fround(+Math_log(2.0)))))));
 HEAP32[i11 >> 2] = i18;
 HEAP32[i23 + 4 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i23 + 8 >> 2] = HEAP32[i11 >> 2];
 i18 = _calloc(1, Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) | 0;
 HEAP32[i23 >> 2] = i18;
 HEAP32[i23 + 16 >> 2] = 1;
 HEAP32[i23 + 12 >> 2] = 1;
 L5 : do if (!(HEAP32[i16 >> 2] | 0)) {
  HEAP32[i13 >> 2] = HEAP32[i32 >> 2];
  HEAP32[i14 >> 2] = HEAP32[i32 >> 2];
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i26 >> 2] | 0)) break L5;
   HEAP32[i21 >> 2] = 0;
   while (1) {
    if ((HEAP32[i21 >> 2] | 0) >= (HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 36 | 0) + 16 + 8 >> 2] | 0)) break;
    HEAP32[i20 >> 2] = 0;
    while (1) {
     if ((HEAP32[i20 >> 2] | 0) >= (HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] | 0)) break;
     i35 = Math_imul(HEAP32[i21 >> 2] | 0, HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] | 0) | 0;
     i36 = Math_imul((HEAP32[i14 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) | 0, HEAP32[i23 + 4 >> 2] | 0) | 0;
     i37 = HEAP32[i20 >> 2] | 0;
     HEAP8[(HEAP32[i23 >> 2] | 0) + (i36 + ((HEAP32[i13 >> 2] | 0) + i37)) >> 0] = HEAP8[(HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 36 | 0) + 16 >> 2] | 0) + (i35 + i37) >> 0] | 0;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
    }
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
   }
   f39 = Math_fround(HEAP32[i13 >> 2] | 0);
   HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i10 >> 2] << 4) >> 2] = f39;
   f39 = Math_fround(HEAP32[i14 >> 2] | 0);
   HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i10 >> 2] << 4) + 4 >> 2] = f39;
   f39 = Math_fround(HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] | 0);
   HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i10 >> 2] << 4) + 8 >> 2] = f39;
   f39 = Math_fround(HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 36 | 0) + 16 + 8 >> 2] | 0);
   HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i10 >> 2] << 4) + 12 >> 2] = f39;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + ((HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] | 0) + (HEAP32[i32 >> 2] << 1));
   if ((HEAP32[i13 >> 2] | 0) >= ((HEAP32[i23 + 4 >> 2] | 0) - (HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] | 0) - (HEAP32[i32 >> 2] | 0) | 0)) {
    HEAP32[i13 >> 2] = HEAP32[i32 >> 2];
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + (HEAP32[i32 >> 2] << 1));
    if ((HEAP32[i14 >> 2] | 0) > ((HEAP32[i23 + 8 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) - (HEAP32[i32 >> 2] | 0) | 0)) break L5;
   }
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
 } else if ((HEAP32[i16 >> 2] | 0) == 1) {
  _TraceLog(2, 52369, i19);
  i21 = _malloc(48) | 0;
  HEAP32[i27 >> 2] = i21;
  i21 = _malloc(HEAP32[i26 >> 2] << 3) | 0;
  HEAP32[i31 >> 2] = i21;
  _stbrp_init_target(HEAP32[i27 >> 2] | 0, HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i26 >> 2] | 0);
  i21 = _malloc(HEAP32[i26 >> 2] << 4) | 0;
  HEAP32[i34 >> 2] = i21;
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i26 >> 2] | 0)) break;
   HEAP32[(HEAP32[i34 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) >> 2] = HEAP32[i9 >> 2];
   HEAP16[(HEAP32[i34 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 4 >> 1] = (HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] | 0) + (HEAP32[i32 >> 2] << 1);
   HEAP16[(HEAP32[i34 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 6 >> 1] = (HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) * 36 | 0) + 16 + 8 >> 2] | 0) + (HEAP32[i32 >> 2] << 1);
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  _stbrp_pack_rects(HEAP32[i27 >> 2] | 0, HEAP32[i34 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
  HEAP32[i29 >> 2] = 0;
  while (1) {
   i1 = HEAP32[i34 >> 2] | 0;
   if ((HEAP32[i29 >> 2] | 0) >= (HEAP32[i26 >> 2] | 0)) break;
   f39 = Math_fround(HEAPU16[i1 + (HEAP32[i29 >> 2] << 4) + 8 >> 1] | 0);
   f39 = Math_fround(f39 + Math_fround(HEAP32[i32 >> 2] | 0));
   HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i29 >> 2] << 4) >> 2] = f39;
   f39 = Math_fround(HEAPU16[(HEAP32[i34 >> 2] | 0) + (HEAP32[i29 >> 2] << 4) + 10 >> 1] | 0);
   f39 = Math_fround(f39 + Math_fround(HEAP32[i32 >> 2] | 0));
   HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i29 >> 2] << 4) + 4 >> 2] = f39;
   f39 = Math_fround(HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i29 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] | 0);
   HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i29 >> 2] << 4) + 8 >> 2] = f39;
   f39 = Math_fround(HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i29 >> 2] | 0) * 36 | 0) + 16 + 8 >> 2] | 0);
   HEAPF32[(HEAP32[i33 >> 2] | 0) + (HEAP32[i29 >> 2] << 4) + 12 >> 2] = f39;
   L30 : do if (HEAP32[(HEAP32[i34 >> 2] | 0) + (HEAP32[i29 >> 2] << 4) + 12 >> 2] | 0) {
    HEAP32[i37 >> 2] = 0;
    while (1) {
     if ((HEAP32[i37 >> 2] | 0) >= (HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i29 >> 2] | 0) * 36 | 0) + 16 + 8 >> 2] | 0)) break L30;
     HEAP32[i36 >> 2] = 0;
     while (1) {
      if ((HEAP32[i36 >> 2] | 0) >= (HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i29 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] | 0)) break;
      i19 = Math_imul(HEAP32[i37 >> 2] | 0, HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i29 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] | 0) | 0;
      i20 = Math_imul((HEAPU16[(HEAP32[i34 >> 2] | 0) + (HEAP32[i29 >> 2] << 4) + 10 >> 1] | 0) + (HEAP32[i32 >> 2] | 0) + (HEAP32[i37 >> 2] | 0) | 0, HEAP32[i23 + 4 >> 2] | 0) | 0;
      i21 = HEAP32[i36 >> 2] | 0;
      HEAP8[(HEAP32[i23 >> 2] | 0) + (i20 + ((HEAPU16[(HEAP32[i34 >> 2] | 0) + (HEAP32[i29 >> 2] << 4) + 8 >> 1] | 0) + (HEAP32[i32 >> 2] | 0) + i21)) >> 0] = HEAP8[(HEAP32[(HEAP32[i25 >> 2] | 0) + ((HEAP32[i29 >> 2] | 0) * 36 | 0) + 16 >> 2] | 0) + (i19 + i21) >> 0] | 0;
      HEAP32[i36 >> 2] = (HEAP32[i36 >> 2] | 0) + 1;
     }
     HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + 1;
    }
   } else {
    HEAP32[i35 >> 2] = HEAP32[i29 >> 2];
    _TraceLog(4, 52402, i35);
   } while (0);
   HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
  }
  _free(i1);
  _free(HEAP32[i31 >> 2] | 0);
  _free(HEAP32[i27 >> 2] | 0);
 } while (0);
 i37 = _malloc((Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 1) | 0;
 HEAP32[i28 >> 2] = i37;
 HEAP32[i30 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 while (1) {
  if ((HEAP32[i30 >> 2] | 0) >= (Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0)) break;
  HEAP8[(HEAP32[i28 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] = -1;
  HEAP8[(HEAP32[i28 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + 1) >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + (HEAP32[i30 >> 2] | 0) >> 0] | 0;
  HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 2;
 }
 _free(HEAP32[i23 >> 2] | 0);
 HEAP32[i23 >> 2] = HEAP32[i28 >> 2];
 HEAP32[i23 + 16 >> 2] = 2;
 HEAP32[HEAP32[i24 >> 2] >> 2] = HEAP32[i33 >> 2];
 HEAP32[i22 >> 2] = HEAP32[i23 >> 2];
 HEAP32[i22 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
 HEAP32[i22 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
 HEAP32[i22 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
 HEAP32[i22 + 16 >> 2] = HEAP32[i23 + 16 >> 2];
 STACKTOP = i38;
 return;
}

function _emscripten_webgl1_get_proc_address(i1) {
 i1 = i1 | 0;
 do if (!(_strcmp(i1, 59684) | 0)) i1 = 2; else if (!(_strcmp(i1, 59700) | 0)) i1 = 8; else if (!(_strcmp(i1, 59715) | 0)) i1 = 3; else if (!(_strcmp(i1, 59736) | 0)) i1 = 9; else if (!(_strcmp(i1, 59749) | 0)) i1 = 10; else if (!(_strcmp(i1, 59767) | 0)) i1 = 11; else if (!(_strcmp(i1, 59786) | 0)) i1 = 12; else if (!(_strcmp(i1, 59800) | 0)) i1 = 1; else if (!(_strcmp(i1, 59813) | 0)) i1 = 3; else if (!(_strcmp(i1, 59829) | 0)) i1 = 13; else if (!(_strcmp(i1, 59853) | 0)) i1 = 14; else if (!(_strcmp(i1, 59865) | 0)) i1 = 4; else if (!(_strcmp(i1, 59885) | 0)) i1 = 5; else if (!(_strcmp(i1, 59898) | 0)) i1 = 6; else if (!(_strcmp(i1, 59914) | 0)) i1 = 15; else if (!(_strcmp(i1, 59939) | 0)) i1 = 4; else if (!(_strcmp(i1, 59947) | 0)) i1 = 2; else if (!(_strcmp(i1, 59960) | 0)) i1 = 1; else if (!(_strcmp(i1, 59974) | 0)) i1 = 5; else {
  if (!(_strcmp(i1, 59989) | 0)) {
   i1 = 7;
   break;
  }
  if (!(_strcmp(i1, 60001) | 0)) {
   i1 = 6;
   break;
  }
  if (!(_strcmp(i1, 60017) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 60040) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 60066) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 60083) | 0)) {
   i1 = 3;
   break;
  }
  if (!(_strcmp(i1, 60103) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 60119) | 0)) {
   i1 = 16;
   break;
  }
  if (!(_strcmp(i1, 60134) | 0)) {
   i1 = 7;
   break;
  }
  if (!(_strcmp(i1, 60145) | 0)) {
   i1 = 15;
   break;
  }
  if (!(_strcmp(i1, 60161) | 0)) {
   i1 = 16;
   break;
  }
  if (!(_strcmp(i1, 60182) | 0)) {
   i1 = 8;
   break;
  }
  if (!(_strcmp(i1, 60198) | 0)) {
   i1 = 17;
   break;
  }
  if (!(_strcmp(i1, 60220) | 0)) {
   i1 = 9;
   break;
  }
  if (!(_strcmp(i1, 60235) | 0)) {
   i1 = 18;
   break;
  }
  if (!(_strcmp(i1, 60252) | 0)) {
   i1 = 10;
   break;
  }
  if (!(_strcmp(i1, 60264) | 0)) {
   i1 = 11;
   break;
  }
  if (!(_strcmp(i1, 60276) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 60290) | 0)) {
   i1 = 19;
   break;
  }
  if (!(_strcmp(i1, 60305) | 0)) {
   i1 = 12;
   break;
  }
  if (!(_strcmp(i1, 60315) | 0)) {
   i1 = 13;
   break;
  }
  if (!(_strcmp(i1, 60342) | 0)) {
   i1 = 4;
   break;
  }
  if (!(_strcmp(i1, 60355) | 0)) {
   i1 = 8;
   break;
  }
  if (!(_strcmp(i1, 60370) | 0)) {
   i1 = 14;
   break;
  }
  if (!(_strcmp(i1, 60379) | 0)) {
   i1 = 15;
   break;
  }
  if (!(_strcmp(i1, 60405) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 60414) | 0)) {
   i1 = 3;
   break;
  }
  if (!(_strcmp(i1, 60422) | 0)) {
   i1 = 9;
   break;
  }
  if (!(_strcmp(i1, 60448) | 0)) {
   i1 = 37;
   break;
  }
  if (!(_strcmp(i1, 60471) | 0)) {
   i1 = 16;
   break;
  }
  if (!(_strcmp(i1, 60483) | 0)) {
   i1 = 20;
   break;
  }
  if (!(_strcmp(i1, 60496) | 0)) {
   i1 = 17;
   break;
  }
  if (!(_strcmp(i1, 60513) | 0)) {
   i1 = 21;
   break;
  }
  if (!(_strcmp(i1, 60531) | 0)) {
   i1 = 22;
   break;
  }
  if (!(_strcmp(i1, 60550) | 0)) {
   i1 = 23;
   break;
  }
  if (!(_strcmp(i1, 60564) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 60582) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 60601) | 0)) {
   i1 = 10;
   break;
  }
  if (!(_strcmp(i1, 60622) | 0)) {
   i1 = 9;
   break;
  }
  if (!(_strcmp(i1, 60642) | 0)) {
   i1 = 24;
   break;
  }
  if (!(_strcmp(i1, 60656) | 0)) {
   i1 = 5;
   break;
  }
  if (!(_strcmp(i1, 60679) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 60690) | 0)) {
   i1 = 25;
   break;
  }
  if (!(_strcmp(i1, 60702) | 0)) {
   i1 = 11;
   break;
  }
  if (!(_strcmp(i1, 60740) | 0)) {
   i1 = 26;
   break;
  }
  if (!(_strcmp(i1, 60754) | 0)) {
   i1 = 6;
   break;
  }
  if (!(_strcmp(i1, 60769) | 0)) {
   i1 = 12;
   break;
  }
  if (!(_strcmp(i1, 60789) | 0)) {
   i1 = 7;
   break;
  }
  if (!(_strcmp(i1, 60818) | 0)) {
   i1 = 8;
   break;
  }
  if (!(_strcmp(i1, 60832) | 0)) {
   i1 = 13;
   break;
  }
  if (!(_strcmp(i1, 60851) | 0)) {
   i1 = 14;
   break;
  }
  if (!(_strcmp(i1, 60878) | 0)) {
   i1 = 15;
   break;
  }
  if (!(_strcmp(i1, 60896) | 0)) {
   i1 = 17;
   break;
  }
  if (!(_strcmp(i1, 60908) | 0)) {
   i1 = 9;
   break;
  }
  if (!(_strcmp(i1, 60928) | 0)) {
   i1 = 10;
   break;
  }
  if (!(_strcmp(i1, 60948) | 0)) {
   i1 = 11;
   break;
  }
  if (!(_strcmp(i1, 60963) | 0)) {
   i1 = 12;
   break;
  }
  if (!(_strcmp(i1, 60978) | 0)) {
   i1 = 10;
   break;
  }
  if (!(_strcmp(i1, 60999) | 0)) {
   i1 = 13;
   break;
  }
  if (!(_strcmp(i1, 61019) | 0)) {
   i1 = 14;
   break;
  }
  if (!(_strcmp(i1, 61039) | 0)) {
   i1 = 15;
   break;
  }
  if (!(_strcmp(i1, 61065) | 0)) {
   i1 = 27;
   break;
  }
  if (!(_strcmp(i1, 61072) | 0)) {
   i1 = 18;
   break;
  }
  if (!(_strcmp(i1, 61083) | 0)) {
   i1 = 19;
   break;
  }
  if (!(_strcmp(i1, 61095) | 0)) {
   i1 = 20;
   break;
  }
  if (!(_strcmp(i1, 61111) | 0)) {
   i1 = 21;
   break;
  }
  if (!(_strcmp(i1, 61123) | 0)) {
   i1 = 22;
   break;
  }
  if (!(_strcmp(i1, 61140) | 0)) {
   i1 = 23;
   break;
  }
  if (!(_strcmp(i1, 61151) | 0)) {
   i1 = 24;
   break;
  }
  if (!(_strcmp(i1, 61163) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 61175) | 0)) {
   i1 = 18;
   break;
  }
  if (!(_strcmp(i1, 61189) | 0)) {
   i1 = 28;
   break;
  }
  if (!(_strcmp(i1, 61203) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 61219) | 0)) {
   i1 = 3;
   break;
  }
  if (!(_strcmp(i1, 61232) | 0)) {
   i1 = 4;
   break;
  }
  if (!(_strcmp(i1, 61256) | 0)) {
   i1 = 16;
   break;
  }
  if (!(_strcmp(i1, 61278) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 61295) | 0)) {
   i1 = 17;
   break;
  }
  if (!(_strcmp(i1, 61305) | 0)) {
   i1 = 38;
   break;
  }
  if (!(_strcmp(i1, 61320) | 0)) {
   i1 = 18;
   break;
  }
  if (!(_strcmp(i1, 61335) | 0)) {
   i1 = 16;
   break;
  }
  if (!(_strcmp(i1, 61349) | 0)) {
   i1 = 19;
   break;
  }
  if (!(_strcmp(i1, 61371) | 0)) {
   i1 = 19;
   break;
  }
  if (!(_strcmp(i1, 61385) | 0)) {
   i1 = 29;
   break;
  }
  if (!(_strcmp(i1, 61407) | 0)) {
   i1 = 17;
   break;
  }
  if (!(_strcmp(i1, 61419) | 0)) {
   i1 = 20;
   break;
  }
  if (!(_strcmp(i1, 61439) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 61452) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 61468) | 0)) {
   i1 = 18;
   break;
  }
  if (!(_strcmp(i1, 61485) | 0)) {
   i1 = 19;
   break;
  }
  if (!(_strcmp(i1, 61501) | 0)) {
   i1 = 20;
   break;
  }
  if (!(_strcmp(i1, 61518) | 0)) {
   i1 = 3;
   break;
  }
  if (!(_strcmp(i1, 61534) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 61546) | 0)) {
   i1 = 21;
   break;
  }
  if (!(_strcmp(i1, 61559) | 0)) {
   i1 = 30;
   break;
  }
  if (!(_strcmp(i1, 61571) | 0)) {
   i1 = 22;
   break;
  }
  if (!(_strcmp(i1, 61584) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 61596) | 0)) {
   i1 = 23;
   break;
  }
  if (!(_strcmp(i1, 61609) | 0)) {
   i1 = 24;
   break;
  }
  if (!(_strcmp(i1, 61621) | 0)) {
   i1 = 25;
   break;
  }
  if (!(_strcmp(i1, 61634) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 61646) | 0)) {
   i1 = 26;
   break;
  }
  if (!(_strcmp(i1, 61659) | 0)) {
   i1 = 21;
   break;
  }
  if (!(_strcmp(i1, 61671) | 0)) {
   i1 = 27;
   break;
  }
  if (!(_strcmp(i1, 61684) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 61696) | 0)) {
   i1 = 28;
   break;
  }
  if (!(_strcmp(i1, 61709) | 0)) {
   i1 = 39;
   break;
  }
  if (!(_strcmp(i1, 61721) | 0)) {
   i1 = 29;
   break;
  }
  if (!(_strcmp(i1, 61734) | 0)) {
   i1 = 22;
   break;
  }
  if (!(_strcmp(i1, 61753) | 0)) {
   i1 = 23;
   break;
  }
  if (!(_strcmp(i1, 61772) | 0)) {
   i1 = 24;
   break;
  }
  if (!(_strcmp(i1, 61791) | 0)) {
   i1 = 20;
   break;
  }
  if (!(_strcmp(i1, 61804) | 0)) {
   i1 = 21;
   break;
  }
  if (!(_strcmp(i1, 61822) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 61839) | 0)) {
   i1 = 31;
   break;
  }
  if (!(_strcmp(i1, 61857) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 61874) | 0)) {
   i1 = 32;
   break;
  }
  if (!(_strcmp(i1, 61892) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 61909) | 0)) {
   i1 = 33;
   break;
  }
  if (!(_strcmp(i1, 61927) | 0)) {
   i1 = 2;
   break;
  }
  if (!(_strcmp(i1, 61944) | 0)) {
   i1 = 34;
   break;
  }
  if (!(_strcmp(i1, 61962) | 0)) {
   i1 = 1;
   break;
  }
  if (!(_strcmp(i1, 61984) | 0)) {
   i1 = 25;
   break;
  }
  if (!(_strcmp(i1, 61995) | 0)) {
   i1 = 35;
   break;
  }
  if (!(_strcmp(i1, 62011) | 0)) {
   i1 = 36;
   break;
  }
  if (!(_strcmp(i1, 62030) | 0)) {
   i1 = 25;
   break;
  }
  if (!(_strcmp(i1, 62043) | 0)) {
   i1 = 37;
   break;
  }
  if (!(_strcmp(i1, 62059) | 0)) {
   i1 = 22;
   break;
  }
  if (!(_strcmp(i1, 62073) | 0)) {
   i1 = 38;
   break;
  }
  if (!(_strcmp(i1, 62091) | 0)) {
   i1 = 30;
   break;
  }
  if (!(_strcmp(i1, 62107) | 0)) {
   i1 = 31;
   break;
  }
  if (!(_strcmp(i1, 62129) | 0)) {
   i1 = 32;
   break;
  }
  if (!(_strcmp(i1, 62152) | 0)) {
   i1 = 33;
   break;
  }
  if (!(_strcmp(i1, 62176) | 0)) {
   i1 = 34;
   break;
  }
  if (!(_strcmp(i1, 62201) | 0)) {
   i1 = 23;
   break;
  }
  if (!(_strcmp(i1, 62222) | 0)) {
   i1 = 39;
   break;
  }
  if (!(_strcmp(i1, 62246) | 0)) {
   i1 = 40;
   break;
  }
  if (!(_strcmp(i1, 62267) | 0)) {
   i1 = 26;
   break;
  }
  if (!(_strcmp(i1, 62286) | 0)) {
   i1 = 41;
   break;
  }
  if (!(_strcmp(i1, 62305) | 0)) {
   i1 = 26;
   break;
  }
  if (!(_strcmp(i1, 62332) | 0)) {
   i1 = 40;
   break;
  }
  i1 = (_strcmp(i1, 62361) | 0) == 0;
  return (i1 ? 7 : 0) | 0;
 } while (0);
 return i1 | 0;
}

function _jar_xm_get_memory_needed_for_context(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 24 | 0;
 i15 = i1 + 20 | 0;
 i13 = i1 + 16 | 0;
 i19 = i1 + 12 | 0;
 i16 = i1 + 42 | 0;
 i8 = i1 + 40 | 0;
 i17 = i1 + 38 | 0;
 i7 = i1 + 36 | 0;
 i9 = i1 + 34 | 0;
 i11 = i1 + 32 | 0;
 i18 = i1 + 30 | 0;
 i20 = i1 + 8 | 0;
 i22 = i1 + 4 | 0;
 i12 = i1 + 28 | 0;
 i21 = i1;
 i10 = i1 + 44 | 0;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i3;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i19 >> 2] = 60;
 if (((HEAP32[i19 >> 2] | 0) + 8 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 8) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i19 >> 2] | 0) + 8 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 8 + 1) >> 0] | 0; else i2 = 0;
 HEAP16[i16 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
 if (((HEAP32[i19 >> 2] | 0) + 10 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 10) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i19 >> 2] | 0) + 10 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 10 + 1) >> 0] | 0; else i2 = 0;
 HEAP16[i8 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + ((HEAPU16[i8 >> 1] | 0) << 3);
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 15 & -16;
 if (((HEAP32[i19 >> 2] | 0) + 12 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 12) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i19 >> 2] | 0) + 12 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 12 + 1) >> 0] | 0; else i2 = 0;
 HEAP16[i17 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + ((HEAPU16[i17 >> 1] | 0) * 264 | 0);
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 15 & -16;
 if (((HEAP32[i19 >> 2] | 0) + 4 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 4) >> 0] | 0; else i2 = 0;
 if (((HEAP32[i19 >> 2] | 0) + 4 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 4 + 1) >> 0] | 0; else i1 = 0;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + ((i2 & 65535 | (i1 & 65535) << 8) << 8);
 if ((HEAP32[i19 >> 2] | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0; else i1 = 0;
 if (((HEAP32[i19 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1) >> 0] | 0; else i2 = 0;
 if (((HEAP32[i19 >> 2] | 0) + 2 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2) >> 0] | 0; else i3 = 0;
 if (((HEAP32[i19 >> 2] | 0) + 2 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2 + 1) >> 0] | 0; else i4 = 0;
 HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16);
 HEAP16[i7 >> 1] = 0;
 while (1) {
  if ((HEAPU16[i7 >> 1] | 0 | 0) >= (HEAPU16[i8 >> 1] | 0 | 0)) break;
  if (((HEAP32[i19 >> 2] | 0) + 5 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 5) >> 0] | 0; else i1 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 5 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 5 + 1) >> 0] | 0; else i2 = 0;
  HEAP16[i9 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
  i6 = (Math_imul(HEAPU16[i9 >> 1] | 0, HEAPU16[i16 >> 1] | 0) | 0) * 5 | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i6;
  if ((HEAP32[i19 >> 2] | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0; else i1 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1) >> 0] | 0; else i2 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 2 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2) >> 0] | 0; else i3 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 2 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2 + 1) >> 0] | 0; else i4 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 7 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i5 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 7) >> 0] | 0; else i5 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 7 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i6 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 7 + 1) >> 0] | 0; else i6 = 0;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + ((i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16) + (i5 & 65535 | (i6 & 65535) << 8));
  HEAP16[i7 >> 1] = (HEAP16[i7 >> 1] | 0) + 1 << 16 >> 16;
 }
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 15 & -16;
 HEAP16[i11 >> 1] = 0;
 while (1) {
  if ((HEAPU16[i11 >> 1] | 0 | 0) >= (HEAPU16[i17 >> 1] | 0 | 0)) break;
  HEAP32[i20 >> 2] = 0;
  HEAP32[i22 >> 2] = 0;
  if (((HEAP32[i19 >> 2] | 0) + 27 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 27) >> 0] | 0; else i1 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 27 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 27 + 1) >> 0] | 0; else i2 = 0;
  HEAP16[i18 >> 1] = i1 & 65535 | (i2 & 65535) << 8;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + ((HEAPU16[i18 >> 1] | 0) * 80 | 0);
  if ((HEAPU16[i18 >> 1] | 0 | 0) > 0) {
   if (((HEAP32[i19 >> 2] | 0) + 29 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 29) >> 0] | 0; else i1 = 0;
   if (((HEAP32[i19 >> 2] | 0) + 29 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 29 + 1) >> 0] | 0; else i2 = 0;
   if (((HEAP32[i19 >> 2] | 0) + 29 + 2 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 29 + 2) >> 0] | 0; else i3 = 0;
   if (((HEAP32[i19 >> 2] | 0) + 29 + 2 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 29 + 2 + 1) >> 0] | 0; else i4 = 0;
   HEAP32[i20 >> 2] = i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16;
  }
  if ((HEAP32[i19 >> 2] | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0; else i1 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1) >> 0] | 0; else i2 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 2 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2) >> 0] | 0; else i3 = 0;
  if (((HEAP32[i19 >> 2] | 0) + 2 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2 + 1) >> 0] | 0; else i4 = 0;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16);
  HEAP16[i12 >> 1] = 0;
  while (1) {
   if ((HEAPU16[i12 >> 1] | 0 | 0) >= (HEAPU16[i18 >> 1] | 0 | 0)) break;
   if ((HEAP32[i19 >> 2] | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0; else i1 = 0;
   if (((HEAP32[i19 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i2 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1) >> 0] | 0; else i2 = 0;
   if (((HEAP32[i19 >> 2] | 0) + 2 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i3 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2) >> 0] | 0; else i3 = 0;
   if (((HEAP32[i19 >> 2] | 0) + 2 + 1 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i4 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 2 + 1) >> 0] | 0; else i4 = 0;
   HEAP32[i21 >> 2] = i1 & 65535 | (i2 & 65535) << 8 | (i3 & 65535 | (i4 & 65535) << 8) << 16;
   if (((HEAP32[i19 >> 2] | 0) + 14 | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) i1 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 14) >> 0] | 0; else i1 = 0;
   HEAP8[i10 >> 0] = i1;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + (HEAP32[i21 >> 2] | 0);
   i1 = HEAP32[i21 >> 2] | 0;
   if ((HEAPU8[i10 >> 0] | 0) & 16 | 0) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (i1 << 1); else HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (i1 << 2);
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i20 >> 2] | 0);
   HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + 1 << 16 >> 16;
  }
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
  HEAP16[i11 >> 1] = (HEAP16[i11 >> 1] | 0) + 1 << 16 >> 16;
 }
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + ((HEAPU16[i16 >> 1] | 0) * 288 | 0);
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 392;
 STACKTOP = i23;
 return HEAP32[i13 >> 2] | 0;
}

function _ma_format_converter_read(i18, i2, i3, i20, i23) {
 i18 = i18 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i20 = i20 | 0;
 i23 = i23 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i35 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 98704 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(98704);
 i27 = i1 + 98624 | 0;
 i19 = i1 + 98688 | 0;
 i4 = i1 + 98616 | 0;
 i21 = i1 + 98684 | 0;
 i24 = i1 + 98680 | 0;
 i34 = i1 + 98608 | 0;
 i28 = i1 + 98676 | 0;
 i29 = i1 + 98672 | 0;
 i5 = i1 + 98668 | 0;
 i22 = i1 + 98664 | 0;
 i6 = i1 + 98660 | 0;
 i9 = i1 + 98600 | 0;
 i12 = i1 + 98592 | 0;
 i16 = i1 + 98656 | 0;
 i32 = i1 + 65536 | 0;
 i7 = i1 + 98652 | 0;
 i10 = i1 + 98584 | 0;
 i13 = i1 + 98576 | 0;
 i26 = i1 + 98432 | 0;
 i31 = i1 + 98648 | 0;
 i17 = i1 + 98644 | 0;
 i33 = i1 + 32768 | 0;
 i8 = i1 + 98640 | 0;
 i11 = i1 + 98568 | 0;
 i14 = i1 + 98560 | 0;
 i25 = i1 + 98304 | 0;
 i30 = i1 + 98636 | 0;
 i15 = i1 + 98632 | 0;
 HEAP32[i19 >> 2] = i18;
 i18 = i4;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i18 + 4 >> 2] = i3;
 HEAP32[i21 >> 2] = i20;
 HEAP32[i24 >> 2] = i23;
 if ((HEAP32[i19 >> 2] | 0) == 0 | (HEAP32[i21 >> 2] | 0) == 0) {
  i33 = i27;
  HEAP32[i33 >> 2] = 0;
  HEAP32[i33 + 4 >> 2] = 0;
  i33 = i27;
  i34 = i33;
  i34 = HEAP32[i34 >> 2] | 0;
  i33 = i33 + 4 | 0;
  i33 = HEAP32[i33 >> 2] | 0;
  setTempRet0(i33 | 0);
  STACKTOP = i35;
  return i34 | 0;
 }
 i23 = i34;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 i23 = _ma_get_bytes_per_sample(HEAP32[HEAP32[i19 >> 2] >> 2] | 0) | 0;
 HEAP32[i28 >> 2] = i23;
 i23 = _ma_get_bytes_per_sample(HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[i29 >> 2] = i23;
 i29 = Math_imul(HEAP32[i29 >> 2] | 0, HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i29;
 HEAP32[i22 >> 2] = HEAP32[i21 >> 2];
 L5 : do if (HEAP32[(HEAP32[i19 >> 2] | 0) + 28 >> 2] | 0) {
  if ((HEAP32[HEAP32[i19 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2] | 0)) while (1) {
   i32 = i34;
   i30 = HEAP32[i32 + 4 >> 2] | 0;
   i33 = i4;
   i31 = HEAP32[i33 + 4 >> 2] | 0;
   if (!(i30 >>> 0 < i31 >>> 0 ? 1 : (i30 | 0) == (i31 | 0) ? (HEAP32[i32 >> 2] | 0) >>> 0 < (HEAP32[i33 >> 2] | 0) >>> 0 : 0)) break L5;
   i30 = i4;
   i31 = i34;
   i31 = _i64Subtract(HEAP32[i30 >> 2] | 0, HEAP32[i30 + 4 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i31 + 4 >> 2] | 0) | 0;
   i30 = getTempRet0() | 0;
   i32 = i9;
   HEAP32[i32 >> 2] = i31;
   HEAP32[i32 + 4 >> 2] = i30;
   i32 = i9;
   i30 = HEAP32[i32 >> 2] | 0;
   i32 = HEAP32[i32 + 4 >> 2] | 0;
   i31 = i12;
   HEAP32[i31 >> 2] = i30;
   HEAP32[i31 + 4 >> 2] = i32;
   i31 = i12;
   i33 = HEAP32[i31 + 4 >> 2] | 0;
   i31 = i33 >>> 0 > 0 | (i33 | 0) == 0 & (HEAP32[i31 >> 2] | 0) >>> 0 > 4294967295;
   i33 = i12;
   HEAP32[i33 >> 2] = i31 ? -1 : i30;
   HEAP32[i33 + 4 >> 2] = i31 ? 0 : i32;
   i33 = HEAP32[i19 >> 2] | 0;
   i33 = FUNCTION_TABLE_iiiii[HEAP32[i33 + 28 >> 2] & 15](i33 | 0, HEAP32[i12 >> 2] | 0, HEAP32[i22 >> 2] | 0, HEAP32[i24 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i33;
   if (!(HEAP32[i6 >> 2] | 0)) break L5;
   i31 = i34;
   i31 = _i64Add(HEAP32[i31 >> 2] | 0, HEAP32[i31 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0;
   i32 = getTempRet0() | 0;
   i33 = i34;
   HEAP32[i33 >> 2] = i31;
   HEAP32[i33 + 4 >> 2] = i32;
   i33 = Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + i33;
   i33 = i12;
   i32 = HEAP32[i33 + 4 >> 2] | 0;
   if (0 < i32 >>> 0 ? 1 : 0 == (i32 | 0) ? (HEAP32[i6 >> 2] | 0) >>> 0 < (HEAP32[i33 >> 2] | 0) >>> 0 : 0) break L5;
  }
  HEAP32[i16 >> 2] = ((32768 / ((HEAP32[i28 >> 2] | 0) >>> 0) | 0) >>> 0) / ((HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0;
  while (1) {
   i31 = i34;
   i29 = HEAP32[i31 + 4 >> 2] | 0;
   i33 = i4;
   i30 = HEAP32[i33 + 4 >> 2] | 0;
   if (!(i29 >>> 0 < i30 >>> 0 ? 1 : (i29 | 0) == (i30 | 0) ? (HEAP32[i31 >> 2] | 0) >>> 0 < (HEAP32[i33 >> 2] | 0) >>> 0 : 0)) break L5;
   i31 = i4;
   i33 = i34;
   i33 = _i64Subtract(HEAP32[i31 >> 2] | 0, HEAP32[i31 + 4 >> 2] | 0, HEAP32[i33 >> 2] | 0, HEAP32[i33 + 4 >> 2] | 0) | 0;
   i31 = getTempRet0() | 0;
   i30 = i10;
   HEAP32[i30 >> 2] = i33;
   HEAP32[i30 + 4 >> 2] = i31;
   i30 = i10;
   i31 = HEAP32[i30 + 4 >> 2] | 0;
   i33 = i13;
   HEAP32[i33 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i33 + 4 >> 2] = i31;
   i33 = i13;
   i31 = HEAP32[i33 + 4 >> 2] | 0;
   if (i31 >>> 0 > 0 ? 1 : (i31 | 0) == 0 ? (HEAP32[i33 >> 2] | 0) >>> 0 > (HEAP32[i16 >> 2] | 0) >>> 0 : 0) {
    i33 = i13;
    HEAP32[i33 >> 2] = HEAP32[i16 >> 2];
    HEAP32[i33 + 4 >> 2] = 0;
   }
   i33 = HEAP32[i19 >> 2] | 0;
   i33 = FUNCTION_TABLE_iiiii[HEAP32[i33 + 28 >> 2] & 15](i33 | 0, HEAP32[i13 >> 2] | 0, i32, HEAP32[i24 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i33;
   if (!(HEAP32[i7 >> 2] | 0)) break L5;
   i31 = Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0) | 0;
   i30 = HEAP32[i19 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[i30 + 44 >> 2] & 63](HEAP32[i22 >> 2] | 0, i32, i31, 0, HEAP32[i30 + 20 >> 2] | 0);
   i30 = i34;
   i30 = _i64Add(HEAP32[i30 >> 2] | 0, HEAP32[i30 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
   i31 = getTempRet0() | 0;
   i33 = i34;
   HEAP32[i33 >> 2] = i30;
   HEAP32[i33 + 4 >> 2] = i31;
   i33 = Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + i33;
   i33 = i13;
   i31 = HEAP32[i33 + 4 >> 2] | 0;
   if (0 < i31 >>> 0 ? 1 : 0 == (i31 | 0) ? (HEAP32[i7 >> 2] | 0) >>> 0 < (HEAP32[i33 >> 2] | 0) >>> 0 : 0) break L5;
  }
 } else {
  _ma_split_buffer(i33, 32768, HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0, 64, i26, i31);
  HEAP32[i17 >> 2] = ((HEAP32[i31 >> 2] | 0) >>> 0) / ((HEAP32[i28 >> 2] | 0) >>> 0) | 0;
  while (1) {
   i32 = i34;
   i29 = HEAP32[i32 + 4 >> 2] | 0;
   i33 = i4;
   i31 = HEAP32[i33 + 4 >> 2] | 0;
   if (!(i29 >>> 0 < i31 >>> 0 ? 1 : (i29 | 0) == (i31 | 0) ? (HEAP32[i32 >> 2] | 0) >>> 0 < (HEAP32[i33 >> 2] | 0) >>> 0 : 0)) break L5;
   i32 = i4;
   i33 = i34;
   i33 = _i64Subtract(HEAP32[i32 >> 2] | 0, HEAP32[i32 + 4 >> 2] | 0, HEAP32[i33 >> 2] | 0, HEAP32[i33 + 4 >> 2] | 0) | 0;
   i32 = getTempRet0() | 0;
   i31 = i11;
   HEAP32[i31 >> 2] = i33;
   HEAP32[i31 + 4 >> 2] = i32;
   i31 = i11;
   i32 = HEAP32[i31 + 4 >> 2] | 0;
   i33 = i14;
   HEAP32[i33 >> 2] = HEAP32[i31 >> 2];
   HEAP32[i33 + 4 >> 2] = i32;
   i33 = i14;
   i32 = HEAP32[i33 + 4 >> 2] | 0;
   if (i32 >>> 0 > 0 ? 1 : (i32 | 0) == 0 ? (HEAP32[i33 >> 2] | 0) >>> 0 > (HEAP32[i17 >> 2] | 0) >>> 0 : 0) {
    i33 = i14;
    HEAP32[i33 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i33 + 4 >> 2] = 0;
   }
   L30 : do if ((HEAP32[HEAP32[i19 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2] | 0)) {
    i33 = HEAP32[i19 >> 2] | 0;
    i33 = FUNCTION_TABLE_iiiii[HEAP32[i33 + 32 >> 2] & 15](i33 | 0, HEAP32[i14 >> 2] | 0, i26, HEAP32[i24 >> 2] | 0) | 0;
    HEAP32[i8 >> 2] = i33;
    if (!(HEAP32[i8 >> 2] | 0)) break L5;
   } else {
    _ma_split_buffer(i1, 32768, HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0, 64, i25, i30);
    i33 = i14;
    i32 = HEAP32[i33 + 4 >> 2] | 0;
    if (i32 >>> 0 > 0 ? 1 : (i32 | 0) == 0 ? (HEAP32[i33 >> 2] | 0) >>> 0 > (((HEAP32[i30 >> 2] | 0) >>> 0) / ((HEAP32[i28 >> 2] | 0) >>> 0) | 0) >>> 0 : 0) {
     i33 = i14;
     HEAP32[i33 >> 2] = ((HEAP32[i30 >> 2] | 0) >>> 0) / ((HEAP32[i28 >> 2] | 0) >>> 0) | 0;
     HEAP32[i33 + 4 >> 2] = 0;
    }
    i33 = HEAP32[i19 >> 2] | 0;
    i33 = FUNCTION_TABLE_iiiii[HEAP32[i33 + 32 >> 2] & 15](i33 | 0, HEAP32[i14 >> 2] | 0, i25, HEAP32[i24 >> 2] | 0) | 0;
    HEAP32[i8 >> 2] = i33;
    if (!(HEAP32[i8 >> 2] | 0)) break L5;
    HEAP32[i15 >> 2] = 0;
    while (1) {
     if ((HEAP32[i15 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0) >>> 0) break L30;
     i32 = HEAP32[i15 >> 2] << 2 | 0;
     i33 = HEAP32[i19 >> 2] | 0;
     FUNCTION_TABLE_viiiii[HEAP32[i33 + 44 >> 2] & 63](HEAP32[i26 + i32 >> 2] | 0, HEAP32[i25 + i32 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0, HEAP32[i33 + 20 >> 2] | 0);
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    }
   } while (0);
   i31 = HEAP32[i19 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[i31 + 48 >> 2] & 63](HEAP32[i22 >> 2] | 0, i26, HEAP32[i8 >> 2] | 0, 0, HEAP32[i31 + 8 >> 2] | 0);
   i31 = i34;
   i31 = _i64Add(HEAP32[i31 >> 2] | 0, HEAP32[i31 + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0) | 0;
   i32 = getTempRet0() | 0;
   i33 = i34;
   HEAP32[i33 >> 2] = i31;
   HEAP32[i33 + 4 >> 2] = i32;
   i33 = Math_imul(HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + i33;
   i33 = i14;
   i32 = HEAP32[i33 + 4 >> 2] | 0;
   if (0 < i32 >>> 0 ? 1 : 0 == (i32 | 0) ? (HEAP32[i8 >> 2] | 0) >>> 0 < (HEAP32[i33 >> 2] | 0) >>> 0 : 0) break L5;
  }
 } while (0);
 i32 = i34;
 i34 = HEAP32[i32 + 4 >> 2] | 0;
 i33 = i27;
 HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
 HEAP32[i33 + 4 >> 2] = i34;
 i33 = i27;
 i34 = i33;
 i34 = HEAP32[i34 >> 2] | 0;
 i33 = i33 + 4 | 0;
 i33 = HEAP32[i33 >> 2] | 0;
 setTempRet0(i33 | 0);
 STACKTOP = i35;
 return i34 | 0;
}

function _stbi__hdr_load(i6, i8, i9, i2, i4, i5) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i34 = STACKTOP;
 i10 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 1136 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1136);
 i28 = i10 + 1108 | 0;
 i31 = i10 + 1104 | 0;
 i17 = i10 + 1100 | 0;
 i18 = i10 + 1096 | 0;
 i11 = i10 + 1092 | 0;
 i27 = i10 + 1088 | 0;
 i1 = i10;
 i15 = i10 + 1080 | 0;
 i7 = i10 + 1076 | 0;
 i33 = i10 + 1072 | 0;
 i23 = i10 + 1068 | 0;
 i32 = i10 + 1064 | 0;
 i22 = i10 + 1060 | 0;
 i26 = i10 + 1056 | 0;
 i12 = i10 + 1121 | 0;
 i16 = i10 + 1120 | 0;
 i24 = i10 + 1052 | 0;
 i25 = i10 + 1048 | 0;
 i13 = i10 + 1044 | 0;
 i20 = i10 + 1040 | 0;
 i21 = i10 + 1036 | 0;
 i19 = i10 + 1032 | 0;
 i3 = i10 + 1028 | 0;
 i29 = i10 + 1116 | 0;
 i30 = i10 + 1112 | 0;
 i14 = i10 + 1024 | 0;
 HEAP32[i31 >> 2] = i6;
 HEAP32[i17 >> 2] = i8;
 HEAP32[i18 >> 2] = i9;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i27 >> 2] = i4;
 HEAP32[i10 + 1084 >> 2] = i5;
 HEAP32[i7 >> 2] = 0;
 i10 = _stbi__hdr_gettoken(HEAP32[i31 >> 2] | 0, i1) | 0;
 HEAP32[i3 >> 2] = i10;
 if (_strcmp(HEAP32[i3 >> 2] | 0, 53539) | 0) if (_strcmp(HEAP32[i3 >> 2] | 0, 53550) | 0) {
  i33 = (_stbi__err(53557) | 0) != 0;
  HEAP32[i28 >> 2] = i33 ? 0 : 0;
  i33 = HEAP32[i28 >> 2] | 0;
  STACKTOP = i34;
  return i33 | 0;
 }
 while (1) {
  i10 = _stbi__hdr_gettoken(HEAP32[i31 >> 2] | 0, i1) | 0;
  HEAP32[i15 >> 2] = i10;
  if (!(HEAP8[HEAP32[i15 >> 2] >> 0] | 0)) break;
  if (!(_strcmp(HEAP32[i15 >> 2] | 0, 53565) | 0)) HEAP32[i7 >> 2] = 1;
 }
 if (!(HEAP32[i7 >> 2] | 0)) {
  i33 = (_stbi__err(53588) | 0) != 0;
  HEAP32[i28 >> 2] = i33 ? 0 : 0;
  i33 = HEAP32[i28 >> 2] | 0;
  STACKTOP = i34;
  return i33 | 0;
 }
 i10 = _stbi__hdr_gettoken(HEAP32[i31 >> 2] | 0, i1) | 0;
 HEAP32[i15 >> 2] = i10;
 if (_strncmp(HEAP32[i15 >> 2] | 0, 53607, 3) | 0) {
  i33 = (_stbi__err(53611) | 0) != 0;
  HEAP32[i28 >> 2] = i33 ? 0 : 0;
  i33 = HEAP32[i28 >> 2] | 0;
  STACKTOP = i34;
  return i33 | 0;
 }
 HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 3;
 i10 = _strtol(HEAP32[i15 >> 2] | 0, i15, 10) | 0;
 HEAP32[i23 >> 2] = i10;
 while (1) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((HEAP8[HEAP32[i15 >> 2] >> 0] | 0) != 32) break;
  HEAP32[i15 >> 2] = i1 + 1;
 }
 if (_strncmp(i1, 53635, 3) | 0) {
  i33 = (_stbi__err(53611) | 0) != 0;
  HEAP32[i28 >> 2] = i33 ? 0 : 0;
  i33 = HEAP32[i28 >> 2] | 0;
  STACKTOP = i34;
  return i33 | 0;
 }
 HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 3;
 i15 = _strtol(HEAP32[i15 >> 2] | 0, 0, 10) | 0;
 HEAP32[i33 >> 2] = i15;
 HEAP32[HEAP32[i17 >> 2] >> 2] = HEAP32[i33 >> 2];
 HEAP32[HEAP32[i18 >> 2] >> 2] = HEAP32[i23 >> 2];
 if (HEAP32[i11 >> 2] | 0) HEAP32[HEAP32[i11 >> 2] >> 2] = 3;
 if (!(HEAP32[i27 >> 2] | 0)) HEAP32[i27 >> 2] = 3;
 if (!(_stbi__mad4sizes_valid(HEAP32[i33 >> 2] | 0, HEAP32[i23 >> 2] | 0, HEAP32[i27 >> 2] | 0, 4, 0) | 0)) {
  i33 = (_stbi__err(53639) | 0) != 0;
  HEAP32[i28 >> 2] = i33 ? 0 : 0;
  i33 = HEAP32[i28 >> 2] | 0;
  STACKTOP = i34;
  return i33 | 0;
 }
 i18 = _stbi__malloc_mad4(HEAP32[i33 >> 2] | 0, HEAP32[i23 >> 2] | 0, HEAP32[i27 >> 2] | 0, 4, 0) | 0;
 HEAP32[i22 >> 2] = i18;
 if (!(HEAP32[i22 >> 2] | 0)) {
  i33 = (_stbi__err(53511) | 0) != 0;
  HEAP32[i28 >> 2] = i33 ? 0 : 0;
  i33 = HEAP32[i28 >> 2] | 0;
  STACKTOP = i34;
  return i33 | 0;
 }
 do if ((HEAP32[i33 >> 2] | 0) < 8 | (HEAP32[i33 >> 2] | 0) >= 32768) {
  HEAP32[i25 >> 2] = 0;
  i1 = 28;
 } else {
  HEAP32[i32 >> 2] = 0;
  HEAP32[i25 >> 2] = 0;
  L46 : while (1) {
   if ((HEAP32[i25 >> 2] | 0) >= (HEAP32[i23 >> 2] | 0)) {
    i1 = 64;
    break;
   }
   i18 = (_stbi__get8(HEAP32[i31 >> 2] | 0) | 0) & 255;
   HEAP32[i20 >> 2] = i18;
   i18 = (_stbi__get8(HEAP32[i31 >> 2] | 0) | 0) & 255;
   HEAP32[i21 >> 2] = i18;
   i18 = (_stbi__get8(HEAP32[i31 >> 2] | 0) | 0) & 255;
   HEAP32[i26 >> 2] = i18;
   if ((HEAP32[i20 >> 2] | 0) != 2 | (HEAP32[i21 >> 2] | 0) != 2) {
    i1 = 37;
    break;
   }
   if (HEAP32[i26 >> 2] & 128 | 0) {
    i1 = 37;
    break;
   }
   HEAP32[i26 >> 2] = HEAP32[i26 >> 2] << 8;
   i18 = (_stbi__get8(HEAP32[i31 >> 2] | 0) | 0) & 255;
   HEAP32[i26 >> 2] = HEAP32[i26 >> 2] | i18;
   if ((HEAP32[i26 >> 2] | 0) != (HEAP32[i33 >> 2] | 0)) {
    i1 = 39;
    break;
   }
   if (!(HEAP32[i32 >> 2] | 0)) {
    i18 = _stbi__malloc_mad2(HEAP32[i33 >> 2] | 0, 4, 0) | 0;
    HEAP32[i32 >> 2] = i18;
    if (!(HEAP32[i32 >> 2] | 0)) {
     i1 = 42;
     break;
    }
   }
   HEAP32[i13 >> 2] = 0;
   while (1) {
    i18 = (HEAP32[i13 >> 2] | 0) < 4;
    HEAP32[i24 >> 2] = 0;
    if (!i18) break;
    while (1) {
     i18 = (HEAP32[i33 >> 2] | 0) - (HEAP32[i24 >> 2] | 0) | 0;
     HEAP32[i14 >> 2] = i18;
     if ((i18 | 0) <= 0) break;
     i18 = _stbi__get8(HEAP32[i31 >> 2] | 0) | 0;
     HEAP8[i12 >> 0] = i18;
     L61 : do if ((HEAPU8[i12 >> 0] | 0) > 128) {
      i18 = _stbi__get8(HEAP32[i31 >> 2] | 0) | 0;
      HEAP8[i16 >> 0] = i18;
      HEAP8[i12 >> 0] = (HEAPU8[i12 >> 0] | 0) - 128;
      if ((HEAPU8[i12 >> 0] | 0) > (HEAP32[i14 >> 2] | 0)) {
       i1 = 49;
       break L46;
      }
      HEAP32[i19 >> 2] = 0;
      while (1) {
       if ((HEAP32[i19 >> 2] | 0) >= (HEAPU8[i12 >> 0] | 0)) break L61;
       i15 = HEAP8[i16 >> 0] | 0;
       i17 = HEAP32[i32 >> 2] | 0;
       i18 = HEAP32[i24 >> 2] | 0;
       HEAP32[i24 >> 2] = i18 + 1;
       HEAP8[i17 + ((i18 << 2) + (HEAP32[i13 >> 2] | 0)) >> 0] = i15;
       HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
      }
     } else {
      if ((HEAPU8[i12 >> 0] | 0) > (HEAP32[i14 >> 2] | 0)) {
       i1 = 54;
       break L46;
      }
      HEAP32[i19 >> 2] = 0;
      while (1) {
       if ((HEAP32[i19 >> 2] | 0) >= (HEAPU8[i12 >> 0] | 0)) break L61;
       i15 = _stbi__get8(HEAP32[i31 >> 2] | 0) | 0;
       i17 = HEAP32[i32 >> 2] | 0;
       i18 = HEAP32[i24 >> 2] | 0;
       HEAP32[i24 >> 2] = i18 + 1;
       HEAP8[i17 + ((i18 << 2) + (HEAP32[i13 >> 2] | 0)) >> 0] = i15;
       HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
      }
     } while (0);
    }
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
   while (1) {
    if ((HEAP32[i24 >> 2] | 0) >= (HEAP32[i33 >> 2] | 0)) break;
    i18 = Math_imul(HEAP32[i25 >> 2] | 0, HEAP32[i33 >> 2] | 0) | 0;
    i18 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(i18 + (HEAP32[i24 >> 2] | 0) | 0, HEAP32[i27 >> 2] | 0) | 0) << 2) | 0;
    _stbi__hdr_convert(i18, (HEAP32[i32 >> 2] | 0) + (HEAP32[i24 >> 2] << 2) | 0, HEAP32[i27 >> 2] | 0);
    HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
   }
   HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
  }
  if ((i1 | 0) == 37) {
   HEAP8[i30 >> 0] = HEAP32[i20 >> 2];
   HEAP8[i30 + 1 >> 0] = HEAP32[i21 >> 2];
   HEAP8[i30 + 2 >> 0] = HEAP32[i26 >> 2];
   i26 = _stbi__get8(HEAP32[i31 >> 2] | 0) | 0;
   HEAP8[i30 + 3 >> 0] = i26;
   _stbi__hdr_convert(HEAP32[i22 >> 2] | 0, i30, HEAP32[i27 >> 2] | 0);
   HEAP32[i24 >> 2] = 1;
   HEAP32[i25 >> 2] = 0;
   _free(HEAP32[i32 >> 2] | 0);
   i1 = 31;
   break;
  } else if ((i1 | 0) == 39) {
   _free(HEAP32[i22 >> 2] | 0);
   _free(HEAP32[i32 >> 2] | 0);
   i33 = (_stbi__err(53649) | 0) != 0;
   HEAP32[i28 >> 2] = i33 ? 0 : 0;
   i33 = HEAP32[i28 >> 2] | 0;
   STACKTOP = i34;
   return i33 | 0;
  } else if ((i1 | 0) == 42) {
   _free(HEAP32[i22 >> 2] | 0);
   i33 = (_stbi__err(53511) | 0) != 0;
   HEAP32[i28 >> 2] = i33 ? 0 : 0;
   i33 = HEAP32[i28 >> 2] | 0;
   STACKTOP = i34;
   return i33 | 0;
  } else if ((i1 | 0) == 49) {
   _free(HEAP32[i22 >> 2] | 0);
   _free(HEAP32[i32 >> 2] | 0);
   i33 = (_stbi__err(53681) | 0) != 0;
   HEAP32[i28 >> 2] = i33 ? 0 : 0;
   i33 = HEAP32[i28 >> 2] | 0;
   STACKTOP = i34;
   return i33 | 0;
  } else if ((i1 | 0) == 54) {
   _free(HEAP32[i22 >> 2] | 0);
   _free(HEAP32[i32 >> 2] | 0);
   i33 = (_stbi__err(53681) | 0) != 0;
   HEAP32[i28 >> 2] = i33 ? 0 : 0;
   i33 = HEAP32[i28 >> 2] | 0;
   STACKTOP = i34;
   return i33 | 0;
  } else if ((i1 | 0) == 64) {
   if (!(HEAP32[i32 >> 2] | 0)) {
    i1 = 66;
    break;
   }
   _free(HEAP32[i32 >> 2] | 0);
   i1 = 66;
   break;
  }
 } while (0);
 while (1) {
  if ((i1 | 0) == 28) {
   if ((HEAP32[i25 >> 2] | 0) >= (HEAP32[i23 >> 2] | 0)) {
    i1 = 66;
    continue;
   }
   HEAP32[i24 >> 2] = 0;
  } else if ((i1 | 0) == 31) {
   _stbi__getn(HEAP32[i31 >> 2] | 0, i29, 4) | 0;
   i32 = Math_imul(HEAP32[i25 >> 2] | 0, HEAP32[i33 >> 2] | 0) | 0;
   i32 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(i32, HEAP32[i27 >> 2] | 0) | 0) << 2) | 0;
   i32 = i32 + ((Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i27 >> 2] | 0) | 0) << 2) | 0;
   _stbi__hdr_convert(i32, i29, HEAP32[i27 >> 2] | 0);
   HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
  } else if ((i1 | 0) == 66) {
   HEAP32[i28 >> 2] = HEAP32[i22 >> 2];
   break;
  }
  if ((HEAP32[i24 >> 2] | 0) < (HEAP32[i33 >> 2] | 0)) {
   i1 = 31;
   continue;
  }
  HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
  i1 = 28;
 }
 i33 = HEAP32[i28 >> 2] | 0;
 STACKTOP = i34;
 return i33 | 0;
}

function _ma_format_converter_read_deinterleaved(i8, i2, i3, i10, i9) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i34 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 98688 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(98688);
 i31 = i1 + 98624 | 0;
 i28 = i1 + 98684 | 0;
 i27 = i1 + 98616 | 0;
 i11 = i1 + 98680 | 0;
 i29 = i1 + 98676 | 0;
 i33 = i1 + 98608 | 0;
 i13 = i1 + 98672 | 0;
 i32 = i1 + 98668 | 0;
 i30 = i1 + 98432 | 0;
 i24 = i1 + 98664 | 0;
 i26 = i1 + 65536 | 0;
 i23 = i1 + 98660 | 0;
 i20 = i1 + 98656 | 0;
 i21 = i1 + 98600 | 0;
 i22 = i1 + 98592 | 0;
 i25 = i1 + 32768 | 0;
 i19 = i1 + 98652 | 0;
 i16 = i1 + 98648 | 0;
 i17 = i1 + 98584 | 0;
 i18 = i1 + 98576 | 0;
 i12 = i1 + 98304 | 0;
 i14 = i1 + 98644 | 0;
 i7 = i1 + 98640 | 0;
 i15 = i1;
 i6 = i1 + 98636 | 0;
 i4 = i1 + 98632 | 0;
 i5 = i1 + 98568 | 0;
 i1 = i1 + 98560 | 0;
 HEAP32[i28 >> 2] = i8;
 i8 = i27;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i8 + 4 >> 2] = i3;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i29 >> 2] = i9;
 if ((HEAP32[i28 >> 2] | 0) == 0 | (HEAP32[i11 >> 2] | 0) == 0) {
  i32 = i31;
  HEAP32[i32 >> 2] = 0;
  HEAP32[i32 + 4 >> 2] = 0;
  i32 = i31;
  i33 = i32;
  i33 = HEAP32[i33 >> 2] | 0;
  i32 = i32 + 4 | 0;
  i32 = HEAP32[i32 >> 2] | 0;
  setTempRet0(i32 | 0);
  STACKTOP = i34;
  return i33 | 0;
 }
 i10 = i33;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 i10 = _ma_get_bytes_per_sample(HEAP32[HEAP32[i28 >> 2] >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i10;
 i10 = _ma_get_bytes_per_sample(HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[i32 >> 2] = i10;
 _memcpy(i30 | 0, HEAP32[i11 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] << 2 | 0) | 0;
 L5 : do if (HEAP32[(HEAP32[i28 >> 2] | 0) + 28 >> 2] | 0) {
  HEAP32[i24 >> 2] = ((32768 / ((HEAP32[i13 >> 2] | 0) >>> 0) | 0) >>> 0) / ((HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0;
  while (1) {
   i18 = i33;
   i16 = HEAP32[i18 + 4 >> 2] | 0;
   i19 = i27;
   i17 = HEAP32[i19 + 4 >> 2] | 0;
   if (!(i16 >>> 0 < i17 >>> 0 ? 1 : (i16 | 0) == (i17 | 0) ? (HEAP32[i18 >> 2] | 0) >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0 : 0)) break L5;
   i18 = i27;
   i19 = i33;
   i19 = _i64Subtract(HEAP32[i18 >> 2] | 0, HEAP32[i18 + 4 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i19 + 4 >> 2] | 0) | 0;
   i18 = getTempRet0() | 0;
   i17 = i21;
   HEAP32[i17 >> 2] = i19;
   HEAP32[i17 + 4 >> 2] = i18;
   i17 = i21;
   i18 = HEAP32[i17 + 4 >> 2] | 0;
   i19 = i22;
   HEAP32[i19 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i19 + 4 >> 2] = i18;
   i19 = i22;
   i18 = HEAP32[i19 + 4 >> 2] | 0;
   if (i18 >>> 0 > 0 ? 1 : (i18 | 0) == 0 ? (HEAP32[i19 >> 2] | 0) >>> 0 > (HEAP32[i24 >> 2] | 0) >>> 0 : 0) {
    i19 = i22;
    HEAP32[i19 >> 2] = HEAP32[i24 >> 2];
    HEAP32[i19 + 4 >> 2] = 0;
   }
   i2 = HEAP32[i28 >> 2] | 0;
   i1 = HEAP32[i2 + 28 >> 2] | 0;
   i2 = i2 | 0;
   i3 = HEAP32[i22 >> 2] | 0;
   if ((HEAP32[HEAP32[i28 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0)) {
    i19 = FUNCTION_TABLE_iiiii[i1 & 15](i2, i3, i26, HEAP32[i29 >> 2] | 0) | 0;
    HEAP32[i20 >> 2] = i19;
    if (!(HEAP32[i20 >> 2] | 0)) break L5;
   } else {
    i19 = FUNCTION_TABLE_iiiii[i1 & 15](i2, i3, i25, HEAP32[i29 >> 2] | 0) | 0;
    HEAP32[i20 >> 2] = i19;
    if (!(HEAP32[i20 >> 2] | 0)) break L5;
    i18 = Math_imul(HEAP32[i20 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0) | 0;
    i19 = HEAP32[i28 >> 2] | 0;
    FUNCTION_TABLE_viiiii[HEAP32[i19 + 44 >> 2] & 63](i26, i25, i18, 0, HEAP32[i19 + 20 >> 2] | 0);
   }
   i17 = HEAP32[i28 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[i17 + 52 >> 2] & 63](i30, i26, HEAP32[i20 >> 2] | 0, 0, HEAP32[i17 + 8 >> 2] | 0);
   i17 = i33;
   i17 = _i64Add(HEAP32[i17 >> 2] | 0, HEAP32[i17 + 4 >> 2] | 0, HEAP32[i20 >> 2] | 0, 0) | 0;
   i18 = getTempRet0() | 0;
   i19 = i33;
   HEAP32[i19 >> 2] = i17;
   HEAP32[i19 + 4 >> 2] = i18;
   HEAP32[i23 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i20 >> 2] | 0;
    if ((HEAP32[i23 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0) >>> 0) break;
    i18 = Math_imul(i1, HEAP32[i32 >> 2] | 0) | 0;
    i19 = i30 + (HEAP32[i23 >> 2] << 2) | 0;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + i18;
    HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
   }
   i19 = i22;
   i18 = HEAP32[i19 + 4 >> 2] | 0;
   if (0 < i18 >>> 0 ? 1 : 0 == (i18 | 0) ? i1 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0 : 0) break L5;
  }
 } else {
  if ((HEAP32[HEAP32[i28 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0)) while (1) {
   i25 = i33;
   i23 = HEAP32[i25 + 4 >> 2] | 0;
   i26 = i27;
   i24 = HEAP32[i26 + 4 >> 2] | 0;
   if (!(i23 >>> 0 < i24 >>> 0 ? 1 : (i23 | 0) == (i24 | 0) ? (HEAP32[i25 >> 2] | 0) >>> 0 < (HEAP32[i26 >> 2] | 0) >>> 0 : 0)) break L5;
   i23 = i27;
   i24 = i33;
   i24 = _i64Subtract(HEAP32[i23 >> 2] | 0, HEAP32[i23 + 4 >> 2] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i24 + 4 >> 2] | 0) | 0;
   i23 = getTempRet0() | 0;
   i25 = i17;
   HEAP32[i25 >> 2] = i24;
   HEAP32[i25 + 4 >> 2] = i23;
   i25 = i17;
   i23 = HEAP32[i25 >> 2] | 0;
   i25 = HEAP32[i25 + 4 >> 2] | 0;
   i24 = i18;
   HEAP32[i24 >> 2] = i23;
   HEAP32[i24 + 4 >> 2] = i25;
   i24 = i18;
   i26 = HEAP32[i24 + 4 >> 2] | 0;
   i24 = i26 >>> 0 > 0 | (i26 | 0) == 0 & (HEAP32[i24 >> 2] | 0) >>> 0 > 4294967295;
   i26 = i18;
   HEAP32[i26 >> 2] = i24 ? -1 : i23;
   HEAP32[i26 + 4 >> 2] = i24 ? 0 : i25;
   i26 = HEAP32[i28 >> 2] | 0;
   i26 = FUNCTION_TABLE_iiiii[HEAP32[i26 + 32 >> 2] & 15](i26 | 0, HEAP32[i18 >> 2] | 0, i30, HEAP32[i29 >> 2] | 0) | 0;
   HEAP32[i16 >> 2] = i26;
   if (!(HEAP32[i16 >> 2] | 0)) break L5;
   i24 = i33;
   i24 = _i64Add(HEAP32[i24 >> 2] | 0, HEAP32[i24 + 4 >> 2] | 0, HEAP32[i16 >> 2] | 0, 0) | 0;
   i25 = getTempRet0() | 0;
   i26 = i33;
   HEAP32[i26 >> 2] = i24;
   HEAP32[i26 + 4 >> 2] = i25;
   HEAP32[i19 >> 2] = 0;
   while (1) {
    i1 = HEAP32[i16 >> 2] | 0;
    if ((HEAP32[i19 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0) >>> 0) break;
    i25 = Math_imul(i1, HEAP32[i32 >> 2] | 0) | 0;
    i26 = i30 + (HEAP32[i19 >> 2] << 2) | 0;
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + i25;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
   i26 = i18;
   i25 = HEAP32[i26 + 4 >> 2] | 0;
   if (0 < i25 >>> 0 ? 1 : 0 == (i25 | 0) ? i1 >>> 0 < (HEAP32[i26 >> 2] | 0) >>> 0 : 0) break L5;
  }
  _ma_split_buffer(i15, 32768, HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0, 64, i12, i14);
  HEAP32[i7 >> 2] = ((HEAP32[i14 >> 2] | 0) >>> 0) / ((HEAP32[i13 >> 2] | 0) >>> 0) | 0;
  while (1) {
   i25 = i33;
   i23 = HEAP32[i25 + 4 >> 2] | 0;
   i26 = i27;
   i24 = HEAP32[i26 + 4 >> 2] | 0;
   if (!(i23 >>> 0 < i24 >>> 0 ? 1 : (i23 | 0) == (i24 | 0) ? (HEAP32[i25 >> 2] | 0) >>> 0 < (HEAP32[i26 >> 2] | 0) >>> 0 : 0)) break L5;
   i25 = i27;
   i26 = i33;
   i26 = _i64Subtract(HEAP32[i25 >> 2] | 0, HEAP32[i25 + 4 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i26 + 4 >> 2] | 0) | 0;
   i25 = getTempRet0() | 0;
   i24 = i5;
   HEAP32[i24 >> 2] = i26;
   HEAP32[i24 + 4 >> 2] = i25;
   i24 = i5;
   i25 = HEAP32[i24 + 4 >> 2] | 0;
   i26 = i1;
   HEAP32[i26 >> 2] = HEAP32[i24 >> 2];
   HEAP32[i26 + 4 >> 2] = i25;
   i26 = i1;
   i25 = HEAP32[i26 + 4 >> 2] | 0;
   if (i25 >>> 0 > 0 ? 1 : (i25 | 0) == 0 ? (HEAP32[i26 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0 : 0) {
    i26 = i1;
    HEAP32[i26 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i26 + 4 >> 2] = 0;
   }
   i26 = HEAP32[i28 >> 2] | 0;
   i26 = FUNCTION_TABLE_iiiii[HEAP32[i26 + 32 >> 2] & 15](i26 | 0, HEAP32[i1 >> 2] | 0, i12, HEAP32[i29 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i26;
   if (!(HEAP32[i4 >> 2] | 0)) break L5;
   HEAP32[i6 >> 2] = 0;
   while (1) {
    if ((HEAP32[i6 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0) >>> 0) break;
    i26 = HEAP32[i6 >> 2] << 2 | 0;
    i25 = HEAP32[i28 >> 2] | 0;
    FUNCTION_TABLE_viiiii[HEAP32[i25 + 44 >> 2] & 63](HEAP32[i30 + i26 >> 2] | 0, HEAP32[i12 + i26 >> 2] | 0, HEAP32[i4 >> 2] | 0, 0, HEAP32[i25 + 20 >> 2] | 0);
    i25 = Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
    i26 = i30 + (HEAP32[i6 >> 2] << 2) | 0;
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + i25;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   }
   i24 = i33;
   i24 = _i64Add(HEAP32[i24 >> 2] | 0, HEAP32[i24 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0, 0) | 0;
   i25 = getTempRet0() | 0;
   i26 = i33;
   HEAP32[i26 >> 2] = i24;
   HEAP32[i26 + 4 >> 2] = i25;
   i26 = i1;
   i25 = HEAP32[i26 + 4 >> 2] | 0;
   if (0 < i25 >>> 0 ? 1 : 0 == (i25 | 0) ? (HEAP32[i4 >> 2] | 0) >>> 0 < (HEAP32[i26 >> 2] | 0) >>> 0 : 0) break L5;
  }
 } while (0);
 i30 = i33;
 i33 = HEAP32[i30 + 4 >> 2] | 0;
 i32 = i31;
 HEAP32[i32 >> 2] = HEAP32[i30 >> 2];
 HEAP32[i32 + 4 >> 2] = i33;
 i32 = i31;
 i33 = i32;
 i33 = HEAP32[i33 >> 2] | 0;
 i32 = i32 + 4 | 0;
 i32 = HEAP32[i32 >> 2] | 0;
 setTempRet0(i32 | 0);
 STACKTOP = i34;
 return i33 | 0;
}

function _stbtt_InitFont_internal(i15, i8, i12) {
 i15 = i15 | 0;
 i8 = i8 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i35 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i33 = i1 + 260 | 0;
 i3 = i1 + 248 | 0;
 i18 = i1 + 244 | 0;
 i16 = i1 + 240 | 0;
 i9 = i1 + 236 | 0;
 i13 = i1 + 232 | 0;
 i6 = i1 + 228 | 0;
 i19 = i1 + 224 | 0;
 i14 = i1 + 220 | 0;
 i17 = i1 + 216 | 0;
 i36 = i1 + 204 | 0;
 i2 = i1 + 192 | 0;
 i32 = i1 + 180 | 0;
 i34 = i1 + 168 | 0;
 i7 = i1 + 164 | 0;
 i5 = i1 + 160 | 0;
 i10 = i1 + 156 | 0;
 i11 = i1 + 152 | 0;
 i4 = i1 + 148 | 0;
 i20 = i1 + 136 | 0;
 i21 = i1 + 124 | 0;
 i22 = i1 + 112 | 0;
 i23 = i1 + 100 | 0;
 i24 = i1 + 88 | 0;
 i25 = i1 + 76 | 0;
 i26 = i1 + 64 | 0;
 i27 = i1 + 52 | 0;
 i28 = i1 + 40 | 0;
 i29 = i1 + 28 | 0;
 i30 = i1 + 16 | 0;
 i31 = i1 + 4 | 0;
 HEAP32[i16 >> 2] = i15;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i13 >> 2] = i12;
 HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] = HEAP32[i13 >> 2];
 i15 = (HEAP32[i16 >> 2] | 0) + 52 | 0;
 _stbtt__new_buf(i36, 0, 0);
 HEAP32[i15 >> 2] = HEAP32[i36 >> 2];
 HEAP32[i15 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
 HEAP32[i15 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
 i15 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53370) | 0;
 HEAP32[i6 >> 2] = i15;
 i15 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53375) | 0;
 HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] = i15;
 i15 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53380) | 0;
 HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] = i15;
 i15 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53385) | 0;
 HEAP32[(HEAP32[i16 >> 2] | 0) + 24 >> 2] = i15;
 i15 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53390) | 0;
 HEAP32[(HEAP32[i16 >> 2] | 0) + 28 >> 2] = i15;
 i15 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53395) | 0;
 HEAP32[(HEAP32[i16 >> 2] | 0) + 32 >> 2] = i15;
 i15 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53400) | 0;
 HEAP32[(HEAP32[i16 >> 2] | 0) + 36 >> 2] = i15;
 i15 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53405) | 0;
 HEAP32[(HEAP32[i16 >> 2] | 0) + 40 >> 2] = i15;
 if (HEAP32[i6 >> 2] | 0) if (HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] | 0) if (HEAP32[(HEAP32[i16 >> 2] | 0) + 28 >> 2] | 0) if (HEAP32[(HEAP32[i16 >> 2] | 0) + 32 >> 2] | 0) {
  if (HEAP32[(HEAP32[i16 >> 2] | 0) + 24 >> 2] | 0) {
   if (!(HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0)) {
    HEAP32[i18 >> 2] = 0;
    i36 = HEAP32[i18 >> 2] | 0;
    STACKTOP = i35;
    return i36 | 0;
   }
  } else {
   HEAP32[i7 >> 2] = 2;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   i36 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53410) | 0;
   HEAP32[i4 >> 2] = i36;
   if (!(HEAP32[i4 >> 2] | 0)) {
    HEAP32[i18 >> 2] = 0;
    i36 = HEAP32[i18 >> 2] | 0;
    STACKTOP = i35;
    return i36 | 0;
   }
   i36 = (HEAP32[i16 >> 2] | 0) + 100 | 0;
   _stbtt__new_buf(i20, 0, 0);
   HEAP32[i36 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i36 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
   HEAP32[i36 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
   i36 = (HEAP32[i16 >> 2] | 0) + 112 | 0;
   _stbtt__new_buf(i21, 0, 0);
   HEAP32[i36 >> 2] = HEAP32[i21 >> 2];
   HEAP32[i36 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
   HEAP32[i36 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
   i36 = (HEAP32[i16 >> 2] | 0) + 52 | 0;
   _stbtt__new_buf(i22, (HEAP32[i9 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0, 536870912);
   HEAP32[i36 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i36 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
   HEAP32[i36 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
   i36 = (HEAP32[i16 >> 2] | 0) + 52 | 0;
   HEAP32[i2 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
   _stbtt__buf_skip(i2, 2);
   _stbtt__buf_seek(i2, (_stbtt__buf_get8(i2) | 0) & 255);
   _stbtt__cff_get_index(i23, i2);
   _stbtt__cff_get_index(i24, i2);
   HEAP32[i34 >> 2] = HEAP32[i24 >> 2];
   HEAP32[i34 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
   HEAP32[i34 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
   HEAP32[i33 >> 2] = HEAP32[i34 >> 2];
   HEAP32[i33 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
   HEAP32[i33 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
   _stbtt__cff_index_get(i25, i33, 0);
   HEAP32[i32 >> 2] = HEAP32[i25 >> 2];
   HEAP32[i32 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
   HEAP32[i32 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
   _stbtt__cff_get_index(i26, i2);
   i36 = (HEAP32[i16 >> 2] | 0) + 76 | 0;
   _stbtt__cff_get_index(i27, i2);
   HEAP32[i36 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i36 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
   HEAP32[i36 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
   _stbtt__dict_get_ints(i32, 17, 1, i5);
   _stbtt__dict_get_ints(i32, 262, 1, i7);
   _stbtt__dict_get_ints(i32, 292, 1, i10);
   _stbtt__dict_get_ints(i32, 293, 1, i11);
   i36 = (HEAP32[i16 >> 2] | 0) + 88 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
   HEAP32[i33 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
   _stbtt__get_subrs(i28, i3, i33);
   HEAP32[i36 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i36 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
   HEAP32[i36 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
   if ((HEAP32[i7 >> 2] | 0) != 2) {
    HEAP32[i18 >> 2] = 0;
    i36 = HEAP32[i18 >> 2] | 0;
    STACKTOP = i35;
    return i36 | 0;
   }
   if (!(HEAP32[i5 >> 2] | 0)) {
    HEAP32[i18 >> 2] = 0;
    i36 = HEAP32[i18 >> 2] | 0;
    STACKTOP = i35;
    return i36 | 0;
   }
   do if (HEAP32[i10 >> 2] | 0) {
    if (HEAP32[i11 >> 2] | 0) {
     _stbtt__buf_seek(i2, HEAP32[i10 >> 2] | 0);
     i36 = (HEAP32[i16 >> 2] | 0) + 100 | 0;
     _stbtt__cff_get_index(i29, i2);
     HEAP32[i36 >> 2] = HEAP32[i29 >> 2];
     HEAP32[i36 + 4 >> 2] = HEAP32[i29 + 4 >> 2];
     HEAP32[i36 + 8 >> 2] = HEAP32[i29 + 8 >> 2];
     i36 = (HEAP32[i16 >> 2] | 0) + 112 | 0;
     i34 = HEAP32[i11 >> 2] | 0;
     _stbtt__buf_range(i30, i2, i34 | 0, (HEAP32[i2 + 8 >> 2] | 0) - i34 | 0);
     HEAP32[i36 >> 2] = HEAP32[i30 >> 2];
     HEAP32[i36 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
     HEAP32[i36 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
     break;
    }
    HEAP32[i18 >> 2] = 0;
    i36 = HEAP32[i18 >> 2] | 0;
    STACKTOP = i35;
    return i36 | 0;
   } while (0);
   _stbtt__buf_seek(i2, HEAP32[i5 >> 2] | 0);
   i36 = (HEAP32[i16 >> 2] | 0) + 64 | 0;
   _stbtt__cff_get_index(i31, i2);
   HEAP32[i36 >> 2] = HEAP32[i31 >> 2];
   HEAP32[i36 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
   HEAP32[i36 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
  }
  i36 = _stbtt__find_table(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, 53415) | 0;
  HEAP32[i19 >> 2] = i36;
  if (HEAP32[i19 >> 2] | 0) {
   i36 = (_ttUSHORT((HEAP32[i9 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) + 4 | 0) | 0) & 65535;
   HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] = i36;
  } else HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] = 65535;
  i36 = (_ttUSHORT((HEAP32[i9 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + 2 | 0) | 0) & 65535;
  HEAP32[i17 >> 2] = i36;
  HEAP32[(HEAP32[i16 >> 2] | 0) + 44 >> 2] = 0;
  HEAP32[i14 >> 2] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
   HEAP32[i1 >> 2] = (HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 3);
   L38 : do switch ((_ttUSHORT((HEAP32[i9 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) | 0) | 0) & 65535 | 0) {
   case 3:
    {
     switch ((_ttUSHORT((HEAP32[i9 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) + 2 | 0) | 0) & 65535 | 0) {
     case 10:
     case 1:
      break;
     default:
      break L38;
     }
     i36 = (HEAP32[i6 >> 2] | 0) + (_ttULONG((HEAP32[i9 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) + 4 | 0) | 0) | 0;
     HEAP32[(HEAP32[i16 >> 2] | 0) + 44 >> 2] = i36;
     break;
    }
   case 0:
    {
     i36 = (HEAP32[i6 >> 2] | 0) + (_ttULONG((HEAP32[i9 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) + 4 | 0) | 0) | 0;
     HEAP32[(HEAP32[i16 >> 2] | 0) + 44 >> 2] = i36;
     break;
    }
   default:
    {}
   } while (0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
  if (!(HEAP32[(HEAP32[i16 >> 2] | 0) + 44 >> 2] | 0)) {
   HEAP32[i18 >> 2] = 0;
   i36 = HEAP32[i18 >> 2] | 0;
   STACKTOP = i35;
   return i36 | 0;
  } else {
   i36 = (_ttUSHORT((HEAP32[i9 >> 2] | 0) + (HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] | 0) + 50 | 0) | 0) & 65535;
   HEAP32[(HEAP32[i16 >> 2] | 0) + 48 >> 2] = i36;
   HEAP32[i18 >> 2] = 1;
   i36 = HEAP32[i18 >> 2] | 0;
   STACKTOP = i35;
   return i36 | 0;
  }
 }
 HEAP32[i18 >> 2] = 0;
 i36 = HEAP32[i18 >> 2] | 0;
 STACKTOP = i35;
 return i36 | 0;
}

function _stbir__resize_allocated(i7, i8, i9, i11, i12, i2, i6, i15, i4, i5, i3, i13, i14) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i15 = i15 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i10 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, f34 = f0, f35 = f0;
 i28 = 0;
 i33 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i32 = i1 + 64 | 0;
 i29 = i1 + 60 | 0;
 i23 = i1 + 56 | 0;
 i10 = i1 + 52 | 0;
 i25 = i1 + 48 | 0;
 i16 = i1 + 44 | 0;
 i18 = i1 + 40 | 0;
 i22 = i1 + 36 | 0;
 i26 = i1 + 32 | 0;
 i20 = i1 + 28 | 0;
 i21 = i1 + 24 | 0;
 i19 = i1 + 20 | 0;
 i30 = i1 + 16 | 0;
 i31 = i1 + 12 | 0;
 i24 = i1 + 8 | 0;
 i27 = i1 + 4 | 0;
 i17 = i1;
 HEAP32[i29 >> 2] = i7;
 HEAP32[i23 >> 2] = i8;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i25 >> 2] = i11;
 HEAP32[i16 >> 2] = i12;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i22 >> 2] = i6;
 HEAP32[i26 >> 2] = i15;
 HEAP32[i20 >> 2] = i4;
 HEAP32[i21 >> 2] = i5;
 HEAP32[i19 >> 2] = i3;
 HEAP32[i30 >> 2] = i13;
 HEAP32[i31 >> 2] = i14;
 i15 = _stbir__calculate_memory(HEAP32[i29 >> 2] | 0) | 0;
 HEAP32[i24 >> 2] = i15;
 if (HEAP32[i10 >> 2] | 0) i1 = HEAP32[i10 >> 2] | 0; else {
  i1 = HEAP32[i29 >> 2] | 0;
  i1 = Math_imul(HEAP32[i1 + 64 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0) | 0;
  i1 = Math_imul(i1, HEAPU8[54860 + (HEAP32[i26 >> 2] | 0) >> 0] | 0) | 0;
 }
 HEAP32[i27 >> 2] = i1;
 if (HEAP32[i16 >> 2] | 0) i1 = HEAP32[i16 >> 2] | 0; else {
  i1 = HEAP32[i29 >> 2] | 0;
  i1 = Math_imul(HEAP32[i1 + 64 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0) | 0;
  i1 = Math_imul(i1, HEAPU8[54860 + (HEAP32[i26 >> 2] | 0) >> 0] | 0) | 0;
 }
 HEAP32[i17 >> 2] = i1;
 if ((HEAP32[(HEAP32[i29 >> 2] | 0) + 64 >> 2] | 0) < 0) ___assert_fail(54864, 54884, 2312, 54921);
 if ((HEAP32[(HEAP32[i29 >> 2] | 0) + 64 >> 2] | 0) > 64) ___assert_fail(54945, 54884, 2313, 54921);
 if ((HEAP32[(HEAP32[i29 >> 2] | 0) + 64 >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[i29 >> 2] | 0) + 64 >> 2] | 0) <= 64) {
  if ((HEAP32[(HEAP32[i29 >> 2] | 0) + 80 >> 2] | 0) >>> 0 >= 6) ___assert_fail(54966, 54884, 2318, 54921);
  if ((HEAP32[(HEAP32[i29 >> 2] | 0) + 84 >> 2] | 0) >>> 0 >= 6) ___assert_fail(55067, 54884, 2319, 54921);
  if ((HEAP32[(HEAP32[i29 >> 2] | 0) + 80 >> 2] | 0) >>> 0 >= 6) {
   HEAP32[i32 >> 2] = 0;
   i32 = HEAP32[i32 >> 2] | 0;
   STACKTOP = i33;
   return i32 | 0;
  }
  if ((HEAP32[(HEAP32[i29 >> 2] | 0) + 84 >> 2] | 0) >>> 0 >= 6) {
   HEAP32[i32 >> 2] = 0;
   i32 = HEAP32[i32 >> 2] | 0;
   STACKTOP = i33;
   return i32 | 0;
  }
  if ((HEAP32[i18 >> 2] | 0) < 0) HEAP32[i22 >> 2] = HEAP32[i22 >> 2] | 3;
  if (HEAP32[i22 >> 2] & 2 | 0) {
   if (!(HEAP32[i22 >> 2] & 1)) i28 = 26;
  } else i28 = 26;
  do if ((i28 | 0) == 26) {
   if ((HEAP32[i18 >> 2] | 0) < 0) ___assert_fail(55166, 54884, 2330, 54921);
   if ((HEAP32[i18 >> 2] | 0) < (HEAP32[(HEAP32[i29 >> 2] | 0) + 64 >> 2] | 0)) break; else ___assert_fail(55166, 54884, 2330, 54921);
  } while (0);
  if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[i29 >> 2] | 0) + 64 >> 2] | 0)) {
   HEAP32[i32 >> 2] = 0;
   i32 = HEAP32[i32 >> 2] | 0;
   STACKTOP = i33;
   return i32 | 0;
  }
  if (!(HEAP32[i30 >> 2] | 0)) ___assert_fail(55219, 54884, 2336, 54921);
  if (!(HEAP32[i30 >> 2] | 0)) {
   HEAP32[i32 >> 2] = 0;
   i32 = HEAP32[i32 >> 2] | 0;
   STACKTOP = i33;
   return i32 | 0;
  }
  if ((HEAP32[i31 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0) ___assert_fail(55227, 54884, 2341, 54921);
  if ((HEAP32[i31 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0) {
   HEAP32[i32 >> 2] = 0;
   i32 = HEAP32[i32 >> 2] | 0;
   STACKTOP = i33;
   return i32 | 0;
  }
  _memset(HEAP32[i30 >> 2] | 0, 0, HEAP32[i31 >> 2] | 0) | 0;
  HEAP32[HEAP32[i29 >> 2] >> 2] = HEAP32[i23 >> 2];
  HEAP32[(HEAP32[i29 >> 2] | 0) + 12 >> 2] = HEAP32[i27 >> 2];
  HEAP32[(HEAP32[i29 >> 2] | 0) + 16 >> 2] = HEAP32[i25 >> 2];
  HEAP32[(HEAP32[i29 >> 2] | 0) + 28 >> 2] = HEAP32[i17 >> 2];
  HEAP32[(HEAP32[i29 >> 2] | 0) + 68 >> 2] = HEAP32[i18 >> 2];
  HEAP32[(HEAP32[i29 >> 2] | 0) + 72 >> 2] = HEAP32[i22 >> 2];
  HEAP32[(HEAP32[i29 >> 2] | 0) + 76 >> 2] = HEAP32[i26 >> 2];
  HEAP32[(HEAP32[i29 >> 2] | 0) + 88 >> 2] = HEAP32[i20 >> 2];
  HEAP32[(HEAP32[i29 >> 2] | 0) + 92 >> 2] = HEAP32[i21 >> 2];
  HEAP32[(HEAP32[i29 >> 2] | 0) + 96 >> 2] = HEAP32[i19 >> 2];
  i28 = HEAP32[i29 >> 2] | 0;
  i28 = _stbir__get_coefficient_width(HEAP32[i28 + 80 >> 2] | 0, Math_fround(HEAPF32[i28 + 56 >> 2])) | 0;
  HEAP32[(HEAP32[i29 >> 2] | 0) + 128 >> 2] = i28;
  i28 = HEAP32[i29 >> 2] | 0;
  i28 = _stbir__get_coefficient_width(HEAP32[i28 + 84 >> 2] | 0, Math_fround(HEAPF32[i28 + 60 >> 2])) | 0;
  HEAP32[(HEAP32[i29 >> 2] | 0) + 132 >> 2] = i28;
  i28 = HEAP32[i29 >> 2] | 0;
  i28 = _stbir__get_filter_pixel_width(HEAP32[i28 + 80 >> 2] | 0, Math_fround(HEAPF32[i28 + 56 >> 2])) | 0;
  HEAP32[(HEAP32[i29 >> 2] | 0) + 136 >> 2] = i28;
  i28 = HEAP32[i29 >> 2] | 0;
  i28 = _stbir__get_filter_pixel_width(HEAP32[i28 + 84 >> 2] | 0, Math_fround(HEAPF32[i28 + 60 >> 2])) | 0;
  HEAP32[(HEAP32[i29 >> 2] | 0) + 140 >> 2] = i28;
  i28 = HEAP32[i29 >> 2] | 0;
  i28 = _stbir__get_filter_pixel_margin(HEAP32[i28 + 80 >> 2] | 0, Math_fround(HEAPF32[i28 + 56 >> 2])) | 0;
  HEAP32[(HEAP32[i29 >> 2] | 0) + 144 >> 2] = i28;
  i28 = HEAP32[i29 >> 2] | 0;
  i28 = _stbir__get_filter_pixel_margin(HEAP32[i28 + 84 >> 2] | 0, Math_fround(HEAPF32[i28 + 60 >> 2])) | 0;
  HEAP32[(HEAP32[i29 >> 2] | 0) + 148 >> 2] = i28;
  i28 = HEAP32[i29 >> 2] | 0;
  i28 = (Math_imul(HEAP32[i28 + 20 >> 2] | 0, HEAP32[i28 + 64 >> 2] | 0) | 0) << 2;
  HEAP32[(HEAP32[i29 >> 2] | 0) + 160 >> 2] = i28;
  i28 = HEAP32[i29 >> 2] | 0;
  HEAP32[i28 + 116 >> 2] = (HEAP32[i28 + 4 >> 2] | 0) + (HEAP32[i28 + 144 >> 2] << 1);
  HEAP32[(HEAP32[i29 >> 2] | 0) + 100 >> 2] = HEAP32[i30 >> 2];
  i28 = HEAP32[i29 >> 2] | 0;
  HEAP32[i28 + 104 >> 2] = (HEAP32[i28 + 100 >> 2] | 0) + (HEAP32[i28 + 188 >> 2] | 0);
  i28 = HEAP32[i29 >> 2] | 0;
  HEAP32[i28 + 108 >> 2] = (HEAP32[i28 + 104 >> 2] | 0) + (HEAP32[i28 + 192 >> 2] | 0);
  i28 = HEAP32[i29 >> 2] | 0;
  HEAP32[i28 + 112 >> 2] = (HEAP32[i28 + 108 >> 2] | 0) + (HEAP32[i28 + 196 >> 2] | 0);
  i28 = HEAP32[i29 >> 2] | 0;
  HEAP32[i28 + 120 >> 2] = (HEAP32[i28 + 112 >> 2] | 0) + (HEAP32[i28 + 200 >> 2] | 0);
  i28 = (_stbir__use_height_upsampling(HEAP32[i29 >> 2] | 0) | 0) != 0;
  i1 = HEAP32[i29 >> 2] | 0;
  do if (i28) {
   HEAP32[i1 + 124 >> 2] = 0;
   i28 = HEAP32[i29 >> 2] | 0;
   HEAP32[i28 + 180 >> 2] = (HEAP32[i28 + 120 >> 2] | 0) + (HEAP32[i28 + 204 >> 2] | 0);
   i28 = HEAP32[i29 >> 2] | 0;
   HEAP32[i28 + 184 >> 2] = (HEAP32[i28 + 180 >> 2] | 0) + (HEAP32[i28 + 212 >> 2] | 0);
   if (((HEAP32[(HEAP32[i29 >> 2] | 0) + 184 >> 2] | 0) + (HEAP32[(HEAP32[i29 >> 2] | 0) + 216 >> 2] | 0) | 0) == ((HEAP32[i30 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0)) break; else ___assert_fail(55268, 54884, 2385, 54921);
  } else {
   i28 = HEAP32[i29 >> 2] | 0;
   HEAP32[i28 + 124 >> 2] = (HEAP32[i1 + 120 >> 2] | 0) + (HEAP32[i28 + 204 >> 2] | 0);
   i28 = HEAP32[i29 >> 2] | 0;
   HEAP32[i28 + 180 >> 2] = (HEAP32[i28 + 124 >> 2] | 0) + (HEAP32[i28 + 208 >> 2] | 0);
   HEAP32[(HEAP32[i29 >> 2] | 0) + 184 >> 2] = 0;
   if (((HEAP32[(HEAP32[i29 >> 2] | 0) + 180 >> 2] | 0) + (HEAP32[(HEAP32[i29 >> 2] | 0) + 212 >> 2] | 0) | 0) == ((HEAP32[i30 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0)) break; else ___assert_fail(55402, 54884, 2393, 54921);
  } while (0);
  HEAP32[(HEAP32[i29 >> 2] | 0) + 176 >> 2] = -1;
  f34 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + 56 >> 2]);
  f35 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + 48 >> 2]);
  i31 = HEAP32[i29 >> 2] | 0;
  _stbir__calculate_filters(HEAP32[i31 + 100 >> 2] | 0, HEAP32[i31 + 104 >> 2] | 0, HEAP32[i31 + 80 >> 2] | 0, f34, f35, HEAP32[i31 + 4 >> 2] | 0, HEAP32[i31 + 20 >> 2] | 0);
  f35 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + 60 >> 2]);
  f34 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + 52 >> 2]);
  i31 = HEAP32[i29 >> 2] | 0;
  _stbir__calculate_filters(HEAP32[i31 + 108 >> 2] | 0, HEAP32[i31 + 112 >> 2] | 0, HEAP32[i31 + 84 >> 2] | 0, f35, f34, HEAP32[i31 + 8 >> 2] | 0, HEAP32[i31 + 24 >> 2] | 0);
  i31 = (_stbir__use_height_upsampling(HEAP32[i29 >> 2] | 0) | 0) != 0;
  i1 = HEAP32[i29 >> 2] | 0;
  if (i31) _stbir__buffer_loop_upsample(i1); else _stbir__buffer_loop_downsample(i1);
  HEAP32[i32 >> 2] = 1;
  i32 = HEAP32[i32 >> 2] | 0;
  STACKTOP = i33;
  return i32 | 0;
 }
 HEAP32[i32 >> 2] = 0;
 i32 = HEAP32[i32 >> 2] | 0;
 STACKTOP = i33;
 return i32 | 0;
}

function _LoadBMFont(i41, i2) {
 i41 = i41 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i42 = 0, i43 = 0, i44 = 0, f45 = f0;
 i44 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 800 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(800);
 i43 = i1 + 520 | 0;
 i21 = i1 + 488 | 0;
 i39 = i1 + 480 | 0;
 i38 = i1 + 472 | 0;
 i37 = i1 + 464 | 0;
 i36 = i1 + 456 | 0;
 i35 = i1 + 448 | 0;
 i34 = i1 + 432 | 0;
 i40 = i1 + 424 | 0;
 i33 = i1 + 408 | 0;
 i32 = i1 + 400 | 0;
 i16 = i1 + 784 | 0;
 i42 = i1 + 748 | 0;
 i6 = i1 + 144 | 0;
 i24 = i1 + 744 | 0;
 i18 = i1 + 740 | 0;
 i28 = i1 + 736 | 0;
 i26 = i1 + 732 | 0;
 i25 = i1;
 i15 = i1 + 728 | 0;
 i5 = i1 + 724 | 0;
 i17 = i1 + 720 | 0;
 i27 = i1 + 716 | 0;
 i22 = i1 + 712 | 0;
 i20 = i1 + 692 | 0;
 i23 = i1 + 688 | 0;
 i29 = i1 + 668 | 0;
 i9 = i1 + 664 | 0;
 i13 = i1 + 660 | 0;
 i14 = i1 + 656 | 0;
 i12 = i1 + 652 | 0;
 i8 = i1 + 648 | 0;
 i10 = i1 + 644 | 0;
 i11 = i1 + 640 | 0;
 i7 = i1 + 636 | 0;
 i19 = i1 + 632 | 0;
 i4 = i1 + 616 | 0;
 i30 = i1 + 592 | 0;
 i31 = i1 + 556 | 0;
 HEAP32[i16 >> 2] = i2;
 i2 = i42;
 i3 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i42 + 8 >> 2] = 0;
 _memset(i6 | 0, 0, 256) | 0;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i28 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 i3 = _fopen(HEAP32[i16 >> 2] | 0, 51973) | 0;
 HEAP32[i17 >> 2] = i3;
 if (!(HEAP32[i17 >> 2] | 0)) {
  HEAP32[i32 >> 2] = HEAP32[i16 >> 2];
  _TraceLog(4, 51976, i32);
  i2 = i41;
  i1 = i42;
  i3 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i3 | 0));
  STACKTOP = i44;
  return;
 }
 _fgets(i6, 256, HEAP32[i17 >> 2] | 0) | 0;
 _fgets(i6, 256, HEAP32[i17 >> 2] | 0) | 0;
 i32 = _strstr(i6, 52010) | 0;
 HEAP32[i24 >> 2] = i32;
 i32 = HEAP32[i24 >> 2] | 0;
 HEAP32[i33 >> 2] = i18;
 HEAP32[i33 + 4 >> 2] = i5;
 HEAP32[i33 + 8 >> 2] = i28;
 HEAP32[i33 + 12 >> 2] = i26;
 _sscanf(i32, 52021, i33) | 0;
 i33 = HEAP32[i18 >> 2] | 0;
 HEAP32[i40 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i40 + 4 >> 2] = i33;
 _TraceLog(2, 52063, i40);
 i33 = HEAP32[i28 >> 2] | 0;
 i40 = HEAP32[i26 >> 2] | 0;
 HEAP32[i34 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i34 + 4 >> 2] = i33;
 HEAP32[i34 + 8 >> 2] = i40;
 _TraceLog(2, 52082, i34);
 _fgets(i6, 256, HEAP32[i17 >> 2] | 0) | 0;
 i40 = _strstr(i6, 52113) | 0;
 HEAP32[i24 >> 2] = i40;
 i40 = HEAP32[i24 >> 2] | 0;
 HEAP32[i35 >> 2] = i25;
 _sscanf(i40, 52118, i35) | 0;
 HEAP32[i36 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i36 + 4 >> 2] = i25;
 _TraceLog(2, 52134, i36);
 _fgets(i6, 256, HEAP32[i17 >> 2] | 0) | 0;
 i40 = _strstr(i6, 52165) | 0;
 HEAP32[i24 >> 2] = i40;
 i40 = HEAP32[i24 >> 2] | 0;
 HEAP32[i37 >> 2] = i15;
 _sscanf(i40, 52171, i37) | 0;
 i40 = HEAP32[i15 >> 2] | 0;
 HEAP32[i38 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i38 + 4 >> 2] = i40;
 _TraceLog(2, 52180, i38);
 HEAP32[i27 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 i40 = _strrchr(HEAP32[i16 >> 2] | 0, 47) | 0;
 HEAP32[i22 >> 2] = i40;
 if (!(HEAP32[i22 >> 2] | 0)) {
  i40 = _strrchr(HEAP32[i16 >> 2] | 0, 92) | 0;
  HEAP32[i22 >> 2] = i40;
 }
 i37 = _strlen(HEAP32[i16 >> 2] | 0) | 0;
 i37 = i37 - (_strlen(HEAP32[i22 >> 2] | 0) | 0) | 0;
 i37 = _malloc(i37 + (_strlen(i25) | 0) + 4 | 0) | 0;
 HEAP32[i27 >> 2] = i37;
 HEAP8[HEAP32[i27 >> 2] >> 0] = 0;
 i37 = HEAP32[i27 >> 2] | 0;
 i38 = HEAP32[i16 >> 2] | 0;
 i40 = _strlen(HEAP32[i16 >> 2] | 0) | 0;
 _strncat(i37, i38, i40 - (_strlen(HEAP32[i22 >> 2] | 0) | 0) + 1 | 0) | 0;
 i40 = HEAP32[i27 >> 2] | 0;
 _strncat(i40, i25, _strlen(i25) | 0) | 0;
 i40 = HEAP32[i27 >> 2] | 0;
 HEAP32[i43 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i43 + 4 >> 2] = i40;
 _TraceLog(2, 52204, i43);
 _LoadImage(i20, HEAP32[i27 >> 2] | 0);
 L8 : do if ((HEAP32[i20 + 16 >> 2] | 0) == 1) {
  HEAP32[i43 >> 2] = HEAP32[i20 >> 2];
  HEAP32[i43 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
  HEAP32[i43 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
  HEAP32[i43 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
  HEAP32[i43 + 16 >> 2] = HEAP32[i20 + 16 >> 2];
  _ImageAlphaMask(i20, i43);
  HEAP32[i23 >> 2] = 0;
  while (1) {
   if ((HEAP32[i23 >> 2] | 0) >= ((Math_imul(HEAP32[i20 + 4 >> 2] | 0, HEAP32[i20 + 8 >> 2] | 0) | 0) << 1 | 0)) break L8;
   HEAP8[(HEAP32[i20 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) >> 0] = -1;
   HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 2;
  }
 } while (0);
 i40 = i42 + 8 | 0;
 HEAP32[i43 >> 2] = HEAP32[i20 >> 2];
 HEAP32[i43 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i43 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i43 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
 HEAP32[i43 + 16 >> 2] = HEAP32[i20 + 16 >> 2];
 _LoadTextureFromImage(i29, i43);
 HEAP32[i40 >> 2] = HEAP32[i29 >> 2];
 HEAP32[i40 + 4 >> 2] = HEAP32[i29 + 4 >> 2];
 HEAP32[i40 + 8 >> 2] = HEAP32[i29 + 8 >> 2];
 HEAP32[i40 + 12 >> 2] = HEAP32[i29 + 12 >> 2];
 HEAP32[i40 + 16 >> 2] = HEAP32[i29 + 16 >> 2];
 _free(HEAP32[i27 >> 2] | 0);
 HEAP32[i42 >> 2] = HEAP32[i18 >> 2];
 HEAP32[i42 + 4 >> 2] = HEAP32[i15 >> 2];
 i40 = _malloc((HEAP32[i15 >> 2] | 0) * 36 | 0) | 0;
 HEAP32[i42 + 32 >> 2] = i40;
 i40 = _malloc(HEAP32[i15 >> 2] << 4) | 0;
 HEAP32[i42 + 28 >> 2] = i40;
 HEAP32[i19 >> 2] = 0;
 while (1) {
  if ((HEAP32[i19 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break;
  _fgets(i6, 256, HEAP32[i17 >> 2] | 0) | 0;
  HEAP32[i21 >> 2] = i9;
  HEAP32[i21 + 4 >> 2] = i13;
  HEAP32[i21 + 8 >> 2] = i14;
  HEAP32[i21 + 12 >> 2] = i12;
  HEAP32[i21 + 16 >> 2] = i8;
  HEAP32[i21 + 20 >> 2] = i10;
  HEAP32[i21 + 24 >> 2] = i11;
  HEAP32[i21 + 28 >> 2] = i7;
  _sscanf(i6, 52239, i21) | 0;
  i40 = (HEAP32[i42 + 28 >> 2] | 0) + (HEAP32[i19 >> 2] << 4) | 0;
  f45 = Math_fround(HEAP32[i13 >> 2] | 0);
  HEAPF32[i4 >> 2] = f45;
  f45 = Math_fround(HEAP32[i14 >> 2] | 0);
  HEAPF32[i4 + 4 >> 2] = f45;
  f45 = Math_fround(HEAP32[i12 >> 2] | 0);
  HEAPF32[i4 + 8 >> 2] = f45;
  f45 = Math_fround(HEAP32[i8 >> 2] | 0);
  HEAPF32[i4 + 12 >> 2] = f45;
  HEAP32[i40 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i40 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i40 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i40 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[(HEAP32[i42 + 32 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) * 36 | 0) >> 2] = HEAP32[i9 >> 2];
  HEAP32[(HEAP32[i42 + 32 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) * 36 | 0) + 4 >> 2] = HEAP32[i10 >> 2];
  HEAP32[(HEAP32[i42 + 32 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) * 36 | 0) + 8 >> 2] = HEAP32[i11 >> 2];
  HEAP32[(HEAP32[i42 + 32 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) * 36 | 0) + 12 >> 2] = HEAP32[i7 >> 2];
  i40 = (HEAP32[i42 + 32 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) * 36 | 0) + 16 | 0;
  i38 = (HEAP32[i42 + 28 >> 2] | 0) + (HEAP32[i19 >> 2] << 4) | 0;
  HEAP32[i21 >> 2] = HEAP32[i20 >> 2];
  HEAP32[i21 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
  HEAP32[i21 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
  HEAP32[i21 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
  HEAP32[i21 + 16 >> 2] = HEAP32[i20 + 16 >> 2];
  HEAP32[i43 >> 2] = HEAP32[i38 >> 2];
  HEAP32[i43 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
  HEAP32[i43 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
  HEAP32[i43 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
  _ImageFromImage(i30, i21, i43);
  HEAP32[i40 >> 2] = HEAP32[i30 >> 2];
  HEAP32[i40 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
  HEAP32[i40 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
  HEAP32[i40 + 12 >> 2] = HEAP32[i30 + 12 >> 2];
  HEAP32[i40 + 16 >> 2] = HEAP32[i30 + 16 >> 2];
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
 }
 HEAP32[i43 >> 2] = HEAP32[i20 >> 2];
 HEAP32[i43 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i43 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i43 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
 HEAP32[i43 + 16 >> 2] = HEAP32[i20 + 16 >> 2];
 _UnloadImage(i43);
 _fclose(HEAP32[i17 >> 2] | 0) | 0;
 if (!(HEAP32[i42 + 8 >> 2] | 0)) {
  i2 = i43;
  i1 = i42;
  i3 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i3 | 0));
  _UnloadFont(i43);
  _GetFontDefault(i31);
  i2 = i42;
  i1 = i31;
  i3 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i3 | 0));
 } else {
  HEAP32[i39 >> 2] = HEAP32[i16 >> 2];
  _TraceLog(3, 52313, i39);
 }
 i2 = i41;
 i1 = i42;
 i3 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 STACKTOP = i44;
 return;
}

function _stbtt__ray_intersect_bezier(i10, i23, i12, i15, i19, i7) {
 i10 = i10 | 0;
 i23 = i23 | 0;
 i12 = i12 | 0;
 i15 = i15 | 0;
 i19 = i19 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, f34 = f0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, f39 = f0;
 i33 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i29 = i1 + 116 | 0;
 i11 = i1 + 112 | 0;
 i24 = i1 + 108 | 0;
 i13 = i1 + 104 | 0;
 i16 = i1 + 100 | 0;
 i20 = i1 + 96 | 0;
 i8 = i1 + 92 | 0;
 i36 = i1 + 88 | 0;
 i37 = i1 + 84 | 0;
 i38 = i1 + 80 | 0;
 i35 = i1 + 76 | 0;
 i2 = i1 + 72 | 0;
 i3 = i1 + 68 | 0;
 i4 = i1 + 64 | 0;
 i31 = i1 + 60 | 0;
 i32 = i1 + 56 | 0;
 i9 = i1 + 52 | 0;
 i6 = i1 + 48 | 0;
 i28 = i1 + 44 | 0;
 i5 = i1 + 40 | 0;
 i27 = i1 + 36 | 0;
 i25 = i1 + 32 | 0;
 i26 = i1 + 28 | 0;
 i14 = i1 + 24 | 0;
 i18 = i1 + 20 | 0;
 i22 = i1 + 16 | 0;
 i30 = i1 + 12 | 0;
 i17 = i1 + 8 | 0;
 i21 = i1 + 4 | 0;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i24 >> 2] = i23;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i16 >> 2] = i15;
 HEAP32[i20 >> 2] = i19;
 HEAP32[i8 >> 2] = i7;
 f34 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 4 >> 2]);
 f34 = Math_fround(f34 * Math_fround(HEAPF32[HEAP32[i24 >> 2] >> 2]));
 f39 = Math_fround(HEAPF32[HEAP32[i13 >> 2] >> 2]);
 f39 = Math_fround(f34 - Math_fround(f39 * Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + 4 >> 2])));
 HEAPF32[i36 >> 2] = f39;
 f39 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + 4 >> 2]);
 f39 = Math_fround(f39 * Math_fround(HEAPF32[HEAP32[i24 >> 2] >> 2]));
 f34 = Math_fround(HEAPF32[HEAP32[i16 >> 2] >> 2]);
 f34 = Math_fround(f39 - Math_fround(f34 * Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + 4 >> 2])));
 HEAPF32[i37 >> 2] = f34;
 f34 = Math_fround(HEAPF32[(HEAP32[i20 >> 2] | 0) + 4 >> 2]);
 f34 = Math_fround(f34 * Math_fround(HEAPF32[HEAP32[i24 >> 2] >> 2]));
 f39 = Math_fround(HEAPF32[HEAP32[i20 >> 2] >> 2]);
 f39 = Math_fround(f34 - Math_fround(f39 * Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + 4 >> 2])));
 HEAPF32[i38 >> 2] = f39;
 f39 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + 4 >> 2]);
 f39 = Math_fround(f39 * Math_fround(HEAPF32[HEAP32[i24 >> 2] >> 2]));
 f34 = Math_fround(HEAPF32[HEAP32[i11 >> 2] >> 2]);
 f34 = Math_fround(f39 - Math_fround(f34 * Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + 4 >> 2])));
 HEAPF32[i35 >> 2] = f34;
 f34 = Math_fround(HEAPF32[i36 >> 2]);
 f34 = Math_fround(f34 - Math_fround(Math_fround(HEAPF32[i37 >> 2]) * Math_fround(2.0)));
 f34 = Math_fround(f34 + Math_fround(HEAPF32[i38 >> 2]));
 HEAPF32[i2 >> 2] = f34;
 f34 = Math_fround(HEAPF32[i37 >> 2]);
 f34 = Math_fround(f34 - Math_fround(HEAPF32[i36 >> 2]));
 HEAPF32[i3 >> 2] = f34;
 f34 = Math_fround(HEAPF32[i36 >> 2]);
 f34 = Math_fround(f34 - Math_fround(HEAPF32[i35 >> 2]));
 HEAPF32[i4 >> 2] = f34;
 HEAPF32[i31 >> 2] = Math_fround(0.0);
 HEAPF32[i32 >> 2] = Math_fround(0.0);
 HEAP32[i9 >> 2] = 0;
 if (+Math_fround(HEAPF32[i2 >> 2]) != 0.0) {
  f34 = Math_fround(HEAPF32[i3 >> 2]);
  f34 = Math_fround(f34 * Math_fround(HEAPF32[i3 >> 2]));
  f39 = Math_fround(HEAPF32[i2 >> 2]);
  f39 = Math_fround(f34 - Math_fround(f39 * Math_fround(HEAPF32[i4 >> 2])));
  HEAPF32[i6 >> 2] = f39;
  if (+Math_fround(HEAPF32[i6 >> 2]) > 0.0) {
   f39 = Math_fround(Math_fround(-1.0) / Math_fround(HEAPF32[i2 >> 2]));
   HEAPF32[i28 >> 2] = f39;
   f39 = Math_fround(+Math_sqrt(+(+Math_fround(HEAPF32[i6 >> 2]))));
   HEAPF32[i5 >> 2] = f39;
   f39 = Math_fround(HEAPF32[i3 >> 2]);
   f39 = Math_fround(f39 + Math_fround(HEAPF32[i5 >> 2]));
   f39 = Math_fround(f39 * Math_fround(HEAPF32[i28 >> 2]));
   HEAPF32[i31 >> 2] = f39;
   f39 = Math_fround(HEAPF32[i3 >> 2]);
   f39 = Math_fround(f39 - Math_fround(HEAPF32[i5 >> 2]));
   f39 = Math_fround(f39 * Math_fround(HEAPF32[i28 >> 2]));
   HEAPF32[i32 >> 2] = f39;
   if (+Math_fround(HEAPF32[i31 >> 2]) >= 0.0) if (+Math_fround(HEAPF32[i31 >> 2]) <= 1.0) HEAP32[i9 >> 2] = 1;
   if (+Math_fround(HEAPF32[i5 >> 2]) > 0.0) if (+Math_fround(HEAPF32[i32 >> 2]) >= 0.0) if (+Math_fround(HEAPF32[i32 >> 2]) <= 1.0) {
    if (!(HEAP32[i9 >> 2] | 0)) {
     f39 = Math_fround(HEAPF32[i32 >> 2]);
     HEAPF32[i31 >> 2] = f39;
    }
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   }
  }
 } else {
  f39 = Math_fround(HEAPF32[i4 >> 2]);
  f39 = Math_fround(f39 / Math_fround(Math_fround(HEAPF32[i3 >> 2]) * Math_fround(-2.0)));
  HEAPF32[i31 >> 2] = f39;
  if (+Math_fround(HEAPF32[i31 >> 2]) >= 0.0) if (+Math_fround(HEAPF32[i31 >> 2]) <= 1.0) HEAP32[i9 >> 2] = 1;
 }
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i29 >> 2] = 0;
  i38 = HEAP32[i29 >> 2] | 0;
  STACKTOP = i33;
  return i38 | 0;
 }
 f34 = Math_fround(HEAPF32[HEAP32[i24 >> 2] >> 2]);
 f34 = Math_fround(f34 * Math_fround(HEAPF32[HEAP32[i24 >> 2] >> 2]));
 f39 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + 4 >> 2]);
 f39 = Math_fround(Math_fround(1.0) / Math_fround(f34 + Math_fround(f39 * Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + 4 >> 2]))));
 HEAPF32[i27 >> 2] = f39;
 f39 = Math_fround(HEAPF32[HEAP32[i24 >> 2] >> 2]);
 f39 = Math_fround(f39 * Math_fround(HEAPF32[i27 >> 2]));
 HEAPF32[i25 >> 2] = f39;
 f39 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + 4 >> 2]);
 f39 = Math_fround(f39 * Math_fround(HEAPF32[i27 >> 2]));
 HEAPF32[i26 >> 2] = f39;
 f39 = Math_fround(HEAPF32[HEAP32[i13 >> 2] >> 2]);
 f39 = Math_fround(f39 * Math_fround(HEAPF32[i25 >> 2]));
 f34 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 4 >> 2]);
 f34 = Math_fround(f39 + Math_fround(f34 * Math_fround(HEAPF32[i26 >> 2])));
 HEAPF32[i14 >> 2] = f34;
 f34 = Math_fround(HEAPF32[HEAP32[i16 >> 2] >> 2]);
 f34 = Math_fround(f34 * Math_fround(HEAPF32[i25 >> 2]));
 f39 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + 4 >> 2]);
 f39 = Math_fround(f34 + Math_fround(f39 * Math_fround(HEAPF32[i26 >> 2])));
 HEAPF32[i18 >> 2] = f39;
 f39 = Math_fround(HEAPF32[HEAP32[i20 >> 2] >> 2]);
 f39 = Math_fround(f39 * Math_fround(HEAPF32[i25 >> 2]));
 f34 = Math_fround(HEAPF32[(HEAP32[i20 >> 2] | 0) + 4 >> 2]);
 f34 = Math_fround(f39 + Math_fround(f34 * Math_fround(HEAPF32[i26 >> 2])));
 HEAPF32[i22 >> 2] = f34;
 f34 = Math_fround(HEAPF32[HEAP32[i11 >> 2] >> 2]);
 f34 = Math_fround(f34 * Math_fround(HEAPF32[i25 >> 2]));
 f39 = Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + 4 >> 2]);
 f39 = Math_fround(f34 + Math_fround(f39 * Math_fround(HEAPF32[i26 >> 2])));
 HEAPF32[i30 >> 2] = f39;
 f39 = Math_fround(HEAPF32[i18 >> 2]);
 f39 = Math_fround(f39 - Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i17 >> 2] = f39;
 f39 = Math_fround(HEAPF32[i22 >> 2]);
 f39 = Math_fround(f39 - Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i21 >> 2] = f39;
 f39 = Math_fround(HEAPF32[i14 >> 2]);
 f39 = Math_fround(f39 - Math_fround(HEAPF32[i30 >> 2]));
 HEAPF32[i1 >> 2] = f39;
 f39 = Math_fround(HEAPF32[i1 >> 2]);
 f34 = Math_fround(HEAPF32[i31 >> 2]);
 f34 = Math_fround(f34 * Math_fround(Math_fround(2.0) - Math_fround(Math_fround(HEAPF32[i31 >> 2]) * Math_fround(2.0))));
 f34 = Math_fround(f39 + Math_fround(f34 * Math_fround(HEAPF32[i17 >> 2])));
 f39 = Math_fround(HEAPF32[i31 >> 2]);
 f39 = Math_fround(f39 * Math_fround(HEAPF32[i31 >> 2]));
 f39 = Math_fround(f34 + Math_fround(f39 * Math_fround(HEAPF32[i21 >> 2])));
 HEAPF32[HEAP32[i8 >> 2] >> 2] = f39;
 f39 = Math_fround(HEAPF32[i2 >> 2]);
 f39 = Math_fround(f39 * Math_fround(HEAPF32[i31 >> 2]));
 f39 = Math_fround(f39 + Math_fround(HEAPF32[i3 >> 2]));
 HEAPF32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = f39;
 if ((HEAP32[i9 >> 2] | 0) > 1) {
  f39 = Math_fround(HEAPF32[i1 >> 2]);
  f34 = Math_fround(HEAPF32[i32 >> 2]);
  f34 = Math_fround(f34 * Math_fround(Math_fround(2.0) - Math_fround(Math_fround(HEAPF32[i32 >> 2]) * Math_fround(2.0))));
  f34 = Math_fround(f39 + Math_fround(f34 * Math_fround(HEAPF32[i17 >> 2])));
  f39 = Math_fround(HEAPF32[i32 >> 2]);
  f39 = Math_fround(f39 * Math_fround(HEAPF32[i32 >> 2]));
  f39 = Math_fround(f34 + Math_fround(f39 * Math_fround(HEAPF32[i21 >> 2])));
  HEAPF32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = f39;
  f39 = Math_fround(HEAPF32[i2 >> 2]);
  f39 = Math_fround(f39 * Math_fround(HEAPF32[i32 >> 2]));
  f39 = Math_fround(f39 + Math_fround(HEAPF32[i3 >> 2]));
  HEAPF32[(HEAP32[i8 >> 2] | 0) + 8 + 4 >> 2] = f39;
  HEAP32[i29 >> 2] = 2;
  i38 = HEAP32[i29 >> 2] | 0;
  STACKTOP = i33;
  return i38 | 0;
 } else {
  HEAP32[i29 >> 2] = 1;
  i38 = HEAP32[i29 >> 2] | 0;
  STACKTOP = i33;
  return i38 | 0;
 }
 return 0;
}

function _GetImageDataNormalized(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0;
 i8 = STACKTOP;
 i9 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i9 + 12 | 0;
 i1 = i9 + 8 | 0;
 i3 = i9 + 4 | 0;
 i4 = i9 + 20 | 0;
 i6 = i9 + 18 | 0;
 i5 = i9 + 16 | 0;
 i10 = _malloc((Math_imul(HEAP32[i2 + 4 >> 2] | 0, HEAP32[i2 + 8 >> 2] | 0) | 0) << 4) | 0;
 HEAP32[i7 >> 2] = i10;
 if ((HEAP32[i2 + 16 >> 2] | 0) >= 11) {
  _TraceLog(4, 58323, i9);
  i10 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i10 | 0;
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (Math_imul(HEAP32[i2 + 4 >> 2] | 0, HEAP32[i2 + 8 >> 2] | 0) | 0)) break;
  do switch (HEAP32[i2 + 16 >> 2] | 0) {
  case 1:
   {
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = f11;
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    break;
   }
  case 2:
   {
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 1) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = f11;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 2;
    break;
   }
  case 5:
   {
    HEAP16[i4 >> 1] = HEAP16[(HEAP32[i2 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] | 0;
    f11 = Math_fround(Math_fround(((HEAPU16[i4 >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    f11 = Math_fround(Math_fround(((HEAPU16[i4 >> 1] | 0) & 1984) >> 6 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = f11;
    f11 = Math_fround(Math_fround(((HEAPU16[i4 >> 1] | 0) & 62) >> 1 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = f11;
    f11 = ((HEAPU16[i4 >> 1] | 0) & 1 | 0) == 0 ? Math_fround(0.0) : Math_fround(1.0);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = f11;
    break;
   }
  case 3:
   {
    HEAP16[i6 >> 1] = HEAP16[(HEAP32[i2 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] | 0;
    f11 = Math_fround(Math_fround(((HEAPU16[i6 >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    f11 = Math_fround(Math_fround(((HEAPU16[i6 >> 1] | 0) & 2016) >> 5 | 0) * Math_fround(.0158730168));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = f11;
    f11 = Math_fround(Math_fround((HEAPU16[i6 >> 1] | 0) & 31 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = f11;
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    break;
   }
  case 6:
   {
    HEAP16[i5 >> 1] = HEAP16[(HEAP32[i2 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] | 0;
    f11 = Math_fround(Math_fround(((HEAPU16[i5 >> 1] | 0) & 61440) >> 12 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    f11 = Math_fround(Math_fround(((HEAPU16[i5 >> 1] | 0) & 3840) >> 8 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = f11;
    f11 = Math_fround(Math_fround(((HEAPU16[i5 >> 1] | 0) & 240) >> 4 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = f11;
    f11 = Math_fround(Math_fround((HEAPU16[i5 >> 1] | 0) & 15 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = f11;
    break;
   }
  case 7:
   {
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 1) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 2) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 3) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = f11;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
    break;
   }
  case 4:
   {
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 1) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = f11;
    f11 = Math_fround(Math_fround(HEAPU8[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 2) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = f11;
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 3;
    break;
   }
  case 8:
   {
    f11 = Math_fround(HEAPF32[(HEAP32[i2 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = Math_fround(0.0);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = Math_fround(0.0);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    break;
   }
  case 9:
   {
    f11 = Math_fround(HEAPF32[(HEAP32[i2 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    f11 = Math_fround(HEAPF32[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 1 << 2) >> 2]);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = f11;
    f11 = Math_fround(HEAPF32[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 2 << 2) >> 2]);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = f11;
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 3;
    break;
   }
  case 10:
   {
    f11 = Math_fround(HEAPF32[(HEAP32[i2 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) >> 2] = f11;
    f11 = Math_fround(HEAPF32[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 1 << 2) >> 2]);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 4 >> 2] = f11;
    f11 = Math_fround(HEAPF32[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 2 << 2) >> 2]);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 8 >> 2] = f11;
    f11 = Math_fround(HEAPF32[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 3 << 2) >> 2]);
    HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 4) + 12 >> 2] = f11;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
    break;
   }
  default:
   {}
  } while (0);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 i10 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i8;
 return i10 | 0;
}

function _stbtt__compute_crossings_x(f4, f5, i2, i3) {
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i35 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i21 = i1 + 144 | 0;
 i29 = i1 + 140 | 0;
 i13 = i1 + 136 | 0;
 i19 = i1 + 132 | 0;
 i12 = i1 + 128 | 0;
 i14 = i1 + 120 | 0;
 i18 = i1 + 112 | 0;
 i6 = i1 + 108 | 0;
 i20 = i1 + 104 | 0;
 i22 = i1 + 100 | 0;
 i30 = i1 + 96 | 0;
 i24 = i1 + 92 | 0;
 i32 = i1 + 88 | 0;
 i27 = i1 + 84 | 0;
 i23 = i1 + 80 | 0;
 i31 = i1 + 76 | 0;
 i25 = i1 + 72 | 0;
 i33 = i1 + 68 | 0;
 i26 = i1 + 64 | 0;
 i34 = i1 + 60 | 0;
 i8 = i1 + 56 | 0;
 i9 = i1 + 52 | 0;
 i10 = i1 + 48 | 0;
 i15 = i1 + 40 | 0;
 i16 = i1 + 32 | 0;
 i17 = i1 + 24 | 0;
 i11 = i1;
 i28 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 HEAPF32[i21 >> 2] = f4;
 HEAPF32[i29 >> 2] = f5;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i19 >> 2] = i3;
 HEAP32[i18 >> 2] = HEAP32[7876];
 HEAP32[i18 + 4 >> 2] = HEAP32[7877];
 HEAP32[i20 >> 2] = 0;
 f5 = Math_fround(HEAPF32[i21 >> 2]);
 HEAPF32[i14 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i29 >> 2]);
 HEAPF32[i14 + 4 >> 2] = f5;
 f5 = Math_fround(+Math_fround(HEAPF32[i29 >> 2]) % 1.0);
 HEAPF32[i6 >> 2] = f5;
 if (Math_fround(HEAPF32[i6 >> 2]) < Math_fround(.00999999977)) {
  f5 = Math_fround(Math_fround(HEAPF32[i29 >> 2]) + Math_fround(.00999999977));
  HEAPF32[i29 >> 2] = f5;
 } else if (Math_fround(HEAPF32[i6 >> 2]) > Math_fround(.990000009)) {
  f5 = Math_fround(Math_fround(HEAPF32[i29 >> 2]) - Math_fround(.00999999977));
  HEAPF32[i29 >> 2] = f5;
 }
 f5 = Math_fround(HEAPF32[i29 >> 2]);
 HEAPF32[i14 + 4 >> 2] = f5;
 HEAP32[i12 >> 2] = 0;
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) break;
  if ((HEAPU8[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) == 2) {
   HEAP32[i22 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + (((HEAP32[i12 >> 2] | 0) - 1 | 0) * 14 | 0) >> 1];
   HEAP32[i30 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + (((HEAP32[i12 >> 2] | 0) - 1 | 0) * 14 | 0) + 2 >> 1];
   HEAP32[i24 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) >> 1];
   HEAP32[i32 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) + 2 >> 1];
   f5 = Math_fround(HEAPF32[i29 >> 2]);
   if (f5 > Math_fround(((HEAP32[i30 >> 2] | 0) < (HEAP32[i32 >> 2] | 0) ? HEAP32[i30 >> 2] | 0 : HEAP32[i32 >> 2] | 0) | 0)) {
    f5 = Math_fround(HEAPF32[i29 >> 2]);
    if (f5 < Math_fround(((HEAP32[i30 >> 2] | 0) < (HEAP32[i32 >> 2] | 0) ? HEAP32[i32 >> 2] | 0 : HEAP32[i30 >> 2] | 0) | 0)) {
     f5 = Math_fround(HEAPF32[i21 >> 2]);
     if (f5 > Math_fround(((HEAP32[i22 >> 2] | 0) < (HEAP32[i24 >> 2] | 0) ? HEAP32[i22 >> 2] | 0 : HEAP32[i24 >> 2] | 0) | 0)) {
      f5 = Math_fround(HEAPF32[i29 >> 2]);
      f5 = Math_fround(f5 - Math_fround(HEAP32[i30 >> 2] | 0));
      f5 = Math_fround(f5 / Math_fround((HEAP32[i32 >> 2] | 0) - (HEAP32[i30 >> 2] | 0) | 0));
      f5 = Math_fround(f5 * Math_fround((HEAP32[i24 >> 2] | 0) - (HEAP32[i22 >> 2] | 0) | 0));
      f5 = Math_fround(f5 + Math_fround(HEAP32[i22 >> 2] | 0));
      HEAPF32[i27 >> 2] = f5;
      f5 = Math_fround(HEAPF32[i27 >> 2]);
      if (f5 < Math_fround(HEAPF32[i21 >> 2])) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + ((HEAP32[i30 >> 2] | 0) < (HEAP32[i32 >> 2] | 0) ? 1 : -1);
     }
    }
   }
  }
  do if ((HEAPU8[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) == 3) {
   HEAP32[i23 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + (((HEAP32[i12 >> 2] | 0) - 1 | 0) * 14 | 0) >> 1];
   HEAP32[i31 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + (((HEAP32[i12 >> 2] | 0) - 1 | 0) * 14 | 0) + 2 >> 1];
   HEAP32[i25 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) + 4 >> 1];
   HEAP32[i33 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) + 6 >> 1];
   HEAP32[i26 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) >> 1];
   HEAP32[i34 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) + 2 >> 1];
   if ((HEAP32[i23 >> 2] | 0) < (((HEAP32[i25 >> 2] | 0) < (HEAP32[i26 >> 2] | 0) ? HEAP32[i25 >> 2] | 0 : HEAP32[i26 >> 2] | 0) | 0)) i1 = HEAP32[i23 >> 2] | 0; else {
    i6 = HEAP32[i25 >> 2] | 0;
    i1 = HEAP32[i26 >> 2] | 0;
    i1 = (i6 | 0) < (i1 | 0) ? i6 | 0 : i1 | 0;
   }
   HEAP32[i8 >> 2] = i1;
   if ((HEAP32[i31 >> 2] | 0) < (((HEAP32[i33 >> 2] | 0) < (HEAP32[i34 >> 2] | 0) ? HEAP32[i33 >> 2] | 0 : HEAP32[i34 >> 2] | 0) | 0)) i1 = HEAP32[i31 >> 2] | 0; else {
    i6 = HEAP32[i33 >> 2] | 0;
    i1 = HEAP32[i34 >> 2] | 0;
    i1 = (i6 | 0) < (i1 | 0) ? i6 | 0 : i1 | 0;
   }
   HEAP32[i9 >> 2] = i1;
   if ((HEAP32[i31 >> 2] | 0) < (((HEAP32[i33 >> 2] | 0) < (HEAP32[i34 >> 2] | 0) ? HEAP32[i34 >> 2] | 0 : HEAP32[i33 >> 2] | 0) | 0)) {
    i6 = HEAP32[i34 >> 2] | 0;
    i1 = HEAP32[i33 >> 2] | 0;
    i1 = (i1 | 0) < (i6 | 0) ? i6 | 0 : i1 | 0;
   } else i1 = HEAP32[i31 >> 2] | 0;
   HEAP32[i10 >> 2] = i1;
   f5 = Math_fround(HEAPF32[i29 >> 2]);
   if (f5 > Math_fround(HEAP32[i9 >> 2] | 0)) {
    f5 = Math_fround(HEAPF32[i29 >> 2]);
    if (f5 < Math_fround(HEAP32[i10 >> 2] | 0)) {
     f5 = Math_fround(HEAPF32[i21 >> 2]);
     if (f5 > Math_fround(HEAP32[i8 >> 2] | 0)) {
      f5 = Math_fround(HEAP32[i23 >> 2] | 0);
      HEAPF32[i15 >> 2] = f5;
      f5 = Math_fround(HEAP32[i31 >> 2] | 0);
      HEAPF32[i15 + 4 >> 2] = f5;
      f5 = Math_fround(HEAP32[i25 >> 2] | 0);
      HEAPF32[i16 >> 2] = f5;
      f5 = Math_fround(HEAP32[i33 >> 2] | 0);
      HEAPF32[i16 + 4 >> 2] = f5;
      f5 = Math_fround(HEAP32[i26 >> 2] | 0);
      HEAPF32[i17 >> 2] = f5;
      f5 = Math_fround(HEAP32[i34 >> 2] | 0);
      HEAPF32[i17 + 4 >> 2] = f5;
      if (!(_equal(i15, i16) | 0)) if (!(_equal(i16, i17) | 0)) {
       i6 = _stbtt__ray_intersect_bezier(i14, i18, i15, i16, i17, i11) | 0;
       HEAP32[i7 >> 2] = i6;
       if ((HEAP32[i7 >> 2] | 0) >= 1) if (Math_fround(HEAPF32[i11 >> 2]) < Math_fround(0.0)) {
        i6 = Math_fround(HEAPF32[i11 + 4 >> 2]) < Math_fround(0.0);
        HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + (i6 ? -1 : 1);
       }
       if ((HEAP32[i7 >> 2] | 0) < 2) break;
       if (!(Math_fround(HEAPF32[i11 + 8 >> 2]) < Math_fround(0.0))) break;
       i6 = Math_fround(HEAPF32[i11 + 8 + 4 >> 2]) < Math_fround(0.0);
       HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + (i6 ? -1 : 1);
       break;
      }
      HEAP32[i23 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + (((HEAP32[i12 >> 2] | 0) - 1 | 0) * 14 | 0) >> 1];
      HEAP32[i31 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + (((HEAP32[i12 >> 2] | 0) - 1 | 0) * 14 | 0) + 2 >> 1];
      HEAP32[i25 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) >> 1];
      HEAP32[i33 >> 2] = HEAP16[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) * 14 | 0) + 2 >> 1];
      f5 = Math_fround(HEAPF32[i29 >> 2]);
      if (f5 > Math_fround(((HEAP32[i31 >> 2] | 0) < (HEAP32[i33 >> 2] | 0) ? HEAP32[i31 >> 2] | 0 : HEAP32[i33 >> 2] | 0) | 0)) {
       f5 = Math_fround(HEAPF32[i29 >> 2]);
       if (f5 < Math_fround(((HEAP32[i31 >> 2] | 0) < (HEAP32[i33 >> 2] | 0) ? HEAP32[i33 >> 2] | 0 : HEAP32[i31 >> 2] | 0) | 0)) {
        f5 = Math_fround(HEAPF32[i21 >> 2]);
        if (f5 > Math_fround(((HEAP32[i23 >> 2] | 0) < (HEAP32[i25 >> 2] | 0) ? HEAP32[i23 >> 2] | 0 : HEAP32[i25 >> 2] | 0) | 0)) {
         f5 = Math_fround(HEAPF32[i29 >> 2]);
         f5 = Math_fround(f5 - Math_fround(HEAP32[i31 >> 2] | 0));
         f5 = Math_fround(f5 / Math_fround((HEAP32[i33 >> 2] | 0) - (HEAP32[i31 >> 2] | 0) | 0));
         f5 = Math_fround(f5 * Math_fround((HEAP32[i25 >> 2] | 0) - (HEAP32[i23 >> 2] | 0) | 0));
         f5 = Math_fround(f5 + Math_fround(HEAP32[i23 >> 2] | 0));
         HEAPF32[i28 >> 2] = f5;
         f5 = Math_fround(HEAPF32[i28 >> 2]);
         if (f5 < Math_fround(HEAPF32[i21 >> 2])) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + ((HEAP32[i31 >> 2] | 0) < (HEAP32[i33 >> 2] | 0) ? 1 : -1);
        }
       }
      }
     }
    }
   }
  } while (0);
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 STACKTOP = i35;
 return HEAP32[i20 >> 2] | 0;
}

function _stbi_write_png_to_mem(i17, i21, i23, i25, i11, i15) {
 i17 = i17 | 0;
 i21 = i21 | 0;
 i23 = i23 | 0;
 i25 = i25 | 0;
 i11 = i11 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i24 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i29 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i19 = i1 + 96 | 0;
 i18 = i1 + 92 | 0;
 i22 = i1 + 88 | 0;
 i24 = i1 + 84 | 0;
 i26 = i1 + 80 | 0;
 i12 = i1 + 76 | 0;
 i16 = i1 + 72 | 0;
 i8 = i1 + 68 | 0;
 i4 = i1;
 i20 = i1 + 104 | 0;
 i14 = i1 + 64 | 0;
 i13 = i1 + 60 | 0;
 i6 = i1 + 56 | 0;
 i28 = i1 + 52 | 0;
 i10 = i1 + 48 | 0;
 i9 = i1 + 44 | 0;
 i27 = i1 + 40 | 0;
 i7 = i1 + 36 | 0;
 i2 = i1 + 32 | 0;
 i3 = i1 + 28 | 0;
 i5 = i1 + 24 | 0;
 i1 = i1 + 20 | 0;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i22 >> 2] = i21;
 HEAP32[i24 >> 2] = i23;
 HEAP32[i26 >> 2] = i25;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i16 >> 2] = i15;
 HEAP32[i8 >> 2] = -1;
 HEAP32[i4 >> 2] = HEAP32[6808];
 HEAP32[i4 + 4 >> 2] = HEAP32[6809];
 HEAP32[i4 + 8 >> 2] = HEAP32[6810];
 HEAP32[i4 + 12 >> 2] = HEAP32[6811];
 HEAP32[i4 + 16 >> 2] = HEAP32[6812];
 HEAP8[i20 >> 0] = HEAP8[54795] | 0;
 HEAP8[i20 + 1 >> 0] = HEAP8[54796] | 0;
 HEAP8[i20 + 2 >> 0] = HEAP8[54797] | 0;
 HEAP8[i20 + 3 >> 0] = HEAP8[54798] | 0;
 HEAP8[i20 + 4 >> 0] = HEAP8[54799] | 0;
 HEAP8[i20 + 5 >> 0] = HEAP8[54800] | 0;
 HEAP8[i20 + 6 >> 0] = HEAP8[54801] | 0;
 HEAP8[i20 + 7 >> 0] = HEAP8[54802] | 0;
 if (!(HEAP32[i22 >> 2] | 0)) {
  i25 = Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
  HEAP32[i22 >> 2] = i25;
 }
 if ((HEAP32[i8 >> 2] | 0) >= 5) HEAP32[i8 >> 2] = -1;
 i25 = (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) + 1 | 0;
 i25 = _malloc(Math_imul(i25, HEAP32[i26 >> 2] | 0) | 0) | 0;
 HEAP32[i6 >> 2] = i25;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i19 >> 2] = 0;
  i28 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 i25 = _malloc(Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
 HEAP32[i10 >> 2] = i25;
 if (!(HEAP32[i10 >> 2] | 0)) {
  _free(HEAP32[i6 >> 2] | 0);
  HEAP32[i19 >> 2] = 0;
  i28 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i26 >> 2] | 0)) break;
  if ((HEAP32[i8 >> 2] | 0) > -1) {
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
   _stbiw__encode_png_line(HEAP32[i18 >> 2] | 0, HEAP32[i22 >> 2] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0);
  } else {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i3 >> 2] = 2147483647;
   HEAP32[i7 >> 2] = 0;
   while (1) {
    if ((HEAP32[i7 >> 2] | 0) >= 5) break;
    _stbiw__encode_png_line(HEAP32[i18 >> 2] | 0, HEAP32[i22 >> 2] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i10 >> 2] | 0);
    HEAP32[i5 >> 2] = 0;
    HEAP32[i1 >> 2] = 0;
    while (1) {
     if ((HEAP32[i1 >> 2] | 0) >= (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0)) break;
     i25 = Math_abs(HEAP8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0) | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i25;
     HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
    }
    if ((HEAP32[i5 >> 2] | 0) < (HEAP32[i3 >> 2] | 0)) {
     HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
     HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
    }
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   }
   if ((HEAP32[i7 >> 2] | 0) != (HEAP32[i2 >> 2] | 0)) {
    _stbiw__encode_png_line(HEAP32[i18 >> 2] | 0, HEAP32[i22 >> 2] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i10 >> 2] | 0);
    HEAP32[i7 >> 2] = HEAP32[i2 >> 2];
   }
  }
  i25 = (HEAP32[i6 >> 2] | 0) + (Math_imul(HEAP32[i9 >> 2] | 0, (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) + 1 | 0) | 0) | 0;
  HEAP8[i25 >> 0] = HEAP32[i7 >> 2];
  i25 = (HEAP32[i6 >> 2] | 0) + (Math_imul(HEAP32[i9 >> 2] | 0, (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) + 1 | 0) | 0) + 1 | 0;
  _memmove(i25 | 0, HEAP32[i10 >> 2] | 0, Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 _free(HEAP32[i10 >> 2] | 0);
 i25 = _stbi_zlib_compress(HEAP32[i6 >> 2] | 0, Math_imul(HEAP32[i26 >> 2] | 0, (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) + 1 | 0) | 0, i27, 8) | 0;
 HEAP32[i28 >> 2] = i25;
 _free(HEAP32[i6 >> 2] | 0);
 if (!(HEAP32[i28 >> 2] | 0)) {
  HEAP32[i19 >> 2] = 0;
  i28 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 i25 = _malloc(45 + (HEAP32[i27 >> 2] | 0) + 12 | 0) | 0;
 HEAP32[i14 >> 2] = i25;
 if (!(HEAP32[i14 >> 2] | 0)) {
  HEAP32[i19 >> 2] = 0;
  i28 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 HEAP32[HEAP32[i16 >> 2] >> 2] = 45 + (HEAP32[i27 >> 2] | 0) + 12;
 HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
 _memmove(HEAP32[i13 >> 2] | 0, i20 | 0, 8) | 0;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 8;
 HEAP8[HEAP32[i13 >> 2] >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 3 >> 0] = 13;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 HEAP8[HEAP32[i13 >> 2] >> 0] = HEAP8[54803] | 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] = HEAP8[54804] | 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] = HEAP8[54805] | 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 3 >> 0] = HEAP8[54806] | 0;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 HEAP8[HEAP32[i13 >> 2] >> 0] = HEAP32[i24 >> 2] >> 24;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] = HEAP32[i24 >> 2] >> 16;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] = HEAP32[i24 >> 2] >> 8;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 3 >> 0] = HEAP32[i24 >> 2];
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 HEAP8[HEAP32[i13 >> 2] >> 0] = HEAP32[i26 >> 2] >> 24;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] = HEAP32[i26 >> 2] >> 16;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] = HEAP32[i26 >> 2] >> 8;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 3 >> 0] = HEAP32[i26 >> 2];
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 i25 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i25 + 1;
 HEAP8[i25 >> 0] = 8;
 i25 = HEAP32[i4 + (HEAP32[i12 >> 2] << 2) >> 2] & 255;
 i26 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i26 + 1;
 HEAP8[i26 >> 0] = i25;
 i26 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i26 + 1;
 HEAP8[i26 >> 0] = 0;
 i26 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i26 + 1;
 HEAP8[i26 >> 0] = 0;
 i26 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i26 + 1;
 HEAP8[i26 >> 0] = 0;
 _stbiw__wpcrc(i13, 13);
 HEAP8[HEAP32[i13 >> 2] >> 0] = HEAP32[i27 >> 2] >> 24;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] = HEAP32[i27 >> 2] >> 16;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] = HEAP32[i27 >> 2] >> 8;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 3 >> 0] = HEAP32[i27 >> 2];
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 HEAP8[HEAP32[i13 >> 2] >> 0] = HEAP8[54808] | 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] = HEAP8[54809] | 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] = HEAP8[54810] | 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 3 >> 0] = HEAP8[54811] | 0;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 _memmove(HEAP32[i13 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i27 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
 _free(HEAP32[i28 >> 2] | 0);
 _stbiw__wpcrc(i13, HEAP32[i27 >> 2] | 0);
 HEAP8[HEAP32[i13 >> 2] >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 3 >> 0] = 0;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 HEAP8[HEAP32[i13 >> 2] >> 0] = HEAP8[54813] | 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] = HEAP8[54814] | 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] = HEAP8[54815] | 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 3 >> 0] = HEAP8[54816] | 0;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 _stbiw__wpcrc(i13, 0);
 if ((HEAP32[i13 >> 2] | 0) != ((HEAP32[i14 >> 2] | 0) + (HEAP32[HEAP32[i16 >> 2] >> 2] | 0) | 0)) ___assert_fail(54818, 54694, 1155, 54838);
 HEAP32[i19 >> 2] = HEAP32[i14 >> 2];
 i28 = HEAP32[i19 >> 2] | 0;
 STACKTOP = i29;
 return i28 | 0;
}

function _GetImageData(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i10 = i1 + 8 | 0;
 i9 = i1;
 i8 = i1 + 24 | 0;
 i7 = i1 + 20 | 0;
 i2 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i5 = i1 + 32 | 0;
 i6 = i1 + 30 | 0;
 i1 = i1 + 28 | 0;
 if (HEAP32[i3 + 4 >> 2] | 0) if (HEAP32[i3 + 8 >> 2] | 0) {
  i13 = _malloc((Math_imul(HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0) << 2) | 0;
  HEAP32[i7 >> 2] = i13;
  L4 : do if ((HEAP32[i3 + 16 >> 2] | 0) >= 11) _TraceLog(4, 58323, i9); else {
   if ((HEAP32[i3 + 16 >> 2] | 0) == 8) i11 = 9; else if ((HEAP32[i3 + 16 >> 2] | 0) == 9) i11 = 9; else if ((HEAP32[i3 + 16 >> 2] | 0) == 10) i11 = 9;
   if ((i11 | 0) == 9) _TraceLog(4, 58387, i10);
   HEAP32[i2 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   while (1) {
    if ((HEAP32[i2 >> 2] | 0) >= (Math_imul(HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0)) break L4;
    do switch (HEAP32[i3 + 16 >> 2] | 0) {
    case 1:
     {
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = -1;
      break;
     }
    case 2:
     {
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) + 1) >> 0] | 0;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 2;
      break;
     }
    case 5:
     {
      HEAP16[i5 >> 1] = HEAP16[(HEAP32[i3 >> 2] | 0) + (HEAP32[i2 >> 2] << 1) >> 1] | 0;
      i13 = ~~Math_fround(Math_fround(((HEAPU16[i5 >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(((HEAPU16[i5 >> 1] | 0) & 1984) >> 6 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(((HEAPU16[i5 >> 1] | 0) & 62) >> 1 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = i13;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = ((HEAPU16[i5 >> 1] | 0) & 1) * 255;
      break;
     }
    case 3:
     {
      HEAP16[i6 >> 1] = HEAP16[(HEAP32[i3 >> 2] | 0) + (HEAP32[i2 >> 2] << 1) >> 1] | 0;
      i13 = ~~Math_fround(Math_fround(((HEAPU16[i6 >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(((HEAPU16[i6 >> 1] | 0) & 2016) >> 5 | 0) * Math_fround(4.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = i13;
      i13 = ~~Math_fround(Math_fround((HEAPU16[i6 >> 1] | 0) & 31 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = i13;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = -1;
      break;
     }
    case 6:
     {
      HEAP16[i1 >> 1] = HEAP16[(HEAP32[i3 >> 2] | 0) + (HEAP32[i2 >> 2] << 1) >> 1] | 0;
      i13 = ~~Math_fround(Math_fround(((HEAPU16[i1 >> 1] | 0) & 61440) >> 12 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(((HEAPU16[i1 >> 1] | 0) & 3840) >> 8 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(((HEAPU16[i1 >> 1] | 0) & 240) >> 4 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = i13;
      i13 = ~~Math_fround(Math_fround((HEAPU16[i1 >> 1] | 0) & 15 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = i13;
      break;
     }
    case 7:
     {
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) + 1) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) + 2) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) + 3) >> 0] | 0;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 4;
      break;
     }
    case 4:
     {
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) + 1) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) + 2) >> 0] | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = -1;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 3;
      break;
     }
    case 8:
     {
      i13 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = i13;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = -1;
      break;
     }
    case 9:
     {
      i13 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) + 1 << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) + 2 << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = i13;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = -1;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 3;
      break;
     }
    case 10:
     {
      i13 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 1 >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 2 >> 0] = i13;
      i13 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i2 >> 2] << 2) + 3 >> 0] = i13;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 4;
      break;
     }
    default:
     {}
    } while (0);
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
  i13 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 HEAP32[i8 >> 2] = 0;
 i13 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i12;
 return i13 | 0;
}

function _MatrixMultiply(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0, f9 = f0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i1 = i6;
 i5 = i1;
 i7 = i5 + 64 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 f8 = Math_fround(HEAPF32[i3 >> 2]);
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i4 >> 2]));
 f9 = Math_fround(HEAPF32[i3 + 16 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 4 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 32 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 8 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 48 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 12 >> 2])));
 HEAPF32[i1 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i3 >> 2]);
 f9 = Math_fround(f9 * Math_fround(HEAPF32[i4 + 16 >> 2]));
 f8 = Math_fround(HEAPF32[i3 + 16 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 20 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 32 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 24 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 48 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 28 >> 2])));
 HEAPF32[i1 + 16 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i3 >> 2]);
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i4 + 32 >> 2]));
 f9 = Math_fround(HEAPF32[i3 + 16 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 36 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 32 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 40 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 48 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 44 >> 2])));
 HEAPF32[i1 + 32 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i3 >> 2]);
 f9 = Math_fround(f9 * Math_fround(HEAPF32[i4 + 48 >> 2]));
 f8 = Math_fround(HEAPF32[i3 + 16 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 52 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 32 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 56 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 48 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 60 >> 2])));
 HEAPF32[i1 + 48 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i4 >> 2]));
 f9 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 4 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 36 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 8 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 52 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 12 >> 2])));
 HEAPF32[i1 + 4 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f9 = Math_fround(f9 * Math_fround(HEAPF32[i4 + 16 >> 2]));
 f8 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 20 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 36 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 24 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 52 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 28 >> 2])));
 HEAPF32[i1 + 20 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i4 + 32 >> 2]));
 f9 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 36 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 36 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 40 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 52 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 44 >> 2])));
 HEAPF32[i1 + 36 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f9 = Math_fround(f9 * Math_fround(HEAPF32[i4 + 48 >> 2]));
 f8 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 52 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 36 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 56 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 52 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 60 >> 2])));
 HEAPF32[i1 + 52 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i4 >> 2]));
 f9 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 4 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 8 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 56 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 12 >> 2])));
 HEAPF32[i1 + 8 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f9 = Math_fround(f9 * Math_fround(HEAPF32[i4 + 16 >> 2]));
 f8 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 20 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 24 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 56 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 28 >> 2])));
 HEAPF32[i1 + 24 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i4 + 32 >> 2]));
 f9 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 36 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 40 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 56 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 44 >> 2])));
 HEAPF32[i1 + 40 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f9 = Math_fround(f9 * Math_fround(HEAPF32[i4 + 48 >> 2]));
 f8 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 52 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 56 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 56 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 60 >> 2])));
 HEAPF32[i1 + 56 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i4 >> 2]));
 f9 = Math_fround(HEAPF32[i3 + 28 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 4 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 44 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 8 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 60 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 12 >> 2])));
 HEAPF32[i1 + 12 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 f9 = Math_fround(f9 * Math_fround(HEAPF32[i4 + 16 >> 2]));
 f8 = Math_fround(HEAPF32[i3 + 28 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 20 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 44 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 24 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 60 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 28 >> 2])));
 HEAPF32[i1 + 28 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i4 + 32 >> 2]));
 f9 = Math_fround(HEAPF32[i3 + 28 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 36 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 44 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 40 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 60 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 44 >> 2])));
 HEAPF32[i1 + 44 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 f9 = Math_fround(f9 * Math_fround(HEAPF32[i4 + 48 >> 2]));
 f8 = Math_fround(HEAPF32[i3 + 28 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 52 >> 2])));
 f9 = Math_fround(HEAPF32[i3 + 44 >> 2]);
 f9 = Math_fround(f8 + Math_fround(f9 * Math_fround(HEAPF32[i4 + 56 >> 2])));
 f8 = Math_fround(HEAPF32[i3 + 60 >> 2]);
 f8 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i4 + 60 >> 2])));
 HEAPF32[i1 + 60 >> 2] = f8;
 i5 = i2;
 i7 = i5 + 64 | 0;
 do {
  HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
  i5 = i5 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 STACKTOP = i6;
 return;
}

function _stbi__convert_format16(i2, i4, i5, i6, i7) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i18 = 0;
 i19 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 40 | 0;
 i8 = i1 + 36 | 0;
 i11 = i1 + 32 | 0;
 i13 = i1 + 28 | 0;
 i16 = i1 + 24 | 0;
 i17 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i15 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i17 >> 2] = i7;
 if ((HEAP32[i13 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) {
  HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
  i18 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 if (!((HEAP32[i13 >> 2] | 0) >= 1 & (HEAP32[i13 >> 2] | 0) <= 4)) ___assert_fail(53722, 53449, 1637, 53753);
 i7 = Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
 i7 = _stbi__malloc((Math_imul(i7, HEAP32[i17 >> 2] | 0) | 0) << 1) | 0;
 HEAP32[i9 >> 2] = i7;
 if (!(HEAP32[i9 >> 2] | 0)) {
  _free(HEAP32[i8 >> 2] | 0);
  i18 = (_stbi__err(53511) | 0) != 0;
  HEAP32[i14 >> 2] = i18 ? 0 : 0;
  i18 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 HEAP32[i12 >> 2] = 0;
 L12 : while (1) {
  i1 = HEAP32[i8 >> 2] | 0;
  if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
  i7 = Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
  i7 = i1 + ((Math_imul(i7, HEAP32[i11 >> 2] | 0) | 0) << 1) | 0;
  HEAP32[i15 >> 2] = i7;
  i7 = Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
  i7 = (HEAP32[i9 >> 2] | 0) + ((Math_imul(i7, HEAP32[i13 >> 2] | 0) | 0) << 1) | 0;
  HEAP32[i3 >> 2] = i7;
  L15 : do switch ((HEAP32[i11 >> 2] << 3) + (HEAP32[i13 >> 2] | 0) | 0) {
  case 10:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[i3 >> 2] >> 1] = HEAP16[HEAP32[i15 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] = -1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
    }
   }
  case 11:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP16[HEAP32[i15 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 4 >> 1] = i7;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] = i7;
     HEAP16[HEAP32[i3 >> 2] >> 1] = i7;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 6;
    }
   }
  case 12:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP16[HEAP32[i15 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 4 >> 1] = i7;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] = i7;
     HEAP16[HEAP32[i3 >> 2] >> 1] = i7;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 6 >> 1] = -1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 8;
    }
   }
  case 17:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[i3 >> 2] >> 1] = HEAP16[HEAP32[i15 >> 2] >> 1] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 4;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 2;
    }
   }
  case 19:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP16[HEAP32[i15 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 4 >> 1] = i7;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] = i7;
     HEAP16[HEAP32[i3 >> 2] >> 1] = i7;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 4;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 6;
    }
   }
  case 20:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP16[HEAP32[i15 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 4 >> 1] = i7;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] = i7;
     HEAP16[HEAP32[i3 >> 2] >> 1] = i7;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 6 >> 1] = HEAP16[(HEAP32[i15 >> 2] | 0) + 2 >> 1] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 4;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 8;
    }
   }
  case 28:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[i3 >> 2] >> 1] = HEAP16[HEAP32[i15 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[i15 >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 4 >> 1] = HEAP16[(HEAP32[i15 >> 2] | 0) + 4 >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 6 >> 1] = -1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 6;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 8;
    }
   }
  case 25:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP32[i15 >> 2] | 0;
     i7 = _stbi__compute_y_16(HEAPU16[HEAP32[i15 >> 2] >> 1] | 0, HEAPU16[i7 + 2 >> 1] | 0, HEAPU16[i7 + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[i3 >> 2] >> 1] = i7;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 6;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 2;
    }
   }
  case 26:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP32[i15 >> 2] | 0;
     i7 = _stbi__compute_y_16(HEAPU16[HEAP32[i15 >> 2] >> 1] | 0, HEAPU16[i7 + 2 >> 1] | 0, HEAPU16[i7 + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[i3 >> 2] >> 1] = i7;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] = -1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 6;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
    }
   }
  case 33:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP32[i15 >> 2] | 0;
     i7 = _stbi__compute_y_16(HEAPU16[HEAP32[i15 >> 2] >> 1] | 0, HEAPU16[i7 + 2 >> 1] | 0, HEAPU16[i7 + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[i3 >> 2] >> 1] = i7;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 8;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 2;
    }
   }
  case 34:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP32[i15 >> 2] | 0;
     i7 = _stbi__compute_y_16(HEAPU16[HEAP32[i15 >> 2] >> 1] | 0, HEAPU16[i7 + 2 >> 1] | 0, HEAPU16[i7 + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[i3 >> 2] >> 1] = i7;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[i15 >> 2] | 0) + 6 >> 1] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 8;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
    }
   }
  case 35:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[i3 >> 2] >> 1] = HEAP16[HEAP32[i15 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[i15 >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[(HEAP32[i3 >> 2] | 0) + 4 >> 1] = HEAP16[(HEAP32[i15 >> 2] | 0) + 4 >> 1] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 8;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 6;
    }
   }
  default:
   {
    i18 = 46;
    break L12;
   }
  } while (0);
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 if ((i18 | 0) == 46) ___assert_fail(53776, 53449, 1666, 53753);
 _free(i1);
 HEAP32[i14 >> 2] = HEAP32[i9 >> 2];
 i18 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i19;
 return i18 | 0;
}

function _stbi__convert_format(i2, i4, i5, i6, i7) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i18 = 0;
 i19 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 40 | 0;
 i8 = i1 + 36 | 0;
 i11 = i1 + 32 | 0;
 i13 = i1 + 28 | 0;
 i16 = i1 + 24 | 0;
 i17 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i15 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i17 >> 2] = i7;
 if ((HEAP32[i13 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) {
  HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
  i18 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 if (!((HEAP32[i13 >> 2] | 0) >= 1 & (HEAP32[i13 >> 2] | 0) <= 4)) ___assert_fail(53722, 53449, 1588, 53778);
 i7 = _stbi__malloc_mad3(HEAP32[i13 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, 0) | 0;
 HEAP32[i9 >> 2] = i7;
 if (!(HEAP32[i9 >> 2] | 0)) {
  _free(HEAP32[i8 >> 2] | 0);
  i18 = (_stbi__err(53511) | 0) != 0;
  HEAP32[i14 >> 2] = i18 ? 0 : 0;
  i18 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 HEAP32[i12 >> 2] = 0;
 L12 : while (1) {
  i1 = HEAP32[i8 >> 2] | 0;
  if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
  i7 = Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
  i7 = i1 + (Math_imul(i7, HEAP32[i11 >> 2] | 0) | 0) | 0;
  HEAP32[i15 >> 2] = i7;
  i7 = Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
  i7 = (HEAP32[i9 >> 2] | 0) + (Math_imul(i7, HEAP32[i13 >> 2] | 0) | 0) | 0;
  HEAP32[i3 >> 2] = i7;
  L15 : do switch ((HEAP32[i11 >> 2] << 3) + (HEAP32[i13 >> 2] | 0) | 0) {
  case 10:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[i3 >> 2] >> 0] = HEAP8[HEAP32[i15 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 2;
    }
   }
  case 11:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP8[HEAP32[i15 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = i7;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = i7;
     HEAP8[HEAP32[i3 >> 2] >> 0] = i7;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 3;
    }
   }
  case 12:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP8[HEAP32[i15 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = i7;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = i7;
     HEAP8[HEAP32[i3 >> 2] >> 0] = i7;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
    }
   }
  case 17:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[i3 >> 2] >> 0] = HEAP8[HEAP32[i15 >> 2] >> 0] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    }
   }
  case 19:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP8[HEAP32[i15 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = i7;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = i7;
     HEAP8[HEAP32[i3 >> 2] >> 0] = i7;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 3;
    }
   }
  case 20:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP8[HEAP32[i15 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = i7;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = i7;
     HEAP8[HEAP32[i3 >> 2] >> 0] = i7;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[i15 >> 2] | 0) + 1 >> 0] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 2;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
    }
   }
  case 28:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[i3 >> 2] >> 0] = HEAP8[HEAP32[i15 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[i15 >> 2] | 0) + 1 >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[i15 >> 2] | 0) + 2 >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 3;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
    }
   }
  case 25:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP32[i15 >> 2] | 0;
     i7 = _stbi__compute_y(HEAPU8[HEAP32[i15 >> 2] >> 0] | 0, HEAPU8[i7 + 1 >> 0] | 0, HEAPU8[i7 + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[i3 >> 2] >> 0] = i7;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 3;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    }
   }
  case 26:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP32[i15 >> 2] | 0;
     i7 = _stbi__compute_y(HEAPU8[HEAP32[i15 >> 2] >> 0] | 0, HEAPU8[i7 + 1 >> 0] | 0, HEAPU8[i7 + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[i3 >> 2] >> 0] = i7;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 3;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 2;
    }
   }
  case 33:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP32[i15 >> 2] | 0;
     i7 = _stbi__compute_y(HEAPU8[HEAP32[i15 >> 2] >> 0] | 0, HEAPU8[i7 + 1 >> 0] | 0, HEAPU8[i7 + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[i3 >> 2] >> 0] = i7;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 4;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    }
   }
  case 34:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     i7 = HEAP32[i15 >> 2] | 0;
     i7 = _stbi__compute_y(HEAPU8[HEAP32[i15 >> 2] >> 0] | 0, HEAPU8[i7 + 1 >> 0] | 0, HEAPU8[i7 + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[i3 >> 2] >> 0] = i7;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[i15 >> 2] | 0) + 3 >> 0] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 4;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 2;
    }
   }
  case 35:
   {
    HEAP32[i10 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[i3 >> 2] >> 0] = HEAP8[HEAP32[i15 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[i15 >> 2] | 0) + 1 >> 0] | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[i15 >> 2] | 0) + 2 >> 0] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 4;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 3;
    }
   }
  default:
   {
    i18 = 46;
    break L12;
   }
  } while (0);
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 if ((i18 | 0) == 46) ___assert_fail(53776, 53449, 1617, 53778);
 _free(i1);
 HEAP32[i14 >> 2] = HEAP32[i9 >> 2];
 i18 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i19;
 return i18 | 0;
}

function _jar_xm_next_of_sample(i3) {
 i3 = i3 | 0;
 var f1 = f0, i2 = 0, f4 = f0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0;
 i7 = 0;
 i14 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i2 + 28 | 0;
 i9 = i2 + 24 | 0;
 i12 = i2 + 20 | 0;
 i13 = i2 + 16 | 0;
 i11 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i9 >> 2] = i3;
 if (HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) if (HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) if (!(Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]) < Math_fround(0.0))) {
  if (!(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 24 >> 2] | 0)) {
   HEAPF32[i10 >> 2] = Math_fround(0.0);
   f4 = Math_fround(HEAPF32[i10 >> 2]);
   STACKTOP = i14;
   return Math_fround(f4);
  }
  i3 = ~~Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]) >>> 0;
  HEAP32[i5 >> 2] = i3;
  HEAP32[i6 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  f4 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]);
  f4 = Math_fround(f4 - Math_fround((HEAP32[i5 >> 2] | 0) >>> 0));
  HEAPF32[i11 >> 2] = f4;
  f4 = Math_fround(HEAPF32[(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 72 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2]);
  HEAPF32[i12 >> 2] = f4;
  L9 : do switch (HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 48 >> 2] | 0) {
  case 0:
   {
    if ((HEAP32[i6 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 24 >> 2] | 0) >>> 0) f1 = Math_fround(HEAPF32[(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 72 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2]); else f1 = Math_fround(0.0);
    HEAPF32[i13 >> 2] = f1;
    f4 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 32 >> 2]);
    i7 = (HEAP32[i9 >> 2] | 0) + 20 | 0;
    f4 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f4);
    HEAPF32[i7 >> 2] = f4;
    if (Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]) >= Math_fround((HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 24 >> 2] | 0) >>> 0)) HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = Math_fround(-1.0);
    break;
   }
  case 1:
   {
    if ((HEAP32[i6 >> 2] | 0) == (HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 36 >> 2] | 0)) i2 = HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 28 >> 2] | 0; else i2 = HEAP32[i6 >> 2] | 0;
    f4 = Math_fround(HEAPF32[(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 72 >> 2] | 0) + (i2 << 2) >> 2]);
    HEAPF32[i13 >> 2] = f4;
    f4 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 32 >> 2]);
    i7 = (HEAP32[i9 >> 2] | 0) + 20 | 0;
    f4 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f4);
    HEAPF32[i7 >> 2] = f4;
    while (1) {
     f4 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]);
     if (!(f4 >= Math_fround((HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 36 >> 2] | 0) >>> 0))) break L9;
     f4 = Math_fround((HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 32 >> 2] | 0) >>> 0);
     i7 = (HEAP32[i9 >> 2] | 0) + 20 | 0;
     f4 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) - f4);
     HEAPF32[i7 >> 2] = f4;
    }
   }
  case 2:
   {
    f1 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 32 >> 2]);
    i2 = (HEAP32[i9 >> 2] | 0) + 20 | 0;
    f4 = Math_fround(HEAPF32[i2 >> 2]);
    if (HEAP8[(HEAP32[i9 >> 2] | 0) + 36 >> 0] & 1) {
     f4 = Math_fround(f4 + f1);
     HEAPF32[i2 >> 2] = f4;
    } else {
     f4 = Math_fround(f4 - f1);
     HEAPF32[i2 >> 2] = f4;
    }
    if (HEAP8[(HEAP32[i9 >> 2] | 0) + 36 >> 0] & 1) {
     i2 = HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 72 >> 2] | 0;
     if ((HEAP32[i6 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 36 >> 2] | 0) >>> 0) f1 = Math_fround(HEAPF32[i2 + (HEAP32[i5 >> 2] << 2) >> 2]); else f1 = Math_fround(HEAPF32[i2 + (HEAP32[i6 >> 2] << 2) >> 2]);
     HEAPF32[i13 >> 2] = f1;
     f4 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]);
     if (f4 >= Math_fround((HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 36 >> 2] | 0) >>> 0)) {
      HEAP8[(HEAP32[i9 >> 2] | 0) + 36 >> 0] = 0;
      f4 = Math_fround(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 36 >> 2] << 1 >>> 0);
      f4 = Math_fround(f4 - Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]));
      HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = f4;
     }
     f4 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]);
     if (!(f4 >= Math_fround((HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 24 >> 2] | 0) >>> 0))) break L9;
     HEAP8[(HEAP32[i9 >> 2] | 0) + 36 >> 0] = 0;
     f4 = Math_fround(((HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 24 >> 2] | 0) - 1 | 0) >>> 0);
     i7 = (HEAP32[i9 >> 2] | 0) + 20 | 0;
     f4 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) - f4);
     HEAPF32[i7 >> 2] = f4;
     break L9;
    }
    f4 = Math_fround(HEAPF32[i12 >> 2]);
    HEAPF32[i13 >> 2] = f4;
    if ((HEAP32[i6 >> 2] | 0) == 1) i7 = 33; else if (((HEAP32[i6 >> 2] | 0) - 2 | 0) >>> 0 <= (HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 28 >> 2] | 0) >>> 0) i7 = 33; else f1 = Math_fround(HEAPF32[(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 72 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 2 << 2) >> 2]);
    if ((i7 | 0) == 33) f1 = Math_fround(HEAPF32[(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 72 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2]);
    HEAPF32[i12 >> 2] = f1;
    f4 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]);
    if (f4 <= Math_fround((HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 28 >> 2] | 0) >>> 0)) {
     HEAP8[(HEAP32[i9 >> 2] | 0) + 36 >> 0] = 1;
     f4 = Math_fround(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) + 28 >> 2] << 1 >>> 0);
     f4 = Math_fround(f4 - Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]));
     HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = f4;
    }
    if (Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]) <= Math_fround(0.0)) {
     HEAP8[(HEAP32[i9 >> 2] | 0) + 36 >> 0] = 1;
     HEAPF32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = Math_fround(0.0);
    }
    break;
   }
  default:
   HEAPF32[i13 >> 2] = Math_fround(0.0);
  } while (0);
  f15 = Math_fround(HEAPF32[i12 >> 2]);
  f1 = Math_fround(HEAPF32[i11 >> 2]);
  f4 = Math_fround(HEAPF32[i13 >> 2]);
  f4 = Math_fround(f15 + Math_fround(f1 * Math_fround(f4 - Math_fround(HEAPF32[i12 >> 2]))));
  HEAPF32[i8 >> 2] = f4;
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 148 >> 2] | 0) >>> 0 < 32) {
   i13 = HEAP32[i9 >> 2] | 0;
   f1 = Math_fround(HEAPF32[i13 + 152 + (HEAP32[i13 + 148 >> 2] << 2) >> 2]);
   f4 = Math_fround(Math_fround((HEAP32[(HEAP32[i9 >> 2] | 0) + 148 >> 2] | 0) >>> 0) / Math_fround(32.0));
   f15 = Math_fround(HEAPF32[i8 >> 2]);
   i13 = HEAP32[i9 >> 2] | 0;
   f15 = Math_fround(f1 + Math_fround(f4 * Math_fround(f15 - Math_fround(HEAPF32[i13 + 152 + (HEAP32[i13 + 148 >> 2] << 2) >> 2]))));
   HEAPF32[i10 >> 2] = f15;
   f15 = Math_fround(HEAPF32[i10 >> 2]);
   STACKTOP = i14;
   return Math_fround(f15);
  } else {
   f15 = Math_fround(HEAPF32[i8 >> 2]);
   HEAPF32[i10 >> 2] = f15;
   f15 = Math_fround(HEAPF32[i10 >> 2]);
   STACKTOP = i14;
   return Math_fround(f15);
  }
 }
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 148 >> 2] | 0) >>> 0 < 32) {
  i13 = HEAP32[i9 >> 2] | 0;
  f4 = Math_fround(HEAPF32[i13 + 152 + (HEAP32[i13 + 148 >> 2] << 2) >> 2]);
  f15 = Math_fround(Math_fround((HEAP32[(HEAP32[i9 >> 2] | 0) + 148 >> 2] | 0) >>> 0) / Math_fround(32.0));
  i13 = HEAP32[i9 >> 2] | 0;
  f15 = Math_fround(f4 + Math_fround(f15 * Math_fround(Math_fround(0.0) - Math_fround(HEAPF32[i13 + 152 + (HEAP32[i13 + 148 >> 2] << 2) >> 2]))));
  HEAPF32[i10 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i10 >> 2]);
  STACKTOP = i14;
  return Math_fround(f15);
 } else {
  HEAPF32[i10 >> 2] = Math_fround(0.0);
  f15 = Math_fround(HEAPF32[i10 >> 2]);
  STACKTOP = i14;
  return Math_fround(f15);
 }
 return f0;
}

function _stbir__resample_vertical_downsample(i25, i15) {
 i25 = i25 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, f32 = f0;
 i28 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i29 = i1 + 108 | 0;
 i31 = i1 + 104 | 0;
 i27 = i1 + 100 | 0;
 i14 = i1 + 96 | 0;
 i18 = i1 + 92 | 0;
 i30 = i1 + 88 | 0;
 i26 = i1 + 84 | 0;
 i2 = i1 + 80 | 0;
 i21 = i1 + 76 | 0;
 i8 = i1 + 72 | 0;
 i6 = i1 + 68 | 0;
 i7 = i1 + 64 | 0;
 i19 = i1 + 60 | 0;
 i20 = i1 + 56 | 0;
 i23 = i1 + 52 | 0;
 i24 = i1 + 48 | 0;
 i16 = i1 + 44 | 0;
 i17 = i1 + 40 | 0;
 i5 = i1 + 36 | 0;
 i4 = i1 + 32 | 0;
 i3 = i1 + 28 | 0;
 i22 = i1 + 24 | 0;
 i9 = i1 + 20 | 0;
 i11 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i13 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 HEAP32[i29 >> 2] = i25;
 HEAP32[i31 >> 2] = i15;
 HEAP32[i18 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 20 >> 2];
 HEAP32[i30 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 108 >> 2];
 HEAP32[i26 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 112 >> 2];
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 64 >> 2];
 HEAP32[i21 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 164 >> 2];
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 124 >> 2];
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 132 >> 2];
 HEAP32[i7 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAP32[(HEAP32[i29 >> 2] | 0) + 148 >> 2] | 0);
 HEAP32[i19 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 180 >> 2];
 HEAP32[i20 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 176 >> 2];
 HEAP32[i23 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 168 >> 2];
 HEAP32[i24 >> 2] = ((HEAP32[(HEAP32[i29 >> 2] | 0) + 160 >> 2] | 0) >>> 0) / 4 | 0;
 HEAP32[i16 >> 2] = HEAP32[(HEAP32[i30 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) >> 2];
 HEAP32[i17 >> 2] = HEAP32[(HEAP32[i30 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) + 4 >> 2];
 if (_stbir__use_height_upsampling(HEAP32[i29 >> 2] | 0) | 0) ___assert_fail(55532, 54884, 2004, 55686);
 HEAP32[i14 >> 2] = HEAP32[i16 >> 2];
 while (1) {
  if ((HEAP32[i14 >> 2] | 0) > (HEAP32[i17 >> 2] | 0)) break;
  HEAP32[i5 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i16 >> 2] | 0);
  i31 = Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = i31;
  f32 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) << 2) >> 2]);
  HEAPF32[i3 >> 2] = f32;
  i31 = _stbir__get_ring_buffer_scanline(HEAP32[i14 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i23 >> 2] | 0, HEAP32[i21 >> 2] | 0, HEAP32[i24 >> 2] | 0) | 0;
  HEAP32[i22 >> 2] = i31;
  L7 : do switch (HEAP32[i2 >> 2] | 0) {
  case 1:
   {
    HEAP32[i27 >> 2] = 0;
    while (1) {
     if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break L7;
     HEAP32[i9 >> 2] = HEAP32[i27 >> 2];
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + 0 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + 0 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
    }
   }
  case 2:
   {
    HEAP32[i27 >> 2] = 0;
    while (1) {
     if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break L7;
     HEAP32[i11 >> 2] = HEAP32[i27 >> 2] << 1;
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + 0 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + 0 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + 1 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + 1 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
    }
   }
  case 3:
   {
    HEAP32[i27 >> 2] = 0;
    while (1) {
     if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break L7;
     HEAP32[i12 >> 2] = (HEAP32[i27 >> 2] | 0) * 3;
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + 0 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + 0 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + 1 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + 1 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + 2 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + 2 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
    }
   }
  case 4:
   {
    HEAP32[i27 >> 2] = 0;
    while (1) {
     if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break L7;
     HEAP32[i13 >> 2] = HEAP32[i27 >> 2] << 2;
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + 0 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + 0 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + 1 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + 1 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + 2 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + 2 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + 3 << 2) >> 2]);
     f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
     i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + 3 << 2) | 0;
     f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
     HEAPF32[i31 >> 2] = f32;
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
    }
   }
  default:
   {
    HEAP32[i27 >> 2] = 0;
    while (1) {
     if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break L7;
     i31 = Math_imul(HEAP32[i27 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
     HEAP32[i10 >> 2] = i31;
     HEAP32[i1 >> 2] = 0;
     while (1) {
      if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i2 >> 2] | 0)) break;
      f32 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) << 2) >> 2]);
      f32 = Math_fround(f32 * Math_fround(HEAPF32[i3 >> 2]));
      i31 = (HEAP32[i22 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) << 2) | 0;
      f32 = Math_fround(Math_fround(HEAPF32[i31 >> 2]) + f32);
      HEAPF32[i31 >> 2] = f32;
      HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
     }
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
    }
   }
  } while (0);
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 }
 STACKTOP = i28;
 return;
}

function _LoadDDS(i20, i6) {
 i20 = i20 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i19 = i1 + 56 | 0;
 i16 = i1 + 48 | 0;
 i15 = i1 + 40 | 0;
 i14 = i1 + 32 | 0;
 i18 = i1 + 24 | 0;
 i17 = i1 + 16 | 0;
 i13 = i1 + 8 | 0;
 i12 = i1;
 i7 = i1 + 224 | 0;
 i23 = i1 + 204 | 0;
 i21 = i1 + 200 | 0;
 i5 = i1 + 232 | 0;
 i22 = i1 + 76 | 0;
 i2 = i1 + 230 | 0;
 i8 = i1 + 72 | 0;
 i3 = i1 + 229 | 0;
 i9 = i1 + 68 | 0;
 i4 = i1 + 228 | 0;
 i10 = i1 + 64 | 0;
 i11 = i1 + 60 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 HEAP32[i23 + 12 >> 2] = 0;
 HEAP32[i23 + 16 >> 2] = 0;
 i6 = _fopen(HEAP32[i7 >> 2] | 0, 53420) | 0;
 HEAP32[i21 >> 2] = i6;
 if (!(HEAP32[i21 >> 2] | 0)) {
  HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
  _TraceLog(4, 57936, i12);
  HEAP32[i20 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
  HEAP32[i20 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
  HEAP32[i20 + 16 >> 2] = HEAP32[i23 + 16 >> 2];
  STACKTOP = i25;
  return;
 }
 _fread(i5, 4, 1, HEAP32[i21 >> 2] | 0) | 0;
 L5 : do if ((HEAP8[i5 >> 0] | 0) != 68) i24 = 7; else if ((HEAP8[i5 + 1 >> 0] | 0) != 68) i24 = 7; else if ((HEAP8[i5 + 2 >> 0] | 0) != 83) i24 = 7; else if ((HEAP8[i5 + 3 >> 0] | 0) != 32) i24 = 7; else {
  _fread(i22, 124, 1, HEAP32[i21 >> 2] | 0) | 0;
  HEAP32[i17 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i17 + 4 >> 2] = 124;
  _TraceLog(2, 58018, i17);
  i17 = HEAP32[i22 + 72 >> 2] | 0;
  HEAP32[i18 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i18 + 4 >> 2] = i17;
  _TraceLog(2, 58048, i18);
  i18 = HEAP32[i22 + 72 + 4 >> 2] | 0;
  HEAP32[i14 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i14 + 4 >> 2] = i18;
  _TraceLog(2, 58084, i14);
  i18 = HEAP32[i22 + 72 + 8 >> 2] | 0;
  HEAP32[i15 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i15 + 4 >> 2] = i18;
  _TraceLog(2, 58123, i15);
  i18 = HEAP32[i22 + 72 + 12 >> 2] | 0;
  HEAP32[i16 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i16 + 4 >> 2] = i18;
  _TraceLog(2, 58150, i16);
  HEAP32[i23 + 4 >> 2] = HEAP32[i22 + 12 >> 2];
  HEAP32[i23 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
  if (!(HEAP32[i22 + 24 >> 2] | 0)) HEAP32[i23 + 12 >> 2] = 1; else HEAP32[i23 + 12 >> 2] = HEAP32[i22 + 24 >> 2];
  do if ((HEAP32[i22 + 72 + 12 >> 2] | 0) == 16) {
   if ((HEAP32[i22 + 72 + 4 >> 2] | 0) == 64) {
    i18 = _malloc((Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 1) | 0;
    HEAP32[i23 >> 2] = i18;
    i18 = (Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 1;
    _fread(HEAP32[i23 >> 2] | 0, i18, 1, HEAP32[i21 >> 2] | 0) | 0;
    HEAP32[i23 + 16 >> 2] = 3;
    break;
   }
   if ((HEAP32[i22 + 72 + 4 >> 2] | 0) == 65) {
    if ((HEAP32[i22 + 72 + 28 >> 2] | 0) == 32768) {
     i18 = _malloc((Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 1) | 0;
     HEAP32[i23 >> 2] = i18;
     i18 = (Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 1;
     _fread(HEAP32[i23 >> 2] | 0, i18, 1, HEAP32[i21 >> 2] | 0) | 0;
     HEAP8[i2 >> 0] = 0;
     HEAP32[i8 >> 2] = 0;
     while (1) {
      if ((HEAP32[i8 >> 2] | 0) >= (Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0)) break;
      HEAP8[i2 >> 0] = HEAPU16[(HEAP32[i23 >> 2] | 0) + (HEAP32[i8 >> 2] << 1) >> 1] >> 15;
      i18 = (HEAP32[i23 >> 2] | 0) + (HEAP32[i8 >> 2] << 1) | 0;
      HEAP16[i18 >> 1] = HEAPU16[i18 >> 1] << 1;
      i18 = (HEAP32[i23 >> 2] | 0) + (HEAP32[i8 >> 2] << 1) | 0;
      HEAP16[i18 >> 1] = (HEAPU16[i18 >> 1] | 0) + (HEAPU8[i2 >> 0] | 0);
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
     }
     HEAP32[i23 + 16 >> 2] = 5;
     break;
    }
    if ((HEAP32[i22 + 72 + 28 >> 2] | 0) == 61440) {
     i18 = _malloc((Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 1) | 0;
     HEAP32[i23 >> 2] = i18;
     i18 = (Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 1;
     _fread(HEAP32[i23 >> 2] | 0, i18, 1, HEAP32[i21 >> 2] | 0) | 0;
     HEAP8[i3 >> 0] = 0;
     HEAP32[i9 >> 2] = 0;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >= (Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0)) break;
      HEAP8[i3 >> 0] = HEAPU16[(HEAP32[i23 >> 2] | 0) + (HEAP32[i9 >> 2] << 1) >> 1] >> 12;
      i18 = (HEAP32[i23 >> 2] | 0) + (HEAP32[i9 >> 2] << 1) | 0;
      HEAP16[i18 >> 1] = HEAPU16[i18 >> 1] << 4;
      i18 = (HEAP32[i23 >> 2] | 0) + (HEAP32[i9 >> 2] << 1) | 0;
      HEAP16[i18 >> 1] = (HEAPU16[i18 >> 1] | 0) + (HEAPU8[i3 >> 0] | 0);
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     }
     HEAP32[i23 + 16 >> 2] = 6;
    }
   }
  } while (0);
  if ((HEAP32[i22 + 72 + 4 >> 2] | 0) == 64) if ((HEAP32[i22 + 72 + 12 >> 2] | 0) == 24) {
   i22 = _malloc((Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) * 3 | 0) | 0;
   HEAP32[i23 >> 2] = i22;
   i22 = (Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) * 3 | 0;
   _fread(HEAP32[i23 >> 2] | 0, i22, 1, HEAP32[i21 >> 2] | 0) | 0;
   HEAP32[i23 + 16 >> 2] = 4;
   break;
  }
  if ((HEAP32[i22 + 72 + 4 >> 2] | 0) == 65) if ((HEAP32[i22 + 72 + 12 >> 2] | 0) == 32) {
   i22 = _malloc((Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 2) | 0;
   HEAP32[i23 >> 2] = i22;
   i22 = (Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 2;
   _fread(HEAP32[i23 >> 2] | 0, i22, 1, HEAP32[i21 >> 2] | 0) | 0;
   HEAP8[i4 >> 0] = 0;
   HEAP32[i10 >> 2] = 0;
   while (1) {
    if ((HEAP32[i10 >> 2] | 0) >= ((Math_imul(HEAP32[i23 + 4 >> 2] | 0, HEAP32[i23 + 8 >> 2] | 0) | 0) << 2 | 0)) break;
    HEAP8[i4 >> 0] = HEAP8[(HEAP32[i23 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0;
    i19 = HEAP32[i23 >> 2] | 0;
    i22 = HEAP32[i10 >> 2] | 0;
    HEAP8[i19 + i22 >> 0] = HEAP8[i19 + (i22 + 2) >> 0] | 0;
    HEAP8[(HEAP32[i23 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + 2) >> 0] = HEAP8[i4 >> 0] | 0;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 4;
   }
   HEAP32[i23 + 16 >> 2] = 7;
   break;
  }
  if ((HEAP32[i22 + 72 + 4 >> 2] | 0) != 4) if ((HEAP32[i22 + 72 + 4 >> 2] | 0) != 5) break;
  if ((HEAP32[i22 + 72 + 8 >> 2] | 0) >>> 0 > 0) {
   i1 = HEAP32[i22 + 16 >> 2] | 0;
   if ((HEAP32[i22 + 24 >> 2] | 0) >>> 0 > 1) HEAP32[i11 >> 2] = i1 << 1; else HEAP32[i11 >> 2] = i1;
   HEAP32[i19 >> 2] = HEAP32[i22 + 16 >> 2];
   _TraceLog(2, 58180, i19);
   i1 = _malloc(HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i23 >> 2] = i1;
   _fread(HEAP32[i23 >> 2] | 0, HEAP32[i11 >> 2] | 0, 1, HEAP32[i21 >> 2] | 0) | 0;
   i1 = HEAP32[i22 + 72 + 8 >> 2] | 0;
   if ((i1 | 0) < 861165636) {
    switch (i1 | 0) {
    case 827611204:
     break;
    default:
     break L5;
    }
    i1 = i23 + 16 | 0;
    if ((HEAP32[i22 + 72 + 4 >> 2] | 0) == 4) {
     HEAP32[i1 >> 2] = 11;
     break;
    } else {
     HEAP32[i1 >> 2] = 12;
     break;
    }
   }
   if ((i1 | 0) < 894720068) {
    switch (i1 | 0) {
    case 861165636:
     break;
    default:
     break L5;
    }
    HEAP32[i23 + 16 >> 2] = 13;
    break;
   } else {
    switch (i1 | 0) {
    case 894720068:
     break;
    default:
     break L5;
    }
    HEAP32[i23 + 16 >> 2] = 14;
    break;
   }
  }
 } while (0);
 if ((i24 | 0) == 7) {
  HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
  _TraceLog(4, 57970, i13);
 }
 _fclose(HEAP32[i21 >> 2] | 0) | 0;
 HEAP32[i20 >> 2] = HEAP32[i23 >> 2];
 HEAP32[i20 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
 HEAP32[i20 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
 HEAP32[i20 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
 HEAP32[i20 + 16 >> 2] = HEAP32[i23 + 16 >> 2];
 STACKTOP = i25;
 return;
}

function ___intscan(i13, i4, i6, i1, i2) {
 i13 = i13 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 L1 : do if (i4 >>> 0 > 36) {
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = 28;
  i2 = 0;
  i1 = 0;
 } else {
  i15 = i13 + 4 | 0;
  i14 = i13 + 104 | 0;
  do {
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
  } while ((_isspace(i3) | 0) != 0);
  L11 : do switch (i3 | 0) {
  case 43:
  case 45:
   {
    i5 = ((i3 | 0) == 45) << 31 >> 31;
    i3 = HEAP32[i15 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     i12 = i5;
     break L11;
    } else {
     i3 = ___shgetc(i13) | 0;
     i12 = i5;
     break L11;
    }
   }
  default:
   i12 = 0;
  } while (0);
  i5 = (i4 | 0) == 0;
  do if ((i4 | 16 | 0) == 16 & (i3 | 0) == 48) {
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
   if ((i3 | 32 | 0) != 120) if (i5) {
    i4 = 8;
    i10 = 47;
    break;
   } else {
    i10 = 32;
    break;
   }
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
   if ((HEAPU8[30561 + i3 >> 0] | 0) > 15) {
    i1 = (HEAP32[i14 >> 2] | 0) == 0;
    if (!i1) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    if (!i6) {
     ___shlim(i13, 0, 0);
     i2 = 0;
     i1 = 0;
     break L1;
    }
    if (i1) {
     i2 = 0;
     i1 = 0;
     break L1;
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    i2 = 0;
    i1 = 0;
    break L1;
   } else {
    i4 = 16;
    i10 = 47;
   }
  } else {
   i4 = i5 ? 10 : i4;
   if (i4 >>> 0 > (HEAPU8[30561 + i3 >> 0] | 0) >>> 0) i10 = 32; else {
    if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    ___shlim(i13, 0, 0);
    i2 = ___errno_location() | 0;
    HEAP32[i2 >> 2] = 28;
    i2 = 0;
    i1 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((i10 | 0) == 32) if ((i4 | 0) == 10) {
   i3 = i3 + -48 | 0;
   if (i3 >>> 0 < 10) {
    i6 = i3;
    i4 = 0;
    do {
     i4 = (i4 * 10 | 0) + i6 | 0;
     i3 = HEAP32[i15 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i3 + 1;
      i3 = HEAPU8[i3 >> 0] | 0;
     } else i3 = ___shgetc(i13) | 0;
     i6 = i3 + -48 | 0;
    } while (i6 >>> 0 < 10 & i4 >>> 0 < 429496729);
    if (i6 >>> 0 < 10) {
     i5 = 0;
     do {
      i7 = ___muldi3(i4 | 0, i5 | 0, 10, 0) | 0;
      i8 = getTempRet0() | 0;
      i9 = ((i6 | 0) < 0) << 31 >> 31;
      i11 = ~i9;
      if (i8 >>> 0 > i11 >>> 0 | (i8 | 0) == (i11 | 0) & i7 >>> 0 > ~i6 >>> 0) {
       i7 = i4;
       i4 = 10;
       i10 = 76;
       break L43;
      }
      i4 = _i64Add(i7 | 0, i8 | 0, i6 | 0, i9 | 0) | 0;
      i5 = getTempRet0() | 0;
      i3 = HEAP32[i15 >> 2] | 0;
      if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
       HEAP32[i15 >> 2] = i3 + 1;
       i3 = HEAPU8[i3 >> 0] | 0;
      } else i3 = ___shgetc(i13) | 0;
      i6 = i3 + -48 | 0;
     } while (i6 >>> 0 < 10 & (i5 >>> 0 < 429496729 | (i5 | 0) == 429496729 & i4 >>> 0 < 2576980378));
     if (i6 >>> 0 > 9) i3 = i12; else {
      i7 = i4;
      i4 = 10;
      i10 = 76;
     }
    } else {
     i5 = 0;
     i3 = i12;
    }
   } else {
    i5 = 0;
    i4 = 0;
    i3 = i12;
   }
  } else i10 = 47; while (0);
  L63 : do if ((i10 | 0) == 47) {
   if (!(i4 + -1 & i4)) {
    i11 = HEAP8[59323 + ((i4 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i5 = HEAP8[30561 + i3 >> 0] | 0;
    i6 = i5 & 255;
    if (i4 >>> 0 > i6 >>> 0) {
     i7 = 0;
     do {
      i7 = i6 | i7 << i11;
      i3 = HEAP32[i15 >> 2] | 0;
      if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
       HEAP32[i15 >> 2] = i3 + 1;
       i3 = HEAPU8[i3 >> 0] | 0;
      } else i3 = ___shgetc(i13) | 0;
      i5 = HEAP8[30561 + i3 >> 0] | 0;
      i6 = i5 & 255;
     } while (i7 >>> 0 < 134217728 & i4 >>> 0 > i6 >>> 0);
     i10 = 0;
    } else {
     i10 = 0;
     i7 = 0;
    }
    i8 = _bitshift64Lshr(-1, -1, i11 | 0) | 0;
    i9 = getTempRet0() | 0;
    if (i4 >>> 0 <= i6 >>> 0 | (i9 >>> 0 < i10 >>> 0 | (i9 | 0) == (i10 | 0) & i8 >>> 0 < i7 >>> 0)) {
     i5 = i10;
     i10 = 76;
     break;
    }
    i3 = i10;
    while (1) {
     i7 = _bitshift64Shl(i7 | 0, i3 | 0, i11 | 0) | 0;
     i6 = getTempRet0() | 0;
     i7 = i7 | i5 & 255;
     i3 = HEAP32[i15 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i3 + 1;
      i3 = HEAPU8[i3 >> 0] | 0;
     } else i3 = ___shgetc(i13) | 0;
     i5 = HEAP8[30561 + i3 >> 0] | 0;
     if (i4 >>> 0 <= (i5 & 255) >>> 0 | (i6 >>> 0 > i9 >>> 0 | (i6 | 0) == (i9 | 0) & i7 >>> 0 > i8 >>> 0)) {
      i5 = i6;
      i10 = 76;
      break L63;
     } else i3 = i6;
    }
   }
   i5 = HEAP8[30561 + i3 >> 0] | 0;
   i6 = i5 & 255;
   if (i4 >>> 0 > i6 >>> 0) {
    i7 = 0;
    do {
     i7 = i6 + (Math_imul(i7, i4) | 0) | 0;
     i3 = HEAP32[i15 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i3 + 1;
      i3 = HEAPU8[i3 >> 0] | 0;
     } else i3 = ___shgetc(i13) | 0;
     i5 = HEAP8[30561 + i3 >> 0] | 0;
     i6 = i5 & 255;
    } while (i7 >>> 0 < 119304647 & i4 >>> 0 > i6 >>> 0);
    i8 = 0;
   } else {
    i7 = 0;
    i8 = 0;
   }
   if (i4 >>> 0 > i6 >>> 0) {
    i10 = ___udivdi3(-1, -1, i4 | 0, 0) | 0;
    i11 = getTempRet0() | 0;
    i6 = i8;
    while (1) {
     if (i6 >>> 0 > i11 >>> 0 | (i6 | 0) == (i11 | 0) & i7 >>> 0 > i10 >>> 0) {
      i5 = i6;
      i10 = 76;
      break L63;
     }
     i8 = ___muldi3(i7 | 0, i6 | 0, i4 | 0, 0) | 0;
     i9 = getTempRet0() | 0;
     i5 = i5 & 255;
     if (i9 >>> 0 > 4294967295 | (i9 | 0) == -1 & i8 >>> 0 > ~i5 >>> 0) {
      i5 = i6;
      i10 = 76;
      break L63;
     }
     i7 = _i64Add(i8 | 0, i9 | 0, i5 | 0, 0) | 0;
     i6 = getTempRet0() | 0;
     i3 = HEAP32[i15 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i3 + 1;
      i3 = HEAPU8[i3 >> 0] | 0;
     } else i3 = ___shgetc(i13) | 0;
     i5 = HEAP8[30561 + i3 >> 0] | 0;
     if (i4 >>> 0 <= (i5 & 255) >>> 0) {
      i5 = i6;
      i10 = 76;
      break;
     }
    }
   } else {
    i5 = i8;
    i10 = 76;
   }
  } while (0);
  if ((i10 | 0) == 76) if (i4 >>> 0 > (HEAPU8[30561 + i3 >> 0] | 0) >>> 0) {
   do {
    i3 = HEAP32[i15 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
    } else i3 = ___shgetc(i13) | 0;
   } while (i4 >>> 0 > (HEAPU8[30561 + i3 >> 0] | 0) >>> 0);
   i5 = ___errno_location() | 0;
   HEAP32[i5 >> 2] = 68;
   i5 = i2;
   i4 = i1;
   i3 = (i1 & 1 | 0) == 0 & 0 == 0 ? i12 : 0;
  } else {
   i4 = i7;
   i3 = i12;
  }
  if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  if (!(i5 >>> 0 < i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 < i1 >>> 0)) {
   if (!((i1 & 1 | 0) != 0 | 0 != 0 | (i3 | 0) != 0)) {
    i15 = ___errno_location() | 0;
    HEAP32[i15 >> 2] = 68;
    i1 = _i64Add(i1 | 0, i2 | 0, -1, -1) | 0;
    i2 = getTempRet0() | 0;
    break;
   }
   if (i5 >>> 0 > i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 > i1 >>> 0) {
    i15 = ___errno_location() | 0;
    HEAP32[i15 >> 2] = 68;
    break;
   }
  }
  i1 = ((i3 | 0) < 0) << 31 >> 31;
  i1 = _i64Subtract(i4 ^ i3 | 0, i5 ^ i1 | 0, i3 | 0, i1 | 0) | 0;
  i2 = getTempRet0() | 0;
 } while (0);
 setTempRet0(i2 | 0);
 return i1 | 0;
}

function _rlglInit(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, d42 = 0.0;
 i27 = 0;
 i36 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 i34 = i36 + 152 | 0;
 i26 = i36 + 144 | 0;
 i25 = i36 + 136 | 0;
 i24 = i36 + 128 | 0;
 i23 = i36 + 120 | 0;
 i22 = i36 + 112 | 0;
 i21 = i36 + 104 | 0;
 i20 = i36 + 96 | 0;
 i19 = i36 + 88 | 0;
 i18 = i36 + 80 | 0;
 i17 = i36 + 72 | 0;
 i16 = i36 + 64 | 0;
 i15 = i36 + 56 | 0;
 i14 = i36 + 48 | 0;
 i13 = i36 + 40 | 0;
 i5 = i36 + 32 | 0;
 i38 = i36 + 24 | 0;
 i39 = i36 + 16 | 0;
 i40 = i36 + 8 | 0;
 i41 = i36;
 i35 = i36 + 464 | 0;
 i28 = i36 + 460 | 0;
 i10 = i36 + 456 | 0;
 i7 = i36 + 452 | 0;
 i37 = i36 + 448 | 0;
 i4 = i36 + 444 | 0;
 i8 = i36 + 440 | 0;
 i3 = i36 + 436 | 0;
 i9 = i36 + 432 | 0;
 i11 = i36 + 468 | 0;
 i12 = i36 + 424 | 0;
 i1 = i36 + 360 | 0;
 i29 = i36 + 356 | 0;
 i30 = i36 + 352 | 0;
 i31 = i36 + 288 | 0;
 i32 = i36 + 224 | 0;
 i33 = i36 + 160 | 0;
 HEAP32[i35 >> 2] = i6;
 HEAP32[i28 >> 2] = i2;
 i6 = _glGetString(7936) | 0;
 HEAP32[i41 >> 2] = i6;
 _TraceLog(3, 32180, i41);
 i6 = _glGetString(7937) | 0;
 HEAP32[i40 >> 2] = i6;
 _TraceLog(3, 32198, i40);
 i6 = _glGetString(7938) | 0;
 HEAP32[i39 >> 2] = i6;
 _TraceLog(3, 32216, i39);
 i6 = _glGetString(35724) | 0;
 HEAP32[i38 >> 2] = i6;
 _TraceLog(3, 32234, i38);
 HEAP32[i10 >> 2] = 0;
 i6 = _malloc(2048) | 0;
 HEAP32[i7 >> 2] = i6;
 i6 = _glGetString(7939) | 0;
 HEAP32[i37 >> 2] = i6;
 i6 = (_strlen(HEAP32[i37 >> 2] | 0) | 0) + 1 | 0;
 HEAP32[i4 >> 2] = i6;
 i6 = _calloc(HEAP32[i4 >> 2] | 0, 1) | 0;
 HEAP32[i8 >> 2] = i6;
 _strcpy(HEAP32[i8 >> 2] | 0, HEAP32[i37 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] = HEAP32[i8 >> 2];
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
  if ((HEAP8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] | 0) == 32) {
   HEAP8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] = 0;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] = (HEAP32[i8 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) + 1);
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 HEAP32[i5 >> 2] = HEAP32[i10 >> 2];
 _TraceLog(3, 32252, i5);
 HEAP32[i9 >> 2] = 0;
 while (1) {
  i2 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
  if (!(_strcmp(HEAP32[i2 + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32287) | 0)) {
   i41 = _eglGetProcAddress(62246) | 0;
   HEAP32[44013] = i41;
   i41 = _eglGetProcAddress(62201) | 0;
   HEAP32[43934] = i41;
   i41 = _eglGetProcAddress(62222) | 0;
   HEAP32[44012] = i41;
   if ((HEAP32[44013] | 0) != 0 & (HEAP32[43934] | 0) != 0 & (HEAP32[44012] | 0) != 0) HEAP8[177201] = 1;
  }
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32314) | 0)) HEAP8[177203] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32334) | 0)) HEAP8[177204] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32406) | 0)) i27 = 18; else if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32438) | 0)) i27 = 18; else if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32471) | 0)) i27 = 18;
  if ((i27 | 0) == 18) {
   i27 = 0;
   HEAP8[177205] = 1;
  }
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32511) | 0)) i27 = 21; else if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32547) | 0)) i27 = 21;
  if ((i27 | 0) == 21) {
   i27 = 0;
   HEAP8[177206] = 1;
  }
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32580) | 0)) HEAP8[177207] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32605) | 0)) HEAP8[177208] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32638) | 0)) HEAP8[177209] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32674) | 0)) {
   HEAP8[177210] = 1;
   _glGetFloatv(34047, 176044);
  }
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32708) | 0)) HEAP8[177202] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 32736) | 0)) HEAP8[177211] = 1;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 _free(i2);
 _free(HEAP32[i8 >> 2] | 0);
 if (HEAP8[177201] & 1) _TraceLog(3, 32756, i13); else _TraceLog(4, 32831, i14);
 if (HEAP8[177203] & 1) _TraceLog(3, 32892, i15); else _TraceLog(4, 32967, i16);
 if (HEAP8[177205] & 1) _TraceLog(3, 33059, i17);
 if (HEAP8[177206] & 1) _TraceLog(3, 33105, i18);
 if (HEAP8[177207] & 1) _TraceLog(3, 33152, i19);
 if (HEAP8[177208] & 1) _TraceLog(3, 33203, i20);
 if (HEAP8[177209] & 1) _TraceLog(3, 33250, i21);
 if (HEAP8[177210] & 1) {
  d42 = +Math_fround(HEAPF32[44011]);
  HEAPF64[i22 >> 3] = d42;
  _TraceLog(3, 33297, i22);
 }
 if (HEAP8[177202] & 1) _TraceLog(3, 33363, i23);
 if (HEAP8[177211] & 1) _TraceLog(3, 33416, i24);
 HEAP8[i11 >> 0] = HEAP8[33451] | 0;
 HEAP8[i11 + 1 >> 0] = HEAP8[33452] | 0;
 HEAP8[i11 + 2 >> 0] = HEAP8[33453] | 0;
 HEAP8[i11 + 3 >> 0] = HEAP8[33454] | 0;
 i41 = _rlLoadTexture(i11, 1, 1, 7, 1) | 0;
 HEAP32[43931] = i41;
 if (HEAP32[43931] | 0) {
  HEAP32[i25 >> 2] = HEAP32[43931];
  _TraceLog(3, 33455, i25);
 } else _TraceLog(4, 33506, i26);
 _LoadShaderDefault(i12);
 HEAP32[44014] = HEAP32[i12 >> 2];
 HEAP32[44015] = HEAP32[i12 + 4 >> 2];
 HEAP32[43932] = HEAP32[44014];
 HEAP32[43933] = HEAP32[44015];
 _LoadBuffersDefault();
 _MatrixIdentity(i1);
 i3 = 175648;
 i2 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 i41 = _malloc(4096) | 0;
 HEAP32[43928] = i41;
 HEAP32[i29 >> 2] = 0;
 while (1) {
  if ((HEAP32[i29 >> 2] | 0) >= 256) break;
  HEAP32[(HEAP32[43928] | 0) + (HEAP32[i29 >> 2] << 4) >> 2] = 7;
  HEAP32[(HEAP32[43928] | 0) + (HEAP32[i29 >> 2] << 4) + 4 >> 2] = 0;
  HEAP32[(HEAP32[43928] | 0) + (HEAP32[i29 >> 2] << 4) + 8 >> 2] = 0;
  HEAP32[(HEAP32[43928] | 0) + (HEAP32[i29 >> 2] << 4) + 12 >> 2] = HEAP32[43931];
  HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
 }
 HEAP32[43929] = 1;
 HEAP32[i30 >> 2] = 0;
 while (1) {
  if ((HEAP32[i30 >> 2] | 0) >= 32) break;
  i3 = 163280 + (HEAP32[i30 >> 2] << 6) | 0;
  _MatrixIdentity(i31);
  i1 = i31;
  i2 = i3 + 64 | 0;
  do {
   HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
   i3 = i3 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i3 | 0) < (i2 | 0));
  HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
 }
 _MatrixIdentity(i32);
 i3 = 175512;
 i1 = i32;
 i2 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 _MatrixIdentity(i33);
 i3 = 175580;
 i1 = i33;
 i2 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 HEAP32[43894] = 175580;
 _glDepthFunc(515);
 _glDisable(2929);
 _glBlendFunc(770, 771);
 _glEnable(3042);
 _glCullFace(1029);
 _glFrontFace(2305);
 _glEnable(2884);
 _glClearColor(0.0, 0.0, 0.0, 1.0);
 _glClearDepthf(1.0);
 _glClear(16640);
 HEAP32[43935] = HEAP32[i35 >> 2];
 HEAP32[43936] = HEAP32[i28 >> 2];
 _TraceLog(3, 33545, i34);
 STACKTOP = i36;
 return;
}

function _DrawCircleSector(i3, f7, i11, i5, i9, i4) {
 i3 = i3 | 0;
 f7 = Math_fround(f7);
 i11 = i11 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, f18 = f0, f19 = f0;
 i17 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i8 = i1 + 52 | 0;
 i12 = i1 + 48 | 0;
 i6 = i1 + 44 | 0;
 i10 = i1 + 40 | 0;
 i15 = i1 + 36 | 0;
 i14 = i1 + 32 | 0;
 i13 = i1 + 28 | 0;
 i2 = i1 + 24 | 0;
 i16 = i1 + 4 | 0;
 HEAPF32[i8 >> 2] = f7;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i10 >> 2] = i9;
 if (Math_fround(HEAPF32[i8 >> 2]) <= Math_fround(0.0)) HEAPF32[i8 >> 2] = Math_fround(.100000001);
 if ((HEAP32[i6 >> 2] | 0) < (HEAP32[i12 >> 2] | 0)) {
  HEAP32[i15 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i6 >> 2] = HEAP32[i15 >> 2];
 }
 if ((HEAP32[i10 >> 2] | 0) < 4) {
  f7 = Math_fround(_acosf(Math_fround(Math_fround(Math_fround(+Math_pow(+Math_fround(Math_fround(1.0) - Math_fround(Math_fround(.5) / Math_fround(HEAPF32[i8 >> 2]))), 2.0)) * Math_fround(2.0)) - Math_fround(1.0))));
  HEAPF32[i14 >> 2] = f7;
  f7 = Math_fround((HEAP32[i6 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0);
  i15 = ~~Math_fround(Math_fround(f7 * Math_fround(Math_ceil(Math_fround(Math_fround(6.28318548) / Math_fround(HEAPF32[i14 >> 2]))))) / Math_fround(360.0));
  HEAP32[i10 >> 2] = i15;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) <= 0 ? 4 : i15;
 }
 f7 = Math_fround((HEAP32[i6 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0);
 f7 = Math_fround(f7 / Math_fround(HEAP32[i10 >> 2] | 0));
 HEAPF32[i13 >> 2] = f7;
 f7 = Math_fround(HEAP32[i12 >> 2] | 0);
 HEAPF32[i2 >> 2] = f7;
 if (_rlCheckBufferLimit((HEAP32[i10 >> 2] << 2 | 0) / 2 | 0) | 0) _rlglDraw();
 _GetShapesTexture(i16);
 _rlEnableTexture(HEAP32[i16 >> 2] | 0);
 _rlBegin(7);
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= ((HEAP32[i10 >> 2] | 0) / 2 | 0 | 0)) break;
  _rlColor4ub(HEAP8[i4 >> 0] | 0, HEAP8[i4 + 1 >> 0] | 0, HEAP8[i4 + 2 >> 0] | 0, HEAP8[i4 + 3 >> 0] | 0);
  f18 = Math_fround(HEAPF32[44133]);
  f18 = Math_fround(f18 / Math_fround(HEAP32[44138] | 0));
  f19 = Math_fround(HEAPF32[44134]);
  _rlTexCoord2f(f18, Math_fround(f19 / Math_fround(HEAP32[44139] | 0)));
  f19 = Math_fround(HEAPF32[i3 >> 2]);
  _rlVertex2f(f19, Math_fround(HEAPF32[i3 + 4 >> 2]));
  f19 = Math_fround(HEAPF32[44133]);
  f19 = Math_fround(f19 / Math_fround(HEAP32[44138] | 0));
  f18 = Math_fround(HEAPF32[44134]);
  f18 = Math_fround(f18 + Math_fround(HEAPF32[44136]));
  _rlTexCoord2f(f19, Math_fround(f18 / Math_fround(HEAP32[44139] | 0)));
  f18 = Math_fround(HEAPF32[i3 >> 2]);
  f19 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(HEAPF32[i2 >> 2]) * Math_fround(.0174532924))));
  f19 = Math_fround(f18 + Math_fround(f19 * Math_fround(HEAPF32[i8 >> 2])));
  f18 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f7 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround(HEAPF32[i2 >> 2]) * Math_fround(.0174532924))));
  _rlVertex2f(f19, Math_fround(f18 + Math_fround(f7 * Math_fround(HEAPF32[i8 >> 2]))));
  f7 = Math_fround(HEAPF32[44133]);
  f7 = Math_fround(f7 + Math_fround(HEAPF32[44135]));
  f7 = Math_fround(f7 / Math_fround(HEAP32[44138] | 0));
  f18 = Math_fround(HEAPF32[44134]);
  f18 = Math_fround(f18 + Math_fround(HEAPF32[44136]));
  _rlTexCoord2f(f7, Math_fround(f18 / Math_fround(HEAP32[44139] | 0)));
  f18 = Math_fround(HEAPF32[i3 >> 2]);
  f7 = Math_fround(HEAPF32[i2 >> 2]);
  f7 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(f7 + Math_fround(HEAPF32[i13 >> 2])) * Math_fround(.0174532924))));
  f7 = Math_fround(f18 + Math_fround(f7 * Math_fround(HEAPF32[i8 >> 2])));
  f18 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f19 = Math_fround(HEAPF32[i2 >> 2]);
  f19 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround(f19 + Math_fround(HEAPF32[i13 >> 2])) * Math_fround(.0174532924))));
  _rlVertex2f(f7, Math_fround(f18 + Math_fround(f19 * Math_fround(HEAPF32[i8 >> 2]))));
  f19 = Math_fround(HEAPF32[44133]);
  f19 = Math_fround(f19 + Math_fround(HEAPF32[44135]));
  f19 = Math_fround(f19 / Math_fround(HEAP32[44138] | 0));
  f18 = Math_fround(HEAPF32[44134]);
  _rlTexCoord2f(f19, Math_fround(f18 / Math_fround(HEAP32[44139] | 0)));
  f18 = Math_fround(HEAPF32[i3 >> 2]);
  f19 = Math_fround(HEAPF32[i2 >> 2]);
  f19 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(f19 + Math_fround(Math_fround(HEAPF32[i13 >> 2]) * Math_fround(2.0))) * Math_fround(.0174532924))));
  f19 = Math_fround(f18 + Math_fround(f19 * Math_fround(HEAPF32[i8 >> 2])));
  f18 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f7 = Math_fround(HEAPF32[i2 >> 2]);
  f7 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround(f7 + Math_fround(Math_fround(HEAPF32[i13 >> 2]) * Math_fround(2.0))) * Math_fround(.0174532924))));
  _rlVertex2f(f19, Math_fround(f18 + Math_fround(f7 * Math_fround(HEAPF32[i8 >> 2]))));
  f7 = Math_fround(Math_fround(HEAPF32[i13 >> 2]) * Math_fround(2.0));
  f7 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) + f7);
  HEAPF32[i2 >> 2] = f7;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 if (!((HEAP32[i10 >> 2] | 0) % 2 | 0)) {
  _rlEnd();
  _rlDisableTexture();
  STACKTOP = i17;
  return;
 }
 _rlColor4ub(HEAP8[i4 >> 0] | 0, HEAP8[i4 + 1 >> 0] | 0, HEAP8[i4 + 2 >> 0] | 0, HEAP8[i4 + 3 >> 0] | 0);
 f19 = Math_fround(HEAPF32[44133]);
 f19 = Math_fround(f19 / Math_fround(HEAP32[44138] | 0));
 f18 = Math_fround(HEAPF32[44134]);
 _rlTexCoord2f(f19, Math_fround(f18 / Math_fround(HEAP32[44139] | 0)));
 f18 = Math_fround(HEAPF32[i3 >> 2]);
 _rlVertex2f(f18, Math_fround(HEAPF32[i3 + 4 >> 2]));
 f18 = Math_fround(HEAPF32[44133]);
 f18 = Math_fround(f18 / Math_fround(HEAP32[44138] | 0));
 f19 = Math_fround(HEAPF32[44134]);
 f19 = Math_fround(f19 + Math_fround(HEAPF32[44136]));
 _rlTexCoord2f(f18, Math_fround(f19 / Math_fround(HEAP32[44139] | 0)));
 f19 = Math_fround(HEAPF32[i3 >> 2]);
 f18 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(HEAPF32[i2 >> 2]) * Math_fround(.0174532924))));
 f18 = Math_fround(f19 + Math_fround(f18 * Math_fround(HEAPF32[i8 >> 2])));
 f19 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f7 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround(HEAPF32[i2 >> 2]) * Math_fround(.0174532924))));
 _rlVertex2f(f18, Math_fround(f19 + Math_fround(f7 * Math_fround(HEAPF32[i8 >> 2]))));
 f7 = Math_fround(HEAPF32[44133]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[44135]));
 f7 = Math_fround(f7 / Math_fround(HEAP32[44138] | 0));
 f19 = Math_fround(HEAPF32[44134]);
 f19 = Math_fround(f19 + Math_fround(HEAPF32[44136]));
 _rlTexCoord2f(f7, Math_fround(f19 / Math_fround(HEAP32[44139] | 0)));
 f19 = Math_fround(HEAPF32[i3 >> 2]);
 f7 = Math_fround(HEAPF32[i2 >> 2]);
 f7 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(f7 + Math_fround(HEAPF32[i13 >> 2])) * Math_fround(.0174532924))));
 f7 = Math_fround(f19 + Math_fround(f7 * Math_fround(HEAPF32[i8 >> 2])));
 f19 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f18 = Math_fround(HEAPF32[i2 >> 2]);
 f18 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround(f18 + Math_fround(HEAPF32[i13 >> 2])) * Math_fround(.0174532924))));
 _rlVertex2f(f7, Math_fround(f19 + Math_fround(f18 * Math_fround(HEAPF32[i8 >> 2]))));
 f18 = Math_fround(HEAPF32[44133]);
 f18 = Math_fround(f18 + Math_fround(HEAPF32[44135]));
 f18 = Math_fround(f18 / Math_fround(HEAP32[44138] | 0));
 f19 = Math_fround(HEAPF32[44134]);
 _rlTexCoord2f(f18, Math_fround(f19 / Math_fround(HEAP32[44139] | 0)));
 f19 = Math_fround(HEAPF32[i3 >> 2]);
 _rlVertex2f(f19, Math_fround(HEAPF32[i3 + 4 >> 2]));
 _rlEnd();
 _rlDisableTexture();
 STACKTOP = i17;
 return;
}

function _stbv_imdct_step3_inner_s_loop(i21, i12, i15, i20, i2, i11, i16) {
 i21 = i21 | 0;
 i12 = i12 | 0;
 i15 = i15 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 i16 = i16 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0, i28 = 0, i29 = 0, f30 = f0;
 i22 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i23 = i1 + 76 | 0;
 i26 = i1 + 72 | 0;
 i25 = i1 + 68 | 0;
 i24 = i1 + 64 | 0;
 i29 = i1 + 60 | 0;
 i28 = i1 + 56 | 0;
 i17 = i1 + 52 | 0;
 i14 = i1 + 48 | 0;
 i3 = i1 + 44 | 0;
 i4 = i1 + 40 | 0;
 i5 = i1 + 36 | 0;
 i6 = i1 + 32 | 0;
 i7 = i1 + 28 | 0;
 i8 = i1 + 24 | 0;
 i9 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i18 = i1 + 12 | 0;
 i19 = i1 + 8 | 0;
 i13 = i1 + 4 | 0;
 HEAP32[i23 >> 2] = i21;
 HEAP32[i26 >> 2] = i12;
 HEAP32[i25 >> 2] = i15;
 HEAP32[i24 >> 2] = i20;
 HEAP32[i29 >> 2] = i2;
 HEAP32[i28 >> 2] = i11;
 HEAP32[i17 >> 2] = i16;
 f27 = Math_fround(HEAPF32[HEAP32[i29 >> 2] >> 2]);
 HEAPF32[i3 >> 2] = f27;
 f27 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + 4 >> 2]);
 HEAPF32[i4 >> 2] = f27;
 f27 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (0 + (HEAP32[i28 >> 2] | 0) << 2) >> 2]);
 HEAPF32[i5 >> 2] = f27;
 f27 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (0 + (HEAP32[i28 >> 2] | 0) + 1 << 2) >> 2]);
 HEAPF32[i6 >> 2] = f27;
 f27 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (0 + (HEAP32[i28 >> 2] << 1) + 0 << 2) >> 2]);
 HEAPF32[i7 >> 2] = f27;
 f27 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (0 + (HEAP32[i28 >> 2] << 1) + 1 << 2) >> 2]);
 HEAPF32[i8 >> 2] = f27;
 f27 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (0 + ((HEAP32[i28 >> 2] | 0) * 3 | 0) + 0 << 2) >> 2]);
 HEAPF32[i9 >> 2] = f27;
 f27 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (0 + ((HEAP32[i28 >> 2] | 0) * 3 | 0) + 1 << 2) >> 2]);
 HEAPF32[i10 >> 2] = f27;
 HEAP32[i13 >> 2] = (HEAP32[i26 >> 2] | 0) + (HEAP32[i25 >> 2] << 2);
 HEAP32[i1 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i24 >> 2] << 2);
 HEAP32[i14 >> 2] = HEAP32[i23 >> 2];
 while (1) {
  if ((HEAP32[i14 >> 2] | 0) <= 0) break;
  f27 = Math_fround(HEAPF32[HEAP32[i13 >> 2] >> 2]);
  f27 = Math_fround(f27 - Math_fround(HEAPF32[HEAP32[i1 >> 2] >> 2]));
  HEAPF32[i18 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -4 >> 2]);
  f27 = Math_fround(f27 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -4 >> 2]));
  HEAPF32[i19 >> 2] = f27;
  f27 = Math_fround(HEAPF32[HEAP32[i13 >> 2] >> 2]);
  f27 = Math_fround(f27 + Math_fround(HEAPF32[HEAP32[i1 >> 2] >> 2]));
  HEAPF32[HEAP32[i13 >> 2] >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -4 >> 2]);
  f27 = Math_fround(f27 + Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -4 >> 2]));
  HEAPF32[(HEAP32[i13 >> 2] | 0) + -4 >> 2] = f27;
  f27 = Math_fround(HEAPF32[i18 >> 2]);
  f27 = Math_fround(f27 * Math_fround(HEAPF32[i3 >> 2]));
  f30 = Math_fround(HEAPF32[i19 >> 2]);
  f30 = Math_fround(f27 - Math_fround(f30 * Math_fround(HEAPF32[i4 >> 2])));
  HEAPF32[HEAP32[i1 >> 2] >> 2] = f30;
  f30 = Math_fround(HEAPF32[i19 >> 2]);
  f30 = Math_fround(f30 * Math_fround(HEAPF32[i3 >> 2]));
  f27 = Math_fround(HEAPF32[i18 >> 2]);
  f27 = Math_fround(f30 + Math_fround(f27 * Math_fround(HEAPF32[i4 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -4 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -8 >> 2]);
  f27 = Math_fround(f27 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -8 >> 2]));
  HEAPF32[i18 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -12 >> 2]);
  f27 = Math_fround(f27 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -12 >> 2]));
  HEAPF32[i19 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -8 >> 2]);
  f27 = Math_fround(f27 + Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -8 >> 2]));
  HEAPF32[(HEAP32[i13 >> 2] | 0) + -8 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -12 >> 2]);
  f27 = Math_fround(f27 + Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -12 >> 2]));
  HEAPF32[(HEAP32[i13 >> 2] | 0) + -12 >> 2] = f27;
  f27 = Math_fround(HEAPF32[i18 >> 2]);
  f27 = Math_fround(f27 * Math_fround(HEAPF32[i5 >> 2]));
  f30 = Math_fround(HEAPF32[i19 >> 2]);
  f30 = Math_fround(f27 - Math_fround(f30 * Math_fround(HEAPF32[i6 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -8 >> 2] = f30;
  f30 = Math_fround(HEAPF32[i19 >> 2]);
  f30 = Math_fround(f30 * Math_fround(HEAPF32[i5 >> 2]));
  f27 = Math_fround(HEAPF32[i18 >> 2]);
  f27 = Math_fround(f30 + Math_fround(f27 * Math_fround(HEAPF32[i6 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -16 >> 2]);
  f27 = Math_fround(f27 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -16 >> 2]));
  HEAPF32[i18 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -20 >> 2]);
  f27 = Math_fround(f27 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -20 >> 2]));
  HEAPF32[i19 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -16 >> 2]);
  f27 = Math_fround(f27 + Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -16 >> 2]));
  HEAPF32[(HEAP32[i13 >> 2] | 0) + -16 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -20 >> 2]);
  f27 = Math_fround(f27 + Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -20 >> 2]));
  HEAPF32[(HEAP32[i13 >> 2] | 0) + -20 >> 2] = f27;
  f27 = Math_fround(HEAPF32[i18 >> 2]);
  f27 = Math_fround(f27 * Math_fround(HEAPF32[i7 >> 2]));
  f30 = Math_fround(HEAPF32[i19 >> 2]);
  f30 = Math_fround(f27 - Math_fround(f30 * Math_fround(HEAPF32[i8 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -16 >> 2] = f30;
  f30 = Math_fround(HEAPF32[i19 >> 2]);
  f30 = Math_fround(f30 * Math_fround(HEAPF32[i7 >> 2]));
  f27 = Math_fround(HEAPF32[i18 >> 2]);
  f27 = Math_fround(f30 + Math_fround(f27 * Math_fround(HEAPF32[i8 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -20 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -24 >> 2]);
  f27 = Math_fround(f27 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -24 >> 2]));
  HEAPF32[i18 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -28 >> 2]);
  f27 = Math_fround(f27 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -28 >> 2]));
  HEAPF32[i19 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -24 >> 2]);
  f27 = Math_fround(f27 + Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -24 >> 2]));
  HEAPF32[(HEAP32[i13 >> 2] | 0) + -24 >> 2] = f27;
  f27 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + -28 >> 2]);
  f27 = Math_fround(f27 + Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -28 >> 2]));
  HEAPF32[(HEAP32[i13 >> 2] | 0) + -28 >> 2] = f27;
  f27 = Math_fround(HEAPF32[i18 >> 2]);
  f27 = Math_fround(f27 * Math_fround(HEAPF32[i9 >> 2]));
  f30 = Math_fround(HEAPF32[i19 >> 2]);
  f30 = Math_fround(f27 - Math_fround(f30 * Math_fround(HEAPF32[i10 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -24 >> 2] = f30;
  f30 = Math_fround(HEAPF32[i19 >> 2]);
  f30 = Math_fround(f30 * Math_fround(HEAPF32[i9 >> 2]));
  f27 = Math_fround(HEAPF32[i18 >> 2]);
  f27 = Math_fround(f30 + Math_fround(f27 * Math_fround(HEAPF32[i10 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -28 >> 2] = f27;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (0 - (HEAP32[i17 >> 2] | 0) << 2);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + (0 - (HEAP32[i17 >> 2] | 0) << 2);
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
 }
 STACKTOP = i22;
 return;
}

function _ma_convert_frames_ex(i13, i9, i7, i15, i5, i11, i8, i6, i14, i4, i2, i3) {
 i13 = i13 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i15 = i15 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i14 = i14 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i10 = 0, i12 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i36 = 0;
 i37 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 46800 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(46800);
 i26 = i1 + 46788 | 0;
 i20 = i1 + 46784 | 0;
 i32 = i1 + 46608 | 0;
 i31 = i1 + 46780 | 0;
 i28 = i1 + 46776 | 0;
 i22 = i1 + 46772 | 0;
 i34 = i1 + 46768 | 0;
 i19 = i1 + 46764 | 0;
 i12 = i1 + 46760 | 0;
 i27 = i1 + 46756 | 0;
 i21 = i1 + 46752 | 0;
 i33 = i1 + 46748 | 0;
 i18 = i1 + 46744 | 0;
 i10 = i1 + 46600 | 0;
 i29 = i1 + 46592 | 0;
 i25 = i1 + 46552 | 0;
 i24 = i1 + 46620 | 0;
 i23 = i1;
 i35 = i1 + 46544 | 0;
 i17 = i1 + 46616 | 0;
 i30 = i1 + 46536 | 0;
 i16 = i1 + 46528 | 0;
 HEAP32[i31 >> 2] = i13;
 HEAP32[i28 >> 2] = i9;
 HEAP32[i22 >> 2] = i7;
 HEAP32[i34 >> 2] = i15;
 HEAP32[i19 >> 2] = i5;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i27 >> 2] = i8;
 HEAP32[i21 >> 2] = i6;
 HEAP32[i33 >> 2] = i14;
 HEAP32[i18 >> 2] = i4;
 i15 = i10;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i15 + 4 >> 2] = i3;
 i15 = i10;
 if ((HEAP32[i15 >> 2] | 0) == 0 & (HEAP32[i15 + 4 >> 2] | 0) == 0) {
  i35 = i32;
  HEAP32[i35 >> 2] = 0;
  HEAP32[i35 + 4 >> 2] = 0;
  i35 = i32;
  i36 = i35;
  i36 = HEAP32[i36 >> 2] | 0;
  i35 = i35 + 4 | 0;
  i35 = HEAP32[i35 >> 2] | 0;
  setTempRet0(i35 | 0);
  STACKTOP = i37;
  return i36 | 0;
 }
 i13 = i10;
 i13 = _ma_calculate_frame_count_after_src(HEAP32[i34 >> 2] | 0, HEAP32[i33 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0) | 0;
 i14 = getTempRet0() | 0;
 i15 = i29;
 HEAP32[i15 >> 2] = i13;
 HEAP32[i15 + 4 >> 2] = i14;
 if (!(HEAP32[i31 >> 2] | 0)) {
  i34 = i29;
  i36 = HEAP32[i34 + 4 >> 2] | 0;
  i35 = i32;
  HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
  HEAP32[i35 + 4 >> 2] = i36;
  i35 = i32;
  i36 = i35;
  i36 = HEAP32[i36 >> 2] | 0;
  i35 = i35 + 4 | 0;
  i35 = HEAP32[i35 >> 2] | 0;
  setTempRet0(i35 | 0);
  STACKTOP = i37;
  return i36 | 0;
 }
 HEAP32[i25 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i25 + 4 >> 2] = HEAP32[i27 >> 2];
 HEAP32[i25 + 8 >> 2] = HEAP32[i21 >> 2];
 i15 = i10;
 i2 = HEAP32[i15 + 4 >> 2] | 0;
 i1 = i25 + 16 | 0;
 HEAP32[i1 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i1 + 4 >> 2] = i2;
 i1 = i25 + 24 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i25 + 32 >> 2] = 0;
 i1 = i24;
 i2 = i1 + 124 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i24 >> 2] = HEAP32[i27 >> 2];
 HEAP32[i24 + 4 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i24 + 8 >> 2] = HEAP32[i33 >> 2];
 if (HEAP32[i18 >> 2] | 0) _ma_channel_map_copy(i24 + 12 | 0, HEAP32[i18 >> 2] | 0, HEAP32[i21 >> 2] | 0); else _ma_get_standard_channel_map(0, HEAP32[i24 + 4 >> 2] | 0, i24 + 12 | 0);
 HEAP32[i24 + 44 >> 2] = HEAP32[i28 >> 2];
 HEAP32[i24 + 48 >> 2] = HEAP32[i22 >> 2];
 HEAP32[i24 + 52 >> 2] = HEAP32[i34 >> 2];
 if (HEAP32[i19 >> 2] | 0) _ma_channel_map_copy(i24 + 56 | 0, HEAP32[i19 >> 2] | 0, HEAP32[i22 >> 2] | 0); else _ma_get_standard_channel_map(0, HEAP32[i24 + 48 >> 2] | 0, i24 + 56 | 0);
 HEAP32[i24 + 108 >> 2] = 13;
 HEAP32[i24 + 112 >> 2] = i25;
 if (_ma_pcm_converter_init(i24, i23) | 0) {
  i35 = i32;
  HEAP32[i35 >> 2] = 0;
  HEAP32[i35 + 4 >> 2] = 0;
  i35 = i32;
  i36 = i35;
  i36 = HEAP32[i36 >> 2] | 0;
  i35 = i35 + 4 | 0;
  i35 = HEAP32[i35 >> 2] | 0;
  setTempRet0(i35 | 0);
  STACKTOP = i37;
  return i36 | 0;
 }
 i34 = i29;
 i34 = _ma_pcm_converter_read(i23, HEAP32[i31 >> 2] | 0, HEAP32[i34 >> 2] | 0, HEAP32[i34 + 4 >> 2] | 0) | 0;
 i24 = getTempRet0() | 0;
 i33 = i35;
 HEAP32[i33 >> 2] = i34;
 HEAP32[i33 + 4 >> 2] = i24;
 i33 = i35;
 i24 = HEAP32[i33 + 4 >> 2] | 0;
 i34 = i29;
 i27 = HEAP32[i34 + 4 >> 2] | 0;
 if (i24 >>> 0 < i27 >>> 0 | ((i24 | 0) == (i27 | 0) ? (HEAP32[i33 >> 2] | 0) >>> 0 < (HEAP32[i34 >> 2] | 0) >>> 0 : 0)) {
  i34 = HEAP32[i22 >> 2] | 0;
  HEAP32[i26 >> 2] = HEAP32[i28 >> 2];
  HEAP32[i20 >> 2] = i34;
  i34 = _ma_get_bytes_per_sample(HEAP32[i26 >> 2] | 0) | 0;
  i34 = Math_imul(i34, HEAP32[i20 >> 2] | 0) | 0;
  HEAP32[i17 >> 2] = i34;
  HEAP32[i25 + 32 >> 2] = 1;
  i34 = i25 + 16 | 0;
  HEAP32[i34 >> 2] = -1;
  HEAP32[i34 + 4 >> 2] = -1;
  HEAP32[i25 >> 2] = 0;
  do {
   i33 = i35;
   i27 = HEAP32[i33 + 4 >> 2] | 0;
   i34 = i29;
   i28 = HEAP32[i34 + 4 >> 2] | 0;
   if (!(i27 >>> 0 < i28 >>> 0 | ((i27 | 0) == (i28 | 0) ? (HEAP32[i33 >> 2] | 0) >>> 0 < (HEAP32[i34 >> 2] | 0) >>> 0 : 0))) break;
   i33 = i29;
   i28 = i35;
   i28 = _i64Subtract(HEAP32[i33 >> 2] | 0, HEAP32[i33 + 4 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i28 + 4 >> 2] | 0) | 0;
   i33 = getTempRet0() | 0;
   i34 = i30;
   HEAP32[i34 >> 2] = i28;
   HEAP32[i34 + 4 >> 2] = i33;
   i34 = i30;
   i33 = HEAP32[i34 + 4 >> 2] | 0;
   if (!(i33 >>> 0 > 0 | (i33 | 0) == 0 & (HEAP32[i34 >> 2] | 0) >>> 0 > 0)) {
    i36 = 17;
    break;
   }
   i34 = HEAP32[i31 >> 2] | 0;
   i27 = i35;
   i27 = ___muldi3(HEAP32[i27 >> 2] | 0, HEAP32[i27 + 4 >> 2] | 0, HEAP32[i17 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   i33 = i30;
   i33 = _ma_pcm_converter_read(i23, i34 + i27 | 0, HEAP32[i33 >> 2] | 0, HEAP32[i33 + 4 >> 2] | 0) | 0;
   i27 = getTempRet0() | 0;
   i34 = i16;
   HEAP32[i34 >> 2] = i33;
   HEAP32[i34 + 4 >> 2] = i27;
   i34 = i16;
   i27 = i35;
   i34 = _i64Add(HEAP32[i27 >> 2] | 0, HEAP32[i27 + 4 >> 2] | 0, HEAP32[i34 >> 2] | 0, HEAP32[i34 + 4 >> 2] | 0) | 0;
   i27 = getTempRet0() | 0;
   i33 = i35;
   HEAP32[i33 >> 2] = i34;
   HEAP32[i33 + 4 >> 2] = i27;
   i33 = i16;
   i27 = HEAP32[i33 + 4 >> 2] | 0;
   i34 = i30;
   i28 = HEAP32[i34 + 4 >> 2] | 0;
  } while (!(i27 >>> 0 < i28 >>> 0 | ((i27 | 0) == (i28 | 0) ? (HEAP32[i33 >> 2] | 0) >>> 0 < (HEAP32[i34 >> 2] | 0) >>> 0 : 0)));
  if ((i36 | 0) == 17) ___assert_fail(46969, 36381, 32678, 46986);
  i34 = i35;
  i30 = HEAP32[i34 + 4 >> 2] | 0;
  i36 = i29;
  i33 = HEAP32[i36 + 4 >> 2] | 0;
  if (i30 >>> 0 < i33 >>> 0 | ((i30 | 0) == (i33 | 0) ? (HEAP32[i34 >> 2] | 0) >>> 0 < (HEAP32[i36 >> 2] | 0) >>> 0 : 0)) {
   i36 = HEAP32[i31 >> 2] | 0;
   i34 = i35;
   i34 = ___muldi3(HEAP32[i34 >> 2] | 0, HEAP32[i34 + 4 >> 2] | 0, HEAP32[i17 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   i33 = i29;
   i31 = i35;
   i31 = _i64Subtract(HEAP32[i33 >> 2] | 0, HEAP32[i33 + 4 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i31 + 4 >> 2] | 0) | 0;
   i33 = getTempRet0() | 0;
   i33 = ___muldi3(i31 | 0, i33 | 0, HEAP32[i17 >> 2] | 0, 0) | 0;
   _ma_zero_memory_64(i36 + i34 | 0, i33, getTempRet0() | 0);
   i33 = i29;
   i34 = HEAP32[i33 + 4 >> 2] | 0;
   i36 = i35;
   HEAP32[i36 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i36 + 4 >> 2] = i34;
  }
 }
 i34 = i35;
 i36 = i29;
 if (!((HEAP32[i34 >> 2] | 0) == (HEAP32[i36 >> 2] | 0) ? (HEAP32[i34 + 4 >> 2] | 0) == (HEAP32[i36 + 4 >> 2] | 0) : 0)) ___assert_fail(47007, 36381, 32695, 46986);
 i34 = i35;
 i36 = HEAP32[i34 + 4 >> 2] | 0;
 i35 = i32;
 HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
 HEAP32[i35 + 4 >> 2] = i36;
 i35 = i32;
 i36 = i35;
 i36 = HEAP32[i36 >> 2] | 0;
 i35 = i35 + 4 | 0;
 i35 = HEAP32[i35 >> 2] | 0;
 setTempRet0(i35 | 0);
 STACKTOP = i37;
 return i36 | 0;
}

function _stbtt__tesselate_cubic(i10, i6, f12, f25, f15, f28, f18, f31, f21, f34, f8, i4) {
 i10 = i10 | 0;
 i6 = i6 | 0;
 f12 = Math_fround(f12);
 f25 = Math_fround(f25);
 f15 = Math_fround(f15);
 f28 = Math_fround(f28);
 f18 = Math_fround(f18);
 f31 = Math_fround(f31);
 f21 = Math_fround(f21);
 f34 = Math_fround(f34);
 f8 = Math_fround(f8);
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i11 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, d44 = 0.0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i38 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i11 = i1 + 136 | 0;
 i7 = i1 + 132 | 0;
 i13 = i1 + 128 | 0;
 i26 = i1 + 124 | 0;
 i16 = i1 + 120 | 0;
 i29 = i1 + 116 | 0;
 i19 = i1 + 112 | 0;
 i32 = i1 + 108 | 0;
 i22 = i1 + 104 | 0;
 i35 = i1 + 100 | 0;
 i9 = i1 + 96 | 0;
 i5 = i1 + 92 | 0;
 i49 = i1 + 88 | 0;
 i48 = i1 + 84 | 0;
 i47 = i1 + 80 | 0;
 i46 = i1 + 76 | 0;
 i45 = i1 + 72 | 0;
 i43 = i1 + 68 | 0;
 i42 = i1 + 64 | 0;
 i41 = i1 + 60 | 0;
 i40 = i1 + 56 | 0;
 i39 = i1 + 52 | 0;
 i2 = i1 + 48 | 0;
 i14 = i1 + 44 | 0;
 i27 = i1 + 40 | 0;
 i17 = i1 + 36 | 0;
 i30 = i1 + 32 | 0;
 i20 = i1 + 28 | 0;
 i33 = i1 + 24 | 0;
 i23 = i1 + 20 | 0;
 i36 = i1 + 16 | 0;
 i24 = i1 + 12 | 0;
 i37 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i7 >> 2] = i6;
 HEAPF32[i13 >> 2] = f12;
 HEAPF32[i26 >> 2] = f25;
 HEAPF32[i16 >> 2] = f15;
 HEAPF32[i29 >> 2] = f28;
 HEAPF32[i19 >> 2] = f18;
 HEAPF32[i32 >> 2] = f31;
 HEAPF32[i22 >> 2] = f21;
 HEAPF32[i35 >> 2] = f34;
 HEAPF32[i9 >> 2] = f8;
 HEAP32[i5 >> 2] = i4;
 f31 = Math_fround(HEAPF32[i16 >> 2]);
 f31 = Math_fround(f31 - Math_fround(HEAPF32[i13 >> 2]));
 HEAPF32[i49 >> 2] = f31;
 f31 = Math_fround(HEAPF32[i29 >> 2]);
 f31 = Math_fround(f31 - Math_fround(HEAPF32[i26 >> 2]));
 HEAPF32[i48 >> 2] = f31;
 f31 = Math_fround(HEAPF32[i19 >> 2]);
 f31 = Math_fround(f31 - Math_fround(HEAPF32[i16 >> 2]));
 HEAPF32[i47 >> 2] = f31;
 f31 = Math_fround(HEAPF32[i32 >> 2]);
 f31 = Math_fround(f31 - Math_fround(HEAPF32[i29 >> 2]));
 HEAPF32[i46 >> 2] = f31;
 f31 = Math_fround(HEAPF32[i22 >> 2]);
 f31 = Math_fround(f31 - Math_fround(HEAPF32[i19 >> 2]));
 HEAPF32[i45 >> 2] = f31;
 f31 = Math_fround(HEAPF32[i35 >> 2]);
 f31 = Math_fround(f31 - Math_fround(HEAPF32[i32 >> 2]));
 HEAPF32[i43 >> 2] = f31;
 f31 = Math_fround(HEAPF32[i22 >> 2]);
 f31 = Math_fround(f31 - Math_fround(HEAPF32[i13 >> 2]));
 HEAPF32[i42 >> 2] = f31;
 f31 = Math_fround(HEAPF32[i35 >> 2]);
 f31 = Math_fround(f31 - Math_fround(HEAPF32[i26 >> 2]));
 HEAPF32[i41 >> 2] = f31;
 f31 = Math_fround(HEAPF32[i49 >> 2]);
 f31 = Math_fround(f31 * Math_fround(HEAPF32[i49 >> 2]));
 f34 = Math_fround(HEAPF32[i48 >> 2]);
 d44 = +Math_sqrt(+(+Math_fround(f31 + Math_fround(f34 * Math_fround(HEAPF32[i48 >> 2])))));
 f34 = Math_fround(HEAPF32[i47 >> 2]);
 f34 = Math_fround(f34 * Math_fround(HEAPF32[i47 >> 2]));
 f31 = Math_fround(HEAPF32[i46 >> 2]);
 d44 = d44 + +Math_sqrt(+(+Math_fround(f34 + Math_fround(f31 * Math_fround(HEAPF32[i46 >> 2])))));
 f31 = Math_fround(HEAPF32[i45 >> 2]);
 f31 = Math_fround(f31 * Math_fround(HEAPF32[i45 >> 2]));
 f34 = Math_fround(HEAPF32[i43 >> 2]);
 f34 = Math_fround(d44 + +Math_sqrt(+(+Math_fround(f31 + Math_fround(f34 * Math_fround(HEAPF32[i43 >> 2]))))));
 HEAPF32[i40 >> 2] = f34;
 f34 = Math_fround(HEAPF32[i42 >> 2]);
 f34 = Math_fround(f34 * Math_fround(HEAPF32[i42 >> 2]));
 f31 = Math_fround(HEAPF32[i41 >> 2]);
 f31 = Math_fround(+Math_sqrt(+(+Math_fround(f34 + Math_fround(f31 * Math_fround(HEAPF32[i41 >> 2]))))));
 HEAPF32[i39 >> 2] = f31;
 f31 = Math_fround(HEAPF32[i40 >> 2]);
 f31 = Math_fround(f31 * Math_fround(HEAPF32[i40 >> 2]));
 f34 = Math_fround(HEAPF32[i39 >> 2]);
 f34 = Math_fround(f31 - Math_fround(f34 * Math_fround(HEAPF32[i39 >> 2])));
 HEAPF32[i2 >> 2] = f34;
 if ((HEAP32[i5 >> 2] | 0) > 16) {
  STACKTOP = i38;
  return;
 }
 f34 = Math_fround(HEAPF32[i2 >> 2]);
 if (f34 > Math_fround(HEAPF32[i9 >> 2])) {
  f34 = Math_fround(HEAPF32[i13 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i16 >> 2])) / Math_fround(2.0));
  HEAPF32[i14 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i26 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i29 >> 2])) / Math_fround(2.0));
  HEAPF32[i27 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i16 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i19 >> 2])) / Math_fround(2.0));
  HEAPF32[i17 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i29 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i32 >> 2])) / Math_fround(2.0));
  HEAPF32[i30 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i19 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i22 >> 2])) / Math_fround(2.0));
  HEAPF32[i20 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i32 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i35 >> 2])) / Math_fround(2.0));
  HEAPF32[i33 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i14 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i17 >> 2])) / Math_fround(2.0));
  HEAPF32[i23 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i27 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i30 >> 2])) / Math_fround(2.0));
  HEAPF32[i36 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i17 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i20 >> 2])) / Math_fround(2.0));
  HEAPF32[i24 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i30 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i33 >> 2])) / Math_fround(2.0));
  HEAPF32[i37 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i23 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i24 >> 2])) / Math_fround(2.0));
  HEAPF32[i3 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i36 >> 2]);
  f34 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i37 >> 2])) / Math_fround(2.0));
  HEAPF32[i1 >> 2] = f34;
  f34 = Math_fround(HEAPF32[i13 >> 2]);
  f31 = Math_fround(HEAPF32[i26 >> 2]);
  f28 = Math_fround(HEAPF32[i14 >> 2]);
  f25 = Math_fround(HEAPF32[i27 >> 2]);
  f21 = Math_fround(HEAPF32[i23 >> 2]);
  f18 = Math_fround(HEAPF32[i36 >> 2]);
  f15 = Math_fround(HEAPF32[i3 >> 2]);
  f12 = Math_fround(HEAPF32[i1 >> 2]);
  f8 = Math_fround(HEAPF32[i9 >> 2]);
  _stbtt__tesselate_cubic(HEAP32[i11 >> 2] | 0, HEAP32[i7 >> 2] | 0, f34, f31, f28, f25, f21, f18, f15, f12, f8, (HEAP32[i5 >> 2] | 0) + 1 | 0);
  f8 = Math_fround(HEAPF32[i3 >> 2]);
  f12 = Math_fround(HEAPF32[i1 >> 2]);
  f15 = Math_fround(HEAPF32[i24 >> 2]);
  f18 = Math_fround(HEAPF32[i37 >> 2]);
  f21 = Math_fround(HEAPF32[i20 >> 2]);
  f25 = Math_fround(HEAPF32[i33 >> 2]);
  f28 = Math_fround(HEAPF32[i22 >> 2]);
  f31 = Math_fround(HEAPF32[i35 >> 2]);
  f34 = Math_fround(HEAPF32[i9 >> 2]);
  _stbtt__tesselate_cubic(HEAP32[i11 >> 2] | 0, HEAP32[i7 >> 2] | 0, f8, f12, f15, f18, f21, f25, f28, f31, f34, (HEAP32[i5 >> 2] | 0) + 1 | 0);
  STACKTOP = i38;
  return;
 } else {
  f34 = Math_fround(HEAPF32[i22 >> 2]);
  _stbtt__add_point(HEAP32[i11 >> 2] | 0, HEAP32[HEAP32[i7 >> 2] >> 2] | 0, f34, Math_fround(HEAPF32[i35 >> 2]));
  HEAP32[HEAP32[i7 >> 2] >> 2] = (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + 1;
  STACKTOP = i38;
  return;
 }
}

function _ma_pcm_converter_init(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 4320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4320);
 i11 = i1 + 4316 | 0;
 i8 = i1 + 4312 | 0;
 i9 = i1 + 4308 | 0;
 i10 = i1 + 4304 | 0;
 i5 = i1 + 4264 | 0;
 i4 = i1 + 4224 | 0;
 i12 = i1 + 4184 | 0;
 i7 = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i11 >> 2] = -2;
  i12 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 _memset(HEAP32[i9 >> 2] | 0, 0, 46528) | 0;
 HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 108 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 112 >> 2];
 i3 = (HEAP32[i9 >> 2] | 0) + 46464 | 0;
 HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -2 | HEAP32[(HEAP32[i8 >> 2] | 0) + 100 >> 2] & 1;
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[(HEAP32[i8 >> 2] | 0) + 52 >> 2] | 0)) i6 = 5; else if (HEAP32[(HEAP32[i8 >> 2] | 0) + 100 >> 2] | 0) i6 = 5;
 if ((i6 | 0) == 5) {
  i3 = (HEAP32[i9 >> 2] | 0) + 46464 | 0;
  HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -17 | 16;
 }
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] | 0)) i6 = 8; else if (!(_ma_channel_map_equal(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i8 >> 2] | 0) + 12 | 0, (HEAP32[i8 >> 2] | 0) + 56 | 0) | 0)) i6 = 8;
 if ((i6 | 0) == 8) {
  i3 = (HEAP32[i9 >> 2] | 0) + 46464 | 0;
  HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -9 | 8;
 }
 if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 46464 >> 0] | 0) >>> 4 & 1 | 0) i6 = 13; else if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 46464 >> 0] | 0) >>> 3 & 1 | 0) i6 = 13; else if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) != (HEAP32[(HEAP32[i8 >> 2] | 0) + 44 >> 2] | 0)) {
  i3 = (HEAP32[i9 >> 2] | 0) + 46464 | 0;
  HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -5 | 4;
 }
 if ((i6 | 0) == 13) {
  i6 = (HEAP32[i9 >> 2] | 0) + 46464 | 0;
  HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -3 | 2;
  i6 = (HEAP32[i9 >> 2] | 0) + 46464 | 0;
  HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -5 | 4;
 }
 if (!((HEAPU8[(HEAP32[i9 >> 2] | 0) + 46464 >> 0] | 0) >>> 1 & 1)) if (!((HEAPU8[(HEAP32[i9 >> 2] | 0) + 46464 >> 0] | 0) >>> 2 & 1)) if (!((HEAPU8[(HEAP32[i9 >> 2] | 0) + 46464 >> 0] | 0) >>> 3 & 1)) if (!((HEAPU8[(HEAP32[i9 >> 2] | 0) + 46464 >> 0] | 0) >>> 4 & 1)) {
  i6 = (HEAP32[i9 >> 2] | 0) + 46464 | 0;
  HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -65 | 64;
 }
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  i6 = (HEAP32[i9 >> 2] | 0) + 46464 | 0;
  HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -33 | 32;
 }
 HEAP32[i10 >> 2] = 0;
 _ma_format_converter_config_init(i5, HEAP32[HEAP32[i8 >> 2] >> 2] | 0, 5, HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0, 7, HEAP32[i9 >> 2] | 0);
 HEAP32[i5 + 20 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2];
 i6 = i5 + 24 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -2 | (HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 1 & 1;
 i6 = i5 + 24 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -3 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 2 & 1) << 1 & 255;
 i6 = i5 + 24 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -5 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 3 & 1) << 2 & 255;
 i6 = i5 + 24 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -9 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 4 & 1) << 3 & 255;
 i6 = _ma_format_converter_init(i5, (HEAP32[i9 >> 2] | 0) + 8 | 0) | 0;
 HEAP32[i10 >> 2] = i6;
 if (HEAP32[i10 >> 2] | 0) {
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  i12 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 _ma_format_converter_config_init_new(i4);
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 44 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2];
 HEAP32[i4 + 20 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2];
 i6 = i4 + 24 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -2 | (HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 1 & 1;
 i6 = i4 + 24 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -3 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 2 & 1) << 1 & 255;
 i6 = i4 + 24 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -5 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 3 & 1) << 2 & 255;
 i6 = i4 + 24 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -9 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 4 & 1) << 3 & 255;
 if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 46464 >> 0] | 0) >>> 1 & 1 | 0) {
  HEAP32[i4 + 32 >> 2] = 8;
  HEAP32[i4 >> 2] = 5;
 } else HEAP32[i4 + 28 >> 2] = 9;
 i6 = _ma_format_converter_init(i4, (HEAP32[i9 >> 2] | 0) + 64 | 0) | 0;
 HEAP32[i10 >> 2] = i6;
 if (HEAP32[i10 >> 2] | 0) {
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  i12 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i1 = HEAP32[i8 >> 2] | 0;
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] | 0) >>> 0) i1 = HEAP32[i1 + 4 >> 2] | 0; else i1 = HEAP32[i1 + 48 >> 2] | 0;
 i6 = HEAP32[i8 >> 2] | 0;
 _ma_src_config_init(i12, HEAP32[i6 + 8 >> 2] | 0, HEAP32[i6 + 52 >> 2] | 0, i1, 10, HEAP32[i9 >> 2] | 0);
 HEAP32[i12 + 12 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 96 >> 2];
 i6 = i12 + 16 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -2 | HEAP8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] & 1;
 i6 = i12 + 16 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -3 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 1 & 1) << 1 & 255;
 i6 = i12 + 16 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -5 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 2 & 1) << 2 & 255;
 i6 = i12 + 16 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -9 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 3 & 1) << 3 & 255;
 i6 = i12 + 16 | 0;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] & -17 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 4 & 1) << 4 & 255;
 i6 = i12 + 28 | 0;
 i5 = (HEAP32[i8 >> 2] | 0) + 116 | 0;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 i12 = _ma_src_init(i12, (HEAP32[i9 >> 2] | 0) + 4352 | 0) | 0;
 HEAP32[i10 >> 2] = i12;
 if (HEAP32[i10 >> 2] | 0) {
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  i12 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i12 = HEAP32[i8 >> 2] | 0;
 _ma_channel_router_config_init(i7, HEAP32[i12 + 4 >> 2] | 0, i12 + 12 | 0, HEAP32[i12 + 48 >> 2] | 0, i12 + 56 | 0, HEAP32[i12 + 88 >> 2] | 0, 11, HEAP32[i9 >> 2] | 0);
 i12 = i7 + 4172 | 0;
 HEAP8[i12 >> 0] = HEAP8[i12 >> 0] & -2 | (HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 1 & 1;
 i12 = i7 + 4172 | 0;
 HEAP8[i12 >> 0] = HEAP8[i12 >> 0] & -3 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 2 & 1) << 1 & 255;
 i12 = i7 + 4172 | 0;
 HEAP8[i12 >> 0] = HEAP8[i12 >> 0] & -5 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 3 & 1) << 2 & 255;
 i12 = i7 + 4172 | 0;
 HEAP8[i12 >> 0] = HEAP8[i12 >> 0] & -9 | ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 104 >> 0] | 0) >>> 4 & 1) << 3 & 255;
 i12 = _ma_channel_router_init(i7, (HEAP32[i9 >> 2] | 0) + 120 | 0) | 0;
 HEAP32[i10 >> 2] = i12;
 if (HEAP32[i10 >> 2] | 0) {
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  i12 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 } else {
  HEAP32[i11 >> 2] = 0;
  i12 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 return 0;
}

function _free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if (!i1) return;
 i3 = i1 + -8 | 0;
 i4 = HEAP32[44178] | 0;
 i1 = HEAP32[i1 + -4 >> 2] | 0;
 i2 = i1 & -8;
 i10 = i3 + i2 | 0;
 do if (!(i1 & 1)) {
  i5 = HEAP32[i3 >> 2] | 0;
  if (!(i1 & 3)) return;
  i6 = i3 + (0 - i5) | 0;
  i7 = i5 + i2 | 0;
  if (i6 >>> 0 < i4 >>> 0) return;
  if ((HEAP32[44179] | 0) == (i6 | 0)) {
   i2 = i10 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 & 3 | 0) != 3) {
    i8 = i6;
    i9 = i6;
    i2 = i7;
    break;
   }
   HEAP32[44176] = i7;
   HEAP32[i2 >> 2] = i1 & -2;
   HEAP32[i6 + 4 >> 2] = i7 | 1;
   HEAP32[i6 + i7 >> 2] = i7;
   return;
  }
  i3 = i5 >>> 3;
  if (i5 >>> 0 < 256) {
   i1 = HEAP32[i6 + 8 >> 2] | 0;
   i2 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    HEAP32[44174] = HEAP32[44174] & ~(1 << i3);
    i8 = i6;
    i9 = i6;
    i2 = i7;
    break;
   } else {
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i1;
    i8 = i6;
    i9 = i6;
    i2 = i7;
    break;
   }
  }
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i3 = i6 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     break;
    } else i2 = i3;
   }
   while (1) {
    i4 = i1 + 20 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i4 = i1 + 16 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) break; else {
      i1 = i3;
      i2 = i4;
     }
    } else {
     i1 = i3;
     i2 = i4;
    }
   }
   HEAP32[i2 >> 2] = 0;
   i3 = i1;
  } else {
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i3 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i3;
   i3 = i1;
  } while (0);
  if (!i5) {
   i8 = i6;
   i9 = i6;
   i2 = i7;
  } else {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   i2 = 177e3 + (i1 << 2) | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i2 >> 2] = i3;
    if (!i3) {
     HEAP32[44175] = HEAP32[44175] & ~(1 << i1);
     i8 = i6;
     i9 = i6;
     i2 = i7;
     break;
    }
   } else {
    i9 = i5 + 16 | 0;
    HEAP32[((HEAP32[i9 >> 2] | 0) == (i6 | 0) ? i9 : i5 + 20 | 0) >> 2] = i3;
    if (!i3) {
     i8 = i6;
     i9 = i6;
     i2 = i7;
     break;
    }
   }
   HEAP32[i3 + 24 >> 2] = i5;
   i2 = i6 + 16 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i1) {
    i8 = i6;
    i9 = i6;
    i2 = i7;
   } else {
    HEAP32[i3 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
    i8 = i6;
    i9 = i6;
    i2 = i7;
   }
  }
 } else {
  i8 = i3;
  i9 = i3;
 } while (0);
 if (i8 >>> 0 >= i10 >>> 0) return;
 i1 = i10 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!(i3 & 1)) return;
 if (!(i3 & 2)) {
  if ((HEAP32[44180] | 0) == (i10 | 0)) {
   i10 = (HEAP32[44177] | 0) + i2 | 0;
   HEAP32[44177] = i10;
   HEAP32[44180] = i9;
   HEAP32[i9 + 4 >> 2] = i10 | 1;
   if ((i9 | 0) != (HEAP32[44179] | 0)) return;
   HEAP32[44179] = 0;
   HEAP32[44176] = 0;
   return;
  }
  if ((HEAP32[44179] | 0) == (i10 | 0)) {
   i10 = (HEAP32[44176] | 0) + i2 | 0;
   HEAP32[44176] = i10;
   HEAP32[44179] = i8;
   HEAP32[i9 + 4 >> 2] = i10 | 1;
   HEAP32[i8 + i10 >> 2] = i10;
   return;
  }
  i5 = (i3 & -8) + i2 | 0;
  i4 = i3 >>> 3;
  do if (i3 >>> 0 < 256) {
   i2 = HEAP32[i10 + 8 >> 2] | 0;
   i1 = HEAP32[i10 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[44174] = HEAP32[44174] & ~(1 << i4);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i6 = HEAP32[i10 + 24 >> 2] | 0;
   i1 = HEAP32[i10 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i10 | 0)) {
    i3 = i10 + 16 | 0;
    i2 = i3 + 4 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     } else i2 = i3;
    }
    while (1) {
     i4 = i1 + 20 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) {
      i4 = i1 + 16 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      if (!i3) break; else {
       i1 = i3;
       i2 = i4;
      }
     } else {
      i1 = i3;
      i2 = i4;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i10 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i6 | 0) {
    i1 = HEAP32[i10 + 28 >> 2] | 0;
    i2 = 177e3 + (i1 << 2) | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i10 | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[44175] = HEAP32[44175] & ~(1 << i1);
      break;
     }
    } else {
     i7 = i6 + 16 | 0;
     HEAP32[((HEAP32[i7 >> 2] | 0) == (i10 | 0) ? i7 : i6 + 20 | 0) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i6;
    i2 = i10 + 16 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i2 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i9 + 4 >> 2] = i5 | 1;
  HEAP32[i8 + i5 >> 2] = i5;
  if ((i9 | 0) == (HEAP32[44179] | 0)) {
   HEAP32[44176] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i3 & -2;
  HEAP32[i9 + 4 >> 2] = i2 | 1;
  HEAP32[i8 + i2 >> 2] = i2;
  i5 = i2;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i3 = 176736 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[44174] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[44174] = i2 | i1;
   i1 = i3 + 8 | 0;
   i2 = i3;
  } else {
   i2 = i3 + 8 | 0;
   i1 = i2;
   i2 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i1 >> 2] = i9;
  HEAP32[i2 + 12 >> 2] = i9;
  HEAP32[i9 + 8 >> 2] = i2;
  HEAP32[i9 + 12 >> 2] = i3;
  return;
 }
 i1 = i5 >>> 8;
 if (!i1) i4 = 0; else if (i5 >>> 0 > 16777215) i4 = 31; else {
  i8 = (i1 + 1048320 | 0) >>> 16 & 8;
  i10 = i1 << i8;
  i7 = (i10 + 520192 | 0) >>> 16 & 4;
  i10 = i10 << i7;
  i4 = (i10 + 245760 | 0) >>> 16 & 2;
  i4 = 14 - (i7 | i8 | i4) + (i10 << i4 >>> 15) | 0;
  i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 }
 i2 = 177e3 + (i4 << 2) | 0;
 HEAP32[i9 + 28 >> 2] = i4;
 HEAP32[i9 + 20 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 i1 = HEAP32[44175] | 0;
 i3 = 1 << i4;
 L112 : do if (!(i1 & i3)) {
  HEAP32[44175] = i1 | i3;
  HEAP32[i2 >> 2] = i9;
  HEAP32[i9 + 24 >> 2] = i2;
  HEAP32[i9 + 12 >> 2] = i9;
  HEAP32[i9 + 8 >> 2] = i9;
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  L115 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
   i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
   while (1) {
    i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) break;
    if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
     i1 = i2;
     break L115;
    } else {
     i4 = i4 << 1;
     i1 = i2;
    }
   }
   HEAP32[i3 >> 2] = i9;
   HEAP32[i9 + 24 >> 2] = i1;
   HEAP32[i9 + 12 >> 2] = i9;
   HEAP32[i9 + 8 >> 2] = i9;
   break L112;
  } while (0);
  i8 = i1 + 8 | 0;
  i10 = HEAP32[i8 >> 2] | 0;
  HEAP32[i10 + 12 >> 2] = i9;
  HEAP32[i8 >> 2] = i9;
  HEAP32[i9 + 8 >> 2] = i10;
  HEAP32[i9 + 12 >> 2] = i1;
  HEAP32[i9 + 24 >> 2] = 0;
 } while (0);
 i10 = (HEAP32[44182] | 0) + -1 | 0;
 HEAP32[44182] = i10;
 if (i10 | 0) return;
 i1 = 177152;
 while (1) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) break; else i1 = i1 + 8 | 0;
 }
 HEAP32[44182] = -1;
 return;
}

function __emscripten_dceable_type_decls() {
 _pthread_create(0, 0, 0, 0) | 0;
 _pthread_join(0, 0) | 0;
 _pthread_cond_init(0, 0) | 0;
 _pthread_cond_destroy(0) | 0;
 _pthread_attr_init(0) | 0;
 _pthread_attr_destroy(0) | 0;
 _emscripten_glVertexAttribDivisorANGLE(0, 0);
 _emscripten_glGenQueriesEXT(0, 0);
 _emscripten_glDeleteQueriesEXT(0, 0);
 _emscripten_glIsQueryEXT(0) << 24 >> 24;
 _emscripten_glBeginQueryEXT(0, 0);
 _emscripten_glEndQueryEXT(0);
 _emscripten_glQueryCounterEXT(0, 0);
 _emscripten_glGetQueryivEXT(0, 0, 0);
 _emscripten_glGetQueryObjectivEXT(0, 0, 0);
 _emscripten_glGetQueryObjectuivEXT(0, 0, 0);
 _emscripten_glGetQueryObjecti64vEXT(0, 0, 0);
 _emscripten_glGetQueryObjectui64vEXT(0, 0, 0);
 _emscripten_glBindVertexArrayOES(0);
 _emscripten_glDeleteVertexArraysOES(0, 0);
 _emscripten_glGenVertexArraysOES(0, 0);
 _emscripten_glIsVertexArrayOES(0) << 24 >> 24;
 _emscripten_glDrawBuffersWEBGL(0, 0);
 _emscripten_glDrawArraysInstancedANGLE(0, 0, 0, 0);
 _emscripten_glDrawElementsInstancedANGLE(0, 0, 0, 0, 0);
 _emscripten_glActiveTexture(0);
 _emscripten_glAttachShader(0, 0);
 _emscripten_glBindAttribLocation(0, 0, 0);
 _emscripten_glBindBuffer(0, 0);
 _emscripten_glBindFramebuffer(0, 0);
 _emscripten_glBindRenderbuffer(0, 0);
 _emscripten_glBindTexture(0, 0);
 _emscripten_glBlendColor(Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glBlendEquation(0);
 _emscripten_glBlendEquationSeparate(0, 0);
 _emscripten_glBlendFunc(0, 0);
 _emscripten_glBlendFuncSeparate(0, 0, 0, 0);
 _emscripten_glBufferData(0, 0, 0, 0);
 _emscripten_glBufferSubData(0, 0, 0, 0);
 _emscripten_glCheckFramebufferStatus(0) | 0;
 _emscripten_glClear(0);
 _emscripten_glClearColor(Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glClearDepthf(Math_fround(0.0));
 _emscripten_glClearStencil(0);
 _emscripten_glColorMask(0, 0, 0, 0);
 _emscripten_glCompileShader(0);
 _emscripten_glCompressedTexImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCompressedTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCopyTexImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCopyTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCreateProgram() | 0;
 _emscripten_glCreateShader(0) | 0;
 _emscripten_glCullFace(0);
 _emscripten_glDeleteBuffers(0, 0);
 _emscripten_glDeleteFramebuffers(0, 0);
 _emscripten_glDeleteProgram(0);
 _emscripten_glDeleteRenderbuffers(0, 0);
 _emscripten_glDeleteShader(0);
 _emscripten_glDeleteTextures(0, 0);
 _emscripten_glDepthFunc(0);
 _emscripten_glDepthMask(0);
 _emscripten_glDepthRangef(Math_fround(0.0), Math_fround(0.0));
 _emscripten_glDetachShader(0, 0);
 _emscripten_glDisable(0);
 _emscripten_glDisableVertexAttribArray(0);
 _emscripten_glDrawArrays(0, 0, 0);
 _emscripten_glDrawElements(0, 0, 0, 0);
 _emscripten_glEnable(0);
 _emscripten_glEnableVertexAttribArray(0);
 _emscripten_glFinish();
 _emscripten_glFlush();
 _emscripten_glFramebufferRenderbuffer(0, 0, 0, 0);
 _emscripten_glFramebufferTexture2D(0, 0, 0, 0, 0);
 _emscripten_glFrontFace(0);
 _emscripten_glGenBuffers(0, 0);
 _emscripten_glGenerateMipmap(0);
 _emscripten_glGenFramebuffers(0, 0);
 _emscripten_glGenRenderbuffers(0, 0);
 _emscripten_glGenTextures(0, 0);
 _emscripten_glGetActiveAttrib(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glGetActiveUniform(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glGetAttachedShaders(0, 0, 0, 0);
 _emscripten_glGetAttribLocation(0, 0) | 0;
 _emscripten_glGetBooleanv(0, 0);
 _emscripten_glGetBufferParameteriv(0, 0, 0);
 _emscripten_glGetError() | 0;
 _emscripten_glGetFloatv(0, 0);
 _emscripten_glGetFramebufferAttachmentParameteriv(0, 0, 0, 0);
 _emscripten_glGetIntegerv(0, 0);
 _emscripten_glGetProgramiv(0, 0, 0);
 _emscripten_glGetProgramInfoLog(0, 0, 0, 0);
 _emscripten_glGetRenderbufferParameteriv(0, 0, 0);
 _emscripten_glGetShaderiv(0, 0, 0);
 _emscripten_glGetShaderInfoLog(0, 0, 0, 0);
 _emscripten_glGetShaderPrecisionFormat(0, 0, 0, 0);
 _emscripten_glGetShaderSource(0, 0, 0, 0);
 _emscripten_glGetString(0) | 0;
 _emscripten_glGetTexParameterfv(0, 0, 0);
 _emscripten_glGetTexParameteriv(0, 0, 0);
 _emscripten_glGetUniformfv(0, 0, 0);
 _emscripten_glGetUniformiv(0, 0, 0);
 _emscripten_glGetUniformLocation(0, 0) | 0;
 _emscripten_glGetVertexAttribfv(0, 0, 0);
 _emscripten_glGetVertexAttribiv(0, 0, 0);
 _emscripten_glGetVertexAttribPointerv(0, 0, 0);
 _emscripten_glHint(0, 0);
 _emscripten_glIsBuffer(0) << 24 >> 24;
 _emscripten_glIsEnabled(0) << 24 >> 24;
 _emscripten_glIsFramebuffer(0) << 24 >> 24;
 _emscripten_glIsProgram(0) << 24 >> 24;
 _emscripten_glIsRenderbuffer(0) << 24 >> 24;
 _emscripten_glIsShader(0) << 24 >> 24;
 _emscripten_glIsTexture(0) << 24 >> 24;
 _emscripten_glLineWidth(Math_fround(0.0));
 _emscripten_glLinkProgram(0);
 _emscripten_glPixelStorei(0, 0);
 _emscripten_glPolygonOffset(Math_fround(0.0), Math_fround(0.0));
 _emscripten_glReadPixels(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glReleaseShaderCompiler();
 _emscripten_glRenderbufferStorage(0, 0, 0, 0);
 _emscripten_glSampleCoverage(Math_fround(0.0), 0);
 _emscripten_glScissor(0, 0, 0, 0);
 _emscripten_glShaderBinary(0, 0, 0, 0, 0);
 _emscripten_glShaderSource(0, 0, 0, 0);
 _emscripten_glStencilFunc(0, 0, 0);
 _emscripten_glStencilFuncSeparate(0, 0, 0, 0);
 _emscripten_glStencilMask(0);
 _emscripten_glStencilMaskSeparate(0, 0);
 _emscripten_glStencilOp(0, 0, 0);
 _emscripten_glStencilOpSeparate(0, 0, 0, 0);
 _emscripten_glTexImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glTexParameterf(0, 0, Math_fround(0.0));
 _emscripten_glTexParameterfv(0, 0, 0);
 _emscripten_glTexParameteri(0, 0, 0);
 _emscripten_glTexParameteriv(0, 0, 0);
 _emscripten_glTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glUniform1f(0, Math_fround(0.0));
 _emscripten_glUniform1fv(0, 0, 0);
 _emscripten_glUniform1i(0, 0);
 _emscripten_glUniform1iv(0, 0, 0);
 _emscripten_glUniform2f(0, Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform2fv(0, 0, 0);
 _emscripten_glUniform2i(0, 0, 0);
 _emscripten_glUniform2iv(0, 0, 0);
 _emscripten_glUniform3f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform3fv(0, 0, 0);
 _emscripten_glUniform3i(0, 0, 0, 0);
 _emscripten_glUniform3iv(0, 0, 0);
 _emscripten_glUniform4f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform4fv(0, 0, 0);
 _emscripten_glUniform4i(0, 0, 0, 0, 0);
 _emscripten_glUniform4iv(0, 0, 0);
 _emscripten_glUniformMatrix2fv(0, 0, 0, 0);
 _emscripten_glUniformMatrix3fv(0, 0, 0, 0);
 _emscripten_glUniformMatrix4fv(0, 0, 0, 0);
 _emscripten_glUseProgram(0);
 _emscripten_glValidateProgram(0);
 _emscripten_glVertexAttrib1f(0, Math_fround(0.0));
 _emscripten_glVertexAttrib1fv(0, 0);
 _emscripten_glVertexAttrib2f(0, Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib2fv(0, 0);
 _emscripten_glVertexAttrib3f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib3fv(0, 0);
 _emscripten_glVertexAttrib4f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib4fv(0, 0);
 _emscripten_glVertexAttribPointer(0, 0, 0, 0, 0, 0);
 _emscripten_glViewport(0, 0, 0, 0);
}

function _stbtt_FindGlyphIndex(i12, i23) {
 i12 = i12 | 0;
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i24 = 0;
 i29 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i26 = i1 + 64 | 0;
 i30 = i1 + 60 | 0;
 i28 = i1 + 56 | 0;
 i4 = i1 + 52 | 0;
 i11 = i1 + 48 | 0;
 i25 = i1 + 84 | 0;
 i2 = i1 + 44 | 0;
 i9 = i1 + 40 | 0;
 i3 = i1 + 36 | 0;
 i21 = i1 + 82 | 0;
 i20 = i1 + 80 | 0;
 i8 = i1 + 78 | 0;
 i18 = i1 + 76 | 0;
 i6 = i1 + 32 | 0;
 i19 = i1 + 28 | 0;
 i5 = i1 + 74 | 0;
 i17 = i1 + 72 | 0;
 i22 = i1 + 70 | 0;
 i13 = i1 + 68 | 0;
 i16 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i27 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i30 >> 2] = i12;
 HEAP32[i28 >> 2] = i23;
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i30 >> 2] | 0) + 4 >> 2];
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i30 >> 2] | 0) + 44 >> 2];
 i23 = _ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0) | 0;
 HEAP16[i25 >> 1] = i23;
 if (!(HEAPU16[i25 >> 1] | 0)) {
  i30 = (_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 2 | 0) | 0) & 65535;
  HEAP32[i2 >> 2] = i30;
  if ((HEAP32[i28 >> 2] | 0) < ((HEAP32[i2 >> 2] | 0) - 6 | 0)) {
   HEAP32[i26 >> 2] = HEAPU8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 6 + (HEAP32[i28 >> 2] | 0) >> 0];
   i30 = HEAP32[i26 >> 2] | 0;
   STACKTOP = i29;
   return i30 | 0;
  } else {
   HEAP32[i26 >> 2] = 0;
   i30 = HEAP32[i26 >> 2] | 0;
   STACKTOP = i29;
   return i30 | 0;
  }
 }
 if ((HEAPU16[i25 >> 1] | 0) == 6) {
  i30 = (_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 6 | 0) | 0) & 65535;
  HEAP32[i9 >> 2] = i30;
  i30 = (_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 8 | 0) | 0) & 65535;
  HEAP32[i3 >> 2] = i30;
  if ((HEAP32[i28 >> 2] | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) if ((HEAP32[i28 >> 2] | 0) >>> 0 < ((HEAP32[i9 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) | 0) >>> 0) {
   i30 = (_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 10 + ((HEAP32[i28 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) << 1) | 0) | 0) & 65535;
   HEAP32[i26 >> 2] = i30;
   i30 = HEAP32[i26 >> 2] | 0;
   STACKTOP = i29;
   return i30 | 0;
  }
  HEAP32[i26 >> 2] = 0;
  i30 = HEAP32[i26 >> 2] | 0;
  STACKTOP = i29;
  return i30 | 0;
 }
 if ((HEAPU16[i25 >> 1] | 0) == 2) ___assert_fail(53776, 52491, 1464, 52524);
 if ((HEAPU16[i25 >> 1] | 0) != 4) {
  if ((HEAPU16[i25 >> 1] | 0) != 12) if ((HEAPU16[i25 >> 1] | 0) != 13) ___assert_fail(53776, 52491, 1535, 52524);
  i30 = _ttULONG((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 12 | 0) | 0;
  HEAP32[i16 >> 2] = i30;
  HEAP32[i14 >> 2] = 0;
  HEAP32[i10 >> 2] = HEAP32[i16 >> 2];
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) {
    i24 = 41;
    break;
   }
   i30 = HEAP32[i14 >> 2] | 0;
   HEAP32[i15 >> 2] = (i30 | 0) + ((HEAP32[i10 >> 2] | 0) - i30 >> 1);
   i30 = _ttULONG((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 16 + ((HEAP32[i15 >> 2] | 0) * 12 | 0) | 0) | 0;
   HEAP32[i27 >> 2] = i30;
   i30 = _ttULONG((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 16 + ((HEAP32[i15 >> 2] | 0) * 12 | 0) + 4 | 0) | 0;
   HEAP32[i7 >> 2] = i30;
   if ((HEAP32[i28 >> 2] | 0) >>> 0 < (HEAP32[i27 >> 2] | 0) >>> 0) HEAP32[i10 >> 2] = HEAP32[i15 >> 2]; else {
    if ((HEAP32[i28 >> 2] | 0) >>> 0 <= (HEAP32[i7 >> 2] | 0) >>> 0) break;
    HEAP32[i14 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
  }
  if ((i24 | 0) == 41) {
   HEAP32[i26 >> 2] = 0;
   i30 = HEAP32[i26 >> 2] | 0;
   STACKTOP = i29;
   return i30 | 0;
  }
  i30 = _ttULONG((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 16 + ((HEAP32[i15 >> 2] | 0) * 12 | 0) + 8 | 0) | 0;
  HEAP32[i1 >> 2] = i30;
  i1 = HEAP32[i1 >> 2] | 0;
  if ((HEAPU16[i25 >> 1] | 0) == 12) {
   HEAP32[i26 >> 2] = i1 + (HEAP32[i28 >> 2] | 0) - (HEAP32[i27 >> 2] | 0);
   i30 = HEAP32[i26 >> 2] | 0;
   STACKTOP = i29;
   return i30 | 0;
  } else {
   HEAP32[i26 >> 2] = i1;
   i30 = HEAP32[i26 >> 2] | 0;
   STACKTOP = i29;
   return i30 | 0;
  }
 }
 i30 = ((_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 6 | 0) | 0) & 65535) >> 1 & 65535;
 HEAP16[i21 >> 1] = i30;
 i30 = ((_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 8 | 0) | 0) & 65535) >> 1 & 65535;
 HEAP16[i20 >> 1] = i30;
 i30 = _ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 10 | 0) | 0;
 HEAP16[i8 >> 1] = i30;
 i30 = ((_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 12 | 0) | 0) & 65535) >> 1 & 65535;
 HEAP16[i18 >> 1] = i30;
 HEAP32[i6 >> 2] = (HEAP32[i11 >> 2] | 0) + 14;
 HEAP32[i19 >> 2] = HEAP32[i6 >> 2];
 if ((HEAP32[i28 >> 2] | 0) > 65535) {
  HEAP32[i26 >> 2] = 0;
  i30 = HEAP32[i26 >> 2] | 0;
  STACKTOP = i29;
  return i30 | 0;
 }
 i30 = HEAP32[i28 >> 2] | 0;
 if ((i30 | 0) >= ((_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) + (HEAPU16[i18 >> 1] << 1) | 0) | 0) & 65535 | 0)) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAPU16[i18 >> 1] << 1);
 HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) - 2;
 while (1) {
  if (!(HEAP16[i8 >> 1] | 0)) break;
  HEAP16[i20 >> 1] = HEAPU16[i20 >> 1] >> 1;
  i30 = _ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) + (HEAPU16[i20 >> 1] << 1) | 0) | 0;
  HEAP16[i5 >> 1] = i30;
  if ((HEAP32[i28 >> 2] | 0) > (HEAPU16[i5 >> 1] | 0)) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAPU16[i20 >> 1] << 1);
  HEAP16[i8 >> 1] = (HEAP16[i8 >> 1] | 0) + -1 << 16 >> 16;
 }
 HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 2;
 HEAP16[i13 >> 1] = ((HEAP32[i19 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) >>> 1;
 i30 = HEAP32[i28 >> 2] | 0;
 if ((i30 | 0) > ((_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + (HEAPU16[i13 >> 1] << 1) | 0) | 0) & 65535 | 0)) ___assert_fail(52545, 52491, 1500, 52524);
 i30 = _ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 14 + (HEAPU16[i21 >> 1] << 1) + 2 + (HEAPU16[i13 >> 1] << 1) | 0) | 0;
 HEAP16[i22 >> 1] = i30;
 if ((HEAP32[i28 >> 2] | 0) < (HEAPU16[i22 >> 1] | 0)) {
  HEAP32[i26 >> 2] = 0;
  i30 = HEAP32[i26 >> 2] | 0;
  STACKTOP = i29;
  return i30 | 0;
 }
 i30 = _ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 14 + ((HEAPU16[i21 >> 1] | 0) * 6 | 0) + 2 + (HEAPU16[i13 >> 1] << 1) | 0) | 0;
 HEAP16[i17 >> 1] = i30;
 if (!(HEAPU16[i17 >> 1] | 0)) {
  i30 = HEAP32[i28 >> 2] | 0;
  i30 = i30 + ((_ttSHORT((HEAP32[i4 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + 14 + (HEAPU16[i21 >> 1] << 2) + 2 + (HEAPU16[i13 >> 1] << 1) | 0) | 0) << 16 >> 16) & 65535;
  HEAP32[i26 >> 2] = i30;
  i30 = HEAP32[i26 >> 2] | 0;
  STACKTOP = i29;
  return i30 | 0;
 } else {
  i30 = (_ttUSHORT((HEAP32[i4 >> 2] | 0) + (HEAPU16[i17 >> 1] | 0) + ((HEAP32[i28 >> 2] | 0) - (HEAPU16[i22 >> 1] | 0) << 1) + (HEAP32[i11 >> 2] | 0) + 14 + ((HEAPU16[i21 >> 1] | 0) * 6 | 0) + 2 + (HEAPU16[i13 >> 1] << 1) | 0) | 0) & 65535;
  HEAP32[i26 >> 2] = i30;
  i30 = HEAP32[i26 >> 2] | 0;
  STACKTOP = i29;
  return i30 | 0;
 }
 return 0;
}

function _ma_channel_router_read_deinterleaved(i14, i2, i3, i20, i16) {
 i14 = i14 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i20 = i20 | 0;
 i16 = i16 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i27 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 33264 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(33264);
 i23 = i1 + 33208 | 0;
 i15 = i1 + 33248 | 0;
 i4 = i1 + 33200 | 0;
 i21 = i1 + 33244 | 0;
 i17 = i1 + 33240 | 0;
 i18 = i1 + 33024 | 0;
 i25 = i1 + 33192 | 0;
 i10 = i1 + 33236 | 0;
 i5 = i1 + 33232 | 0;
 i7 = i1 + 33184 | 0;
 i9 = i1 + 33176 | 0;
 i19 = i1 + 32896 | 0;
 i22 = i1 + 32768 | 0;
 i12 = i1 + 33228 | 0;
 i13 = i1 + 33224 | 0;
 i26 = i1 + 33168 | 0;
 i24 = i1;
 i11 = i1 + 33220 | 0;
 i6 = i1 + 33216 | 0;
 i8 = i1 + 33160 | 0;
 i1 = i1 + 33152 | 0;
 HEAP32[i15 >> 2] = i14;
 i14 = i4;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i14 + 4 >> 2] = i3;
 HEAP32[i21 >> 2] = i20;
 HEAP32[i17 >> 2] = i16;
 if ((HEAP32[i15 >> 2] | 0) == 0 | (HEAP32[i21 >> 2] | 0) == 0) {
  i25 = i23;
  HEAP32[i25 >> 2] = 0;
  HEAP32[i25 + 4 >> 2] = 0;
  i25 = i23;
  i26 = i25;
  i26 = HEAP32[i26 >> 2] | 0;
  i25 = i25 + 4 | 0;
  i25 = HEAP32[i25 >> 2] | 0;
  setTempRet0(i25 | 0);
  STACKTOP = i27;
  return i26 | 0;
 }
 if (HEAP8[(HEAP32[i15 >> 2] | 0) + 4184 >> 0] & 1 | 0) {
  i26 = i4;
  i24 = HEAP32[i26 + 4 >> 2] | 0;
  if (i24 >>> 0 < 0 | (i24 | 0) == 0 & (HEAP32[i26 >> 2] | 0) >>> 0 <= 4294967295) {
   i26 = HEAP32[i15 >> 2] | 0;
   i26 = FUNCTION_TABLE_iiiii[HEAP32[i26 + 4176 >> 2] & 15](i26 | 0, HEAP32[i4 >> 2] | 0, HEAP32[i21 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
   i25 = i23;
   HEAP32[i25 >> 2] = i26;
   HEAP32[i25 + 4 >> 2] = 0;
   i25 = i23;
   i26 = i25;
   i26 = HEAP32[i26 >> 2] | 0;
   i25 = i25 + 4 | 0;
   i25 = HEAP32[i25 >> 2] | 0;
   setTempRet0(i25 | 0);
   STACKTOP = i27;
   return i26 | 0;
  }
  _memcpy(i18 | 0, HEAP32[i21 >> 2] | 0, HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] << 2 | 0) | 0;
  i26 = i25;
  HEAP32[i26 >> 2] = 0;
  HEAP32[i26 + 4 >> 2] = 0;
  while (1) {
   i24 = i25;
   i21 = HEAP32[i24 + 4 >> 2] | 0;
   i26 = i4;
   i22 = HEAP32[i26 + 4 >> 2] | 0;
   if (!(i21 >>> 0 < i22 >>> 0 ? 1 : (i21 | 0) == (i22 | 0) ? (HEAP32[i24 >> 2] | 0) >>> 0 < (HEAP32[i26 >> 2] | 0) >>> 0 : 0)) break;
   i21 = i4;
   i22 = i25;
   i22 = _i64Subtract(HEAP32[i21 >> 2] | 0, HEAP32[i21 + 4 >> 2] | 0, HEAP32[i22 >> 2] | 0, HEAP32[i22 + 4 >> 2] | 0) | 0;
   i21 = getTempRet0() | 0;
   i24 = i7;
   HEAP32[i24 >> 2] = i22;
   HEAP32[i24 + 4 >> 2] = i21;
   i24 = i7;
   i21 = HEAP32[i24 >> 2] | 0;
   i24 = HEAP32[i24 + 4 >> 2] | 0;
   i22 = i9;
   HEAP32[i22 >> 2] = i21;
   HEAP32[i22 + 4 >> 2] = i24;
   i22 = i9;
   i26 = HEAP32[i22 + 4 >> 2] | 0;
   i22 = i26 >>> 0 > 0 | (i26 | 0) == 0 & (HEAP32[i22 >> 2] | 0) >>> 0 > 4294967295;
   i26 = i9;
   HEAP32[i26 >> 2] = i22 ? -1 : i21;
   HEAP32[i26 + 4 >> 2] = i22 ? 0 : i24;
   i26 = HEAP32[i15 >> 2] | 0;
   i26 = FUNCTION_TABLE_iiiii[HEAP32[i26 + 4176 >> 2] & 15](i26 | 0, HEAP32[i9 >> 2] | 0, i18, HEAP32[i17 >> 2] | 0) | 0;
   HEAP32[i5 >> 2] = i26;
   if (!(HEAP32[i5 >> 2] | 0)) break;
   i22 = i25;
   i22 = _i64Add(HEAP32[i22 >> 2] | 0, HEAP32[i22 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i24 = getTempRet0() | 0;
   i26 = i25;
   HEAP32[i26 >> 2] = i22;
   HEAP32[i26 + 4 >> 2] = i24;
   i26 = i9;
   i24 = HEAP32[i26 + 4 >> 2] | 0;
   if (0 < i24 >>> 0 ? 1 : 0 == (i24 | 0) ? (HEAP32[i5 >> 2] | 0) >>> 0 < (HEAP32[i26 >> 2] | 0) >>> 0 : 0) break;
   HEAP32[i10 >> 2] = 0;
   while (1) {
    if ((HEAP32[i10 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
    i26 = i18 + (HEAP32[i10 >> 2] << 2) | 0;
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + (HEAP32[i5 >> 2] << 2);
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   }
  }
  i24 = i25;
  i26 = HEAP32[i24 + 4 >> 2] | 0;
  i25 = i23;
  HEAP32[i25 >> 2] = HEAP32[i24 >> 2];
  HEAP32[i25 + 4 >> 2] = i26;
  i25 = i23;
  i26 = i25;
  i26 = HEAP32[i26 >> 2] | 0;
  i25 = i25 + 4 | 0;
  i25 = HEAP32[i25 >> 2] | 0;
  setTempRet0(i25 | 0);
  STACKTOP = i27;
  return i26 | 0;
 } else {
  _memcpy(i19 | 0, HEAP32[i21 >> 2] | 0, HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] << 2 | 0) | 0;
  _ma_split_buffer(i24, 32768, HEAP32[HEAP32[i15 >> 2] >> 2] | 0, 64, i22, i12);
  HEAP32[i13 >> 2] = ((HEAP32[i12 >> 2] | 0) >>> 0) / 4 | 0;
  i25 = i26;
  HEAP32[i25 >> 2] = 0;
  HEAP32[i25 + 4 >> 2] = 0;
  do {
   i24 = i26;
   i20 = HEAP32[i24 + 4 >> 2] | 0;
   i25 = i4;
   i21 = HEAP32[i25 + 4 >> 2] | 0;
   if (!(i20 >>> 0 < i21 >>> 0 ? 1 : (i20 | 0) == (i21 | 0) ? (HEAP32[i24 >> 2] | 0) >>> 0 < (HEAP32[i25 >> 2] | 0) >>> 0 : 0)) break;
   i24 = i4;
   i25 = i26;
   i25 = _i64Subtract(HEAP32[i24 >> 2] | 0, HEAP32[i24 + 4 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i25 + 4 >> 2] | 0) | 0;
   i24 = getTempRet0() | 0;
   i21 = i8;
   HEAP32[i21 >> 2] = i25;
   HEAP32[i21 + 4 >> 2] = i24;
   i21 = i8;
   i24 = HEAP32[i21 + 4 >> 2] | 0;
   i25 = i1;
   HEAP32[i25 >> 2] = HEAP32[i21 >> 2];
   HEAP32[i25 + 4 >> 2] = i24;
   i25 = i1;
   i24 = HEAP32[i25 + 4 >> 2] | 0;
   if (i24 >>> 0 > 0 ? 1 : (i24 | 0) == 0 ? (HEAP32[i25 >> 2] | 0) >>> 0 > (HEAP32[i13 >> 2] | 0) >>> 0 : 0) {
    i25 = i1;
    HEAP32[i25 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i25 + 4 >> 2] = 0;
   }
   i25 = HEAP32[i15 >> 2] | 0;
   i25 = FUNCTION_TABLE_iiiii[HEAP32[i25 + 4176 >> 2] & 15](i25 | 0, HEAP32[i1 >> 2] | 0, i22, HEAP32[i17 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i25;
   if (!(HEAP32[i6 >> 2] | 0)) break;
   _ma_channel_router__do_routing(HEAP32[i15 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, i19, i22);
   i25 = i26;
   i25 = _i64Add(HEAP32[i25 >> 2] | 0, HEAP32[i25 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0;
   i20 = getTempRet0() | 0;
   i24 = i26;
   HEAP32[i24 >> 2] = i25;
   HEAP32[i24 + 4 >> 2] = i20;
   i24 = i26;
   i20 = HEAP32[i24 + 4 >> 2] | 0;
   i25 = i4;
   i21 = HEAP32[i25 + 4 >> 2] | 0;
   L30 : do if (i20 >>> 0 < i21 >>> 0 ? 1 : (i20 | 0) == (i21 | 0) ? (HEAP32[i24 >> 2] | 0) >>> 0 < (HEAP32[i25 >> 2] | 0) >>> 0 : 0) {
    HEAP32[i11 >> 2] = 0;
    while (1) {
     if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[i15 >> 2] >> 2] | 0) >>> 0) break L30;
     i25 = i19 + (HEAP32[i11 >> 2] << 2) | 0;
     HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + (HEAP32[i6 >> 2] << 2);
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    }
   } while (0);
   i25 = i1;
   i24 = HEAP32[i25 + 4 >> 2] | 0;
  } while (!(0 < i24 >>> 0 ? 1 : 0 == (i24 | 0) ? (HEAP32[i6 >> 2] | 0) >>> 0 < (HEAP32[i25 >> 2] | 0) >>> 0 : 0));
  i24 = i26;
  i26 = HEAP32[i24 + 4 >> 2] | 0;
  i25 = i23;
  HEAP32[i25 >> 2] = HEAP32[i24 >> 2];
  HEAP32[i25 + 4 >> 2] = i26;
  i25 = i23;
  i26 = i25;
  i26 = HEAP32[i26 >> 2] | 0;
  i25 = i25 + 4 | 0;
  i25 = HEAP32[i25 >> 2] | 0;
  setTempRet0(i25 | 0);
  STACKTOP = i27;
  return i26 | 0;
 }
 return 0;
}

function _bonus_draw(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, f20 = f0;
 i4 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(368);
 i17 = i19 + 328 | 0;
 i16 = i19 + 304 | 0;
 i8 = i19 + 272 | 0;
 i15 = i19 + 264 | 0;
 i12 = i19 + 256 | 0;
 i18 = i19;
 i1 = i19 + 364 | 0;
 i2 = i19 + 300 | 0;
 i9 = i19 + 296 | 0;
 i10 = i19 + 292 | 0;
 i11 = i19 + 288 | 0;
 i14 = i19 + 284 | 0;
 i13 = i19 + 280 | 0;
 i5 = i19 + 276 | 0;
 i6 = i19 + 360 | 0;
 i3 = HEAP32[43876] | 0;
 if (!i3) i4 = 4; else if (!(HEAP32[163168 + ((i3 + -1 | 0) * 20 | 0) + 12 >> 2] | 0)) i4 = 4; else {
  HEAP8[i1 >> 0] = -126;
  HEAP8[i1 + 1 >> 0] = -126;
  HEAP8[i1 + 2 >> 0] = -126;
  HEAP8[i1 + 3 >> 0] = -1;
  HEAP32[i16 >> 2] = HEAP32[39235];
  HEAP32[i16 + 4 >> 2] = HEAP32[39236];
  HEAP32[i16 + 8 >> 2] = HEAP32[39237];
  HEAP32[i16 + 12 >> 2] = HEAP32[39238];
  HEAP32[i16 + 16 >> 2] = HEAP32[39239];
  HEAP8[i17 >> 0] = HEAP8[i1 >> 0] | 0;
  HEAP8[i17 + 1 >> 0] = HEAP8[i1 + 1 >> 0] | 0;
  HEAP8[i17 + 2 >> 0] = HEAP8[i1 + 2 >> 0] | 0;
  HEAP8[i17 + 3 >> 0] = HEAP8[i1 + 3 >> 0] | 0;
  _DrawTexture(i16, 0, 0, i17);
 }
 if ((i4 | 0) == 4) {
  HEAP32[i2 >> 2] = -1;
  HEAP32[i16 >> 2] = HEAP32[39235];
  HEAP32[i16 + 4 >> 2] = HEAP32[39236];
  HEAP32[i16 + 8 >> 2] = HEAP32[39237];
  HEAP32[i16 + 12 >> 2] = HEAP32[39238];
  HEAP32[i16 + 16 >> 2] = HEAP32[39239];
  HEAP8[i17 >> 0] = HEAP8[i2 >> 0] | 0;
  HEAP8[i17 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
  HEAP8[i17 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
  HEAP8[i17 + 3 >> 0] = HEAP8[i2 + 3 >> 0] | 0;
  _DrawTexture(i16, 0, 0, i17);
 }
 if (HEAP32[i7 + 24 >> 2] | 0) {
  HEAP32[i17 >> 2] = HEAP32[43868];
  HEAP32[i17 + 4 >> 2] = HEAP32[43869];
  HEAP32[i17 + 8 >> 2] = HEAP32[43870];
  HEAP32[i17 + 12 >> 2] = HEAP32[43871];
  HEAP32[i17 + 16 >> 2] = HEAP32[43872];
  HEAP32[i17 + 20 >> 2] = HEAP32[43873];
  HEAP32[i17 + 24 >> 2] = HEAP32[43874];
  HEAP32[i17 + 28 >> 2] = HEAP32[43875];
  _UpdateMusicStream(i17);
 }
 i1 = HEAP32[43876] | 0;
 do if (!i1) {
  i3 = 0;
  do {
   _memset(i18 | 0, 0, 255) | 0;
   i15 = i3;
   i3 = i3 + 1 | 0;
   HEAP32[i12 >> 2] = i3;
   _sprintf(i18, 31980, i12) | 0;
   i2 = 163168 + (i15 * 20 | 0) | 0;
   i1 = i2 | 0;
   f20 = Math_fround((HEAP32[i1 >> 2] | 0) + 80 | 0);
   i2 = i2 + 4 | 0;
   i14 = ~~Math_fround((HEAP32[i2 >> 2] | 0) + 50 | 0);
   HEAP32[i9 >> 2] = -1;
   HEAP8[i17 >> 0] = HEAP8[i9 >> 0] | 0;
   HEAP8[i17 + 1 >> 0] = HEAP8[i9 + 1 >> 0] | 0;
   HEAP8[i17 + 2 >> 0] = HEAP8[i9 + 2 >> 0] | 0;
   HEAP8[i17 + 3 >> 0] = HEAP8[i9 + 3 >> 0] | 0;
   _DrawText(i18, ~~f20, i14, 48, i17);
   i1 = HEAP32[i1 >> 2] | 0;
   i2 = HEAP32[i2 >> 2] | 0;
   if (!(HEAP32[163168 + (i15 * 20 | 0) + 8 >> 2] | 0)) {
    HEAP32[i11 >> 2] = -1;
    HEAP32[i16 >> 2] = HEAP32[40745];
    HEAP32[i16 + 4 >> 2] = HEAP32[40746];
    HEAP32[i16 + 8 >> 2] = HEAP32[40747];
    HEAP32[i16 + 12 >> 2] = HEAP32[40748];
    HEAP32[i16 + 16 >> 2] = HEAP32[40749];
    HEAP8[i17 >> 0] = HEAP8[i11 >> 0] | 0;
    HEAP8[i17 + 1 >> 0] = HEAP8[i11 + 1 >> 0] | 0;
    HEAP8[i17 + 2 >> 0] = HEAP8[i11 + 2 >> 0] | 0;
    HEAP8[i17 + 3 >> 0] = HEAP8[i11 + 3 >> 0] | 0;
    _DrawTexture(i16, i1, i2, i17);
   } else {
    HEAP32[i10 >> 2] = -1;
    HEAP32[i16 >> 2] = HEAP32[40740];
    HEAP32[i16 + 4 >> 2] = HEAP32[40741];
    HEAP32[i16 + 8 >> 2] = HEAP32[40742];
    HEAP32[i16 + 12 >> 2] = HEAP32[40743];
    HEAP32[i16 + 16 >> 2] = HEAP32[40744];
    HEAP8[i17 >> 0] = HEAP8[i10 >> 0] | 0;
    HEAP8[i17 + 1 >> 0] = HEAP8[i10 + 1 >> 0] | 0;
    HEAP8[i17 + 2 >> 0] = HEAP8[i10 + 2 >> 0] | 0;
    HEAP8[i17 + 3 >> 0] = HEAP8[i10 + 3 >> 0] | 0;
    _DrawTexture(i16, i1, i2, i17);
   }
  } while ((i3 | 0) != 5);
 } else {
  if (HEAP32[163168 + ((i1 + -1 | 0) * 20 | 0) + 12 >> 2] | 0) {
   HEAP32[i5 >> 2] = -1;
   HEAP32[i16 >> 2] = HEAP32[39240];
   HEAP32[i16 + 4 >> 2] = HEAP32[39241];
   HEAP32[i16 + 8 >> 2] = HEAP32[39242];
   HEAP32[i16 + 12 >> 2] = HEAP32[39243];
   HEAP32[i16 + 16 >> 2] = HEAP32[39244];
   HEAP8[i17 >> 0] = HEAP8[i5 >> 0] | 0;
   HEAP8[i17 + 1 >> 0] = HEAP8[i5 + 1 >> 0] | 0;
   HEAP8[i17 + 2 >> 0] = HEAP8[i5 + 2 >> 0] | 0;
   HEAP8[i17 + 3 >> 0] = HEAP8[i5 + 3 >> 0] | 0;
   _DrawTexture(i16, 0, 0, i17);
   _memset(i18 | 0, 0, 255) | 0;
   i15 = Math_imul(Math_imul(HEAP32[i7 + 8 >> 2] | 0, HEAP32[163168 + (((HEAP32[43876] | 0) + -1 | 0) * 20 | 0) + 12 >> 2] | 0) | 0, HEAP32[i7 + 4 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = i15;
   _sprintf(i18, 31983, i8) | 0;
   i15 = (HEAP32[39241] | 0) / 2 | 0;
   i15 = (Math_imul(_strlen(i18) | 0, -15) | 0) + i15 | 0;
   i16 = HEAP32[39242] | 0;
   HEAP8[i6 >> 0] = -3;
   HEAP8[i6 + 1 >> 0] = -7;
   HEAP8[i6 + 2 >> 0] = 0;
   HEAP8[i6 + 3 >> 0] = -1;
   HEAP8[i17 >> 0] = HEAP8[i6 >> 0] | 0;
   HEAP8[i17 + 1 >> 0] = HEAP8[i6 + 1 >> 0] | 0;
   HEAP8[i17 + 2 >> 0] = HEAP8[i6 + 2 >> 0] | 0;
   HEAP8[i17 + 3 >> 0] = HEAP8[i6 + 3 >> 0] | 0;
   _DrawText(i18, i15, i16, 72, i17);
   break;
  }
  i9 = i14 + 1 | 0;
  i8 = i14 + 2 | 0;
  i7 = i14 + 3 | 0;
  i1 = 0;
  do {
   i2 = HEAP32[163168 + (i1 * 20 | 0) + 12 >> 2] | 0;
   do if (!i2) i2 = (HEAP32[163168 + (i1 * 20 | 0) + 8 >> 2] | 0) == 1 ? 2 : 5; else {
    i3 = (HEAP32[163168 + (i1 * 20 | 0) + 8 >> 2] | 0) == 1;
    if (i2 >>> 0 < 50) {
     i2 = i3 ? 4 : 7;
     break;
    } else {
     i2 = i3 ? 3 : 6;
     break;
    }
   } while (0);
   i4 = 162960 + (i2 * 20 | 0) | 0;
   i6 = 163168 + (i1 * 20 | 0) | 0;
   i5 = i6 | 0;
   i2 = HEAP32[i5 >> 2] | 0;
   i6 = i6 + 4 | 0;
   i3 = HEAP32[i6 >> 2] | 0;
   if ((i1 | 0) == ((HEAP32[43876] | 0) + -1 | 0)) HEAP32[i14 >> 2] = -1; else {
    HEAP8[i14 >> 0] = -126;
    HEAP8[i9 >> 0] = -126;
    HEAP8[i8 >> 0] = -126;
    HEAP8[i7 >> 0] = -1;
   };
   HEAP32[i16 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
   HEAP32[i16 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
   HEAP8[i17 >> 0] = HEAP8[i14 >> 0] | 0;
   HEAP8[i17 + 1 >> 0] = HEAP8[i14 + 1 >> 0] | 0;
   HEAP8[i17 + 2 >> 0] = HEAP8[i14 + 2 >> 0] | 0;
   HEAP8[i17 + 3 >> 0] = HEAP8[i14 + 3 >> 0] | 0;
   _DrawTexture(i16, i2, i3, i17);
   if ((i1 | 0) == ((HEAP32[43876] | 0) + -1 | 0)) {
    _memset(i18 | 0, 0, 255) | 0;
    i1 = i1 + 1 | 0;
    HEAP32[i15 >> 2] = i1;
    _sprintf(i18, 31980, i15) | 0;
    f20 = Math_fround((HEAP32[i5 >> 2] | 0) + 80 | 0);
    i12 = ~~Math_fround((HEAP32[i6 >> 2] | 0) + 50 | 0);
    HEAP32[i13 >> 2] = -1;
    HEAP8[i17 >> 0] = HEAP8[i13 >> 0] | 0;
    HEAP8[i17 + 1 >> 0] = HEAP8[i13 + 1 >> 0] | 0;
    HEAP8[i17 + 2 >> 0] = HEAP8[i13 + 2 >> 0] | 0;
    HEAP8[i17 + 3 >> 0] = HEAP8[i13 + 3 >> 0] | 0;
    _DrawText(i18, ~~f20, i12, 48, i17);
   } else i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 5);
 } while (0);
 STACKTOP = i19;
 return;
}

function _jar_mod_load(i5, i3, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i10 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i13 = i1 + 30 | 0;
 i12 = i1 + 20 | 0;
 i16 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i11 = i1 + 28 | 0;
 i6 = i1 + 26 | 0;
 i9 = i1 + 24 | 0;
 i8 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i16 >> 2] = i3;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i2 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
 if (!((HEAP32[i7 >> 2] | 0) != 0 & (HEAP32[i12 >> 2] | 0) != 0)) {
  HEAP8[i13 >> 0] = 0;
  i16 = HEAP8[i13 >> 0] | 0;
  i16 = i16 & 1;
  STACKTOP = i14;
  return i16 | 0;
 }
 _memcopy(HEAP32[i12 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1084);
 HEAP16[i11 >> 1] = 0;
 HEAP16[(HEAP32[i12 >> 2] | 0) + 3552 >> 1] = 0;
 while (1) {
  i1 = HEAP32[i12 >> 2] | 0;
  if (!(HEAP32[13232 + ((HEAPU16[i11 >> 1] | 0) * 12 | 0) + 8 >> 2] | 0)) break;
  if (_memcompare(i1 + 1080 | 0, 13232 + ((HEAPU16[i11 >> 1] | 0) * 12 | 0) | 0, 4) | 0) HEAP16[(HEAP32[i12 >> 2] | 0) + 3552 >> 1] = HEAP32[13232 + ((HEAPU16[i11 >> 1] | 0) * 12 | 0) + 8 >> 2];
  HEAP16[i11 >> 1] = (HEAP16[i11 >> 1] | 0) + 1 << 16 >> 16;
 }
 if (HEAP16[i1 + 3552 >> 1] | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1084; else {
  _memcopy((HEAP32[i12 >> 2] | 0) + 1080 | 0, 48342, 4);
  i16 = HEAP32[i12 >> 2] | 0;
  _memcopy(i16 + 950 | 0, i16 + 20 + 450 | 0, 130);
  _memclear((HEAP32[i12 >> 2] | 0) + 20 + 450 | 0, 0, 480);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 600;
  HEAP16[(HEAP32[i12 >> 2] | 0) + 3552 >> 1] = 4;
 }
 if ((HEAP32[i7 >> 2] | 0) >>> 0 >= (HEAP32[i2 >> 2] | 0) >>> 0) {
  HEAP8[i13 >> 0] = 0;
  i16 = HEAP8[i13 >> 0] | 0;
  i16 = i16 & 1;
  STACKTOP = i14;
  return i16 | 0;
 }
 HEAP16[i6 >> 1] = 0;
 HEAP16[i11 >> 1] = 0;
 L20 : while (1) {
  if ((HEAPU16[i11 >> 1] | 0) >= 128) break;
  while (1) {
   if ((HEAPU16[i6 >> 1] | 0) > (HEAPU8[(HEAP32[i12 >> 2] | 0) + 952 + (HEAPU16[i11 >> 1] | 0) >> 0] | 0)) break;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 1212 + (HEAPU16[i6 >> 1] << 2) >> 2] = HEAP32[i7 >> 2];
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAPU16[(HEAP32[i12 >> 2] | 0) + 3552 >> 1] << 8);
   HEAP16[i6 >> 1] = (HEAP16[i6 >> 1] | 0) + 1 << 16 >> 16;
   if ((HEAP32[i7 >> 2] | 0) >>> 0 >= (HEAP32[i2 >> 2] | 0) >>> 0) {
    i10 = 17;
    break L20;
   }
  }
  HEAP16[i11 >> 1] = (HEAP16[i11 >> 1] | 0) + 1 << 16 >> 16;
 }
 if ((i10 | 0) == 17) {
  HEAP8[i13 >> 0] = 0;
  i16 = HEAP8[i13 >> 0] | 0;
  i16 = i16 & 1;
  STACKTOP = i14;
  return i16 | 0;
 }
 HEAP16[i11 >> 1] = 0;
 while (1) {
  if ((HEAPU16[i11 >> 1] | 0) >= 31) break;
  HEAP32[(HEAP32[i12 >> 2] | 0) + 1088 + (HEAPU16[i11 >> 1] << 2) >> 2] = 0;
  HEAP16[i11 >> 1] = (HEAP16[i11 >> 1] | 0) + 1 << 16 >> 16;
 }
 HEAP16[i11 >> 1] = 0;
 HEAP32[i8 >> 2] = (HEAP32[i12 >> 2] | 0) + 20;
 while (1) {
  if ((HEAPU16[i11 >> 1] | 0) >= 31) break;
  i15 = (HEAP32[i8 >> 2] | 0) + 22 | 0;
  i16 = i15 | 0;
  i15 = i15 | 0;
  HEAP16[i9 >> 1] = ((HEAPU8[i16 >> 0] | HEAPU8[i16 + 1 >> 0] << 8) & 65280) >> 8 | ((HEAPU8[i15 >> 0] | HEAPU8[i15 + 1 >> 0] << 8) & 255) << 8;
  i15 = HEAPU16[i9 >> 1] << 1 & 65535;
  i16 = (HEAP32[i8 >> 2] | 0) + 22 | 0;
  HEAP8[i16 >> 0] = i15;
  HEAP8[i16 + 1 >> 0] = i15 >> 8;
  i16 = (HEAP32[i8 >> 2] | 0) + 26 | 0;
  i15 = i16 | 0;
  i16 = i16 | 0;
  HEAP16[i9 >> 1] = ((HEAPU8[i15 >> 0] | HEAPU8[i15 + 1 >> 0] << 8) & 65280) >> 8 | ((HEAPU8[i16 >> 0] | HEAPU8[i16 + 1 >> 0] << 8) & 255) << 8;
  i16 = HEAPU16[i9 >> 1] << 1 & 65535;
  i15 = (HEAP32[i8 >> 2] | 0) + 26 | 0;
  HEAP8[i15 >> 0] = i16;
  HEAP8[i15 + 1 >> 0] = i16 >> 8;
  i15 = (HEAP32[i8 >> 2] | 0) + 28 | 0;
  i16 = i15 | 0;
  i15 = i15 | 0;
  HEAP16[i9 >> 1] = ((HEAPU8[i16 >> 0] | HEAPU8[i16 + 1 >> 0] << 8) & 65280) >> 8 | ((HEAPU8[i15 >> 0] | HEAPU8[i15 + 1 >> 0] << 8) & 255) << 8;
  i15 = HEAPU16[i9 >> 1] << 1 & 65535;
  i16 = (HEAP32[i8 >> 2] | 0) + 28 | 0;
  HEAP8[i16 >> 0] = i15;
  HEAP8[i16 + 1 >> 0] = i15 >> 8;
  i16 = (HEAP32[i8 >> 2] | 0) + 22 | 0;
  if ((HEAPU8[i16 >> 0] | HEAPU8[i16 + 1 >> 0] << 8) & 65535 | 0) {
   HEAP32[(HEAP32[i12 >> 2] | 0) + 1088 + (HEAPU16[i11 >> 1] << 2) >> 2] = HEAP32[i7 >> 2];
   i16 = (HEAP32[i8 >> 2] | 0) + 22 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + ((HEAPU8[i16 >> 0] | HEAPU8[i16 + 1 >> 0] << 8) & 65535);
   i16 = HEAP32[i8 >> 2] | 0;
   i6 = i16 + 28 | 0;
   i15 = i16 + 26 | 0;
   i16 = i16 + 22 | 0;
   if ((((HEAPU8[i6 >> 0] | HEAPU8[i6 + 1 >> 0] << 8) & 65535) + ((HEAPU8[i15 >> 0] | HEAPU8[i15 + 1 >> 0] << 8) & 65535) | 0) > ((HEAPU8[i16 >> 0] | HEAPU8[i16 + 1 >> 0] << 8) & 65535 | 0)) {
    i16 = HEAP32[i8 >> 2] | 0;
    i6 = i16 + 22 | 0;
    i15 = i16 + 26 | 0;
    i15 = ((HEAPU8[i6 >> 0] | HEAPU8[i6 + 1 >> 0] << 8) & 65535) - ((HEAPU8[i15 >> 0] | HEAPU8[i15 + 1 >> 0] << 8) & 65535) & 65535;
    i16 = i16 + 28 | 0;
    HEAP8[i16 >> 0] = i15;
    HEAP8[i16 + 1 >> 0] = i15 >> 8;
   }
   if ((HEAP32[i7 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) {
    i10 = 29;
    break;
   }
  }
  HEAP16[i11 >> 1] = (HEAP16[i11 >> 1] | 0) + 1 << 16 >> 16;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 30;
 }
 if ((i10 | 0) == 29) {
  HEAP8[i13 >> 0] = 0;
  i16 = HEAP8[i13 >> 0] | 0;
  i16 = i16 & 1;
  STACKTOP = i14;
  return i16 | 0;
 }
 HEAP16[(HEAP32[i12 >> 2] | 0) + 1728 >> 1] = 0;
 HEAP16[(HEAP32[i12 >> 2] | 0) + 1730 >> 1] = 0;
 HEAP8[(HEAP32[i12 >> 2] | 0) + 1084 >> 0] = 6;
 HEAP8[(HEAP32[i12 >> 2] | 0) + 1736 >> 0] = 125;
 HEAP32[(HEAP32[i12 >> 2] | 0) + 1756 >> 2] = 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i16 = (Math_imul(HEAPU8[i16 + 1084 >> 0] | 0, HEAP32[i16 + 1724 >> 2] | 0) | 0) * 5 | 0;
 i15 = HEAP32[i12 >> 2] | 0;
 HEAP32[i15 + 1740 >> 2] = ((i16 >>> 0) / (HEAPU8[i15 + 1736 >> 0] << 1 >>> 0) | 0) + 1;
 i15 = HEAP32[i12 >> 2] | 0;
 i15 = (Math_imul(HEAPU8[i15 + 1084 >> 0] | 0, HEAP32[i15 + 1724 >> 2] | 0) | 0) * 5 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 HEAP32[i16 + 1748 >> 2] = (i15 >>> 0) / (HEAPU8[i16 + 1736 >> 0] << 1 >>> 0) | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 HEAP32[i16 + 1752 >> 2] = 3546894 / ((HEAP32[i16 + 1724 >> 2] | 0) >>> 0) | 0;
 HEAP16[i11 >> 1] = 0;
 while (1) {
  i1 = HEAP32[i12 >> 2] | 0;
  if ((HEAPU16[i11 >> 1] | 0) >= (HEAPU16[(HEAP32[i12 >> 2] | 0) + 3552 >> 1] | 0)) break;
  HEAP8[i1 + 1760 + ((HEAPU16[i11 >> 1] | 0) * 56 | 0) + 18 >> 0] = 0;
  HEAP16[(HEAP32[i12 >> 2] | 0) + 1760 + ((HEAPU16[i11 >> 1] | 0) * 56 | 0) + 16 >> 1] = 0;
  HEAP16[i11 >> 1] = (HEAP16[i11 >> 1] | 0) + 1 << 16 >> 16;
 }
 HEAP16[i1 + 5858 >> 1] = 1;
 HEAP8[i13 >> 0] = 1;
 i16 = HEAP8[i13 >> 0] | 0;
 i16 = i16 & 1;
 STACKTOP = i14;
 return i16 | 0;
}

function _dispose_chunk(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i2 + i3 | 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 do if (!(i1 & 1)) {
  i4 = HEAP32[i2 >> 2] | 0;
  if (!(i1 & 3)) return;
  i6 = i2 + (0 - i4) | 0;
  i7 = i4 + i3 | 0;
  if ((HEAP32[44179] | 0) == (i6 | 0)) {
   i2 = i9 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 & 3 | 0) != 3) {
    i8 = i6;
    i2 = i7;
    break;
   }
   HEAP32[44176] = i7;
   HEAP32[i2 >> 2] = i1 & -2;
   HEAP32[i6 + 4 >> 2] = i7 | 1;
   HEAP32[i9 >> 2] = i7;
   return;
  }
  i3 = i4 >>> 3;
  if (i4 >>> 0 < 256) {
   i1 = HEAP32[i6 + 8 >> 2] | 0;
   i2 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    HEAP32[44174] = HEAP32[44174] & ~(1 << i3);
    i8 = i6;
    i2 = i7;
    break;
   } else {
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i1;
    i8 = i6;
    i2 = i7;
    break;
   }
  }
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i3 = i6 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     break;
    } else i2 = i3;
   }
   while (1) {
    i4 = i1 + 20 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i4 = i1 + 16 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) break; else {
      i1 = i3;
      i2 = i4;
     }
    } else {
     i1 = i3;
     i2 = i4;
    }
   }
   HEAP32[i2 >> 2] = 0;
   i3 = i1;
  } else {
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i3 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i3;
   i3 = i1;
  } while (0);
  if (!i5) {
   i8 = i6;
   i2 = i7;
  } else {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   i2 = 177e3 + (i1 << 2) | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i2 >> 2] = i3;
    if (!i3) {
     HEAP32[44175] = HEAP32[44175] & ~(1 << i1);
     i8 = i6;
     i2 = i7;
     break;
    }
   } else {
    i8 = i5 + 16 | 0;
    HEAP32[((HEAP32[i8 >> 2] | 0) == (i6 | 0) ? i8 : i5 + 20 | 0) >> 2] = i3;
    if (!i3) {
     i8 = i6;
     i2 = i7;
     break;
    }
   }
   HEAP32[i3 + 24 >> 2] = i5;
   i2 = i6 + 16 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i1) {
    i8 = i6;
    i2 = i7;
   } else {
    HEAP32[i3 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
    i8 = i6;
    i2 = i7;
   }
  }
 } else {
  i8 = i2;
  i2 = i3;
 } while (0);
 i1 = i9 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!(i3 & 2)) {
  if ((HEAP32[44180] | 0) == (i9 | 0)) {
   i9 = (HEAP32[44177] | 0) + i2 | 0;
   HEAP32[44177] = i9;
   HEAP32[44180] = i8;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   if ((i8 | 0) != (HEAP32[44179] | 0)) return;
   HEAP32[44179] = 0;
   HEAP32[44176] = 0;
   return;
  }
  if ((HEAP32[44179] | 0) == (i9 | 0)) {
   i9 = (HEAP32[44176] | 0) + i2 | 0;
   HEAP32[44176] = i9;
   HEAP32[44179] = i8;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   HEAP32[i8 + i9 >> 2] = i9;
   return;
  }
  i6 = (i3 & -8) + i2 | 0;
  i4 = i3 >>> 3;
  do if (i3 >>> 0 < 256) {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[44174] = HEAP32[44174] & ~(1 << i4);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i5 = HEAP32[i9 + 24 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i9 | 0)) {
    i3 = i9 + 16 | 0;
    i2 = i3 + 4 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     } else i2 = i3;
    }
    while (1) {
     i4 = i1 + 20 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) {
      i4 = i1 + 16 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      if (!i3) break; else {
       i1 = i3;
       i2 = i4;
      }
     } else {
      i1 = i3;
      i2 = i4;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i9 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i5 | 0) {
    i1 = HEAP32[i9 + 28 >> 2] | 0;
    i2 = 177e3 + (i1 << 2) | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[44175] = HEAP32[44175] & ~(1 << i1);
      break;
     }
    } else {
     i7 = i5 + 16 | 0;
     HEAP32[((HEAP32[i7 >> 2] | 0) == (i9 | 0) ? i7 : i5 + 20 | 0) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i5;
    i2 = i9 + 16 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i2 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i8 + 4 >> 2] = i6 | 1;
  HEAP32[i8 + i6 >> 2] = i6;
  if ((i8 | 0) == (HEAP32[44179] | 0)) {
   HEAP32[44176] = i6;
   return;
  } else i2 = i6;
 } else {
  HEAP32[i1 >> 2] = i3 & -2;
  HEAP32[i8 + 4 >> 2] = i2 | 1;
  HEAP32[i8 + i2 >> 2] = i2;
 }
 i1 = i2 >>> 3;
 if (i2 >>> 0 < 256) {
  i3 = 176736 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[44174] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[44174] = i2 | i1;
   i1 = i3 + 8 | 0;
   i2 = i3;
  } else {
   i2 = i3 + 8 | 0;
   i1 = i2;
   i2 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i1 >> 2] = i8;
  HEAP32[i2 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i2;
  HEAP32[i8 + 12 >> 2] = i3;
  return;
 }
 i1 = i2 >>> 8;
 if (!i1) i5 = 0; else if (i2 >>> 0 > 16777215) i5 = 31; else {
  i7 = (i1 + 1048320 | 0) >>> 16 & 8;
  i9 = i1 << i7;
  i6 = (i9 + 520192 | 0) >>> 16 & 4;
  i9 = i9 << i6;
  i5 = (i9 + 245760 | 0) >>> 16 & 2;
  i5 = 14 - (i6 | i7 | i5) + (i9 << i5 >>> 15) | 0;
  i5 = i2 >>> (i5 + 7 | 0) & 1 | i5 << 1;
 }
 i3 = 177e3 + (i5 << 2) | 0;
 HEAP32[i8 + 28 >> 2] = i5;
 HEAP32[i8 + 20 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i1 = HEAP32[44175] | 0;
 i4 = 1 << i5;
 if (!(i1 & i4)) {
  HEAP32[44175] = i1 | i4;
  HEAP32[i3 >> 2] = i8;
  HEAP32[i8 + 24 >> 2] = i3;
  HEAP32[i8 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i8;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 L104 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i2 | 0)) {
  i5 = i2 << ((i5 | 0) == 31 ? 0 : 25 - (i5 >>> 1) | 0);
  while (1) {
   i4 = i1 + 16 + (i5 >>> 31 << 2) | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   if (!i3) break;
   if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i2 | 0)) {
    i1 = i3;
    break L104;
   } else {
    i5 = i5 << 1;
    i1 = i3;
   }
  }
  HEAP32[i4 >> 2] = i8;
  HEAP32[i8 + 24 >> 2] = i1;
  HEAP32[i8 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i8;
  return;
 } while (0);
 i7 = i1 + 8 | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 HEAP32[i9 + 12 >> 2] = i8;
 HEAP32[i7 >> 2] = i8;
 HEAP32[i8 + 8 >> 2] = i9;
 HEAP32[i8 + 12 >> 2] = i1;
 HEAP32[i8 + 24 >> 2] = 0;
 return;
}

function _stbv_imdct_step3_inner_r_loop(i13, i5, i4, i12, i2, i10) {
 i13 = i13 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, f19 = f0, f20 = f0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i15 = i1 + 40 | 0;
 i18 = i1 + 36 | 0;
 i17 = i1 + 32 | 0;
 i16 = i1 + 28 | 0;
 i3 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i15 >> 2] = i13;
 HEAP32[i18 >> 2] = i5;
 HEAP32[i17 >> 2] = i4;
 HEAP32[i16 >> 2] = i12;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i6 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i17 >> 2] << 2);
 HEAP32[i1 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i16 >> 2] << 2);
 HEAP32[i7 >> 2] = HEAP32[i15 >> 2] >> 2;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) <= 0) break;
  f19 = Math_fround(HEAPF32[HEAP32[i6 >> 2] >> 2]);
  f19 = Math_fround(f19 - Math_fround(HEAPF32[HEAP32[i1 >> 2] >> 2]));
  HEAPF32[i8 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -4 >> 2]);
  f19 = Math_fround(f19 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -4 >> 2]));
  HEAPF32[i9 >> 2] = f19;
  f19 = Math_fround(HEAPF32[HEAP32[i1 >> 2] >> 2]);
  i18 = HEAP32[i6 >> 2] | 0;
  f19 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f19);
  HEAPF32[i18 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -4 >> 2]);
  i18 = (HEAP32[i6 >> 2] | 0) + -4 | 0;
  f19 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f19);
  HEAPF32[i18 >> 2] = f19;
  f19 = Math_fround(HEAPF32[i8 >> 2]);
  f19 = Math_fround(f19 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f20 = Math_fround(HEAPF32[i9 >> 2]);
  f20 = Math_fround(f19 - Math_fround(f20 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[HEAP32[i1 >> 2] >> 2] = f20;
  f20 = Math_fround(HEAPF32[i9 >> 2]);
  f20 = Math_fround(f20 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f19 = Math_fround(HEAPF32[i8 >> 2]);
  f19 = Math_fround(f20 + Math_fround(f19 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -4 >> 2] = f19;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i11 >> 2] << 2);
  f19 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -8 >> 2]);
  f19 = Math_fround(f19 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -8 >> 2]));
  HEAPF32[i8 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -12 >> 2]);
  f19 = Math_fround(f19 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -12 >> 2]));
  HEAPF32[i9 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -8 >> 2]);
  i18 = (HEAP32[i6 >> 2] | 0) + -8 | 0;
  f19 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f19);
  HEAPF32[i18 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -12 >> 2]);
  i18 = (HEAP32[i6 >> 2] | 0) + -12 | 0;
  f19 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f19);
  HEAPF32[i18 >> 2] = f19;
  f19 = Math_fround(HEAPF32[i8 >> 2]);
  f19 = Math_fround(f19 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f20 = Math_fround(HEAPF32[i9 >> 2]);
  f20 = Math_fround(f19 - Math_fround(f20 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -8 >> 2] = f20;
  f20 = Math_fround(HEAPF32[i9 >> 2]);
  f20 = Math_fround(f20 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f19 = Math_fround(HEAPF32[i8 >> 2]);
  f19 = Math_fround(f20 + Math_fround(f19 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] = f19;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i11 >> 2] << 2);
  f19 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -16 >> 2]);
  f19 = Math_fround(f19 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -16 >> 2]));
  HEAPF32[i8 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -20 >> 2]);
  f19 = Math_fround(f19 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -20 >> 2]));
  HEAPF32[i9 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -16 >> 2]);
  i18 = (HEAP32[i6 >> 2] | 0) + -16 | 0;
  f19 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f19);
  HEAPF32[i18 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -20 >> 2]);
  i18 = (HEAP32[i6 >> 2] | 0) + -20 | 0;
  f19 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f19);
  HEAPF32[i18 >> 2] = f19;
  f19 = Math_fround(HEAPF32[i8 >> 2]);
  f19 = Math_fround(f19 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f20 = Math_fround(HEAPF32[i9 >> 2]);
  f20 = Math_fround(f19 - Math_fround(f20 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -16 >> 2] = f20;
  f20 = Math_fround(HEAPF32[i9 >> 2]);
  f20 = Math_fround(f20 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f19 = Math_fround(HEAPF32[i8 >> 2]);
  f19 = Math_fround(f20 + Math_fround(f19 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -20 >> 2] = f19;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i11 >> 2] << 2);
  f19 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -24 >> 2]);
  f19 = Math_fround(f19 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -24 >> 2]));
  HEAPF32[i8 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -28 >> 2]);
  f19 = Math_fround(f19 - Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -28 >> 2]));
  HEAPF32[i9 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -24 >> 2]);
  i18 = (HEAP32[i6 >> 2] | 0) + -24 | 0;
  f19 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f19);
  HEAPF32[i18 >> 2] = f19;
  f19 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + -28 >> 2]);
  i18 = (HEAP32[i6 >> 2] | 0) + -28 | 0;
  f19 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f19);
  HEAPF32[i18 >> 2] = f19;
  f19 = Math_fround(HEAPF32[i8 >> 2]);
  f19 = Math_fround(f19 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f20 = Math_fround(HEAPF32[i9 >> 2]);
  f20 = Math_fround(f19 - Math_fround(f20 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -24 >> 2] = f20;
  f20 = Math_fround(HEAPF32[i9 >> 2]);
  f20 = Math_fround(f20 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f19 = Math_fround(HEAPF32[i8 >> 2]);
  f19 = Math_fround(f20 + Math_fround(f19 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i1 >> 2] | 0) + -28 >> 2] = f19;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -32;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -32;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i11 >> 2] << 2);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 }
 STACKTOP = i14;
 return;
}

function _ProcessGestureEvent(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0, d11 = 0.0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i9 + 32 | 0;
 i6 = i9 + 24 | 0;
 i1 = i9 + 16 | 0;
 i3 = i9 + 8 | 0;
 i2 = i9;
 HEAP32[44019] = HEAP32[i5 + 4 >> 2];
 i4 = (HEAP32[i5 >> 2] | 0) == 1;
 if ((HEAP32[44019] | 0) >= 2) {
  if (i4) {
   i8 = i5 + 24 | 0;
   HEAP32[44021] = HEAP32[i8 >> 2];
   HEAP32[44022] = HEAP32[i8 + 4 >> 2];
   i8 = i5 + 24 + 8 | 0;
   HEAP32[44032] = HEAP32[i8 >> 2];
   HEAP32[44033] = HEAP32[i8 + 4 >> 2];
   HEAP32[44018] = 4;
   +_GetCurrentTime();
   STACKTOP = i9;
   return;
  }
  if ((HEAP32[i5 >> 2] | 0) != 2) {
   if (HEAP32[i5 >> 2] | 0) {
    STACKTOP = i9;
    return;
   }
   HEAPF32[44036] = Math_fround(0.0);
   HEAPF32[i2 >> 2] = Math_fround(0.0);
   HEAPF32[i2 + 4 >> 2] = Math_fround(0.0);
   HEAP32[44019] = 0;
   HEAP32[44018] = 0;
   STACKTOP = i9;
   return;
  };
  HEAP32[i6 >> 2] = HEAP32[44030];
  HEAP32[i6 + 4 >> 2] = HEAP32[44031];
  HEAP32[i7 >> 2] = HEAP32[44034];
  HEAP32[i7 + 4 >> 2] = HEAP32[44035];
  f10 = Math_fround(_Vector2Distance(i6, i7));
  HEAPF32[44036] = f10;
  HEAP32[44021] = HEAP32[44030];
  HEAP32[44022] = HEAP32[44031];
  HEAP32[44032] = HEAP32[44034];
  HEAP32[44033] = HEAP32[44035];
  i4 = i5 + 24 | 0;
  HEAP32[44030] = HEAP32[i4 >> 2];
  HEAP32[44031] = HEAP32[i4 + 4 >> 2];
  i5 = i5 + 24 + 8 | 0;
  HEAP32[44034] = HEAP32[i5 >> 2];
  HEAP32[44035] = HEAP32[i5 + 4 >> 2];
  HEAP32[i6 >> 2] = HEAP32[44021];
  HEAP32[i6 + 4 >> 2] = HEAP32[44022];
  HEAP32[i7 >> 2] = HEAP32[44030];
  HEAP32[i7 + 4 >> 2] = HEAP32[44031];
  if (Math_fround(_Vector2Distance(i6, i7)) >= Math_fround(.00499999989)) i8 = 41; else {
   HEAP32[i6 >> 2] = HEAP32[44032];
   HEAP32[i6 + 4 >> 2] = HEAP32[44033];
   HEAP32[i7 >> 2] = HEAP32[44034];
   HEAP32[i7 + 4 >> 2] = HEAP32[44035];
   if (Math_fround(_Vector2Distance(i6, i7)) >= Math_fround(.00499999989)) i8 = 41; else {
    HEAP32[44018] = 4;
    +_GetCurrentTime();
   }
  }
  do if ((i8 | 0) == 41) {
   HEAP32[i6 >> 2] = HEAP32[44030];
   HEAP32[i6 + 4 >> 2] = HEAP32[44031];
   HEAP32[i7 >> 2] = HEAP32[44034];
   HEAP32[i7 + 4 >> 2] = HEAP32[44035];
   f10 = Math_fround(_Vector2Distance(i6, i7));
   if (Math_fround(f10 - Math_fround(HEAPF32[44036])) < Math_fround(0.0)) {
    HEAP32[44018] = 256;
    break;
   } else {
    HEAP32[44018] = 512;
    break;
   }
  } while (0);
  HEAP32[i6 >> 2] = HEAP32[44030];
  HEAP32[i6 + 4 >> 2] = HEAP32[44031];
  HEAP32[i7 >> 2] = HEAP32[44034];
  HEAP32[i7 + 4 >> 2] = HEAP32[44035];
  Math_fround(_Vector2Angle(i6, i7));
  STACKTOP = i9;
  return;
 }
 if (i4) {
  HEAP32[44020] = (HEAP32[44020] | 0) + 1;
  if ((HEAP32[44018] | 0) == 0 & (HEAP32[44020] | 0) >= 2) {
   d11 = +_GetCurrentTime();
   if (d11 - +HEAPF64[21922] < 300.0) {
    i4 = i5 + 24 | 0;
    HEAP32[i6 >> 2] = HEAP32[44021];
    HEAP32[i6 + 4 >> 2] = HEAP32[44022];
    HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
    if (Math_fround(_Vector2Distance(i6, i7)) < Math_fround(.0299999993)) {
     HEAP32[44018] = 2;
     HEAP32[44020] = 0;
    } else i8 = 7;
   } else i8 = 7;
  } else i8 = 7;
  if ((i8 | 0) == 7) {
   HEAP32[44020] = 1;
   HEAP32[44018] = 1;
  }
  i8 = i5 + 24 | 0;
  HEAP32[44021] = HEAP32[i8 >> 2];
  HEAP32[44022] = HEAP32[i8 + 4 >> 2];
  i8 = i5 + 24 | 0;
  HEAP32[44023] = HEAP32[i8 >> 2];
  HEAP32[44024] = HEAP32[i8 + 4 >> 2];
  HEAP32[44025] = HEAP32[44021];
  HEAP32[44026] = HEAP32[44022];
  d11 = +_GetCurrentTime();
  HEAPF64[21922] = d11;
  HEAP32[7870] = HEAP32[i5 + 8 >> 2];
  HEAPF32[i1 >> 2] = Math_fround(0.0);
  HEAPF32[i1 + 4 >> 2] = Math_fround(0.0);
  STACKTOP = i9;
  return;
 }
 if (HEAP32[i5 >> 2] | 0) {
  if ((HEAP32[i5 >> 2] | 0) != 2) {
   STACKTOP = i9;
   return;
  }
  if ((HEAP32[44018] | 0) == 8) {
   d11 = +_GetCurrentTime();
   HEAPF64[21922] = d11;
  }
  if (!(HEAP8[177212] & 1)) {
   d11 = +_GetCurrentTime();
   HEAPF64[21923] = d11;
   HEAP8[177212] = 1;
  }
  i8 = i5 + 24 | 0;
  HEAP32[44030] = HEAP32[i8 >> 2];
  HEAP32[44031] = HEAP32[i8 + 4 >> 2];
  if ((HEAP32[44018] | 0) == 4) {
   if (HEAP8[177213] & 1) {
    i8 = i5 + 24 | 0;
    HEAP32[44021] = HEAP32[i8 >> 2];
    HEAP32[44022] = HEAP32[i8 + 4 >> 2];
   }
   HEAP8[177213] = 0;
   HEAP32[i6 >> 2] = HEAP32[44021];
   HEAP32[i6 + 4 >> 2] = HEAP32[44022];
   HEAP32[i7 >> 2] = HEAP32[44030];
   HEAP32[i7 + 4 >> 2] = HEAP32[44031];
   if (Math_fround(_Vector2Distance(i6, i7)) >= Math_fround(.0149999997)) {
    d11 = +_GetCurrentTime();
    HEAPF64[21922] = d11;
    HEAP32[44018] = 8;
   }
  }
  STACKTOP = i9;
  return;
 }
 if ((HEAP32[44018] | 0) == 8) {
  i4 = i5 + 24 | 0;
  HEAP32[44025] = HEAP32[i4 >> 2];
  HEAP32[44026] = HEAP32[i4 + 4 >> 2];
 };
 HEAP32[i6 >> 2] = HEAP32[44021];
 HEAP32[i6 + 4 >> 2] = HEAP32[44022];
 HEAP32[i7 >> 2] = HEAP32[44025];
 HEAP32[i7 + 4 >> 2] = HEAP32[44026];
 f10 = Math_fround(_Vector2Distance(i6, i7));
 HEAPF32[44027] = f10;
 f10 = Math_fround(HEAPF32[44027]);
 d11 = +_GetCurrentTime();
 f10 = Math_fround(f10 / Math_fround(d11 - +HEAPF64[21923]));
 HEAPF32[44028] = f10;
 HEAP8[177212] = 0;
 do if (Math_fround(HEAPF32[44028]) > Math_fround(.000500000024)) if ((HEAP32[7870] | 0) == (HEAP32[i5 + 8 >> 2] | 0)) {
  HEAP32[i6 >> 2] = HEAP32[44021];
  HEAP32[i6 + 4 >> 2] = HEAP32[44022];
  HEAP32[i7 >> 2] = HEAP32[44025];
  HEAP32[i7 + 4 >> 2] = HEAP32[44026];
  f10 = Math_fround(Math_fround(360.0) - Math_fround(_Vector2Angle(i6, i7)));
  HEAPF32[44029] = f10;
  i7 = Math_fround(HEAPF32[44029]) < Math_fround(30.0);
  if (i7 | Math_fround(HEAPF32[44029]) > Math_fround(330.0)) {
   HEAP32[44018] = 16;
   break;
  }
  i7 = Math_fround(HEAPF32[44029]) > Math_fround(30.0);
  if (i7 & Math_fround(HEAPF32[44029]) < Math_fround(120.0)) {
   HEAP32[44018] = 64;
   break;
  }
  i7 = Math_fround(HEAPF32[44029]) > Math_fround(120.0);
  if (i7 & Math_fround(HEAPF32[44029]) < Math_fround(210.0)) {
   HEAP32[44018] = 32;
   break;
  }
  i7 = Math_fround(HEAPF32[44029]) > Math_fround(210.0);
  if (i7 & Math_fround(HEAPF32[44029]) < Math_fround(300.0)) {
   HEAP32[44018] = 128;
   break;
  } else {
   HEAP32[44018] = 0;
   break;
  }
 } else i8 = 23; else i8 = 23; while (0);
 if ((i8 | 0) == 23) {
  HEAPF32[44027] = Math_fround(0.0);
  HEAPF32[44028] = Math_fround(0.0);
  HEAPF32[44029] = Math_fround(0.0);
  HEAP32[44018] = 0;
 }
 HEAPF32[i3 >> 2] = Math_fround(0.0);
 HEAPF32[i3 + 4 >> 2] = Math_fround(0.0);
 HEAP32[44023] = HEAP32[i3 >> 2];
 HEAP32[44024] = HEAP32[i3 + 4 >> 2];
 HEAP32[44019] = 0;
 STACKTOP = i9;
 return;
}

function _stbv_imdct_step3_iter0_loop(i11, i4, i8, i10, i2) {
 i11 = i11 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0, f18 = f0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i1 + 36 | 0;
 i16 = i1 + 32 | 0;
 i15 = i1 + 28 | 0;
 i14 = i1 + 24 | 0;
 i3 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i16 >> 2] = i4;
 HEAP32[i15 >> 2] = i8;
 HEAP32[i14 >> 2] = i10;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i15 >> 2] << 2);
 HEAP32[i6 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i14 >> 2] << 2);
 if (HEAP32[i12 >> 2] & 3 | 0) ___assert_fail(47423, 47181, 2410, 47436);
 HEAP32[i7 >> 2] = HEAP32[i12 >> 2] >> 2;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) <= 0) break;
  f17 = Math_fround(HEAPF32[HEAP32[i5 >> 2] >> 2]);
  f17 = Math_fround(f17 - Math_fround(HEAPF32[HEAP32[i6 >> 2] >> 2]));
  HEAPF32[i9 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + -4 >> 2]);
  f17 = Math_fround(f17 - Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -4 >> 2]));
  HEAPF32[i1 >> 2] = f17;
  f17 = Math_fround(HEAPF32[HEAP32[i6 >> 2] >> 2]);
  i16 = HEAP32[i5 >> 2] | 0;
  f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
  HEAPF32[i16 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -4 >> 2]);
  i16 = (HEAP32[i5 >> 2] | 0) + -4 | 0;
  f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
  HEAPF32[i16 >> 2] = f17;
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  f17 = Math_fround(f17 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f18 = Math_fround(HEAPF32[i1 >> 2]);
  f18 = Math_fround(f17 - Math_fround(f18 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[HEAP32[i6 >> 2] >> 2] = f18;
  f18 = Math_fround(HEAPF32[i1 >> 2]);
  f18 = Math_fround(f18 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  f17 = Math_fround(f18 + Math_fround(f17 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i6 >> 2] | 0) + -4 >> 2] = f17;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 32;
  f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + -8 >> 2]);
  f17 = Math_fround(f17 - Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -8 >> 2]));
  HEAPF32[i9 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + -12 >> 2]);
  f17 = Math_fround(f17 - Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -12 >> 2]));
  HEAPF32[i1 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -8 >> 2]);
  i16 = (HEAP32[i5 >> 2] | 0) + -8 | 0;
  f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
  HEAPF32[i16 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -12 >> 2]);
  i16 = (HEAP32[i5 >> 2] | 0) + -12 | 0;
  f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
  HEAPF32[i16 >> 2] = f17;
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  f17 = Math_fround(f17 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f18 = Math_fround(HEAPF32[i1 >> 2]);
  f18 = Math_fround(f17 - Math_fround(f18 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i6 >> 2] | 0) + -8 >> 2] = f18;
  f18 = Math_fround(HEAPF32[i1 >> 2]);
  f18 = Math_fround(f18 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  f17 = Math_fround(f18 + Math_fround(f17 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] = f17;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 32;
  f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + -16 >> 2]);
  f17 = Math_fround(f17 - Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -16 >> 2]));
  HEAPF32[i9 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + -20 >> 2]);
  f17 = Math_fround(f17 - Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -20 >> 2]));
  HEAPF32[i1 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -16 >> 2]);
  i16 = (HEAP32[i5 >> 2] | 0) + -16 | 0;
  f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
  HEAPF32[i16 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -20 >> 2]);
  i16 = (HEAP32[i5 >> 2] | 0) + -20 | 0;
  f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
  HEAPF32[i16 >> 2] = f17;
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  f17 = Math_fround(f17 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f18 = Math_fround(HEAPF32[i1 >> 2]);
  f18 = Math_fround(f17 - Math_fround(f18 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i6 >> 2] | 0) + -16 >> 2] = f18;
  f18 = Math_fround(HEAPF32[i1 >> 2]);
  f18 = Math_fround(f18 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  f17 = Math_fround(f18 + Math_fround(f17 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i6 >> 2] | 0) + -20 >> 2] = f17;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 32;
  f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + -24 >> 2]);
  f17 = Math_fround(f17 - Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -24 >> 2]));
  HEAPF32[i9 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + -28 >> 2]);
  f17 = Math_fround(f17 - Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -28 >> 2]));
  HEAPF32[i1 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -24 >> 2]);
  i16 = (HEAP32[i5 >> 2] | 0) + -24 | 0;
  f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
  HEAPF32[i16 >> 2] = f17;
  f17 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + -28 >> 2]);
  i16 = (HEAP32[i5 >> 2] | 0) + -28 | 0;
  f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
  HEAPF32[i16 >> 2] = f17;
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  f17 = Math_fround(f17 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f18 = Math_fround(HEAPF32[i1 >> 2]);
  f18 = Math_fround(f17 - Math_fround(f18 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i6 >> 2] | 0) + -24 >> 2] = f18;
  f18 = Math_fround(HEAPF32[i1 >> 2]);
  f18 = Math_fround(f18 * Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]));
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  f17 = Math_fround(f18 + Math_fround(f17 * Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2])));
  HEAPF32[(HEAP32[i6 >> 2] | 0) + -28 >> 2] = f17;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 32;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -32;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -32;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 }
 STACKTOP = i13;
 return;
}

function _LoadFontDefault() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, f26 = f0;
 i25 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 3120 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(3120);
 i17 = i1 + 3080 | 0;
 i16 = i1 + 3060 | 0;
 i24 = i1 + 2944 | 0;
 i12 = i1 + 896 | 0;
 i7 = i1 + 3056 | 0;
 i6 = i1 + 3052 | 0;
 i8 = i1;
 i19 = i1 + 3048 | 0;
 i18 = i1 + 3044 | 0;
 i20 = i1 + 3040 | 0;
 i3 = i1 + 3036 | 0;
 i2 = i1 + 3104 | 0;
 i9 = i1 + 3032 | 0;
 i13 = i1 + 3028 | 0;
 i21 = i1 + 3024 | 0;
 i5 = i1 + 3100 | 0;
 i15 = i1 + 3004 | 0;
 i23 = i1 + 2984 | 0;
 i10 = i1 + 2980 | 0;
 i11 = i1 + 2976 | 0;
 i22 = i1 + 2972 | 0;
 i14 = i1 + 2968 | 0;
 i4 = i1 + 2948 | 0;
 HEAP32[44143] = 224;
 _memcpy(i12 | 0, 23040, 2048) | 0;
 HEAP32[i7 >> 2] = 10;
 HEAP32[i6 >> 2] = 1;
 _memcpy(i8 | 0, 25088, 896) | 0;
 HEAP32[i19 >> 2] = 128;
 HEAP32[i18 >> 2] = 128;
 i1 = _malloc((Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0) << 2) | 0;
 HEAP32[i20 >> 2] = i1;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0)) break;
  i1 = (HEAP32[i20 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) | 0;
  HEAP8[i2 >> 0] = 0;
  HEAP8[i2 + 1 >> 0] = 0;
  HEAP8[i2 + 2 >> 0] = 0;
  HEAP8[i2 + 3 >> 0] = 0;
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  HEAP8[i1 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
  HEAP8[i1 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
  HEAP8[i1 + 3 >> 0] = HEAP8[i2 + 3 >> 0] | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 HEAP32[i9 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) >= (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0)) break;
  HEAP32[i21 >> 2] = 31;
  while (1) {
   i1 = HEAP32[i9 >> 2] | 0;
   if ((HEAP32[i21 >> 2] | 0) < 0) break;
   if (HEAP32[i12 + (i1 << 2) >> 2] & 1 << HEAP32[i21 >> 2] | 0) {
    i3 = (HEAP32[i20 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) << 2) | 0;
    HEAP8[i5 >> 0] = -1;
    HEAP8[i5 + 1 >> 0] = -1;
    HEAP8[i5 + 2 >> 0] = -1;
    HEAP8[i5 + 3 >> 0] = -1;
    HEAP8[i3 >> 0] = HEAP8[i5 >> 0] | 0;
    HEAP8[i3 + 1 >> 0] = HEAP8[i5 + 1 >> 0] | 0;
    HEAP8[i3 + 2 >> 0] = HEAP8[i5 + 2 >> 0] | 0;
    HEAP8[i3 + 3 >> 0] = HEAP8[i5 + 3 >> 0] | 0;
   }
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
  }
  i3 = i1 + 1 | 0;
  HEAP32[i9 >> 2] = i3;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) > 512 ? 0 : i3;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 32;
 }
 _LoadImageEx(i15, HEAP32[i20 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0);
 _ImageFormat(i15, 2);
 _free(HEAP32[i20 >> 2] | 0);
 HEAP32[i17 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 HEAP32[i17 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
 _LoadTextureFromImage(i23, i17);
 HEAP32[44144] = HEAP32[i23 >> 2];
 HEAP32[44145] = HEAP32[i23 + 4 >> 2];
 HEAP32[44146] = HEAP32[i23 + 8 >> 2];
 HEAP32[44147] = HEAP32[i23 + 12 >> 2];
 HEAP32[44148] = HEAP32[i23 + 16 >> 2];
 i23 = _malloc((HEAP32[44143] | 0) * 36 | 0) | 0;
 HEAP32[44150] = i23;
 i23 = _malloc(HEAP32[44143] << 4) | 0;
 HEAP32[44149] = i23;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i22 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i14 >> 2] = 0;
 while (1) {
  if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[44143] | 0)) break;
  i23 = HEAP32[i14 >> 2] | 0;
  HEAP32[(HEAP32[44150] | 0) + ((i23 | 0) * 36 | 0) >> 2] = 32 + (i23 | 0);
  f26 = Math_fround(HEAP32[i11 >> 2] | 0);
  HEAPF32[(HEAP32[44149] | 0) + (HEAP32[i14 >> 2] << 4) >> 2] = f26;
  i23 = HEAP32[i6 >> 2] | 0;
  f26 = Math_fround(i23 + (Math_imul(HEAP32[i10 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + i23 | 0) | 0) | 0);
  HEAPF32[(HEAP32[44149] | 0) + (HEAP32[i14 >> 2] << 4) + 4 >> 2] = f26;
  f26 = Math_fround(HEAP32[i8 + (HEAP32[i14 >> 2] << 2) >> 2] | 0);
  HEAPF32[(HEAP32[44149] | 0) + (HEAP32[i14 >> 2] << 4) + 8 >> 2] = f26;
  f26 = Math_fround(HEAP32[i7 >> 2] | 0);
  HEAPF32[(HEAP32[44149] | 0) + (HEAP32[i14 >> 2] << 4) + 12 >> 2] = f26;
  f26 = Math_fround(HEAPF32[(HEAP32[44149] | 0) + (HEAP32[i14 >> 2] << 4) + 8 >> 2]);
  i23 = ~~Math_fround(f26 + Math_fround(HEAP32[i6 >> 2] | 0));
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + i23;
  if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[44145] | 0)) {
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   HEAP32[i11 >> 2] = (HEAP32[i6 >> 2] << 1) + (HEAP32[i8 + (HEAP32[i14 >> 2] << 2) >> 2] | 0);
   HEAP32[i22 >> 2] = HEAP32[i11 >> 2];
   f26 = Math_fround(HEAP32[i6 >> 2] | 0);
   HEAPF32[(HEAP32[44149] | 0) + (HEAP32[i14 >> 2] << 4) >> 2] = f26;
   i23 = HEAP32[i6 >> 2] | 0;
   f26 = Math_fround(i23 + (Math_imul(HEAP32[i10 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + i23 | 0) | 0) | 0);
   HEAPF32[(HEAP32[44149] | 0) + (HEAP32[i14 >> 2] << 4) + 4 >> 2] = f26;
  } else HEAP32[i11 >> 2] = HEAP32[i22 >> 2];
  HEAP32[(HEAP32[44150] | 0) + ((HEAP32[i14 >> 2] | 0) * 36 | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[44150] | 0) + ((HEAP32[i14 >> 2] | 0) * 36 | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[44150] | 0) + ((HEAP32[i14 >> 2] | 0) * 36 | 0) + 12 >> 2] = 0;
  i23 = (HEAP32[44150] | 0) + ((HEAP32[i14 >> 2] | 0) * 36 | 0) + 16 | 0;
  i21 = (HEAP32[44149] | 0) + (HEAP32[i14 >> 2] << 4) | 0;
  HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
  HEAP32[i16 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
  HEAP32[i16 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
  HEAP32[i17 >> 2] = HEAP32[i21 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
  HEAP32[i17 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
  _ImageFromImage(i4, i16, i17);
  HEAP32[i23 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i23 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i23 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i23 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i23 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 }
 HEAP32[i17 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 HEAP32[i17 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
 _UnloadImage(i17);
 i23 = ~~Math_fround(HEAPF32[(HEAP32[44149] | 0) + 12 >> 2]);
 HEAP32[44142] = i23;
 HEAP32[i24 >> 2] = HEAP32[44144];
 _TraceLog(3, 51789, i24);
 STACKTOP = i25;
 return;
}

function _LoadFontData(i2, i6, i4, i1, i9) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, f31 = f0, f32 = f0;
 i30 = STACKTOP;
 i11 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i13 = i11 + 240 | 0;
 i10 = i11 + 8 | 0;
 i3 = i11 + 232 | 0;
 i23 = i11 + 228 | 0;
 i21 = i11 + 224 | 0;
 i17 = i11 + 220 | 0;
 i29 = i11 + 216 | 0;
 i16 = i11 + 212 | 0;
 i5 = i11 + 208 | 0;
 i8 = i11 + 204 | 0;
 i20 = i11 + 200 | 0;
 i22 = i11 + 76 | 0;
 i27 = i11 + 72 | 0;
 i14 = i11 + 68 | 0;
 i24 = i11 + 56 | 0;
 i7 = i11 + 52 | 0;
 i25 = i11 + 48 | 0;
 i19 = i11 + 44 | 0;
 i18 = i11 + 40 | 0;
 i15 = i11 + 36 | 0;
 i12 = i11 + 236 | 0;
 i28 = i11 + 16 | 0;
 i26 = i11 + 12 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i23 >> 2] = i6;
 HEAP32[i21 >> 2] = i4;
 HEAP32[i17 >> 2] = i1;
 HEAP32[i29 >> 2] = i9;
 HEAP32[i16 >> 2] = 0;
 i9 = _fopen(HEAP32[i3 >> 2] | 0, 53420) | 0;
 HEAP32[i5 >> 2] = i9;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
  _TraceLog(4, 52457, i10);
  i29 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 _fseek(HEAP32[i5 >> 2] | 0, 0, 2) | 0;
 i10 = _ftell(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i10;
 _fseek(HEAP32[i5 >> 2] | 0, 0, 0) | 0;
 i10 = _malloc(HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i20 >> 2] = i10;
 _fread(HEAP32[i20 >> 2] | 0, HEAP32[i8 >> 2] | 0, 1, HEAP32[i5 >> 2] | 0) | 0;
 _fclose(HEAP32[i5 >> 2] | 0) | 0;
 if (!(_stbtt_InitFont(i22, HEAP32[i20 >> 2] | 0, 0) | 0)) _TraceLog(4, 52436, i11);
 f31 = Math_fround(_stbtt_ScaleForPixelHeight(i22, Math_fround(HEAP32[i23 >> 2] | 0)));
 HEAPF32[i27 >> 2] = f31;
 _stbtt_GetFontVMetrics(i22, i14, i11 + 64 | 0, i11 + 60 | 0);
 i11 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = (i11 | 0) > 0 ? i11 | 0 : 95;
 HEAP32[i24 >> 2] = 0;
 if (!(HEAP32[i21 >> 2] | 0)) {
  i11 = _malloc(HEAP32[i17 >> 2] << 2) | 0;
  HEAP32[i21 >> 2] = i11;
  HEAP32[i7 >> 2] = 0;
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
   HEAP32[(HEAP32[i21 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] = (HEAP32[i7 >> 2] | 0) + 32;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  HEAP32[i24 >> 2] = 1;
 }
 i11 = _malloc((HEAP32[i17 >> 2] | 0) * 36 | 0) | 0;
 HEAP32[i16 >> 2] = i11;
 HEAP32[i25 >> 2] = 0;
 while (1) {
  if ((HEAP32[i25 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
  HEAP32[i19 >> 2] = 0;
  HEAP32[i18 >> 2] = 0;
  HEAP32[i15 >> 2] = HEAP32[(HEAP32[i21 >> 2] | 0) + (HEAP32[i25 >> 2] << 2) >> 2];
  HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) >> 2] = HEAP32[i15 >> 2];
  do if ((HEAP32[i29 >> 2] | 0) != 2) {
   f32 = Math_fround(HEAPF32[i27 >> 2]);
   f31 = Math_fround(HEAPF32[i27 >> 2]);
   i11 = (HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) | 0;
   i11 = _stbtt_GetCodepointBitmap(i22, f32, f31, HEAP32[i15 >> 2] | 0, i19, i18, i11 + 4 | 0, i11 + 8 | 0) | 0;
   HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 >> 2] = i11;
  } else if ((HEAP32[i15 >> 2] | 0) != 32) {
   f32 = Math_fround(HEAPF32[i27 >> 2]);
   i11 = (HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) | 0;
   i11 = _stbtt_GetCodepointSDF(i22, f32, HEAP32[i15 >> 2] | 0, 4, -128, Math_fround(64.0), i19, i18, i11 + 4 | 0, i11 + 8 | 0) | 0;
   HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 >> 2] = i11;
   break;
  } else {
   HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 >> 2] = 0;
   break;
  } while (0);
  _stbtt_GetCodepointHMetrics(i22, HEAP32[i15 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 12 | 0, 0);
  f32 = Math_fround(HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 12 >> 2] | 0);
  i10 = ~~Math_fround(f32 * Math_fround(HEAPF32[i27 >> 2]));
  HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 12 >> 2] = i10;
  HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 + 4 >> 2] = HEAP32[i19 >> 2];
  HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 + 8 >> 2] = HEAP32[i18 >> 2];
  HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 + 12 >> 2] = 1;
  HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 + 16 >> 2] = 1;
  f32 = Math_fround(HEAP32[i14 >> 2] | 0);
  i10 = ~~Math_fround(f32 * Math_fround(HEAPF32[i27 >> 2]));
  i11 = (HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 8 | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i10;
  if ((HEAP32[i15 >> 2] | 0) == 32) {
   i9 = (HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) | 0;
   i11 = i9 + 16 | 0;
   i9 = HEAP32[i9 + 12 >> 2] | 0;
   i10 = HEAP32[i23 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   HEAP8[i12 + 1 >> 0] = 0;
   HEAP8[i12 + 2 >> 0] = 0;
   HEAP8[i12 + 3 >> 0] = 0;
   HEAP8[i13 >> 0] = HEAP8[i12 >> 0] | 0;
   HEAP8[i13 + 1 >> 0] = HEAP8[i12 + 1 >> 0] | 0;
   HEAP8[i13 + 2 >> 0] = HEAP8[i12 + 2 >> 0] | 0;
   HEAP8[i13 + 3 >> 0] = HEAP8[i12 + 3 >> 0] | 0;
   _GenImageColor(i28, i9, i10, i13);
   HEAP32[i11 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i28 + 12 >> 2];
   HEAP32[i11 + 16 >> 2] = HEAP32[i28 + 16 >> 2];
   _ImageFormat((HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 | 0, 1);
  }
  L28 : do if ((HEAP32[i29 >> 2] | 0) == 1) {
   HEAP32[i26 >> 2] = 0;
   while (1) {
    if ((HEAP32[i26 >> 2] | 0) >= (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0)) break L28;
    i1 = (HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 >> 2] | 0) + (HEAP32[i26 >> 2] | 0) | 0;
    if ((HEAPU8[(HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 36 | 0) + 16 >> 2] | 0) + (HEAP32[i26 >> 2] | 0) >> 0] | 0) < 80) HEAP8[i1 >> 0] = 0; else HEAP8[i1 >> 0] = -1;
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
 }
 _free(HEAP32[i20 >> 2] | 0);
 if (!(HEAP32[i24 >> 2] | 0)) {
  i29 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 _free(HEAP32[i21 >> 2] | 0);
 i29 = HEAP32[i16 >> 2] | 0;
 STACKTOP = i30;
 return i29 | 0;
}

function _stbtt_FlattenCurves(i13, i6, f8, i1, i4, i12) {
 i13 = i13 | 0;
 i6 = i6 | 0;
 f8 = Math_fround(f8);
 i1 = i1 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, f30 = f0;
 i22 = STACKTOP;
 i17 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i21 = i17 + 60 | 0;
 i14 = i17 + 56 | 0;
 i7 = i17 + 52 | 0;
 i23 = i17 + 48 | 0;
 i18 = i17 + 44 | 0;
 i19 = i17 + 40 | 0;
 i20 = i17 + 32 | 0;
 i5 = i17 + 28 | 0;
 i9 = i17 + 24 | 0;
 i2 = i17 + 20 | 0;
 i3 = i17 + 16 | 0;
 i11 = i17 + 12 | 0;
 i10 = i17 + 8 | 0;
 i15 = i17 + 4 | 0;
 i16 = i17;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i7 >> 2] = i6;
 HEAPF32[i23 >> 2] = f8;
 HEAP32[i18 >> 2] = i1;
 HEAP32[i19 >> 2] = i4;
 HEAP32[i17 + 36 >> 2] = i12;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 f8 = Math_fround(HEAPF32[i23 >> 2]);
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i23 >> 2]));
 HEAPF32[i9 >> 2] = f8;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) == 1) HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[i19 >> 2] >> 2] = HEAP32[i3 >> 2];
 if (!(HEAP32[i3 >> 2] | 0)) {
  HEAP32[i21 >> 2] = 0;
  i23 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i22;
  return i23 | 0;
 }
 i23 = _malloc(HEAP32[i3 >> 2] << 2) | 0;
 HEAP32[HEAP32[i18 >> 2] >> 2] = i23;
 if (!(HEAP32[HEAP32[i18 >> 2] >> 2] | 0)) {
  HEAP32[HEAP32[i19 >> 2] >> 2] = 0;
  HEAP32[i21 >> 2] = 0;
  i23 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i22;
  return i23 | 0;
 }
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= 2) {
   i1 = 25;
   break;
  }
  HEAPF32[i15 >> 2] = Math_fround(0.0);
  HEAPF32[i16 >> 2] = Math_fround(0.0);
  if ((HEAP32[i10 >> 2] | 0) == 1) {
   i23 = _malloc(HEAP32[i5 >> 2] << 3) | 0;
   HEAP32[i20 >> 2] = i23;
   if (!(HEAP32[i20 >> 2] | 0)) {
    i1 = 26;
    break;
   }
  }
  HEAP32[i5 >> 2] = 0;
  HEAP32[i3 >> 2] = -1;
  HEAP32[i2 >> 2] = 0;
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
   switch (HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) {
   case 1:
    {
     if ((HEAP32[i3 >> 2] | 0) >= 0) HEAP32[(HEAP32[HEAP32[i18 >> 2] >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
     HEAP32[i11 >> 2] = HEAP32[i5 >> 2];
     f8 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[i15 >> 2] = f8;
     f8 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     HEAPF32[i16 >> 2] = f8;
     i17 = HEAP32[i20 >> 2] | 0;
     i23 = HEAP32[i5 >> 2] | 0;
     HEAP32[i5 >> 2] = i23 + 1;
     _stbtt__add_point(i17, i23, Math_fround(HEAPF32[i15 >> 2]), Math_fround(HEAPF32[i16 >> 2]));
     break;
    }
   case 2:
    {
     f8 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[i15 >> 2] = f8;
     f8 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     HEAPF32[i16 >> 2] = f8;
     i17 = HEAP32[i20 >> 2] | 0;
     i23 = HEAP32[i5 >> 2] | 0;
     HEAP32[i5 >> 2] = i23 + 1;
     _stbtt__add_point(i17, i23, Math_fround(HEAPF32[i15 >> 2]), Math_fround(HEAPF32[i16 >> 2]));
     break;
    }
   case 3:
    {
     f28 = Math_fround(HEAPF32[i15 >> 2]);
     f27 = Math_fround(HEAPF32[i16 >> 2]);
     f26 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 4 >> 1] | 0);
     f25 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 6 >> 1] | 0);
     f24 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) >> 1] | 0);
     f8 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     _stbtt__tesselate_curve(HEAP32[i20 >> 2] | 0, i5, f28, f27, f26, f25, f24, f8, Math_fround(HEAPF32[i9 >> 2]), 0) | 0;
     f8 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[i15 >> 2] = f8;
     f8 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     HEAPF32[i16 >> 2] = f8;
     break;
    }
   case 4:
    {
     f30 = Math_fround(HEAPF32[i15 >> 2]);
     f29 = Math_fround(HEAPF32[i16 >> 2]);
     f8 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 4 >> 1] | 0);
     f24 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 6 >> 1] | 0);
     f25 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 8 >> 1] | 0);
     f26 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 10 >> 1] | 0);
     f27 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) >> 1] | 0);
     f28 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     _stbtt__tesselate_cubic(HEAP32[i20 >> 2] | 0, i5, f30, f29, f8, f24, f25, f26, f27, f28, Math_fround(HEAPF32[i9 >> 2]), 0);
     f28 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[i15 >> 2] = f28;
     f28 = Math_fround(HEAP16[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     HEAPF32[i16 >> 2] = f28;
     break;
    }
   default:
    {}
   }
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
  }
  HEAP32[(HEAP32[HEAP32[i18 >> 2] >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 25) {
  HEAP32[i21 >> 2] = HEAP32[i20 >> 2];
  i23 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i22;
  return i23 | 0;
 } else if ((i1 | 0) == 26) {
  _free(HEAP32[i20 >> 2] | 0);
  _free(HEAP32[HEAP32[i18 >> 2] >> 2] | 0);
  HEAP32[HEAP32[i18 >> 2] >> 2] = 0;
  HEAP32[HEAP32[i19 >> 2] >> 2] = 0;
  HEAP32[i21 >> 2] = 0;
  i23 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i22;
  return i23 | 0;
 }
 return 0;
}

function _game_update(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i4 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i8;
 if ((HEAP32[i7 >> 2] | 0) > 0) if (!(~~+_GetTime() & 1)) i1 = 1; else i4 = 3; else i4 = 3;
 if ((i4 | 0) == 3) i1 = 0;
 HEAP32[i7 + 32 >> 2] = i1;
 i5 = _IsKeyPressed(83) | 0;
 i1 = i7 + 24 | 0;
 i2 = (HEAP32[i1 >> 2] | 0) != 0;
 do if (i5) {
  HEAP32[i1 >> 2] = (i2 ^ 1) & 1;
  if (i2) {
   HEAP32[i6 >> 2] = HEAP32[43860];
   HEAP32[i6 + 4 >> 2] = HEAP32[43861];
   HEAP32[i6 + 8 >> 2] = HEAP32[43862];
   HEAP32[i6 + 12 >> 2] = HEAP32[43863];
   HEAP32[i6 + 16 >> 2] = HEAP32[43864];
   HEAP32[i6 + 20 >> 2] = HEAP32[43865];
   HEAP32[i6 + 24 >> 2] = HEAP32[43866];
   HEAP32[i6 + 28 >> 2] = HEAP32[43867];
   _StopMusicStream(i6);
   break;
  } else {
   HEAP32[i6 >> 2] = HEAP32[43860];
   HEAP32[i6 + 4 >> 2] = HEAP32[43861];
   HEAP32[i6 + 8 >> 2] = HEAP32[43862];
   HEAP32[i6 + 12 >> 2] = HEAP32[43863];
   HEAP32[i6 + 16 >> 2] = HEAP32[43864];
   HEAP32[i6 + 20 >> 2] = HEAP32[43865];
   HEAP32[i6 + 24 >> 2] = HEAP32[43866];
   HEAP32[i6 + 28 >> 2] = HEAP32[43867];
   _PlayMusicStream(i6);
   break;
  }
 } else if (i2) {
  HEAP32[i6 >> 2] = HEAP32[43860];
  HEAP32[i6 + 4 >> 2] = HEAP32[43861];
  HEAP32[i6 + 8 >> 2] = HEAP32[43862];
  HEAP32[i6 + 12 >> 2] = HEAP32[43863];
  HEAP32[i6 + 16 >> 2] = HEAP32[43864];
  HEAP32[i6 + 20 >> 2] = HEAP32[43865];
  HEAP32[i6 + 24 >> 2] = HEAP32[43866];
  HEAP32[i6 + 28 >> 2] = HEAP32[43867];
  _UpdateMusicStream(i6);
 } while (0);
 if (_IsKeyPressed(88) | 0) {
  i5 = i7 + 20 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) == 0 & 1;
 }
 i5 = i7 + 16 | 0;
 do if ((HEAP32[i7 >> 2] | 0) > 0) {
  if (!(HEAP32[i5 >> 2] | 0)) if (!(HEAP32[i7 + 36 >> 2] | 0)) {
   do if (_IsKeyPressed(259) | 0) {
    HEAP32[i7 + 28 >> 2] = 1;
    i3 = i7 + 8 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    L24 : do switch (i2 | 0) {
    case 1:
     {
      i1 = 3;
      break;
     }
    case 3:
     {
      i1 = 5;
      break;
     }
    default:
     {
      i1 = i2 + 5 | 0;
      if ((i2 | 0) <= 95) {
       i2 = Math_imul(HEAP32[i7 + 4 >> 2] | 0, i1) | 0;
       if ((i2 | 0) <= (HEAP32[i7 >> 2] | 0)) break L24;
      }
      i1 = 1;
     }
    } while (0);
    i2 = Math_imul(HEAP32[i7 + 4 >> 2] | 0, i1) | 0;
    if ((i2 | 0) > (HEAP32[i7 >> 2] | 0)) {
     if (!(HEAP32[i7 + 20 >> 2] | 0)) break;
     HEAP32[i6 >> 2] = HEAP32[40715];
     HEAP32[i6 + 4 >> 2] = HEAP32[40716];
     HEAP32[i6 + 8 >> 2] = HEAP32[40717];
     HEAP32[i6 + 12 >> 2] = HEAP32[40718];
     HEAP32[i6 + 16 >> 2] = HEAP32[40719];
     _PlaySound(i6);
     break;
    } else {
     HEAP32[i3 >> 2] = i1;
     if (!(HEAP32[i7 + 20 >> 2] | 0)) break;
     HEAP32[i6 >> 2] = HEAP32[40700];
     HEAP32[i6 + 4 >> 2] = HEAP32[40701];
     HEAP32[i6 + 8 >> 2] = HEAP32[40702];
     HEAP32[i6 + 12 >> 2] = HEAP32[40703];
     HEAP32[i6 + 16 >> 2] = HEAP32[40704];
     _PlaySound(i6);
     break;
    }
   } while (0);
   if (_IsKeyPressed(257) | 0) {
    i2 = i7 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    i1 = i3 + 1 | 0;
    HEAP32[i2 >> 2] = i1;
    if ((i3 | 0) > 4) i4 = 29; else {
     i3 = Math_imul(HEAP32[i7 + 8 >> 2] | 0, i1) | 0;
     if ((i3 | 0) > (HEAP32[i7 >> 2] | 0)) i4 = 29;
    }
    if ((i4 | 0) == 29) HEAP32[i2 >> 2] = 1;
    if (HEAP32[i7 + 20 >> 2] | 0) {
     HEAP32[i6 >> 2] = HEAP32[40705];
     HEAP32[i6 + 4 >> 2] = HEAP32[40706];
     HEAP32[i6 + 8 >> 2] = HEAP32[40707];
     HEAP32[i6 + 12 >> 2] = HEAP32[40708];
     HEAP32[i6 + 16 >> 2] = HEAP32[40709];
     _PlaySound(i6);
    }
    HEAP32[i7 + 28 >> 2] = 1;
   }
  }
  if (_IsKeyPressed(32) | 0) {
   i4 = i7 + 28 | 0;
   HEAP32[i4 >> 2] = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   if (i1 | 0) {
    if ((i1 | 0) < 5) {
     i1 = 0;
     do {
      _spin(i7);
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != 5);
    }
    if (HEAP32[i7 + 20 >> 2] | 0) {
     HEAP32[i6 >> 2] = HEAP32[40710];
     HEAP32[i6 + 4 >> 2] = HEAP32[40711];
     HEAP32[i6 + 8 >> 2] = HEAP32[40712];
     HEAP32[i6 + 12 >> 2] = HEAP32[40713];
     HEAP32[i6 + 16 >> 2] = HEAP32[40714];
     _StopSound(i6);
     HEAP32[i6 >> 2] = HEAP32[40705];
     HEAP32[i6 + 4 >> 2] = HEAP32[40706];
     HEAP32[i6 + 8 >> 2] = HEAP32[40707];
     HEAP32[i6 + 12 >> 2] = HEAP32[40708];
     HEAP32[i6 + 16 >> 2] = HEAP32[40709];
     _PlaySound(i6);
    }
    HEAP32[i5 >> 2] = 100;
    i4 = 50;
    break;
   }
   HEAP32[i7 + 160 >> 2] = 0;
   if (HEAP32[i7 + 36 >> 2] | 0) {
    HEAP32[i7 + 12 >> 2] = 2;
    i4 = 48;
    break;
   }
   i1 = HEAP32[i7 >> 2] | 0;
   i2 = i7 + 8 | 0;
   i3 = i7 + 4 | 0;
   if ((i1 | 0) < (Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0)) {
    HEAP32[i4 >> 2] = 1;
    HEAP32[i3 >> 2] = 1;
    HEAP32[i2 >> 2] = i1;
    if (!(HEAP32[i7 + 20 >> 2] | 0)) {
     i4 = 48;
     break;
    };
    HEAP32[i6 >> 2] = HEAP32[40715];
    HEAP32[i6 + 4 >> 2] = HEAP32[40716];
    HEAP32[i6 + 8 >> 2] = HEAP32[40717];
    HEAP32[i6 + 12 >> 2] = HEAP32[40718];
    HEAP32[i6 + 16 >> 2] = HEAP32[40719];
    _PlaySound(i6);
    i4 = 48;
    break;
   } else {
    _spin(i7);
    i4 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i4;
    HEAP32[i5 >> 2] = 1;
    if (!(HEAP32[i7 + 20 >> 2] | 0)) {
     i1 = 1;
     i4 = 56;
     break;
    };
    HEAP32[i6 >> 2] = HEAP32[40710];
    HEAP32[i6 + 4 >> 2] = HEAP32[40711];
    HEAP32[i6 + 8 >> 2] = HEAP32[40712];
    HEAP32[i6 + 12 >> 2] = HEAP32[40713];
    HEAP32[i6 + 16 >> 2] = HEAP32[40714];
    _PlaySound(i6);
    i4 = 48;
    break;
   }
  } else i4 = 48;
 } else i4 = 48; while (0);
 if ((i4 | 0) == 48) {
  i1 = HEAP32[i5 >> 2] | 0;
  if (i1 | 0) if ((i1 | 0) > 99) i4 = 50; else i4 = 56;
 }
 if ((i4 | 0) == 50) {
  if (!(_check_scatter(i7) | 0)) _check_win(i7); else {
   if (HEAP32[i7 + 20 >> 2] | 0) {
    HEAP32[i6 >> 2] = HEAP32[40725];
    HEAP32[i6 + 4 >> 2] = HEAP32[40726];
    HEAP32[i6 + 8 >> 2] = HEAP32[40727];
    HEAP32[i6 + 12 >> 2] = HEAP32[40728];
    HEAP32[i6 + 16 >> 2] = HEAP32[40729];
    _PlaySound(i6);
   }
   HEAP32[i7 + 36 >> 2] = 1;
  }
  HEAP32[i5 >> 2] = 0;
 } else if ((i4 | 0) == 56) {
  HEAP32[i5 >> 2] = i1 + 1;
  _spin(i7);
 }
 STACKTOP = i8;
 return;
}

function _workeffect(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i4 >> 2] = i1;
 switch (HEAPU8[(HEAP32[i4 >> 2] | 0) + 24 >> 0] | 0) {
 case 0:
  {
   if (!(HEAP8[(HEAP32[i4 >> 2] | 0) + 25 >> 0] | 0)) {
    STACKTOP = i5;
    return;
   }
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP16[i3 + 28 >> 1] = (HEAPU16[i3 + 16 >> 1] | 0) - (HEAP16[i3 + 36 + (HEAPU8[i3 + 42 >> 0] << 1) >> 1] | 0);
   i3 = (HEAP32[i4 >> 2] | 0) + 42 | 0;
   HEAP8[i3 >> 0] = (HEAP8[i3 >> 0] | 0) + 1 << 24 >> 24;
   if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 42 >> 0] | 0) <= 2) {
    STACKTOP = i5;
    return;
   }
   HEAP8[(HEAP32[i4 >> 2] | 0) + 42 >> 0] = 0;
   STACKTOP = i5;
   return;
  }
 case 1:
  {
   if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0)) {
    STACKTOP = i5;
    return;
   }
   i3 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
   HEAP16[i3 >> 1] = (HEAPU16[i3 >> 1] | 0) - (HEAPU8[(HEAP32[i4 >> 2] | 0) + 25 >> 0] | 0);
   if ((HEAPU16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0) >= 113) if ((HEAPU16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0) <= 2e4) {
    STACKTOP = i5;
    return;
   }
   HEAP16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] = 113;
   STACKTOP = i5;
   return;
  }
 case 2:
  {
   if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0)) {
    STACKTOP = i5;
    return;
   }
   i3 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
   HEAP16[i3 >> 1] = (HEAPU16[i3 >> 1] | 0) + (HEAPU8[(HEAP32[i4 >> 2] | 0) + 25 >> 0] | 0);
   if ((HEAPU16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0) <= 2e4) {
    STACKTOP = i5;
    return;
   }
   HEAP16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] = 2e4;
   STACKTOP = i5;
   return;
  }
 case 3:
 case 5:
  {
   if (HEAPU16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0) if ((HEAPU16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0) != (HEAP16[(HEAP32[i4 >> 2] | 0) + 32 >> 1] | 0)) if (HEAP16[(HEAP32[i4 >> 2] | 0) + 32 >> 1] | 0) {
    i2 = HEAP32[i4 >> 2] | 0;
    do if ((HEAPU16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0) > (HEAP16[(HEAP32[i4 >> 2] | 0) + 32 >> 1] | 0)) {
     i1 = HEAP32[i4 >> 2] | 0;
     if (((HEAPU16[i2 + 16 >> 1] | 0) - (HEAP16[(HEAP32[i4 >> 2] | 0) + 32 >> 1] | 0) | 0) >= (HEAP16[(HEAP32[i4 >> 2] | 0) + 30 >> 1] | 0)) {
      i3 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
      HEAP16[i3 >> 1] = (HEAPU16[i3 >> 1] | 0) - (HEAP16[i1 + 30 >> 1] | 0);
      break;
     } else {
      HEAP16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] = HEAP16[i1 + 32 >> 1] | 0;
      break;
     }
    } else {
     i1 = HEAP32[i4 >> 2] | 0;
     if (((HEAP16[i2 + 32 >> 1] | 0) - (HEAPU16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0) | 0) >= (HEAP16[(HEAP32[i4 >> 2] | 0) + 30 >> 1] | 0)) {
      i3 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
      HEAP16[i3 >> 1] = (HEAPU16[i3 >> 1] | 0) + (HEAP16[i1 + 30 >> 1] | 0);
      break;
     } else {
      HEAP16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] = HEAP16[i1 + 32 >> 1] | 0;
      break;
     }
    } while (0);
    if ((HEAPU16[(HEAP32[i4 >> 2] | 0) + 16 >> 1] | 0) == (HEAP16[(HEAP32[i4 >> 2] | 0) + 32 >> 1] | 0)) HEAP16[(HEAP32[i4 >> 2] | 0) + 32 >> 1] = 0;
   }
   if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 24 >> 0] | 0) != 5) {
    STACKTOP = i5;
    return;
   }
   i2 = HEAP32[i4 >> 2] | 0;
   i1 = HEAPU8[i2 + 18 >> 0] | 0;
   i2 = HEAPU8[i2 + 46 >> 0] | 0;
   if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 46 >> 0] | 0) > 15) {
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = i1 + (i2 >> 4);
    if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] | 0) <= 63) {
     STACKTOP = i5;
     return;
    }
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = 63;
    STACKTOP = i5;
    return;
   } else {
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = i1 - i2;
    if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] | 0) <= 63) {
     STACKTOP = i5;
     return;
    }
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = 0;
    STACKTOP = i5;
    return;
   }
  }
 case 4:
 case 6:
  {
   i3 = HEAP32[i4 >> 2] | 0;
   i3 = (Math_imul(HEAPU8[i3 + 47 >> 0] & 15, HEAP16[15056 + ((HEAPU8[i3 + 48 >> 0] & 31) << 1) >> 1] | 0) | 0) >> 7 & 65535;
   HEAP16[(HEAP32[i4 >> 2] | 0) + 34 >> 1] = i3;
   if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 48 >> 0] | 0) > 31) {
    i3 = (HEAP32[i4 >> 2] | 0) + 34 | 0;
    HEAP16[i3 >> 1] = 0 - (HEAP16[i3 >> 1] | 0);
   }
   i3 = (HEAP32[i4 >> 2] | 0) + 48 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP8[i3 >> 0] = (HEAPU8[i3 >> 0] | 0) + (HEAPU8[i2 + 47 >> 0] >> 4 & 15) & 63;
   if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 24 >> 0] | 0) != 6) {
    STACKTOP = i5;
    return;
   }
   i2 = HEAP32[i4 >> 2] | 0;
   i1 = HEAPU8[i2 + 18 >> 0] | 0;
   i2 = HEAPU8[i2 + 46 >> 0] | 0;
   if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 46 >> 0] | 0) > 15) {
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = i1 + (i2 >> 4);
    if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] | 0) <= 64) {
     STACKTOP = i5;
     return;
    }
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = 64;
    STACKTOP = i5;
    return;
   } else {
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = i1 - i2;
    if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] | 0) <= 64) {
     STACKTOP = i5;
     return;
    }
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = 0;
    STACKTOP = i5;
    return;
   }
  }
 case 10:
  {
   i1 = HEAPU8[(HEAP32[i4 >> 2] | 0) + 46 >> 0] | 0;
   if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 46 >> 0] | 0) > 15) {
    i3 = (HEAP32[i4 >> 2] | 0) + 18 | 0;
    HEAP8[i3 >> 0] = (HEAPU8[i3 >> 0] | 0) + (i1 >> 4);
    if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] | 0) <= 64) {
     STACKTOP = i5;
     return;
    }
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = 64;
    STACKTOP = i5;
    return;
   } else {
    i3 = (HEAP32[i4 >> 2] | 0) + 18 | 0;
    HEAP8[i3 >> 0] = (HEAPU8[i3 >> 0] | 0) - (i1 & 15);
    if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] | 0) <= 64) {
     STACKTOP = i5;
     return;
    }
    HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = 0;
    STACKTOP = i5;
    return;
   }
  }
 case 12:
  {
   if (HEAP8[(HEAP32[i4 >> 2] | 0) + 50 >> 0] | 0) {
    i3 = (HEAP32[i4 >> 2] | 0) + 50 | 0;
    HEAP8[i3 >> 0] = (HEAP8[i3 >> 0] | 0) + -1 << 24 >> 24;
   }
   if (HEAP8[(HEAP32[i4 >> 2] | 0) + 50 >> 0] | 0) {
    STACKTOP = i5;
    return;
   }
   HEAP8[(HEAP32[i4 >> 2] | 0) + 18 >> 0] = 0;
   STACKTOP = i5;
   return;
  }
 default:
  {
   STACKTOP = i5;
   return;
  }
 }
}

function _LoadMusicStream(i21, i2) {
 i21 = i21 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 i23 = i1 + 40 | 0;
 i18 = i1 + 32 | 0;
 i20 = i1 + 24 | 0;
 i19 = i1 + 16 | 0;
 i17 = i1 + 8 | 0;
 i16 = i1;
 i7 = i1 + 192 | 0;
 i22 = i1 + 160 | 0;
 i9 = i1 + 196 | 0;
 i8 = i1 + 136 | 0;
 i13 = i1 + 120 | 0;
 i5 = i1 + 116 | 0;
 i10 = i1 + 112 | 0;
 i14 = i1 + 96 | 0;
 i6 = i1 + 92 | 0;
 i11 = i1 + 88 | 0;
 i15 = i1 + 72 | 0;
 i4 = i1 + 68 | 0;
 i12 = i1 + 64 | 0;
 i3 = i1 + 48 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 HEAP32[i22 + 12 >> 2] = 0;
 HEAP32[i22 + 16 >> 2] = 0;
 HEAP32[i22 + 20 >> 2] = 0;
 HEAP32[i22 + 24 >> 2] = 0;
 HEAP32[i22 + 28 >> 2] = 0;
 HEAP8[i9 >> 0] = 0;
 i2 = _IsFileExtension(HEAP32[i7 >> 2] | 0, 49941) | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (i2) {
  i15 = _stb_vorbis_open_filename(i1, 0, 0) | 0;
  HEAP32[i22 + 4 >> 2] = i15;
  if (HEAP32[i22 + 4 >> 2] | 0) {
   HEAP32[i22 >> 2] = 1;
   _stb_vorbis_get_info(i8, HEAP32[i22 + 4 >> 2] | 0);
   i15 = i22 + 16 | 0;
   _InitAudioStream(i13, HEAP32[i8 >> 2] | 0, 16, HEAP32[i8 + 4 >> 2] | 0);
   HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i15 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i15 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   i15 = _stb_vorbis_stream_length_in_samples(HEAP32[i22 + 4 >> 2] | 0) | 0;
   i15 = Math_imul(i15, HEAP32[i8 + 4 >> 2] | 0) | 0;
   HEAP32[i22 + 8 >> 2] = i15;
   HEAP32[i22 + 12 >> 2] = 0;
   HEAP8[i9 >> 0] = 1;
  }
 } else {
  if (_IsFileExtension(i1, 49946) | 0) {
   i15 = _malloc(21176) | 0;
   HEAP32[i5 >> 2] = i15;
   HEAP32[i22 + 4 >> 2] = HEAP32[i5 >> 2];
   i15 = _drmp3_init_file(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
   HEAP32[i10 >> 2] = i15;
   if ((HEAP32[i10 >> 2] | 0) <= 0) break;
   HEAP32[i22 >> 2] = 3;
   i15 = i22 + 16 | 0;
   i13 = HEAP32[i5 >> 2] | 0;
   _InitAudioStream(i14, HEAP32[i13 + 6692 >> 2] | 0, 32, HEAP32[i13 + 6688 >> 2] | 0);
   HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i15 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i15 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
   i14 = _drmp3_get_pcm_frame_count(HEAP32[i5 >> 2] | 0) | 0;
   i15 = getTempRet0() | 0;
   i15 = ___muldi3(i14 | 0, i15 | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 6688 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAP32[i22 + 8 >> 2] = i15;
   HEAP32[i22 + 12 >> 2] = 0;
   HEAP8[i9 >> 0] = 1;
   break;
  }
  if (_IsFileExtension(HEAP32[i7 >> 2] | 0, 50988) | 0) {
   HEAP32[i6 >> 2] = 0;
   i14 = _jar_xm_create_context_from_file(i6, 48e3, HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[i11 >> 2] = i14;
   if (HEAP32[i11 >> 2] | 0) break;
   HEAP32[i22 >> 2] = 4;
   _jar_xm_set_max_loop_count(HEAP32[i6 >> 2] | 0, 0);
   i14 = i22 + 16 | 0;
   _InitAudioStream(i15, 48e3, 16, 2);
   HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i14 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[i14 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
   HEAP32[i14 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
   i15 = _jar_xm_get_remaining_samples(HEAP32[i6 >> 2] | 0) | 0;
   getTempRet0() | 0;
   HEAP32[i22 + 8 >> 2] = i15;
   HEAP32[i22 + 12 >> 2] = 0;
   _jar_xm_reset(HEAP32[i6 >> 2] | 0);
   HEAP8[i9 >> 0] = 1;
   HEAP32[i22 + 4 >> 2] = HEAP32[i6 >> 2];
   break;
  }
  if (_IsFileExtension(HEAP32[i7 >> 2] | 0, 50992) | 0) {
   i15 = _malloc(5884) | 0;
   HEAP32[i4 >> 2] = i15;
   HEAP32[i22 + 4 >> 2] = HEAP32[i4 >> 2];
   _jar_mod_init(HEAP32[i4 >> 2] | 0) | 0;
   i15 = _jar_mod_load_file(HEAP32[i4 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[i12 >> 2] = i15;
   if ((HEAP32[i12 >> 2] | 0) > 0) {
    HEAP32[i22 >> 2] = 5;
    i15 = i22 + 16 | 0;
    _InitAudioStream(i3, 48e3, 16, 2);
    HEAP32[i15 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i15 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i15 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i15 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
    i15 = _jar_mod_max_samples(HEAP32[i4 >> 2] | 0) | 0;
    HEAP32[i22 + 8 >> 2] = i15;
    HEAP32[i22 + 12 >> 2] = 0;
    HEAP8[i9 >> 0] = 1;
   }
  }
 } while (0);
 if (HEAP8[i9 >> 0] & 1) {
  HEAP32[i17 >> 2] = HEAP32[i7 >> 2];
  _TraceLog(3, 51033, i17);
  HEAP32[i19 >> 2] = HEAP32[i22 + 8 >> 2];
  _TraceLog(3, 51070, i19);
  HEAP32[i20 >> 2] = HEAP32[i22 + 16 >> 2];
  _TraceLog(3, 51091, i20);
  HEAP32[i18 >> 2] = HEAP32[i22 + 16 + 4 >> 2];
  _TraceLog(3, 51113, i18);
  if ((HEAP32[i22 + 16 + 8 >> 2] | 0) == 1) i1 = 50085; else i1 = (HEAP32[i22 + 16 + 8 >> 2] | 0) == 2 ? 50090 : 51137;
  HEAP32[i23 >> 2] = HEAP32[i22 + 16 + 8 >> 2];
  HEAP32[i23 + 4 >> 2] = i1;
  _TraceLog(3, 51143, i23);
  HEAP32[i21 >> 2] = HEAP32[i22 >> 2];
  HEAP32[i21 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
  HEAP32[i21 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAP32[i21 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
  HEAP32[i21 + 16 >> 2] = HEAP32[i22 + 16 >> 2];
  HEAP32[i21 + 20 >> 2] = HEAP32[i22 + 20 >> 2];
  HEAP32[i21 + 24 >> 2] = HEAP32[i22 + 24 >> 2];
  HEAP32[i21 + 28 >> 2] = HEAP32[i22 + 28 >> 2];
  STACKTOP = i24;
  return;
 }
 do if ((HEAP32[i22 >> 2] | 0) == 1) _stb_vorbis_close(HEAP32[i22 + 4 >> 2] | 0); else {
  if ((HEAP32[i22 >> 2] | 0) == 3) {
   _drmp3_uninit(HEAP32[i22 + 4 >> 2] | 0);
   _free(HEAP32[i22 + 4 >> 2] | 0);
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 4) {
   _jar_xm_free_context(HEAP32[i22 + 4 >> 2] | 0);
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 5) {
   _jar_mod_unload(HEAP32[i22 + 4 >> 2] | 0);
   _free(HEAP32[i22 + 4 >> 2] | 0);
  }
 } while (0);
 HEAP32[i16 >> 2] = HEAP32[i7 >> 2];
 _TraceLog(4, 50997, i16);
 HEAP32[i21 >> 2] = HEAP32[i22 >> 2];
 HEAP32[i21 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 HEAP32[i21 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
 HEAP32[i21 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
 HEAP32[i21 + 16 >> 2] = HEAP32[i22 + 16 >> 2];
 HEAP32[i21 + 20 >> 2] = HEAP32[i22 + 20 >> 2];
 HEAP32[i21 + 24 >> 2] = HEAP32[i22 + 24 >> 2];
 HEAP32[i21 + 28 >> 2] = HEAP32[i22 + 28 >> 2];
 STACKTOP = i24;
 return;
}
function _stbir__normalize_downsample_coefficients(i4, i3, i5, f9, i6, i7) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 f9 = Math_fround(f9);
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0;
 i11 = 0;
 i25 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i14 = i1 + 64 | 0;
 i13 = i1 + 60 | 0;
 i15 = i1 + 56 | 0;
 i23 = i1 + 52 | 0;
 i26 = i1 + 48 | 0;
 i21 = i1 + 44 | 0;
 i20 = i1 + 40 | 0;
 i19 = i1 + 36 | 0;
 i16 = i1 + 32 | 0;
 i17 = i1 + 28 | 0;
 i24 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i2 = i1 + 12 | 0;
 i22 = i1 + 8 | 0;
 i18 = i1 + 4 | 0;
 i12 = i1;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i15 >> 2] = i5;
 HEAPF32[i23 >> 2] = f9;
 HEAP32[i26 >> 2] = i6;
 HEAP32[i21 >> 2] = i7;
 f9 = Math_fround(HEAPF32[i23 >> 2]);
 i7 = _stbir__get_contributors(f9, HEAP32[i15 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i21 >> 2] | 0) | 0;
 HEAP32[i20 >> 2] = i7;
 i7 = _stbir__get_coefficient_width(HEAP32[i15 >> 2] | 0, Math_fround(HEAPF32[i23 >> 2])) | 0;
 HEAP32[i19 >> 2] = i7;
 HEAP32[i16 >> 2] = 0;
 while (1) {
  if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i21 >> 2] | 0)) {
   i11 = 22;
   break;
  }
  HEAPF32[i10 >> 2] = Math_fround(0.0);
  HEAP32[i17 >> 2] = 0;
  while (1) {
   if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[i20 >> 2] | 0)) break;
   if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) >> 2] | 0)) if ((HEAP32[i16 >> 2] | 0) <= (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) + 4 >> 2] | 0)) {
    f9 = Math_fround(HEAPF32[i23 >> 2]);
    i26 = _stbir__get_coefficient(HEAP32[i13 >> 2] | 0, HEAP32[i15 >> 2] | 0, f9, HEAP32[i17 >> 2] | 0, (HEAP32[i16 >> 2] | 0) - (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) >> 2] | 0) | 0) | 0;
    f9 = Math_fround(HEAPF32[i26 >> 2]);
    HEAPF32[i2 >> 2] = f9;
    f9 = Math_fround(HEAPF32[i2 >> 2]);
    f9 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) + f9);
    HEAPF32[i10 >> 2] = f9;
   } else i11 = 8; else i11 = 8;
   if ((i11 | 0) == 8) {
    i11 = 0;
    if ((HEAP32[i16 >> 2] | 0) < (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) >> 2] | 0)) break;
   }
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
  }
  if (!(Math_fround(HEAPF32[i10 >> 2]) > Math_fround(.899999976))) {
   i11 = 11;
   break;
  }
  if (!(Math_fround(HEAPF32[i10 >> 2]) < Math_fround(1.10000002))) {
   i11 = 13;
   break;
  }
  f9 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i10 >> 2]));
  HEAPF32[i8 >> 2] = f9;
  HEAP32[i17 >> 2] = 0;
  while (1) {
   if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[i20 >> 2] | 0)) break;
   if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) >> 2] | 0)) if ((HEAP32[i16 >> 2] | 0) <= (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) + 4 >> 2] | 0)) {
    f9 = Math_fround(HEAPF32[i8 >> 2]);
    f27 = Math_fround(HEAPF32[i23 >> 2]);
    i26 = _stbir__get_coefficient(HEAP32[i13 >> 2] | 0, HEAP32[i15 >> 2] | 0, f27, HEAP32[i17 >> 2] | 0, (HEAP32[i16 >> 2] | 0) - (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) >> 2] | 0) | 0) | 0;
    f9 = Math_fround(Math_fround(HEAPF32[i26 >> 2]) * f9);
    HEAPF32[i26 >> 2] = f9;
   } else i11 = 19; else i11 = 19;
   if ((i11 | 0) == 19) {
    i11 = 0;
    if ((HEAP32[i16 >> 2] | 0) < (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) >> 2] | 0)) break;
   }
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
  }
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 }
 if ((i11 | 0) == 11) ___assert_fail(56582, 54884, 1140, 56595); else if ((i11 | 0) == 13) ___assert_fail(56636, 54884, 1141, 56595); else if ((i11 | 0) == 22) {
  HEAP32[i17 >> 2] = 0;
  while (1) {
   if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[i20 >> 2] | 0)) break;
   HEAP32[i24 >> 2] = 0;
   while (1) {
    f27 = Math_fround(HEAPF32[i23 >> 2]);
    i26 = _stbir__get_coefficient(HEAP32[i13 >> 2] | 0, HEAP32[i15 >> 2] | 0, f27, HEAP32[i17 >> 2] | 0, HEAP32[i24 >> 2] | 0) | 0;
    i26 = Math_fround(HEAPF32[i26 >> 2]) == Math_fround(0.0);
    i1 = HEAP32[i24 >> 2] | 0;
    if (!i26) break;
    HEAP32[i24 >> 2] = i1 + 1;
   }
   i26 = (HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) | 0;
   HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + i1;
   while (1) {
    i1 = (HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) | 0;
    if ((HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) >> 2] | 0) >= 0) break;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
    HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
   }
   HEAP32[i22 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i17 >> 2] << 3) >> 2] | 0) + 1;
   i26 = _stbir__min(HEAP32[i19 >> 2] | 0, HEAP32[i22 >> 2] | 0) | 0;
   HEAP32[i18 >> 2] = i26;
   i26 = _stbir__get_coefficient_width(HEAP32[i15 >> 2] | 0, Math_fround(HEAPF32[i23 >> 2])) | 0;
   HEAP32[i12 >> 2] = i26;
   HEAP32[i16 >> 2] = 0;
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break;
    if (((HEAP32[i16 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) | 0) >= (HEAP32[i12 >> 2] | 0)) break;
    f27 = Math_fround(HEAPF32[i23 >> 2]);
    i26 = _stbir__get_coefficient(HEAP32[i13 >> 2] | 0, HEAP32[i15 >> 2] | 0, f27, HEAP32[i17 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) | 0) | 0;
    f27 = Math_fround(HEAPF32[i26 >> 2]);
    f9 = Math_fround(HEAPF32[i23 >> 2]);
    i26 = _stbir__get_coefficient(HEAP32[i13 >> 2] | 0, HEAP32[i15 >> 2] | 0, f9, HEAP32[i17 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
    HEAPF32[i26 >> 2] = f27;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   }
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
  }
  HEAP32[i16 >> 2] = 0;
  while (1) {
   if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i20 >> 2] | 0)) break;
   i26 = _stbir__min(HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i16 >> 2] << 3) + 4 >> 2] | 0, (HEAP32[i21 >> 2] | 0) - 1 | 0) | 0;
   HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i16 >> 2] << 3) + 4 >> 2] = i26;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  }
  STACKTOP = i25;
  return;
 }
}

function _stbiw__encode_png_line(i7, i8, i9, i3, i10, i6, i2, i5) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i21 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i12 = i1 + 48 | 0;
 i14 = i1 + 44 | 0;
 i19 = i1 + 40 | 0;
 i4 = i1 + 36 | 0;
 i11 = i1 + 32 | 0;
 i17 = i1 + 28 | 0;
 i22 = i1 + 24 | 0;
 i16 = i1 + 20 | 0;
 i23 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i18 = i1 + 8 | 0;
 i20 = i1 + 4 | 0;
 i13 = i1;
 HEAP32[i12 >> 2] = i7;
 HEAP32[i14 >> 2] = i8;
 HEAP32[i19 >> 2] = i9;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i22 >> 2] = i2;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i23 >> 2] = HEAP32[i11 >> 2] | 0 ? 28288 : 28320;
 HEAP32[i18 >> 2] = HEAP32[(HEAP32[i23 >> 2] | 0) + (HEAP32[i22 >> 2] << 2) >> 2];
 if (0) i1 = (HEAP32[i4 >> 2] | 0) - 1 - (HEAP32[i11 >> 2] | 0) | 0; else i1 = HEAP32[i11 >> 2] | 0;
 i23 = (HEAP32[i12 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i1) | 0) | 0;
 HEAP32[i20 >> 2] = i23;
 i23 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 >> 2] = 0 ? 0 - i23 | 0 : i23;
 if (!(HEAP32[i18 >> 2] | 0)) {
  _memcpy(HEAP32[i16 >> 2] | 0, HEAP32[i20 >> 2] | 0, Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0) | 0;
  STACKTOP = i21;
  return;
 }
 HEAP32[i15 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
  switch (i1 | 0) {
  case 1:
   {
    i23 = HEAP32[i15 >> 2] | 0;
    HEAP8[(HEAP32[i16 >> 2] | 0) + i23 >> 0] = HEAP8[(HEAP32[i20 >> 2] | 0) + i23 >> 0] | 0;
    break;
   }
  case 2:
   {
    i23 = HEAP32[i15 >> 2] | 0;
    i22 = HEAP32[i20 >> 2] | 0;
    HEAP8[(HEAP32[i16 >> 2] | 0) + i23 >> 0] = (HEAPU8[i22 + i23 >> 0] | 0) - (HEAPU8[i22 + (i23 - (HEAP32[i13 >> 2] | 0)) >> 0] | 0);
    break;
   }
  case 3:
   {
    i23 = HEAP32[i15 >> 2] | 0;
    i22 = HEAP32[i20 >> 2] | 0;
    HEAP8[(HEAP32[i16 >> 2] | 0) + i23 >> 0] = (HEAPU8[i22 + i23 >> 0] | 0) - (HEAPU8[i22 + (i23 - (HEAP32[i13 >> 2] | 0)) >> 0] >> 1);
    break;
   }
  case 4:
   {
    i22 = HEAP32[i20 >> 2] | 0;
    i23 = HEAP32[i15 >> 2] | 0;
    i23 = (HEAPU8[i22 + i23 >> 0] | 0) - ((_stbiw__paeth(0, HEAPU8[i22 + (i23 - (HEAP32[i13 >> 2] | 0)) >> 0] | 0, 0) | 0) & 255) & 255;
    HEAP8[(HEAP32[i16 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = i23;
    break;
   }
  case 5:
   {
    i23 = HEAP32[i15 >> 2] | 0;
    HEAP8[(HEAP32[i16 >> 2] | 0) + i23 >> 0] = HEAP8[(HEAP32[i20 >> 2] | 0) + i23 >> 0] | 0;
    break;
   }
  case 6:
   {
    i23 = HEAP32[i15 >> 2] | 0;
    HEAP8[(HEAP32[i16 >> 2] | 0) + i23 >> 0] = HEAP8[(HEAP32[i20 >> 2] | 0) + i23 >> 0] | 0;
    break;
   }
  default:
   {}
  }
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
 }
 switch (i1 | 0) {
 case 1:
  {
   HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
   while (1) {
    if ((HEAP32[i15 >> 2] | 0) >= (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0)) break;
    i23 = HEAP32[i15 >> 2] | 0;
    i22 = HEAP32[i20 >> 2] | 0;
    HEAP8[(HEAP32[i16 >> 2] | 0) + i23 >> 0] = (HEAPU8[i22 + i23 >> 0] | 0) - (HEAPU8[i22 + (i23 - (HEAP32[i17 >> 2] | 0)) >> 0] | 0);
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   STACKTOP = i21;
   return;
  }
 case 2:
  {
   HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
   while (1) {
    if ((HEAP32[i15 >> 2] | 0) >= (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0)) break;
    i23 = HEAP32[i15 >> 2] | 0;
    i22 = HEAP32[i20 >> 2] | 0;
    HEAP8[(HEAP32[i16 >> 2] | 0) + i23 >> 0] = (HEAPU8[i22 + i23 >> 0] | 0) - (HEAPU8[i22 + (i23 - (HEAP32[i13 >> 2] | 0)) >> 0] | 0);
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   STACKTOP = i21;
   return;
  }
 case 3:
  {
   HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
   while (1) {
    if ((HEAP32[i15 >> 2] | 0) >= (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0)) break;
    i23 = HEAP32[i15 >> 2] | 0;
    i22 = HEAP32[i20 >> 2] | 0;
    HEAP8[(HEAP32[i16 >> 2] | 0) + i23 >> 0] = (HEAPU8[i22 + i23 >> 0] | 0) - ((HEAPU8[i22 + (i23 - (HEAP32[i17 >> 2] | 0)) >> 0] | 0) + (HEAPU8[i22 + (i23 - (HEAP32[i13 >> 2] | 0)) >> 0] | 0) >> 1);
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   STACKTOP = i21;
   return;
  }
 case 4:
  {
   HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
   while (1) {
    if ((HEAP32[i15 >> 2] | 0) >= (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0)) break;
    i12 = HEAPU8[(HEAP32[i20 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0;
    i18 = HEAP32[i20 >> 2] | 0;
    i14 = HEAP32[i15 >> 2] | 0;
    i22 = (HEAP32[i15 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0;
    i23 = HEAP32[i17 >> 2] | 0;
    i23 = i12 - ((_stbiw__paeth(HEAPU8[i18 + (i14 - i23) >> 0] | 0, HEAPU8[i18 + i22 >> 0] | 0, HEAPU8[i18 + (i22 - i23) >> 0] | 0) | 0) & 255) & 255;
    HEAP8[(HEAP32[i16 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = i23;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   STACKTOP = i21;
   return;
  }
 case 5:
  {
   HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
   while (1) {
    if ((HEAP32[i15 >> 2] | 0) >= (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0)) break;
    i23 = HEAP32[i15 >> 2] | 0;
    i22 = HEAP32[i20 >> 2] | 0;
    HEAP8[(HEAP32[i16 >> 2] | 0) + i23 >> 0] = (HEAPU8[i22 + i23 >> 0] | 0) - (HEAPU8[i22 + (i23 - (HEAP32[i17 >> 2] | 0)) >> 0] >> 1);
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   STACKTOP = i21;
   return;
  }
 case 6:
  {
   HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
   while (1) {
    if ((HEAP32[i15 >> 2] | 0) >= (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0)) break;
    i23 = HEAPU8[(HEAP32[i20 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0;
    i23 = i23 - ((_stbiw__paeth(HEAPU8[(HEAP32[i20 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - (HEAP32[i17 >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255) & 255;
    HEAP8[(HEAP32[i16 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = i23;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   STACKTOP = i21;
   return;
  }
 default:
  {
   STACKTOP = i21;
   return;
  }
 }
}

function _stbtt__rasterize_sorted_edges(i14, i2, i8, i22, i10, i12, i21) {
 i14 = i14 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i22 = i22 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i21 = i21 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, f33 = f0;
 i32 = STACKTOP;
 i27 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(624);
 i15 = i27 + 612 | 0;
 i3 = i27 + 608 | 0;
 i9 = i27 + 604 | 0;
 i11 = i27 + 596 | 0;
 i13 = i27 + 592 | 0;
 i31 = i27 + 588 | 0;
 i28 = i27 + 576 | 0;
 i1 = i27 + 572 | 0;
 i23 = i27 + 568 | 0;
 i5 = i27 + 564 | 0;
 i4 = i27 + 560 | 0;
 i30 = i27;
 i29 = i27 + 556 | 0;
 i18 = i27 + 552 | 0;
 i17 = i27 + 548 | 0;
 i16 = i27 + 544 | 0;
 i19 = i27 + 540 | 0;
 i24 = i27 + 536 | 0;
 i25 = i27 + 532 | 0;
 i20 = i27 + 528 | 0;
 i6 = i27 + 524 | 0;
 i7 = i27 + 520 | 0;
 i26 = i27 + 516 | 0;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i27 + 600 >> 2] = i22;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i31 >> 2] = i21;
 HEAP32[i28 >> 2] = 0;
 HEAP32[i28 + 4 >> 2] = 0;
 HEAP32[i28 + 8 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 if ((HEAP32[HEAP32[i15 >> 2] >> 2] | 0) > 64) {
  i27 = _malloc((HEAP32[HEAP32[i15 >> 2] >> 2] << 1) + 1 << 2) | 0;
  HEAP32[i29 >> 2] = i27;
 } else HEAP32[i29 >> 2] = i30;
 HEAP32[i18 >> 2] = (HEAP32[i29 >> 2] | 0) + (HEAP32[HEAP32[i15 >> 2] >> 2] << 2);
 HEAP32[i23 >> 2] = HEAP32[i13 >> 2];
 f33 = Math_fround(Math_fround((HEAP32[i13 >> 2] | 0) + (HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) | 0) + Math_fround(1.0));
 HEAPF32[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) * 20 | 0) + 4 >> 2] = f33;
 L5 : while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0)) {
   i1 = 34;
   break;
  }
  f33 = Math_fround(Math_fround(HEAP32[i23 >> 2] | 0) + Math_fround(0.0));
  HEAPF32[i17 >> 2] = f33;
  f33 = Math_fround(Math_fround(HEAP32[i23 >> 2] | 0) + Math_fround(1.0));
  HEAPF32[i16 >> 2] = f33;
  HEAP32[i19 >> 2] = i1;
  _memset(HEAP32[i29 >> 2] | 0, 0, HEAP32[HEAP32[i15 >> 2] >> 2] << 2 | 0) | 0;
  _memset(HEAP32[i18 >> 2] | 0, 0, (HEAP32[HEAP32[i15 >> 2] >> 2] | 0) + 1 << 2 | 0) | 0;
  while (1) {
   if (!(HEAP32[HEAP32[i19 >> 2] >> 2] | 0)) break;
   HEAP32[i24 >> 2] = HEAP32[HEAP32[i19 >> 2] >> 2];
   f33 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + 24 >> 2]);
   if (f33 <= Math_fround(HEAPF32[i17 >> 2])) {
    HEAP32[HEAP32[i19 >> 2] >> 2] = HEAP32[HEAP32[i24 >> 2] >> 2];
    if (!(Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + 16 >> 2]) != Math_fround(0.0))) {
     i1 = 10;
     break L5;
    }
    HEAPF32[(HEAP32[i24 >> 2] | 0) + 16 >> 2] = Math_fround(0.0);
    _stbtt__hheap_free(i28, HEAP32[i24 >> 2] | 0);
   } else HEAP32[i19 >> 2] = HEAP32[HEAP32[i19 >> 2] >> 2];
  }
  while (1) {
   f33 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2]);
   if (!(f33 <= Math_fround(HEAPF32[i16 >> 2]))) break;
   f33 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2]);
   if (f33 != Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 12 >> 2])) {
    f33 = Math_fround(HEAPF32[i17 >> 2]);
    i27 = _stbtt__new_active(i28, HEAP32[i3 >> 2] | 0, HEAP32[i11 >> 2] | 0, f33, HEAP32[i31 >> 2] | 0) | 0;
    HEAP32[i25 >> 2] = i27;
    if (HEAP32[i25 >> 2] | 0) {
     if ((HEAP32[i5 >> 2] | 0) == 0 & (HEAP32[i13 >> 2] | 0) != 0) {
      f33 = Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 24 >> 2]);
      if (f33 < Math_fround(HEAPF32[i17 >> 2])) {
       f33 = Math_fround(HEAPF32[i17 >> 2]);
       HEAPF32[(HEAP32[i25 >> 2] | 0) + 24 >> 2] = f33;
      }
     }
     f33 = Math_fround(HEAPF32[(HEAP32[i25 >> 2] | 0) + 24 >> 2]);
     if (!(f33 >= Math_fround(HEAPF32[i17 >> 2]))) {
      i1 = 22;
      break L5;
     }
     HEAP32[HEAP32[i25 >> 2] >> 2] = HEAP32[i1 >> 2];
     HEAP32[i1 >> 2] = HEAP32[i25 >> 2];
    }
   }
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 20;
  }
  if (HEAP32[i1 >> 2] | 0) _stbtt__fill_active_edges_new(HEAP32[i29 >> 2] | 0, (HEAP32[i18 >> 2] | 0) + 4 | 0, HEAP32[HEAP32[i15 >> 2] >> 2] | 0, HEAP32[i1 >> 2] | 0, Math_fround(HEAPF32[i17 >> 2]));
  HEAPF32[i20 >> 2] = Math_fround(0.0);
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[HEAP32[i15 >> 2] >> 2] | 0)) break;
   f33 = Math_fround(HEAPF32[(HEAP32[i18 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2]);
   f33 = Math_fround(Math_fround(HEAPF32[i20 >> 2]) + f33);
   HEAPF32[i20 >> 2] = f33;
   f33 = Math_fround(HEAPF32[(HEAP32[i29 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2]);
   f33 = Math_fround(f33 + Math_fround(HEAPF32[i20 >> 2]));
   HEAPF32[i6 >> 2] = f33;
   f33 = Math_fround(Math_fround(Math_fround(+Math_abs(+(+Math_fround(HEAPF32[i6 >> 2])))) * Math_fround(255.0)) + Math_fround(.5));
   HEAPF32[i6 >> 2] = f33;
   i27 = ~~Math_fround(HEAPF32[i6 >> 2]);
   HEAP32[i7 >> 2] = i27;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) > 255 ? 255 : i27;
   i27 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i15 >> 2] | 0) + 8 >> 2] | 0) | 0;
   HEAP8[(HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] | 0) + (i27 + (HEAP32[i4 >> 2] | 0)) >> 0] = HEAP32[i7 >> 2];
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  HEAP32[i19 >> 2] = i1;
  while (1) {
   if (!(HEAP32[HEAP32[i19 >> 2] >> 2] | 0)) break;
   HEAP32[i26 >> 2] = HEAP32[HEAP32[i19 >> 2] >> 2];
   f33 = Math_fround(HEAPF32[(HEAP32[i26 >> 2] | 0) + 8 >> 2]);
   i27 = (HEAP32[i26 >> 2] | 0) + 4 | 0;
   f33 = Math_fround(Math_fround(HEAPF32[i27 >> 2]) + f33);
   HEAPF32[i27 >> 2] = f33;
   HEAP32[i19 >> 2] = HEAP32[HEAP32[i19 >> 2] >> 2];
  }
  HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 10) ___assert_fail(53003, 52491, 3151, 53016); else if ((i1 | 0) == 22) ___assert_fail(53046, 52491, 3170, 53016); else if ((i1 | 0) == 34) {
  _stbtt__hheap_cleanup(i28, HEAP32[i31 >> 2] | 0);
  if ((HEAP32[i29 >> 2] | 0) == (i30 | 0)) {
   STACKTOP = i32;
   return;
  }
  _free(HEAP32[i29 >> 2] | 0);
  STACKTOP = i32;
  return;
 }
}

function _drmp3dec_decode_frame(i2, i7, i9, i11, i5) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 17200 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(17200);
 i19 = i1 + 17192 | 0;
 i14 = i1 + 17188 | 0;
 i8 = i1 + 17184 | 0;
 i10 = i1 + 17180 | 0;
 i18 = i1 + 17176 | 0;
 i17 = i1 + 17172 | 0;
 i15 = i1 + 17168 | 0;
 i16 = i1 + 17164 | 0;
 i3 = i1 + 17160 | 0;
 i21 = i1 + 17156 | 0;
 i4 = i1 + 17152 | 0;
 i13 = i1 + 17140 | 0;
 i20 = i1 + 904 | 0;
 i6 = i1 + 900 | 0;
 i12 = i1;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i18 >> 2] = i11;
 HEAP32[i17 >> 2] = i5;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i21 >> 2] = 1;
 do if ((HEAP32[i10 >> 2] | 0) > 4) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + 6152 >> 0] | 0 | 0) == 255) if (_drmp3_hdr_compare((HEAP32[i14 >> 2] | 0) + 6152 | 0, HEAP32[i8 >> 2] | 0) | 0) {
  i11 = _drmp3_hdr_frame_bytes(HEAP32[i8 >> 2] | 0, HEAP32[(HEAP32[i14 >> 2] | 0) + 6148 >> 2] | 0) | 0;
  i11 = i11 + (_drmp3_hdr_padding(HEAP32[i8 >> 2] | 0) | 0) | 0;
  HEAP32[i3 >> 2] = i11;
  if ((HEAP32[i3 >> 2] | 0) != (HEAP32[i10 >> 2] | 0)) {
   if (((HEAP32[i3 >> 2] | 0) + 4 | 0) <= (HEAP32[i10 >> 2] | 0)) if (_drmp3_hdr_compare(HEAP32[i8 >> 2] | 0, (HEAP32[i8 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) | 0) | 0) break;
   HEAP32[i3 >> 2] = 0;
  }
 } while (0);
 do if (!(HEAP32[i3 >> 2] | 0)) {
  _memset(HEAP32[i14 >> 2] | 0, 0, 6668) | 0;
  i11 = _drmp3d_find_frame(HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, (HEAP32[i14 >> 2] | 0) + 6148 | 0, i3) | 0;
  HEAP32[i15 >> 2] = i11;
  if (HEAP32[i3 >> 2] | 0) if (((HEAP32[i15 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) | 0) <= (HEAP32[i10 >> 2] | 0)) break;
  HEAP32[HEAP32[i17 >> 2] >> 2] = HEAP32[i15 >> 2];
  HEAP32[i19 >> 2] = 0;
  i21 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i22;
  return i21 | 0;
 } while (0);
 HEAP32[i4 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
 i11 = (HEAP32[i14 >> 2] | 0) + 6152 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 HEAP8[i11 >> 0] = HEAP8[i10 >> 0] | 0;
 HEAP8[i11 + 1 >> 0] = HEAP8[i10 + 1 >> 0] | 0;
 HEAP8[i11 + 2 >> 0] = HEAP8[i10 + 2 >> 0] | 0;
 HEAP8[i11 + 3 >> 0] = HEAP8[i10 + 3 >> 0] | 0;
 HEAP32[HEAP32[i17 >> 2] >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i3 >> 2] | 0);
 HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] = ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 3 >> 0] | 0) & 192 | 0) == 192 ? 1 : 2;
 i11 = _drmp3_hdr_sample_rate_hz(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] = i11;
 HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] = 4 - ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) >> 1 & 3);
 i11 = _drmp3_hdr_bitrate_kbps(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] = i11;
 _drmp3_bs_init(i13, (HEAP32[i4 >> 2] | 0) + 4 | 0, (HEAP32[i3 >> 2] | 0) - 4 | 0);
 if (!((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) & 1)) _drmp3_bs_get_bits(i13, 16) | 0;
 L20 : do if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] | 0) == 3) {
  i15 = _drmp3_L3_read_side_info(i13, i20 + 2828 | 0, HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = i15;
  if ((HEAP32[i6 >> 2] | 0) >= 0) if ((HEAP32[i13 + 4 >> 2] | 0) <= (HEAP32[i13 + 8 >> 2] | 0)) {
   i15 = _drmp3_L3_restore_reservoir(HEAP32[i14 >> 2] | 0, i13, i20, HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i21 >> 2] = i15;
   L25 : do if ((HEAP32[i21 >> 2] | 0) != 0 & (HEAP32[i18 >> 2] | 0) != 0) {
    HEAP32[i16 >> 2] = 0;
    while (1) {
     if ((HEAP32[i16 >> 2] | 0) >= (((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) & 8 | 0 ? 2 : 1) | 0)) break L25;
     _memset(i20 + 2940 | 0, 0, 4608) | 0;
     i15 = i20 + 2828 + ((Math_imul(HEAP32[i16 >> 2] | 0, HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0) | 0) * 28 | 0) | 0;
     _drmp3_L3_decode(HEAP32[i14 >> 2] | 0, i20, i15, HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0);
     _drmp3d_synth_granule((HEAP32[i14 >> 2] | 0) + 2304 | 0, i20 + 2940 | 0, 18, HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i18 >> 2] | 0, i20 + 7708 | 0);
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + ((HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0) * 1152 | 0);
    }
   } while (0);
   _drmp3_L3_save_reservoir(HEAP32[i14 >> 2] | 0, i20);
   break;
  }
  _drmp3dec_init(HEAP32[i14 >> 2] | 0);
  HEAP32[i19 >> 2] = 0;
  i21 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i22;
  return i21 | 0;
 } else {
  i1 = HEAP32[i4 >> 2] | 0;
  if (!(HEAP32[i18 >> 2] | 0)) {
   i21 = _drmp3_hdr_frame_samples(i1) | 0;
   HEAP32[i19 >> 2] = i21;
   i21 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
  _drmp3_L12_read_scale_info(i1, i13, i12);
  _memset(i20 + 2940 | 0, 0, 4608) | 0;
  HEAP32[i15 >> 2] = 0;
  HEAP32[i16 >> 2] = 0;
  while (1) {
   if ((HEAP32[i16 >> 2] | 0) >= 3) break L20;
   i11 = _drmp3_L12_dequantize_granule(i20 + 2940 + (HEAP32[i15 >> 2] << 2) | 0, i13, i12, HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] | 1) | 0;
   i11 = (HEAP32[i15 >> 2] | 0) + i11 | 0;
   HEAP32[i15 >> 2] = i11;
   if (12 == (i11 | 0)) {
    HEAP32[i15 >> 2] = 0;
    _drmp3_L12_apply_scf_384(i12, i12 + (HEAP32[i16 >> 2] << 2) | 0, i20 + 2940 | 0);
    _drmp3d_synth_granule((HEAP32[i14 >> 2] | 0) + 2304 | 0, i20 + 2940 | 0, 12, HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i18 >> 2] | 0, i20 + 7708 | 0);
    _memset(i20 + 2940 | 0, 0, 4608) | 0;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + ((HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0) * 768 | 0);
   }
   if ((HEAP32[i13 + 4 >> 2] | 0) > (HEAP32[i13 + 8 >> 2] | 0)) break;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  }
  _drmp3dec_init(HEAP32[i14 >> 2] | 0);
  HEAP32[i19 >> 2] = 0;
  i21 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i22;
  return i21 | 0;
 } while (0);
 i21 = HEAP32[i21 >> 2] | 0;
 i21 = Math_imul(i21, _drmp3_hdr_frame_samples((HEAP32[i14 >> 2] | 0) + 6152 | 0) | 0) | 0;
 HEAP32[i19 >> 2] = i21;
 i21 = HEAP32[i19 >> 2] | 0;
 STACKTOP = i22;
 return i21 | 0;
}

function _drmp3_L3_read_side_info(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i11 = i1 + 32 | 0;
 i6 = i1 + 28 | 0;
 i8 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i9 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i13 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i7 >> 2] = (HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] & 192 | 0) == 192 ? 1 : 2;
 i3 = HEAP32[i8 >> 2] | 0;
 i4 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = (HEAPU8[i3 + 2 >> 0] >> 2 & 3) + (((HEAPU8[i4 >> 0] >> 3 & 1) + (HEAPU8[i4 >> 0] >> 4 & 1) | 0) * 3 | 0);
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = (i4 | 0) - ((i4 | 0) != 0 & 1);
 if (HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] & 8 | 0) {
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] << 1;
  i4 = _drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 9) | 0;
  HEAP32[i12 >> 2] = i4;
  i4 = _drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 7 + (HEAP32[i7 >> 2] | 0) | 0) | 0;
  HEAP32[i9 >> 2] = i4;
 } else {
  i4 = _drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 8 + (HEAP32[i7 >> 2] | 0) | 0) | 0;
  HEAP32[i12 >> 2] = i4 >>> (HEAP32[i7 >> 2] | 0);
 }
 while (1) {
  if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] & 192 | 0) == 192) HEAP32[i9 >> 2] = HEAP32[i9 >> 2] << 4;
  i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 12) | 0) & 65535;
  HEAP16[(HEAP32[i6 >> 2] | 0) + 4 >> 1] = i4;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAPU16[(HEAP32[i6 >> 2] | 0) + 4 >> 1] | 0);
  i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 9) | 0) & 65535;
  HEAP16[(HEAP32[i6 >> 2] | 0) + 6 >> 1] = i4;
  if ((HEAPU16[(HEAP32[i6 >> 2] | 0) + 6 >> 1] | 0) > 288) {
   i1 = 8;
   break;
  }
  i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 8) | 0) & 255;
  HEAP8[(HEAP32[i6 >> 2] | 0) + 10 >> 0] = i4;
  i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] & 8 | 0 ? 4 : 9) | 0) & 65535;
  HEAP16[(HEAP32[i6 >> 2] | 0) + 8 >> 1] = i4;
  HEAP32[HEAP32[i6 >> 2] >> 2] = 22112 + ((HEAP32[i5 >> 2] | 0) * 23 | 0);
  HEAP8[(HEAP32[i6 >> 2] | 0) + 13 >> 0] = 22;
  HEAP8[(HEAP32[i6 >> 2] | 0) + 14 >> 0] = 0;
  if (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 1) | 0) {
   i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 2) | 0) & 255;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 11 >> 0] = i4;
   if (!(HEAP8[(HEAP32[i6 >> 2] | 0) + 11 >> 0] | 0)) {
    i1 = 11;
    break;
   }
   i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 1) | 0) & 255;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 12 >> 0] = i4;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 18 >> 0] = 7;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 18 + 1 >> 0] = -1;
   do if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 11 >> 0] | 0) == 2) {
    HEAP32[i9 >> 2] = HEAP32[i9 >> 2] & 3855;
    if (HEAP8[(HEAP32[i6 >> 2] | 0) + 12 >> 0] | 0) {
     HEAP32[HEAP32[i6 >> 2] >> 2] = 22624 + ((HEAP32[i5 >> 2] | 0) * 40 | 0);
     HEAP8[(HEAP32[i6 >> 2] | 0) + 13 >> 0] = HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] & 8 | 0 ? 8 : 6;
     HEAP8[(HEAP32[i6 >> 2] | 0) + 14 >> 0] = 30;
     break;
    } else {
     HEAP8[(HEAP32[i6 >> 2] | 0) + 18 >> 0] = 8;
     HEAP32[HEAP32[i6 >> 2] >> 2] = 22304 + ((HEAP32[i5 >> 2] | 0) * 40 | 0);
     HEAP8[(HEAP32[i6 >> 2] | 0) + 13 >> 0] = 0;
     HEAP8[(HEAP32[i6 >> 2] | 0) + 14 >> 0] = 39;
     break;
    }
   } while (0);
   i4 = _drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 10) | 0;
   HEAP32[i10 >> 2] = i4;
   HEAP32[i10 >> 2] = HEAP32[i10 >> 2] << 5;
   i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 3) | 0) & 255;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 21 >> 0] = i4;
   i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 3) | 0) & 255;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 21 + 1 >> 0] = i4;
   i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 3) | 0) & 255;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 21 + 2 >> 0] = i4;
  } else {
   HEAP8[(HEAP32[i6 >> 2] | 0) + 11 >> 0] = 0;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 12 >> 0] = 0;
   i4 = _drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 15) | 0;
   HEAP32[i10 >> 2] = i4;
   i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 4) | 0) & 255;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 18 >> 0] = i4;
   i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 3) | 0) & 255;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 18 + 1 >> 0] = i4;
   HEAP8[(HEAP32[i6 >> 2] | 0) + 18 + 2 >> 0] = -1;
  }
  HEAP8[(HEAP32[i6 >> 2] | 0) + 15 >> 0] = (HEAP32[i10 >> 2] | 0) >>> 10;
  HEAP8[(HEAP32[i6 >> 2] | 0) + 15 + 1 >> 0] = (HEAP32[i10 >> 2] | 0) >>> 5 & 31;
  HEAP8[(HEAP32[i6 >> 2] | 0) + 15 + 2 >> 0] = HEAP32[i10 >> 2] & 31;
  if (HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] & 8 | 0) i1 = _drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 1) | 0; else i1 = (HEAPU16[(HEAP32[i6 >> 2] | 0) + 8 >> 1] | 0) >= 500 & 1;
  HEAP8[(HEAP32[i6 >> 2] | 0) + 24 >> 0] = i1;
  i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 1) | 0) & 255;
  HEAP8[(HEAP32[i6 >> 2] | 0) + 25 >> 0] = i4;
  i4 = (_drmp3_bs_get_bits(HEAP32[i11 >> 2] | 0, 1) | 0) & 255;
  HEAP8[(HEAP32[i6 >> 2] | 0) + 26 >> 0] = i4;
  HEAP8[(HEAP32[i6 >> 2] | 0) + 27 >> 0] = (HEAP32[i9 >> 2] | 0) >>> 12 & 15;
  HEAP32[i9 >> 2] = HEAP32[i9 >> 2] << 4;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 28;
  i4 = (HEAP32[i7 >> 2] | 0) + -1 | 0;
  HEAP32[i7 >> 2] = i4;
  if (!i4) {
   i1 = 22;
   break;
  }
 }
 if ((i1 | 0) == 8) {
  HEAP32[i14 >> 2] = -1;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 } else if ((i1 | 0) == 11) {
  HEAP32[i14 >> 2] = -1;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 } else if ((i1 | 0) == 22) if (((HEAP32[i13 >> 2] | 0) + (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) | 0) > ((HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i12 >> 2] << 3) | 0)) {
  HEAP32[i14 >> 2] = -1;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 } else {
  HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 return 0;
}

function _drmp3_src_read_frames_linear(i18, i2, i3, i14, i5) {
 i18 = i18 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i14 = i14 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, f24 = f0;
 i22 = 0;
 i23 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i20 = i1 + 48 | 0;
 i19 = i1 + 88 | 0;
 i7 = i1 + 40 | 0;
 i15 = i1 + 84 | 0;
 i6 = i1 + 80 | 0;
 i4 = i1 + 32 | 0;
 i21 = i1 + 24 | 0;
 i8 = i1 + 16 | 0;
 i9 = i1 + 8 | 0;
 i12 = i1 + 76 | 0;
 i11 = i1 + 72 | 0;
 i17 = i1 + 68 | 0;
 i16 = i1 + 64 | 0;
 i10 = i1;
 i13 = i1 + 60 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i19 >> 2] = i18;
 i18 = i7;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i18 + 4 >> 2] = i3;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i6 >> 2] = i5;
 if (!(HEAP32[i19 >> 2] | 0)) ___assert_fail(44155, 48387, 2461, 48546);
 i18 = i7;
 i14 = HEAP32[i18 + 4 >> 2] | 0;
 if (!(i14 >>> 0 > 0 | (i14 | 0) == 0 & (HEAP32[i18 >> 2] | 0) >>> 0 > 0)) ___assert_fail(36454, 48387, 2462, 48546);
 if (!(HEAP32[i15 >> 2] | 0)) ___assert_fail(36560, 48387, 2463, 48546);
 do if (!(HEAP8[(HEAP32[i19 >> 2] | 0) + 5160 + 8 >> 0] & 1)) {
  i5 = HEAP32[i19 >> 2] | 0;
  i5 = _drmp3_src_cache_read_frames(i5 + 1052 | 0, 1, 0, i5 + 28 | 0) | 0;
  i14 = getTempRet0() | 0;
  i18 = i8;
  HEAP32[i18 >> 2] = i5;
  HEAP32[i18 + 4 >> 2] = i14;
  i18 = i8;
  if (!((HEAP32[i18 >> 2] | 0) == 0 & (HEAP32[i18 + 4 >> 2] | 0) == 0)) {
   i18 = (HEAP32[i19 >> 2] | 0) + 5160 + 8 | 0;
   HEAP8[i18 >> 0] = HEAP8[i18 >> 0] & -2 | 1;
   break;
  }
  i21 = i20;
  HEAP32[i21 >> 2] = 0;
  HEAP32[i21 + 4 >> 2] = 0;
  i21 = i20;
  i22 = i21;
  i22 = HEAP32[i22 >> 2] | 0;
  i21 = i21 + 4 | 0;
  i21 = HEAP32[i21 >> 2] | 0;
  setTempRet0(i21 | 0);
  STACKTOP = i23;
  return i22 | 0;
 } while (0);
 do if (!((HEAPU8[(HEAP32[i19 >> 2] | 0) + 5160 + 8 >> 0] | 0) >>> 1 & 1)) {
  i8 = HEAP32[i19 >> 2] | 0;
  i8 = _drmp3_src_cache_read_frames(i8 + 1052 | 0, 1, 0, i8 + 28 + (HEAP32[i8 + 8 >> 2] << 2) | 0) | 0;
  i14 = getTempRet0() | 0;
  i18 = i9;
  HEAP32[i18 >> 2] = i8;
  HEAP32[i18 + 4 >> 2] = i14;
  i18 = i9;
  if (!((HEAP32[i18 >> 2] | 0) == 0 & (HEAP32[i18 + 4 >> 2] | 0) == 0)) {
   i18 = (HEAP32[i19 >> 2] | 0) + 5160 + 8 | 0;
   HEAP8[i18 >> 0] = HEAP8[i18 >> 0] & -3 | 2;
   break;
  }
  i21 = i20;
  HEAP32[i21 >> 2] = 0;
  HEAP32[i21 + 4 >> 2] = 0;
  i21 = i20;
  i22 = i21;
  i22 = HEAP32[i22 >> 2] | 0;
  i21 = i21 + 4 | 0;
  i21 = HEAP32[i21 >> 2] | 0;
  setTempRet0(i21 | 0);
  STACKTOP = i23;
  return i22 | 0;
 } while (0);
 HEAPF64[i4 >> 3] = +((HEAP32[HEAP32[i19 >> 2] >> 2] | 0) >>> 0) / +((HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2] | 0) >>> 0);
 i18 = i21;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 while (1) {
  i18 = i7;
  i14 = HEAP32[i18 + 4 >> 2] | 0;
  if (!(i14 >>> 0 > 0 | (i14 | 0) == 0 & (HEAP32[i18 >> 2] | 0) >>> 0 > 0)) break;
  HEAP32[i17 >> 2] = (HEAP32[i19 >> 2] | 0) + 28;
  i18 = HEAP32[i19 >> 2] | 0;
  HEAP32[i16 >> 2] = (i18 | 0) + 28 + (HEAP32[i18 + 8 >> 2] << 2);
  f24 = Math_fround(+HEAPF64[(HEAP32[i19 >> 2] | 0) + 5160 >> 3]);
  _drmp3_blend_f32(HEAP32[i15 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i16 >> 2] | 0, f24, HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0);
  i18 = (HEAP32[i19 >> 2] | 0) + 5160 | 0;
  HEAPF64[i18 >> 3] = +HEAPF64[i18 >> 3] + +HEAPF64[i4 >> 3];
  HEAP32[i11 >> 2] = ~~+HEAPF64[(HEAP32[i19 >> 2] | 0) + 5160 >> 3] >>> 0;
  i18 = (HEAP32[i19 >> 2] | 0) + 5160 | 0;
  HEAPF64[i18 >> 3] = +HEAPF64[i18 >> 3] - +((HEAP32[i11 >> 2] | 0) >>> 0);
  HEAP32[i12 >> 2] = 0;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) >>> 0 >= (HEAP32[i11 >> 2] | 0) >>> 0) break;
   HEAP32[i13 >> 2] = 0;
   while (1) {
    if ((HEAP32[i13 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0) >>> 0) break;
    f24 = Math_fround(HEAPF32[(HEAP32[i16 >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2] = f24;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
   i9 = _drmp3_src_cache_read_frames((HEAP32[i19 >> 2] | 0) + 1052 | 0, 1, 0, HEAP32[i16 >> 2] | 0) | 0;
   i14 = getTempRet0() | 0;
   i18 = i10;
   HEAP32[i18 >> 2] = i9;
   HEAP32[i18 + 4 >> 2] = i14;
   i18 = i10;
   if ((HEAP32[i18 >> 2] | 0) == 0 & (HEAP32[i18 + 4 >> 2] | 0) == 0) {
    i22 = 23;
    break;
   }
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  do if ((i22 | 0) == 23) {
   i22 = 0;
   HEAP32[i1 >> 2] = 0;
   while (1) {
    if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0) >>> 0) break;
    HEAPF32[(HEAP32[i16 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = Math_fround(0.0);
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   }
   if ((HEAPU8[(HEAP32[i19 >> 2] | 0) + 5160 + 8 >> 0] | 0) >>> 1 & 1 | 0) {
    i18 = (HEAP32[i19 >> 2] | 0) + 5160 + 8 | 0;
    HEAP8[i18 >> 0] = HEAP8[i18 >> 0] & -3;
    break;
   }
   if (HEAP32[i6 >> 2] | 0) {
    i18 = (HEAP32[i19 >> 2] | 0) + 5160 + 8 | 0;
    HEAP8[i18 >> 0] = HEAP8[i18 >> 0] & -2;
   }
  } while (0);
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] << 2);
  i18 = i7;
  i18 = _i64Subtract(HEAP32[i18 >> 2] | 0, HEAP32[i18 + 4 >> 2] | 0, 1, 0) | 0;
  i14 = getTempRet0() | 0;
  i9 = i7;
  HEAP32[i9 >> 2] = i18;
  HEAP32[i9 + 4 >> 2] = i14;
  i9 = i21;
  i9 = _i64Add(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, 1, 0) | 0;
  i14 = getTempRet0() | 0;
  i18 = i21;
  HEAP32[i18 >> 2] = i9;
  HEAP32[i18 + 4 >> 2] = i14;
  if (!((HEAPU8[(HEAP32[i19 >> 2] | 0) + 5160 + 8 >> 0] | 0) >>> 1 & 1)) {
   if (!(HEAP32[i6 >> 2] | 0)) break;
   if (!(HEAP8[(HEAP32[i19 >> 2] | 0) + 5160 + 8 >> 0] & 1)) break;
  }
 }
 i19 = i21;
 i22 = HEAP32[i19 + 4 >> 2] | 0;
 i21 = i20;
 HEAP32[i21 >> 2] = HEAP32[i19 >> 2];
 HEAP32[i21 + 4 >> 2] = i22;
 i21 = i20;
 i22 = i21;
 i22 = HEAP32[i22 >> 2] | 0;
 i21 = i21 + 4 | 0;
 i21 = HEAP32[i21 >> 2] | 0;
 setTempRet0(i21 | 0);
 STACKTOP = i23;
 return i22 | 0;
}

function _stbi__create_png_image(i2, i5, i6, i8, i4, i3, i7) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i30 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 i29 = i1 + 196 | 0;
 i27 = i1 + 192 | 0;
 i13 = i1 + 188 | 0;
 i14 = i1 + 184 | 0;
 i18 = i1 + 180 | 0;
 i11 = i1 + 176 | 0;
 i10 = i1 + 172 | 0;
 i31 = i1 + 168 | 0;
 i32 = i1 + 164 | 0;
 i17 = i1 + 160 | 0;
 i28 = i1 + 156 | 0;
 i20 = i1 + 152 | 0;
 i22 = i1 + 96 | 0;
 i25 = i1 + 64 | 0;
 i23 = i1 + 32 | 0;
 i26 = i1;
 i12 = i1 + 148 | 0;
 i16 = i1 + 144 | 0;
 i21 = i1 + 140 | 0;
 i24 = i1 + 136 | 0;
 i15 = i1 + 132 | 0;
 i19 = i1 + 128 | 0;
 i9 = i1 + 124 | 0;
 HEAP32[i27 >> 2] = i2;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i18 >> 2] = i8;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i31 >> 2] = i7;
 HEAP32[i32 >> 2] = (HEAP32[i11 >> 2] | 0) == 16 ? 2 : 1;
 i1 = Math_imul(HEAP32[i18 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
 HEAP32[i17 >> 2] = i1;
 i1 = HEAP32[i27 >> 2] | 0;
 if (!(HEAP32[i31 >> 2] | 0)) {
  i32 = _stbi__create_png_image_raw(i1, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i18 >> 2] | 0, HEAP32[HEAP32[HEAP32[i27 >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[i27 >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
  HEAP32[i29 >> 2] = i32;
  i32 = HEAP32[i29 >> 2] | 0;
  STACKTOP = i30;
  return i32 | 0;
 }
 i32 = _stbi__malloc_mad3(HEAP32[HEAP32[i1 >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[i27 >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[i17 >> 2] | 0, 0) | 0;
 HEAP32[i28 >> 2] = i32;
 HEAP32[i20 >> 2] = 0;
 while (1) {
  if ((HEAP32[i20 >> 2] | 0) >= 7) {
   i1 = 16;
   break;
  };
  HEAP32[i22 >> 2] = HEAP32[6512];
  HEAP32[i22 + 4 >> 2] = HEAP32[6513];
  HEAP32[i22 + 8 >> 2] = HEAP32[6514];
  HEAP32[i22 + 12 >> 2] = HEAP32[6515];
  HEAP32[i22 + 16 >> 2] = HEAP32[6516];
  HEAP32[i22 + 20 >> 2] = HEAP32[6517];
  HEAP32[i22 + 24 >> 2] = HEAP32[6518];
  HEAP32[i25 >> 2] = HEAP32[6520];
  HEAP32[i25 + 4 >> 2] = HEAP32[6521];
  HEAP32[i25 + 8 >> 2] = HEAP32[6522];
  HEAP32[i25 + 12 >> 2] = HEAP32[6523];
  HEAP32[i25 + 16 >> 2] = HEAP32[6524];
  HEAP32[i25 + 20 >> 2] = HEAP32[6525];
  HEAP32[i25 + 24 >> 2] = HEAP32[6526];
  HEAP32[i23 >> 2] = HEAP32[6528];
  HEAP32[i23 + 4 >> 2] = HEAP32[6529];
  HEAP32[i23 + 8 >> 2] = HEAP32[6530];
  HEAP32[i23 + 12 >> 2] = HEAP32[6531];
  HEAP32[i23 + 16 >> 2] = HEAP32[6532];
  HEAP32[i23 + 20 >> 2] = HEAP32[6533];
  HEAP32[i23 + 24 >> 2] = HEAP32[6534];
  HEAP32[i26 >> 2] = HEAP32[6536];
  HEAP32[i26 + 4 >> 2] = HEAP32[6537];
  HEAP32[i26 + 8 >> 2] = HEAP32[6538];
  HEAP32[i26 + 12 >> 2] = HEAP32[6539];
  HEAP32[i26 + 16 >> 2] = HEAP32[6540];
  HEAP32[i26 + 20 >> 2] = HEAP32[6541];
  HEAP32[i26 + 24 >> 2] = HEAP32[6542];
  i32 = HEAP32[i20 >> 2] << 2 | 0;
  i31 = HEAP32[i23 + (HEAP32[i20 >> 2] << 2) >> 2] | 0;
  HEAP32[i21 >> 2] = (((HEAP32[HEAP32[HEAP32[i27 >> 2] >> 2] >> 2] | 0) - (HEAP32[i22 + i32 >> 2] | 0) + i31 - 1 | 0) >>> 0) / ((i31 | 0) >>> 0) | 0;
  i31 = HEAP32[i20 >> 2] << 2 | 0;
  i32 = HEAP32[i26 + (HEAP32[i20 >> 2] << 2) >> 2] | 0;
  HEAP32[i24 >> 2] = (((HEAP32[(HEAP32[HEAP32[i27 >> 2] >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i25 + i31 >> 2] | 0) + i32 - 1 | 0) >>> 0) / ((i32 | 0) >>> 0) | 0;
  if ((HEAP32[i21 >> 2] | 0) != 0 & (HEAP32[i24 >> 2] | 0) != 0) {
   i32 = Math_imul(HEAP32[(HEAP32[HEAP32[i27 >> 2] >> 2] | 0) + 8 >> 2] | 0, HEAP32[i21 >> 2] | 0) | 0;
   i32 = ((Math_imul(i32, HEAP32[i11 >> 2] | 0) | 0) + 7 >> 3) + 1 | 0;
   i32 = Math_imul(i32, HEAP32[i24 >> 2] | 0) | 0;
   HEAP32[i15 >> 2] = i32;
   if (!(_stbi__create_png_image_raw(HEAP32[i27 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i18 >> 2] | 0, HEAP32[i21 >> 2] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
    i1 = 7;
    break;
   }
   HEAP32[i16 >> 2] = 0;
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i24 >> 2] | 0)) break;
    HEAP32[i12 >> 2] = 0;
    while (1) {
     i1 = HEAP32[i16 >> 2] | 0;
     if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i21 >> 2] | 0)) break;
     i31 = Math_imul(i1, HEAP32[i26 + (HEAP32[i20 >> 2] << 2) >> 2] | 0) | 0;
     HEAP32[i19 >> 2] = i31 + (HEAP32[i25 + (HEAP32[i20 >> 2] << 2) >> 2] | 0);
     i31 = Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i23 + (HEAP32[i20 >> 2] << 2) >> 2] | 0) | 0;
     HEAP32[i9 >> 2] = i31 + (HEAP32[i22 + (HEAP32[i20 >> 2] << 2) >> 2] | 0);
     i31 = Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[HEAP32[HEAP32[i27 >> 2] >> 2] >> 2] | 0) | 0;
     i31 = (HEAP32[i28 >> 2] | 0) + (Math_imul(i31, HEAP32[i17 >> 2] | 0) | 0) | 0;
     i31 = i31 + (Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0) | 0;
     i32 = Math_imul(HEAP32[i16 >> 2] | 0, HEAP32[i21 >> 2] | 0) | 0;
     i32 = (HEAP32[(HEAP32[i27 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(i32 + (HEAP32[i12 >> 2] | 0) | 0, HEAP32[i17 >> 2] | 0) | 0) | 0;
     _memcpy(i31 | 0, i32 | 0, HEAP32[i17 >> 2] | 0) | 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
    }
    HEAP32[i16 >> 2] = i1 + 1;
   }
   _free(HEAP32[(HEAP32[i27 >> 2] | 0) + 12 >> 2] | 0);
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
  }
  HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 7) {
  _free(HEAP32[i28 >> 2] | 0);
  HEAP32[i29 >> 2] = 0;
  i32 = HEAP32[i29 >> 2] | 0;
  STACKTOP = i30;
  return i32 | 0;
 } else if ((i1 | 0) == 16) {
  HEAP32[(HEAP32[i27 >> 2] | 0) + 12 >> 2] = HEAP32[i28 >> 2];
  HEAP32[i29 >> 2] = 1;
  i32 = HEAP32[i29 >> 2] | 0;
  STACKTOP = i30;
  return i32 | 0;
 }
 return 0;
}

function _hexfloat(i18, i22, i21, i23, i19) {
 i18 = i18 | 0;
 i22 = i22 | 0;
 i21 = i21 | 0;
 i23 = i23 | 0;
 i19 = i19 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0;
 i16 = 0;
 i20 = i18 + 4 | 0;
 i2 = HEAP32[i20 >> 2] | 0;
 i17 = i18 + 104 | 0;
 if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
  HEAP32[i20 >> 2] = i2 + 1;
  i2 = HEAPU8[i2 >> 0] | 0;
 } else i2 = ___shgetc(i18) | 0;
 i6 = 0;
 L5 : while (1) {
  switch (i2 | 0) {
  case 46:
   {
    i16 = 10;
    break L5;
   }
  case 48:
   break;
  default:
   {
    i3 = 0;
    i4 = 0;
    i8 = 0;
    break L5;
   }
  }
  i2 = HEAP32[i20 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
   HEAP32[i20 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i18) | 0;
  i6 = 1;
 }
 if ((i16 | 0) == 10) {
  i2 = HEAP32[i20 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
   HEAP32[i20 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i18) | 0;
  if ((i2 | 0) == 48) {
   i3 = 0;
   i4 = 0;
   do {
    i2 = HEAP32[i20 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
     HEAP32[i20 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
    } else i2 = ___shgetc(i18) | 0;
    i3 = _i64Add(i3 | 0, i4 | 0, -1, -1) | 0;
    i4 = getTempRet0() | 0;
   } while ((i2 | 0) == 48);
   i6 = 1;
   i8 = 1;
  } else {
   i3 = 0;
   i4 = 0;
   i8 = 1;
  }
 }
 i15 = 0;
 i14 = 0;
 i13 = i4;
 i12 = 0;
 d7 = 1.0;
 i4 = 0;
 d1 = 0.0;
 while (1) {
  i11 = i2 + -48 | 0;
  i9 = i2 | 32;
  if (i11 >>> 0 < 10) i16 = 24; else {
   i10 = (i2 | 0) == 46;
   if (!(i10 | (i9 + -97 | 0) >>> 0 < 6)) break;
   if (i10) if (!i8) {
    i3 = i14;
    i13 = i15;
    i11 = i14;
    i10 = i15;
    i8 = 1;
    i9 = i12;
    d5 = d7;
   } else {
    i2 = 46;
    break;
   } else i16 = 24;
  }
  if ((i16 | 0) == 24) {
   i16 = 0;
   i2 = (i2 | 0) > 57 ? i9 + -87 | 0 : i11;
   do if ((i15 | 0) < 0 | (i15 | 0) == 0 & i14 >>> 0 < 8) {
    i9 = i12;
    d5 = d7;
    i4 = i2 + (i4 << 4) | 0;
   } else if ((i15 | 0) < 0 | (i15 | 0) == 0 & i14 >>> 0 < 14) {
    d7 = d7 * .0625;
    i9 = i12;
    d5 = d7;
    d1 = d1 + d7 * +(i2 | 0);
    break;
   } else {
    i11 = (i12 | 0) != 0 | (i2 | 0) == 0;
    i9 = i11 ? i12 : 1;
    d5 = d7;
    d1 = i11 ? d1 : d1 + d7 * .5;
    break;
   } while (0);
   i11 = _i64Add(i14 | 0, i15 | 0, 1, 0) | 0;
   i10 = getTempRet0() | 0;
   i6 = 1;
  }
  i2 = HEAP32[i20 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
   HEAP32[i20 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i18) | 0;
  i15 = i10;
  i14 = i11;
  i12 = i9;
  d7 = d5;
 }
 do if (!i6) {
  i2 = (HEAP32[i17 >> 2] | 0) == 0;
  if (!i2) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
  if (!i19) ___shlim(i18, 0, 0); else if (!i2) {
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
   if (!((i8 | 0) == 0 | i2)) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
  }
  d1 = +(i23 | 0) * 0.0;
 } else {
  i8 = (i8 | 0) == 0;
  i9 = i8 ? i14 : i3;
  i8 = i8 ? i15 : i13;
  if ((i15 | 0) < 0 | (i15 | 0) == 0 & i14 >>> 0 < 8) {
   i6 = i14;
   i3 = i15;
   do {
    i4 = i4 << 4;
    i16 = i6;
    i6 = _i64Add(i6 | 0, i3 | 0, 1, 0) | 0;
    i15 = i3;
    i3 = getTempRet0() | 0;
   } while ((i15 | 0) < 0 | (i15 | 0) == 0 & i16 >>> 0 < 7);
  }
  if ((i2 | 32 | 0) == 112) {
   i3 = _scanexp(i18, i19) | 0;
   i2 = getTempRet0() | 0;
   if ((i3 | 0) == 0 & (i2 | 0) == -2147483648) {
    if (!i19) {
     ___shlim(i18, 0, 0);
     d1 = 0.0;
     break;
    }
    if (!(HEAP32[i17 >> 2] | 0)) {
     i3 = 0;
     i2 = 0;
    } else {
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
     i3 = 0;
     i2 = 0;
    }
   }
  } else if (!(HEAP32[i17 >> 2] | 0)) {
   i3 = 0;
   i2 = 0;
  } else {
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
   i3 = 0;
   i2 = 0;
  }
  i20 = _bitshift64Shl(i9 | 0, i8 | 0, 2) | 0;
  i20 = _i64Add(i20 | 0, getTempRet0() | 0, -32, -1) | 0;
  i2 = _i64Add(i20 | 0, getTempRet0() | 0, i3 | 0, i2 | 0) | 0;
  i3 = getTempRet0() | 0;
  if (!i4) {
   d1 = +(i23 | 0) * 0.0;
   break;
  }
  i20 = 0 - i21 | 0;
  i19 = ((i20 | 0) < 0) << 31 >> 31;
  if ((i3 | 0) > (i19 | 0) | (i3 | 0) == (i19 | 0) & i2 >>> 0 > i20 >>> 0) {
   i22 = ___errno_location() | 0;
   HEAP32[i22 >> 2] = 68;
   d1 = +(i23 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i20 = i21 + -106 | 0;
  i19 = ((i20 | 0) < 0) << 31 >> 31;
  if ((i3 | 0) < (i19 | 0) | (i3 | 0) == (i19 | 0) & i2 >>> 0 < i20 >>> 0) {
   i22 = ___errno_location() | 0;
   HEAP32[i22 >> 2] = 68;
   d1 = +(i23 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if ((i4 | 0) > -1) {
   do {
    i20 = !(d1 >= .5);
    i4 = i4 << 1 | (i20 ^ 1) & 1;
    d1 = d1 + (i20 ? d1 : d1 + -1.0);
    i2 = _i64Add(i2 | 0, i3 | 0, -1, -1) | 0;
    i3 = getTempRet0() | 0;
   } while ((i4 | 0) > -1);
   i6 = i2;
   d7 = d1;
  } else {
   i6 = i2;
   d7 = d1;
  }
  i20 = ((i22 | 0) < 0) << 31 >> 31;
  i2 = _i64Subtract(32, 0, i21 | 0, ((i21 | 0) < 0) << 31 >> 31 | 0) | 0;
  i2 = _i64Add(i2 | 0, getTempRet0() | 0, i6 | 0, i3 | 0) | 0;
  i21 = getTempRet0() | 0;
  if ((i21 | 0) < (i20 | 0) | (i21 | 0) == (i20 | 0) & i2 >>> 0 < i22 >>> 0) if ((i2 | 0) > 0) i16 = 65; else {
   i3 = 0;
   i2 = 84;
   i16 = 67;
  } else {
   i2 = i22;
   i16 = 65;
  }
  if ((i16 | 0) == 65) if ((i2 | 0) < 53) {
   i3 = i2;
   i2 = 84 - i2 | 0;
   i16 = 67;
  } else {
   d5 = 0.0;
   d1 = +(i23 | 0);
  }
  if ((i16 | 0) == 67) {
   d1 = +(i23 | 0);
   d5 = +_copysignl(+_scalbn(1.0, i2), d1);
   i2 = i3;
  }
  i23 = (i4 & 1 | 0) == 0 & (d7 != 0.0 & (i2 | 0) < 32);
  d1 = (i23 ? 0.0 : d7) * d1 + (d5 + d1 * +((i4 + (i23 & 1) | 0) >>> 0)) - d5;
  if (!(d1 != 0.0)) {
   i23 = ___errno_location() | 0;
   HEAP32[i23 >> 2] = 68;
  }
  d1 = +_scalbnl(d1, i6);
 } while (0);
 return +d1;
}

function _stbv_codebook_decode_deinterleave_repeat(i8, i2, i14, i5, i4, i16, i11, i17) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i14 = i14 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 i17 = i17 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, f28 = f0;
 i27 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i26 = i1 + 68 | 0;
 i23 = i1 + 64 | 0;
 i3 = i1 + 60 | 0;
 i15 = i1 + 56 | 0;
 i6 = i1 + 52 | 0;
 i22 = i1 + 48 | 0;
 i25 = i1 + 44 | 0;
 i12 = i1 + 40 | 0;
 i18 = i1 + 36 | 0;
 i21 = i1 + 32 | 0;
 i24 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i20 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i13 = i1 + 8 | 0;
 i19 = i1 + 4 | 0;
 HEAP32[i23 >> 2] = i8;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i22 >> 2] = i4;
 HEAP32[i25 >> 2] = i16;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i21 >> 2] = HEAP32[HEAP32[i22 >> 2] >> 2];
 HEAP32[i24 >> 2] = HEAP32[HEAP32[i25 >> 2] >> 2];
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 if (!(HEAPU8[(HEAP32[i3 >> 2] | 0) + 21 >> 0] | 0)) {
  i25 = _stbv_error(HEAP32[i23 >> 2] | 0, 21) | 0;
  HEAP32[i26 >> 2] = i25;
  i26 = HEAP32[i26 >> 2] | 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 while (1) {
  if ((HEAP32[i18 >> 2] | 0) <= 0) {
   i1 = 37;
   break;
  }
  HEAPF32[i10 >> 2] = Math_fround(0.0);
  if ((HEAP32[(HEAP32[i23 >> 2] | 0) + 1396 >> 2] | 0) < 10) _stbv_prep_huffman(HEAP32[i23 >> 2] | 0);
  HEAP32[i20 >> 2] = HEAP32[(HEAP32[i23 >> 2] | 0) + 1392 >> 2] & 1023;
  HEAP32[i20 >> 2] = HEAP16[(HEAP32[i3 >> 2] | 0) + 36 + (HEAP32[i20 >> 2] << 1) >> 1];
  if ((HEAP32[i20 >> 2] | 0) >= 0) {
   HEAP32[i13 >> 2] = HEAPU8[(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) >> 0];
   i17 = (HEAP32[i23 >> 2] | 0) + 1392 | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) >>> (HEAP32[i13 >> 2] | 0);
   i17 = (HEAP32[i23 >> 2] | 0) + 1396 | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
   if ((HEAP32[(HEAP32[i23 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
    HEAP32[(HEAP32[i23 >> 2] | 0) + 1396 >> 2] = 0;
    HEAP32[i20 >> 2] = -1;
   }
  } else {
   i17 = _stbv_codebook_decode_scalar_raw(HEAP32[i23 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = i17;
  }
  if (HEAP8[(HEAP32[i3 >> 2] | 0) + 23 >> 0] | 0) if ((HEAP32[i20 >> 2] | 0) >= (HEAP32[(HEAP32[i3 >> 2] | 0) + 2092 >> 2] | 0)) {
   i1 = 13;
   break;
  }
  if ((HEAP32[i20 >> 2] | 0) < 0) {
   i1 = 15;
   break;
  }
  i17 = (HEAP32[i21 >> 2] | 0) + (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
  if ((i17 + (HEAP32[i7 >> 2] | 0) | 0) > (Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) {
   i16 = Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
   i17 = Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i16 - (i17 - (HEAP32[i21 >> 2] | 0));
  }
  i17 = Math_imul(HEAP32[i20 >> 2] | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
  HEAP32[i20 >> 2] = i17;
  i17 = (HEAP8[(HEAP32[i3 >> 2] | 0) + 22 >> 0] | 0) != 0;
  HEAP32[i9 >> 2] = 0;
  L23 : do if (i17) while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break L23;
   f28 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) << 2) >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i10 >> 2]));
   HEAPF32[i19 >> 2] = f28;
   if (HEAP32[(HEAP32[i15 >> 2] | 0) + (HEAP32[i21 >> 2] << 2) >> 2] | 0) {
    f28 = Math_fround(HEAPF32[i19 >> 2]);
    i17 = (HEAP32[(HEAP32[i15 >> 2] | 0) + (HEAP32[i21 >> 2] << 2) >> 2] | 0) + (HEAP32[i24 >> 2] << 2) | 0;
    f28 = Math_fround(Math_fround(HEAPF32[i17 >> 2]) + f28);
    HEAPF32[i17 >> 2] = f28;
   }
   i17 = (HEAP32[i21 >> 2] | 0) + 1 | 0;
   HEAP32[i21 >> 2] = i17;
   if ((i17 | 0) == (HEAP32[i6 >> 2] | 0)) {
    HEAP32[i21 >> 2] = 0;
    HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
   }
   f28 = Math_fround(HEAPF32[i19 >> 2]);
   HEAPF32[i10 >> 2] = f28;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  } else while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break L23;
   f28 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) << 2) >> 2]);
   f28 = Math_fround(f28 + Math_fround(HEAPF32[i10 >> 2]));
   HEAPF32[i1 >> 2] = f28;
   if (HEAP32[(HEAP32[i15 >> 2] | 0) + (HEAP32[i21 >> 2] << 2) >> 2] | 0) {
    f28 = Math_fround(HEAPF32[i1 >> 2]);
    i17 = (HEAP32[(HEAP32[i15 >> 2] | 0) + (HEAP32[i21 >> 2] << 2) >> 2] | 0) + (HEAP32[i24 >> 2] << 2) | 0;
    f28 = Math_fround(Math_fround(HEAPF32[i17 >> 2]) + f28);
    HEAPF32[i17 >> 2] = f28;
   }
   i17 = (HEAP32[i21 >> 2] | 0) + 1 | 0;
   HEAP32[i21 >> 2] = i17;
   if ((i17 | 0) == (HEAP32[i6 >> 2] | 0)) {
    HEAP32[i21 >> 2] = 0;
    HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
   }
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  } while (0);
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
 }
 if ((i1 | 0) == 13) ___assert_fail(47513, 47181, 1834, 47549); else if ((i1 | 0) == 15) {
  if (!(HEAP8[(HEAP32[i23 >> 2] | 0) + 1376 >> 0] | 0)) if (HEAP32[(HEAP32[i23 >> 2] | 0) + 1384 >> 2] | 0) {
   HEAP32[i26 >> 2] = 0;
   i26 = HEAP32[i26 >> 2] | 0;
   STACKTOP = i27;
   return i26 | 0;
  }
  i25 = _stbv_error(HEAP32[i23 >> 2] | 0, 21) | 0;
  HEAP32[i26 >> 2] = i25;
  i26 = HEAP32[i26 >> 2] | 0;
  STACKTOP = i27;
  return i26 | 0;
 } else if ((i1 | 0) == 37) {
  HEAP32[HEAP32[i22 >> 2] >> 2] = HEAP32[i21 >> 2];
  HEAP32[HEAP32[i25 >> 2] >> 2] = HEAP32[i24 >> 2];
  HEAP32[i26 >> 2] = 1;
  i26 = HEAP32[i26 >> 2] | 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 return 0;
}

function _stbtt__handle_clipped_edge(i4, i5, i3, f1, f7, f6, f8) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 f1 = Math_fround(f1);
 f7 = Math_fround(f7);
 f6 = Math_fround(f6);
 f8 = Math_fround(f8);
 var i2 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i2 + 24 | 0;
 i12 = i2 + 20 | 0;
 i10 = i2 + 16 | 0;
 i13 = i2 + 12 | 0;
 i15 = i2 + 8 | 0;
 i14 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i10 >> 2] = i3;
 HEAPF32[i13 >> 2] = f1;
 HEAPF32[i15 >> 2] = f7;
 HEAPF32[i14 >> 2] = f6;
 HEAPF32[i9 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i15 >> 2]);
 if (f8 == Math_fround(HEAPF32[i9 >> 2])) {
  STACKTOP = i16;
  return;
 }
 f8 = Math_fround(HEAPF32[i15 >> 2]);
 if (!(f8 < Math_fround(HEAPF32[i9 >> 2]))) ___assert_fail(53184, 52491, 2921, 53192);
 f8 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2]);
 if (!(f8 <= Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2]))) ___assert_fail(53219, 52491, 2922, 53192);
 f8 = Math_fround(HEAPF32[i15 >> 2]);
 if (f8 > Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2])) {
  STACKTOP = i16;
  return;
 }
 f8 = Math_fround(HEAPF32[i9 >> 2]);
 if (f8 < Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2])) {
  STACKTOP = i16;
  return;
 }
 f8 = Math_fround(HEAPF32[i15 >> 2]);
 if (f8 < Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2])) {
  f8 = Math_fround(HEAPF32[i14 >> 2]);
  f8 = Math_fround(f8 - Math_fround(HEAPF32[i13 >> 2]));
  f7 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2]);
  f7 = Math_fround(f8 * Math_fround(f7 - Math_fround(HEAPF32[i15 >> 2])));
  f8 = Math_fround(HEAPF32[i9 >> 2]);
  f8 = Math_fround(f7 / Math_fround(f8 - Math_fround(HEAPF32[i15 >> 2])));
  f8 = Math_fround(Math_fround(HEAPF32[i13 >> 2]) + f8);
  HEAPF32[i13 >> 2] = f8;
  f8 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 20 >> 2]);
  HEAPF32[i15 >> 2] = f8;
 }
 f8 = Math_fround(HEAPF32[i9 >> 2]);
 if (f8 > Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2])) {
  f8 = Math_fround(HEAPF32[i14 >> 2]);
  f8 = Math_fround(f8 - Math_fround(HEAPF32[i13 >> 2]));
  f7 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2]);
  f7 = Math_fround(f8 * Math_fround(f7 - Math_fround(HEAPF32[i9 >> 2])));
  f8 = Math_fround(HEAPF32[i9 >> 2]);
  f8 = Math_fround(f7 / Math_fround(f8 - Math_fround(HEAPF32[i15 >> 2])));
  f8 = Math_fround(Math_fround(HEAPF32[i14 >> 2]) + f8);
  HEAPF32[i14 >> 2] = f8;
  f8 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 24 >> 2]);
  HEAPF32[i9 >> 2] = f8;
 }
 f8 = Math_fround(HEAPF32[i13 >> 2]);
 do if (f8 == Math_fround(HEAP32[i12 >> 2] | 0)) {
  f8 = Math_fround(HEAPF32[i14 >> 2]);
  if (f8 <= Math_fround((HEAP32[i12 >> 2] | 0) + 1 | 0)) break; else ___assert_fail(53234, 52491, 2935, 53192);
 } else {
  f8 = Math_fround(HEAPF32[i13 >> 2]);
  if (f8 == Math_fround((HEAP32[i12 >> 2] | 0) + 1 | 0)) {
   f8 = Math_fround(HEAPF32[i14 >> 2]);
   if (f8 >= Math_fround(HEAP32[i12 >> 2] | 0)) break; else ___assert_fail(53244, 52491, 2937, 53192);
  }
  f8 = Math_fround(HEAPF32[i13 >> 2]);
  if (f8 <= Math_fround(HEAP32[i12 >> 2] | 0)) {
   f8 = Math_fround(HEAPF32[i14 >> 2]);
   if (f8 <= Math_fround(HEAP32[i12 >> 2] | 0)) break; else ___assert_fail(53252, 52491, 2939, 53192);
  }
  f1 = Math_fround(HEAPF32[i13 >> 2]);
  i5 = f1 >= Math_fround((HEAP32[i12 >> 2] | 0) + 1 | 0);
  f1 = Math_fround(HEAPF32[i14 >> 2]);
  i2 = HEAP32[i12 >> 2] | 0;
  if (i5) if (f1 >= Math_fround(i2 + 1 | 0)) break; else ___assert_fail(53260, 52491, 2941, 53192);
  if (!(f1 >= Math_fround(i2 | 0))) ___assert_fail(53270, 52491, 2943, 53192);
  f8 = Math_fround(HEAPF32[i14 >> 2]);
  if (f8 <= Math_fround((HEAP32[i12 >> 2] | 0) + 1 | 0)) break; else ___assert_fail(53270, 52491, 2943, 53192);
 } while (0);
 f8 = Math_fround(HEAPF32[i13 >> 2]);
 if (f8 <= Math_fround(HEAP32[i12 >> 2] | 0)) {
  f8 = Math_fround(HEAPF32[i14 >> 2]);
  if (f8 <= Math_fround(HEAP32[i12 >> 2] | 0)) {
   f7 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 16 >> 2]);
   f8 = Math_fround(HEAPF32[i9 >> 2]);
   f8 = Math_fround(f7 * Math_fround(f8 - Math_fround(HEAPF32[i15 >> 2])));
   i15 = (HEAP32[i11 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) | 0;
   f8 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f8);
   HEAPF32[i15 >> 2] = f8;
   STACKTOP = i16;
   return;
  }
 }
 f8 = Math_fround(HEAPF32[i13 >> 2]);
 if (f8 >= Math_fround((HEAP32[i12 >> 2] | 0) + 1 | 0)) {
  f8 = Math_fround(HEAPF32[i14 >> 2]);
  if (f8 >= Math_fround((HEAP32[i12 >> 2] | 0) + 1 | 0)) {
   STACKTOP = i16;
   return;
  }
 }
 f8 = Math_fround(HEAPF32[i13 >> 2]);
 if (!(f8 >= Math_fround(HEAP32[i12 >> 2] | 0))) ___assert_fail(53291, 52491, 2950, 53192);
 f8 = Math_fround(HEAPF32[i13 >> 2]);
 if (!(f8 <= Math_fround((HEAP32[i12 >> 2] | 0) + 1 | 0))) ___assert_fail(53291, 52491, 2950, 53192);
 f8 = Math_fround(HEAPF32[i14 >> 2]);
 if (!(f8 >= Math_fround(HEAP32[i12 >> 2] | 0))) ___assert_fail(53291, 52491, 2950, 53192);
 f8 = Math_fround(HEAPF32[i14 >> 2]);
 if (!(f8 <= Math_fround((HEAP32[i12 >> 2] | 0) + 1 | 0))) ___assert_fail(53291, 52491, 2950, 53192);
 f7 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + 16 >> 2]);
 f6 = Math_fround(HEAPF32[i9 >> 2]);
 f6 = Math_fround(f7 * Math_fround(f6 - Math_fround(HEAPF32[i15 >> 2])));
 f7 = Math_fround(HEAPF32[i13 >> 2]);
 f7 = Math_fround(f7 - Math_fround(HEAP32[i12 >> 2] | 0));
 f8 = Math_fround(HEAPF32[i14 >> 2]);
 f8 = Math_fround(f6 * Math_fround(Math_fround(1.0) - Math_fround(Math_fround(f7 + Math_fround(f8 - Math_fround(HEAP32[i12 >> 2] | 0))) / Math_fround(2.0))));
 i15 = (HEAP32[i11 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) | 0;
 f8 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f8);
 HEAPF32[i15 >> 2] = f8;
 STACKTOP = i16;
 return;
}

function _DrawBuffersDefault() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i14 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 i7 = i15 + 344 | 0;
 i10 = i15 + 216 | 0;
 i9 = i15 + 280 | 0;
 i8 = i15 + 152 | 0;
 i3 = i15 + 148 | 0;
 i2 = i15 + 144 | 0;
 i6 = i15 + 80 | 0;
 i11 = i15 + 16 | 0;
 i12 = i15 + 8 | 0;
 i4 = i15 + 4 | 0;
 i5 = i15;
 i13 = i9;
 i16 = 175512;
 i17 = i13 + 64 | 0;
 do {
  HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
  i13 = i13 + 4 | 0;
  i16 = i16 + 4 | 0;
 } while ((i13 | 0) < (i17 | 0));
 i13 = i8;
 i16 = 175580;
 i17 = i13 + 64 | 0;
 do {
  HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
  i13 = i13 + 4 | 0;
  i16 = i16 + 4 | 0;
 } while ((i13 | 0) < (i17 | 0));
 HEAP32[i3 >> 2] = 1;
 HEAP32[i3 >> 2] = 0 ? 2 : 1;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i3 >> 2] | 0)) break;
  if ((HEAP32[i3 >> 2] | 0) == 2) {
   i1 = HEAP32[i2 >> 2] | 0;
   i13 = i10;
   i16 = i9;
   i17 = i13 + 64 | 0;
   do {
    HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
    i13 = i13 + 4 | 0;
    i16 = i16 + 4 | 0;
   } while ((i13 | 0) < (i17 | 0));
   i13 = i7;
   i16 = i8;
   i17 = i13 + 64 | 0;
   do {
    HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
    i13 = i13 + 4 | 0;
    i16 = i16 + 4 | 0;
   } while ((i13 | 0) < (i17 | 0));
   _SetStereoView(i1, i10, i7);
  }
  if ((HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] | 0) > 0) {
   _glUseProgram(HEAP32[43932] | 0);
   i13 = i10;
   i16 = 175580;
   i17 = i13 + 64 | 0;
   do {
    HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
    i13 = i13 + 4 | 0;
    i16 = i16 + 4 | 0;
   } while ((i13 | 0) < (i17 | 0));
   i13 = i7;
   i16 = 175512;
   i17 = i13 + 64 | 0;
   do {
    HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
    i13 = i13 + 4 | 0;
    i16 = i16 + 4 | 0;
   } while ((i13 | 0) < (i17 | 0));
   _MatrixMultiply(i6, i10, i7);
   i1 = HEAP32[(HEAP32[43933] | 0) + 24 >> 2] | 0;
   i13 = i7;
   i16 = i6;
   i17 = i13 + 64 | 0;
   do {
    HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
    i13 = i13 + 4 | 0;
    i16 = i16 + 4 | 0;
   } while ((i13 | 0) < (i17 | 0));
   _MatrixToFloatV(i11, i7);
   _glUniformMatrix4fv(i1 | 0, 1, 0, i11 | 0);
   _glUniform4f(HEAP32[(HEAP32[43933] | 0) + 44 >> 2] | 0, 1.0, 1.0, 1.0, 1.0);
   _glUniform1i(HEAP32[(HEAP32[43933] | 0) + 56 >> 2] | 0, 0);
   HEAP32[i12 >> 2] = 0;
   if (HEAP8[177201] & 1) FUNCTION_TABLE_vi[HEAP32[43934] & 31](HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 28 >> 2] | 0); else {
    _glBindBuffer(34962, HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 32 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[HEAP32[43933] >> 2] | 0, 3, 5126, 0, 0, 0);
    _glEnableVertexAttribArray(HEAP32[HEAP32[43933] >> 2] | 0);
    _glBindBuffer(34962, HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 32 + 4 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[(HEAP32[43933] | 0) + 4 >> 2] | 0, 2, 5126, 0, 0, 0);
    _glEnableVertexAttribArray(HEAP32[(HEAP32[43933] | 0) + 4 >> 2] | 0);
    _glBindBuffer(34962, HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 32 + 8 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[(HEAP32[43933] | 0) + 20 >> 2] | 0, 4, 5121, 1, 0, 0);
    _glEnableVertexAttribArray(HEAP32[(HEAP32[43933] | 0) + 20 >> 2] | 0);
    _glBindBuffer(34963, HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 32 + 12 >> 2] | 0);
   }
   _glActiveTexture(33984);
   HEAP32[i4 >> 2] = 0;
   while (1) {
    if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[43929] | 0)) break;
    _glBindTexture(3553, HEAP32[(HEAP32[43928] | 0) + (HEAP32[i4 >> 2] << 4) + 12 >> 2] | 0);
    if ((HEAP32[(HEAP32[43928] | 0) + (HEAP32[i4 >> 2] << 4) >> 2] | 0) == 1) i14 = 13; else if ((HEAP32[(HEAP32[43928] | 0) + (HEAP32[i4 >> 2] << 4) >> 2] | 0) == 4) i14 = 13; else _glDrawElements(4, ((HEAP32[(HEAP32[43928] | 0) + (HEAP32[i4 >> 2] << 4) + 4 >> 2] | 0) / 4 | 0) * 6 | 0, 5123, ((HEAP32[i12 >> 2] << 1 >>> 0) / 4 | 0) * 6 | 0);
    if ((i14 | 0) == 13) {
     i14 = 0;
     i17 = (HEAP32[43928] | 0) + (HEAP32[i4 >> 2] << 4) | 0;
     _glDrawArrays(HEAP32[i17 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i17 + 4 >> 2] | 0);
    }
    i17 = (HEAP32[43928] | 0) + (HEAP32[i4 >> 2] << 4) | 0;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i17 + 4 >> 2] | 0) + (HEAP32[i17 + 8 >> 2] | 0));
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   }
   if (!(HEAP8[177201] & 1)) {
    _glBindBuffer(34962, 0);
    _glBindBuffer(34963, 0);
   }
   _glBindTexture(3553, 0);
  }
  if (HEAP8[177201] & 1) FUNCTION_TABLE_vi[HEAP32[43934] & 31](0);
  _glUseProgram(0);
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] = 0;
 HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 4 >> 2] = 0;
 HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 >> 2] = 0;
 HEAPF32[7869] = Math_fround(-1.0);
 i13 = 175512;
 i16 = i9;
 i17 = i13 + 64 | 0;
 do {
  HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
  i13 = i13 + 4 | 0;
  i16 = i16 + 4 | 0;
 } while ((i13 | 0) < (i17 | 0));
 i13 = 175580;
 i16 = i8;
 i17 = i13 + 64 | 0;
 do {
  HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
  i13 = i13 + 4 | 0;
  i16 = i16 + 4 | 0;
 } while ((i13 | 0) < (i17 | 0));
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 256) break;
  HEAP32[(HEAP32[43928] | 0) + (HEAP32[i5 >> 2] << 4) >> 2] = 7;
  HEAP32[(HEAP32[43928] | 0) + (HEAP32[i5 >> 2] << 4) + 4 >> 2] = 0;
  HEAP32[(HEAP32[43928] | 0) + (HEAP32[i5 >> 2] << 4) + 12 >> 2] = HEAP32[43931];
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 HEAP32[43929] = 1;
 i17 = (HEAP32[43930] | 0) + 1 | 0;
 HEAP32[43930] = i17;
 HEAP32[43930] = (HEAP32[43930] | 0) >= 1 ? 0 : i17;
 STACKTOP = i15;
 return;
}

function _drmp3_decode_next_frame_ex(i3, i4, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i14 = i1 + 56 | 0;
 i12 = i1 + 52 | 0;
 i10 = i1 + 48 | 0;
 i7 = i1 + 44 | 0;
 i13 = i1 + 40 | 0;
 i11 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i13 >> 2] = 0;
 if (!(HEAP32[i12 >> 2] | 0)) ___assert_fail(48609, 48387, 2706, 48693);
 if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 6696 >> 2] | 0)) ___assert_fail(48720, 48387, 2707, 48693);
 if (HEAP8[(HEAP32[i12 >> 2] | 0) + 21156 >> 0] & 1 | 0) {
  HEAP32[i14 >> 2] = 0;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 while (1) {
  if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 21144 >> 2] | 0) >>> 0 < 16384) {
   if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 21148 >> 2] | 0) >>> 0 < 16384) {
    HEAP32[(HEAP32[i12 >> 2] | 0) + 21148 >> 2] = 16384;
    i4 = HEAP32[i12 >> 2] | 0;
    i4 = _realloc(HEAP32[i4 + 21152 >> 2] | 0, HEAP32[i4 + 21148 >> 2] | 0) | 0;
    HEAP32[i9 >> 2] = i4;
    if (!(HEAP32[i9 >> 2] | 0)) {
     i1 = 11;
     break;
    }
    HEAP32[(HEAP32[i12 >> 2] | 0) + 21152 >> 2] = HEAP32[i9 >> 2];
   }
   i3 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[(HEAP32[i12 >> 2] | 0) + 21144 >> 2] | 0;
   i4 = _drmp3__on_read(i3 | 0, (HEAP32[i3 + 21152 >> 2] | 0) + i4 | 0, (HEAP32[i3 + 21148 >> 2] | 0) - i4 | 0) | 0;
   HEAP32[i5 >> 2] = i4;
   if (!(HEAP32[i5 >> 2] | 0)) if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 21144 >> 2] | 0)) {
    i1 = 15;
    break;
   }
   i4 = (HEAP32[i12 >> 2] | 0) + 21144 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
  }
  i2 = HEAP32[i12 >> 2] | 0;
  if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 21144 >> 2] | 0) >>> 0 > 2147483647) {
   i1 = 18;
   break;
  }
  i4 = HEAP32[i12 >> 2] | 0;
  i4 = _drmp3dec_decode_frame(i2, HEAP32[i4 + 21152 >> 2] | 0, HEAP32[i4 + 21144 >> 2] | 0, HEAP32[i10 >> 2] | 0, i11) | 0;
  HEAP32[i13 >> 2] = i4;
  HEAP32[i8 >> 2] = (HEAP32[(HEAP32[i12 >> 2] | 0) + 21144 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
  if ((HEAP32[i11 >> 2] | 0) > 0) {
   i4 = HEAP32[(HEAP32[i12 >> 2] | 0) + 21152 >> 2] | 0;
   _memmove(i4 | 0, i4 + (HEAP32[i11 >> 2] | 0) | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 21144 >> 2] = HEAP32[i8 >> 2];
  }
  if ((HEAP32[i13 >> 2] | 0) >>> 0 > 0) {
   i1 = 23;
   break;
  }
  if ((HEAP32[i11 >> 2] | 0) > 0 & (HEAP32[i7 >> 2] | 0) != 0) {
   i1 = 23;
   break;
  }
  if (!(HEAP32[i11 >> 2] | 0)) {
   if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 21148 >> 2] | 0) == (HEAP32[(HEAP32[i12 >> 2] | 0) + 21144 >> 2] | 0)) {
    i4 = (HEAP32[i12 >> 2] | 0) + 21148 | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 16384;
    i4 = HEAP32[i12 >> 2] | 0;
    i4 = _realloc(HEAP32[i4 + 21152 >> 2] | 0, HEAP32[i4 + 21148 >> 2] | 0) | 0;
    HEAP32[i1 >> 2] = i4;
    if (!(HEAP32[i1 >> 2] | 0)) {
     i1 = 34;
     break;
    }
    HEAP32[(HEAP32[i12 >> 2] | 0) + 21152 >> 2] = HEAP32[i1 >> 2];
   }
   i3 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[(HEAP32[i12 >> 2] | 0) + 21144 >> 2] | 0;
   i4 = _drmp3__on_read(i3 | 0, (HEAP32[i3 + 21152 >> 2] | 0) + i4 | 0, (HEAP32[i3 + 21148 >> 2] | 0) - i4 | 0) | 0;
   HEAP32[i6 >> 2] = i4;
   if (!(HEAP32[i6 >> 2] | 0)) {
    i1 = 37;
    break;
   }
   i4 = (HEAP32[i12 >> 2] | 0) + 21144 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
  }
 }
 if ((i1 | 0) == 11) {
  HEAP32[i14 >> 2] = 0;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 } else if ((i1 | 0) == 15) {
  i13 = (HEAP32[i12 >> 2] | 0) + 21156 | 0;
  HEAP8[i13 >> 0] = HEAP8[i13 >> 0] & -2 | 1;
  HEAP32[i14 >> 2] = 0;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 } else if ((i1 | 0) == 18) {
  i13 = i2 + 21156 | 0;
  HEAP8[i13 >> 0] = HEAP8[i13 >> 0] & -2 | 1;
  HEAP32[i14 >> 2] = 0;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 } else if ((i1 | 0) == 23) {
  i10 = _drmp3_hdr_frame_samples((HEAP32[i12 >> 2] | 0) + 6152 | 0) | 0;
  HEAP32[i13 >> 2] = i10;
  HEAP32[(HEAP32[i12 >> 2] | 0) + 6716 >> 2] = 0;
  HEAP32[(HEAP32[i12 >> 2] | 0) + 6720 >> 2] = HEAP32[i13 >> 2];
  HEAP32[(HEAP32[i12 >> 2] | 0) + 6708 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[(HEAP32[i12 >> 2] | 0) + 6712 >> 2] = HEAP32[i11 + 8 >> 2];
  if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 6688 >> 2] | 0)) i1 = 25; else if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 6692 >> 2] | 0)) i1 = 25;
  if ((i1 | 0) == 25) {
   if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 6688 >> 2] | 0)) HEAP32[(HEAP32[i12 >> 2] | 0) + 6688 >> 2] = HEAP32[i11 + 4 >> 2];
   if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 6692 >> 2] | 0)) HEAP32[(HEAP32[i12 >> 2] | 0) + 6692 >> 2] = HEAP32[i11 + 8 >> 2];
   _drmp3_init_src(HEAP32[i12 >> 2] | 0) | 0;
  }
  i12 = HEAP32[i12 >> 2] | 0;
  _drmp3_src_set_input_sample_rate(i12 + 15960 | 0, HEAP32[i12 + 6712 >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 } else if ((i1 | 0) == 34) {
  HEAP32[i14 >> 2] = 0;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 } else if ((i1 | 0) == 37) {
  i13 = (HEAP32[i12 >> 2] | 0) + 21156 | 0;
  HEAP8[i13 >> 0] = HEAP8[i13 >> 0] & -2 | 1;
  HEAP32[i14 >> 2] = 0;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 return 0;
}

function _stbtt__sort_edges_quicksort(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i12 = i1 + 52 | 0;
 i11 = i1 + 48 | 0;
 i13 = i1 + 28 | 0;
 i6 = i1 + 24 | 0;
 i7 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i11 >> 2] = i2;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) <= 12) break;
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2] >> 1;
  f15 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 4 >> 2]);
  i3 = f15 < Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 20 | 0) + 4 >> 2]) & 1;
  HEAP32[i6 >> 2] = i3;
  f15 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 20 | 0) + 4 >> 2]);
  i3 = f15 < Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + (((HEAP32[i11 >> 2] | 0) - 1 | 0) * 20 | 0) + 4 >> 2]) & 1;
  HEAP32[i7 >> 2] = i3;
  if ((HEAP32[i6 >> 2] | 0) != (HEAP32[i7 >> 2] | 0)) {
   f15 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 4 >> 2]);
   i2 = f15 < Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + (((HEAP32[i11 >> 2] | 0) - 1 | 0) * 20 | 0) + 4 >> 2]) & 1;
   HEAP32[i5 >> 2] = i2;
   HEAP32[i4 >> 2] = (HEAP32[i5 >> 2] | 0) == (HEAP32[i7 >> 2] | 0) ? 0 : (HEAP32[i11 >> 2] | 0) - 1 | 0;
   i2 = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i13 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i13 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
   i2 = HEAP32[i12 >> 2] | 0;
   i3 = i2 + ((HEAP32[i4 >> 2] | 0) * 20 | 0) | 0;
   i2 = i2 + ((HEAP32[i10 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
   i3 = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[i3 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i13 + 16 >> 2];
  }
  i2 = HEAP32[i12 >> 2] | 0;
  HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i13 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
  i2 = HEAP32[i12 >> 2] | 0;
  i3 = i2 | 0;
  i2 = i2 + ((HEAP32[i10 >> 2] | 0) * 20 | 0) | 0;
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
  i3 = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 20 | 0) | 0;
  HEAP32[i3 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
  HEAP32[i3 + 16 >> 2] = HEAP32[i13 + 16 >> 2];
  HEAP32[i8 >> 2] = 1;
  HEAP32[i9 >> 2] = (HEAP32[i11 >> 2] | 0) - 1;
  while (1) {
   while (1) {
    f15 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) * 20 | 0) + 4 >> 2]);
    if (!(f15 < Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 4 >> 2]))) break;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   while (1) {
    f15 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 4 >> 2]);
    if (!(f15 < Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) * 20 | 0) + 4 >> 2]))) break;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
   }
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
   i2 = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i13 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i13 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
   i2 = HEAP32[i12 >> 2] | 0;
   i3 = i2 + ((HEAP32[i8 >> 2] | 0) * 20 | 0) | 0;
   i2 = i2 + ((HEAP32[i9 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
   i3 = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[i3 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i13 + 16 >> 2];
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
  }
  i1 = HEAP32[i12 >> 2] | 0;
  if ((HEAP32[i9 >> 2] | 0) < ((HEAP32[i11 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0)) {
   _stbtt__sort_edges_quicksort(i1, HEAP32[i9 >> 2] | 0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) * 20 | 0);
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i8 >> 2] | 0);
  } else {
   i3 = HEAP32[i8 >> 2] | 0;
   _stbtt__sort_edges_quicksort(i1 + ((i3 | 0) * 20 | 0) | 0, (HEAP32[i11 >> 2] | 0) - i3 | 0);
   HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
  }
 }
 STACKTOP = i14;
 return;
}

function _jar_xm_sample(i2, i4, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i9 = i1 + 24 | 0;
 i6 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 if (Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 352 >> 2]) <= Math_fround(0.0)) _jar_xm_tick(HEAP32[i7 >> 2] | 0);
 i5 = (HEAP32[i7 >> 2] | 0) + 352 | 0;
 f13 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + Math_fround(-1.0));
 HEAPF32[i5 >> 2] = f13;
 HEAPF32[HEAP32[i10 >> 2] >> 2] = Math_fround(0.0);
 HEAPF32[HEAP32[i11 >> 2] >> 2] = Math_fround(0.0);
 if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 381 >> 0] | 0 | 0) > 0) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 380 >> 0] | 0 | 0) >= (HEAPU8[(HEAP32[i7 >> 2] | 0) + 381 >> 0] | 0 | 0)) {
  STACKTOP = i12;
  return;
 }
 HEAP8[i9 >> 0] = 0;
 while (1) {
  i1 = HEAP32[i7 >> 2] | 0;
  if ((HEAPU8[i9 >> 0] | 0 | 0) >= (HEAPU16[(HEAP32[i7 >> 2] | 0) + 4 + 46 >> 1] | 0 | 0)) break;
  HEAP32[i6 >> 2] = (HEAP32[i1 + 384 >> 2] | 0) + ((HEAPU8[i9 >> 0] | 0) * 288 | 0);
  do if (HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) if (HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) if (!(Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 20 >> 2]) < Math_fround(0.0))) {
   f13 = Math_fround(_jar_xm_next_of_sample(HEAP32[i6 >> 2] | 0));
   HEAPF32[i8 >> 2] = f13;
   if (!(HEAP8[(HEAP32[i6 >> 2] | 0) + 136 >> 0] & 1)) if (!(HEAP8[(HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) + 256 >> 0] & 1)) {
    f13 = Math_fround(HEAPF32[i8 >> 2]);
    f13 = Math_fround(f13 * Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 284 >> 2]));
    f13 = Math_fround(f13 * Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 280 >> 2])));
    i5 = HEAP32[i10 >> 2] | 0;
    f13 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f13);
    HEAPF32[i5 >> 2] = f13;
    f13 = Math_fround(HEAPF32[i8 >> 2]);
    f13 = Math_fround(f13 * Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 284 >> 2]));
    f13 = Math_fround(f13 * Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 280 >> 2]));
    i5 = HEAP32[i11 >> 2] | 0;
    f13 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f13);
    HEAPF32[i5 >> 2] = f13;
   }
   i5 = (HEAP32[i6 >> 2] | 0) + 148 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 284 >> 2]);
   if (f13 > Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 144 >> 2])) {
    f13 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 340 >> 2]);
    i5 = (HEAP32[i6 >> 2] | 0) + 284 | 0;
    f13 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) - f13);
    HEAPF32[i5 >> 2] = f13;
    f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 284 >> 2]);
    if (f13 < Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 144 >> 2])) {
     f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 144 >> 2]);
     HEAPF32[(HEAP32[i6 >> 2] | 0) + 284 >> 2] = f13;
    }
   } else {
    f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 284 >> 2]);
    if (f13 < Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 144 >> 2])) {
     f13 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 340 >> 2]);
     i5 = (HEAP32[i6 >> 2] | 0) + 284 | 0;
     f13 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f13);
     HEAPF32[i5 >> 2] = f13;
     f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 284 >> 2]);
     if (f13 > Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 144 >> 2])) {
      f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 144 >> 2]);
      HEAPF32[(HEAP32[i6 >> 2] | 0) + 284 >> 2] = f13;
     }
    }
   }
   f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 280 >> 2]);
   if (f13 > Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 140 >> 2])) {
    f13 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 344 >> 2]);
    i5 = (HEAP32[i6 >> 2] | 0) + 280 | 0;
    f13 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) - f13);
    HEAPF32[i5 >> 2] = f13;
    f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 280 >> 2]);
    if (!(f13 < Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 140 >> 2]))) break;
    f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 140 >> 2]);
    HEAPF32[(HEAP32[i6 >> 2] | 0) + 280 >> 2] = f13;
    break;
   }
   f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 280 >> 2]);
   if (f13 < Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 140 >> 2])) {
    f13 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 344 >> 2]);
    i5 = (HEAP32[i6 >> 2] | 0) + 280 | 0;
    f13 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f13);
    HEAPF32[i5 >> 2] = f13;
    f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 280 >> 2]);
    if (f13 > Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 140 >> 2])) {
     f13 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 140 >> 2]);
     HEAPF32[(HEAP32[i6 >> 2] | 0) + 280 >> 2] = f13;
    }
   }
  } while (0);
  HEAP8[i9 >> 0] = (HEAP8[i9 >> 0] | 0) + 1 << 24 >> 24;
 }
 f13 = Math_fround(HEAPF32[i1 + 332 >> 2]);
 f13 = Math_fround(f13 * Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 336 >> 2]));
 HEAPF32[i3 >> 2] = f13;
 f13 = Math_fround(HEAPF32[i3 >> 2]);
 i10 = HEAP32[i10 >> 2] | 0;
 f13 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) * f13);
 HEAPF32[i10 >> 2] = f13;
 f13 = Math_fround(HEAPF32[i3 >> 2]);
 i11 = HEAP32[i11 >> 2] | 0;
 f13 = Math_fround(Math_fround(HEAPF32[i11 >> 2]) * f13);
 HEAPF32[i11 >> 2] = f13;
 STACKTOP = i12;
 return;
}

function _drmp3_L3_dct3_9(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, f5 = f0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i4 = i3 + 48 | 0;
 i11 = i3 + 44 | 0;
 i8 = i3 + 40 | 0;
 i9 = i3 + 36 | 0;
 i10 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i12 = i3 + 24 | 0;
 i16 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i13 = i3 + 12 | 0;
 i15 = i3 + 8 | 0;
 i14 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 f5 = Math_fround(HEAPF32[HEAP32[i4 >> 2] >> 2]);
 HEAPF32[i11 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + 8 >> 2]);
 HEAPF32[i9 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + 16 >> 2]);
 HEAPF32[i7 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + 24 >> 2]);
 HEAPF32[i16 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + 32 >> 2]);
 HEAPF32[i13 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i11 >> 2]);
 f5 = Math_fround(f5 + Math_fround(Math_fround(HEAPF32[i16 >> 2]) * Math_fround(.5)));
 HEAPF32[i15 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i16 >> 2]);
 f5 = Math_fround(Math_fround(HEAPF32[i11 >> 2]) - f5);
 HEAPF32[i11 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i7 >> 2]);
 f5 = Math_fround(Math_fround(f5 + Math_fround(HEAPF32[i9 >> 2])) * Math_fround(.939692616));
 HEAPF32[i3 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i13 >> 2]);
 f5 = Math_fround(Math_fround(f5 + Math_fround(HEAPF32[i9 >> 2])) * Math_fround(.766044437));
 HEAPF32[i14 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i7 >> 2]);
 f5 = Math_fround(Math_fround(f5 - Math_fround(HEAPF32[i13 >> 2])) * Math_fround(.173648179));
 HEAPF32[i16 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i13 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i9 >> 2]));
 f5 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f5);
 HEAPF32[i7 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i11 >> 2]);
 f5 = Math_fround(f5 - Math_fround(Math_fround(HEAPF32[i7 >> 2]) * Math_fround(.5)));
 HEAPF32[i9 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i7 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i11 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i15 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i14 >> 2]));
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i16 >> 2]));
 HEAPF32[i13 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i15 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i3 >> 2]));
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i11 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i15 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i3 >> 2]));
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i16 >> 2]));
 HEAPF32[i7 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + 4 >> 2]);
 HEAPF32[i8 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + 12 >> 2]);
 HEAPF32[i10 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + 20 >> 2]);
 HEAPF32[i12 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + 28 >> 2]);
 HEAPF32[i6 >> 2] = f5;
 f5 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) * Math_fround(.866025388));
 HEAPF32[i10 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i12 >> 2]);
 f5 = Math_fround(Math_fround(f5 + Math_fround(HEAPF32[i8 >> 2])) * Math_fround(.984807729));
 HEAPF32[i15 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i12 >> 2]);
 f5 = Math_fround(Math_fround(f5 - Math_fround(HEAPF32[i6 >> 2])) * Math_fround(.342020154));
 HEAPF32[i3 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i8 >> 2]);
 f5 = Math_fround(Math_fround(f5 + Math_fround(HEAPF32[i6 >> 2])) * Math_fround(.642787635));
 HEAPF32[i14 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i8 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i12 >> 2]));
 f5 = Math_fround(Math_fround(f5 - Math_fround(HEAPF32[i6 >> 2])) * Math_fround(.866025388));
 HEAPF32[i8 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i15 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i10 >> 2]));
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i12 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i3 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i10 >> 2]));
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i15 >> 2]));
 HEAPF32[i6 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i3 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i10 >> 2]));
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i10 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i7 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i6 >> 2]));
 HEAPF32[HEAP32[i4 >> 2] >> 2] = f5;
 f5 = Math_fround(HEAPF32[i9 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i8 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i11 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i10 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i13 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i12 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i13 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i12 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i11 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i10 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i9 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i8 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i7 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i6 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] = f5;
 STACKTOP = i2;
 return;
}

function _stbv_imdct_step3_inner_s_loop_ld654(i9, i6, i7, i2, i5) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0, i16 = 0, i17 = 0, i18 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i1 + 40 | 0;
 i14 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i17 = i1 + 28 | 0;
 i18 = i1 + 24 | 0;
 i16 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i12 >> 2] = i9;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i7;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i18 >> 2] = i5;
 HEAP32[i16 >> 2] = HEAP32[i18 >> 2] >> 3;
 f15 = Math_fround(HEAPF32[(HEAP32[i17 >> 2] | 0) + (0 + (HEAP32[i16 >> 2] | 0) << 2) >> 2]);
 HEAPF32[i3 >> 2] = f15;
 HEAP32[i10 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] << 2);
 HEAP32[i4 >> 2] = (HEAP32[i10 >> 2] | 0) + (0 - (HEAP32[i12 >> 2] << 4) << 2);
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >>> 0 <= (HEAP32[i4 >> 2] | 0) >>> 0) break;
  f15 = Math_fround(HEAPF32[HEAP32[i10 >> 2] >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -32 >> 2]));
  HEAPF32[i8 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -4 >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -36 >> 2]));
  HEAPF32[i1 >> 2] = f15;
  f15 = Math_fround(HEAPF32[HEAP32[i10 >> 2] >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -32 >> 2]));
  HEAPF32[HEAP32[i10 >> 2] >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -4 >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -36 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -4 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i8 >> 2]);
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -32 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i1 >> 2]);
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -36 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -8 >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -40 >> 2]));
  HEAPF32[i8 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -12 >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -44 >> 2]));
  HEAPF32[i1 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -8 >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -40 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -8 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -12 >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -44 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i8 >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[i1 >> 2]));
  f15 = Math_fround(f15 * Math_fround(HEAPF32[i3 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -40 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i1 >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[i8 >> 2]));
  f15 = Math_fround(f15 * Math_fround(HEAPF32[i3 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -44 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -48 >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -16 >> 2]));
  HEAPF32[i8 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -20 >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -52 >> 2]));
  HEAPF32[i1 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -16 >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -48 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -16 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -20 >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -52 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -20 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i1 >> 2]);
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -48 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i8 >> 2]);
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -52 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -56 >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -24 >> 2]));
  HEAPF32[i8 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -28 >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -60 >> 2]));
  HEAPF32[i1 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -24 >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -56 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -24 >> 2] = f15;
  f15 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -28 >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + -60 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -28 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i8 >> 2]);
  f15 = Math_fround(f15 + Math_fround(HEAPF32[i1 >> 2]));
  f15 = Math_fround(f15 * Math_fround(HEAPF32[i3 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -56 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i8 >> 2]);
  f15 = Math_fround(f15 - Math_fround(HEAPF32[i1 >> 2]));
  f15 = Math_fround(f15 * Math_fround(HEAPF32[i3 >> 2]));
  HEAPF32[(HEAP32[i10 >> 2] | 0) + -60 >> 2] = f15;
  _stbv_iter_54(HEAP32[i10 >> 2] | 0);
  _stbv_iter_54((HEAP32[i10 >> 2] | 0) + -32 | 0);
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -64;
 }
 STACKTOP = i11;
 return;
}

function _stbrp__skyline_find_best_pos(i17, i2, i4, i3) {
 i17 = i17 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i9 = i1 + 68 | 0;
 i14 = i1 + 64 | 0;
 i10 = i1 + 60 | 0;
 i8 = i1 + 56 | 0;
 i19 = i1 + 52 | 0;
 i20 = i1 + 48 | 0;
 i21 = i1 + 36 | 0;
 i12 = i1 + 32 | 0;
 i11 = i1 + 28 | 0;
 i13 = i1 + 24 | 0;
 i18 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i15 = i1 + 8 | 0;
 i16 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i8 >> 2] = 1073741824;
 HEAP32[i20 >> 2] = 1073741824;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) - 1;
 i4 = HEAP32[i14 >> 2] | 0;
 HEAP32[i14 >> 2] = (i4 | 0) - ((i4 | 0) % (HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) | 0);
 if ((HEAP32[i14 >> 2] | 0) % (HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) | 0 | 0) ___assert_fail(51602, 51514, 351, 51624);
 if ((HEAP32[i14 >> 2] | 0) <= (HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) <= (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[i11 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2];
  HEAP32[i12 >> 2] = (HEAP32[i9 >> 2] | 0) + 24;
  while (1) {
   if (((HEAPU16[HEAP32[i11 >> 2] >> 1] | 0) + (HEAP32[i14 >> 2] | 0) | 0) > (HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) break;
   i1 = _stbrp__skyline_find_min_y(HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAPU16[HEAP32[i11 >> 2] >> 1] | 0, HEAP32[i14 >> 2] | 0, i5) | 0;
   HEAP32[i6 >> 2] = i1;
   i1 = HEAP32[i6 >> 2] | 0;
   do if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] | 0)) {
    if ((i1 | 0) < (HEAP32[i20 >> 2] | 0)) {
     HEAP32[i20 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
    }
   } else if ((i1 + (HEAP32[i10 >> 2] | 0) | 0) <= (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) {
    if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i20 >> 2] | 0)) {
     if ((HEAP32[i6 >> 2] | 0) != (HEAP32[i20 >> 2] | 0)) break;
     if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
    }
    HEAP32[i20 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
   } while (0);
   HEAP32[i12 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
   HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2];
  }
  if (!(HEAP32[i18 >> 2] | 0)) i1 = 0; else i1 = HEAPU16[HEAP32[HEAP32[i18 >> 2] >> 2] >> 1] | 0;
  HEAP32[i19 >> 2] = i1;
  L24 : do if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] | 0) == 1) {
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2];
   HEAP32[i11 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2];
   HEAP32[i12 >> 2] = (HEAP32[i9 >> 2] | 0) + 24;
   while (1) {
    if ((HEAPU16[HEAP32[i13 >> 2] >> 1] | 0) >= (HEAP32[i14 >> 2] | 0)) break;
    HEAP32[i13 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2];
   }
   L30 : while (1) {
    if (!(HEAP32[i13 >> 2] | 0)) break L24;
    HEAP32[i15 >> 2] = (HEAPU16[HEAP32[i13 >> 2] >> 1] | 0) - (HEAP32[i14 >> 2] | 0);
    if ((HEAP32[i15 >> 2] | 0) < 0) {
     i1 = 26;
     break;
    }
    while (1) {
     i1 = (HEAP32[i11 >> 2] | 0) + 4 | 0;
     if ((HEAPU16[HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] >> 1] | 0) > (HEAP32[i15 >> 2] | 0)) break;
     HEAP32[i12 >> 2] = i1;
     HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2];
    }
    if ((HEAPU16[HEAP32[i1 >> 2] >> 1] | 0) <= (HEAP32[i15 >> 2] | 0)) {
     i1 = 32;
     break;
    }
    if ((HEAPU16[HEAP32[i11 >> 2] >> 1] | 0) > (HEAP32[i15 >> 2] | 0)) {
     i1 = 32;
     break;
    }
    i6 = _stbrp__skyline_find_min_y(HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i14 >> 2] | 0, i7) | 0;
    HEAP32[i16 >> 2] = i6;
    do if (((HEAP32[i16 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0) <= (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) if ((HEAP32[i16 >> 2] | 0) <= (HEAP32[i20 >> 2] | 0)) {
     if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i20 >> 2] | 0)) if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
      if ((HEAP32[i7 >> 2] | 0) != (HEAP32[i8 >> 2] | 0)) break;
      if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i19 >> 2] | 0)) break;
     }
     HEAP32[i19 >> 2] = HEAP32[i15 >> 2];
     if ((HEAP32[i16 >> 2] | 0) > (HEAP32[i20 >> 2] | 0)) {
      i1 = 40;
      break L30;
     }
     HEAP32[i20 >> 2] = HEAP32[i16 >> 2];
     HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
     HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
    } while (0);
    HEAP32[i13 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2];
   }
   if ((i1 | 0) == 26) ___assert_fail(51653, 51514, 415, 51624); else if ((i1 | 0) == 32) ___assert_fail(51663, 51514, 421, 51624); else if ((i1 | 0) == 40) ___assert_fail(51703, 51514, 427, 51624);
  } while (0);
  HEAP32[i21 + 8 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i21 >> 2] = HEAP32[i19 >> 2];
  HEAP32[i21 + 4 >> 2] = HEAP32[i20 >> 2];
  HEAP32[i17 >> 2] = HEAP32[i21 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
  STACKTOP = i22;
  return;
 }
 HEAP32[i21 + 8 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i17 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 STACKTOP = i22;
 return;
}

function _InitGraphicsDevice(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i19 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i5 = i20 + 56 | 0;
 i15 = i20 + 48 | 0;
 i14 = i20 + 40 | 0;
 i18 = i20 + 32 | 0;
 i17 = i20 + 24 | 0;
 i16 = i20 + 16 | 0;
 i13 = i20 + 8 | 0;
 i12 = i20;
 i11 = i20 + 164 | 0;
 i22 = i20 + 156 | 0;
 i21 = i20 + 152 | 0;
 i3 = i20 + 88 | 0;
 i6 = i20 + 80 | 0;
 i10 = i20 + 76 | 0;
 i9 = i20 + 72 | 0;
 i8 = i20 + 68 | 0;
 i7 = i20 + 64 | 0;
 i4 = i20 + 160 | 0;
 HEAP32[i22 >> 2] = i2;
 HEAP32[i21 >> 2] = i1;
 HEAP32[44040] = HEAP32[i22 >> 2];
 HEAP32[44041] = HEAP32[i21 >> 2];
 _MatrixIdentity(i3);
 i1 = 176168;
 i2 = i3;
 i3 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 _glfwSetErrorCallback(2) | 0;
 if (!(_glfwInit() | 0)) {
  _TraceLog(4, 35672, i12);
  HEAP8[i11 >> 0] = 0;
  i22 = HEAP8[i11 >> 0] | 0;
  i22 = i22 & 1;
  STACKTOP = i20;
  return i22 | 0;
 }
 HEAP32[44058] = HEAP32[44040];
 HEAP32[44059] = HEAP32[44041];
 _glfwDefaultWindowHints();
 if (0 | 0) _glfwWindowHint(131076, 0); else _glfwWindowHint(131076, 1);
 if (0 | 0) _glfwWindowHint(131075, 1); else _glfwWindowHint(131075, 0);
 if (0 | 0) _glfwWindowHint(131077, 0); else _glfwWindowHint(131077, 1);
 if (0 | 0) _glfwWindowHint(135181, 4);
 do if ((_rlGetVersion() | 0) == 2) {
  _glfwWindowHint(139266, 2);
  _glfwWindowHint(139267, 1);
 } else {
  if ((_rlGetVersion() | 0) == 3) {
   _glfwWindowHint(139266, 3);
   _glfwWindowHint(139267, 3);
   _glfwWindowHint(139272, 204801);
   _glfwWindowHint(139270, 0);
   break;
  }
  if ((_rlGetVersion() | 0) == 4) {
   _glfwWindowHint(139266, 2);
   _glfwWindowHint(139267, 0);
   _glfwWindowHint(139265, 196610);
   _glfwWindowHint(139275, 221185);
  }
 } while (0);
 if (0) {
  HEAP32[44060] = ((HEAP32[44058] | 0) / 2 | 0) - ((HEAP32[44040] | 0) / 2 | 0);
  HEAP32[44061] = ((HEAP32[44059] | 0) / 2 | 0) - ((HEAP32[44041] | 0) / 2 | 0);
  if ((HEAP32[44060] | 0) < 0) HEAP32[44060] = 0;
  if ((HEAP32[44061] | 0) < 0) HEAP32[44061] = 0;
  HEAP32[i6 >> 2] = 0;
  i22 = _glfwGetVideoModes(_glfwGetPrimaryMonitor() | 0, i6 | 0) | 0;
  HEAP32[i10 >> 2] = i22;
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) * 24 | 0) >> 2] | 0) >= (HEAP32[44040] | 0)) if ((HEAP32[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) * 24 | 0) + 4 >> 2] | 0) >= (HEAP32[44041] | 0)) {
    i19 = 29;
    break;
   }
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  if ((i19 | 0) == 29) {
   HEAP32[44058] = HEAP32[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) * 24 | 0) >> 2];
   HEAP32[44059] = HEAP32[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) * 24 | 0) + 4 >> 2];
  }
  i19 = HEAP32[44059] | 0;
  HEAP32[i13 >> 2] = HEAP32[44058];
  HEAP32[i13 + 4 >> 2] = i19;
  _TraceLog(4, 35698, i13);
  _SetupFramebuffer(HEAP32[44058] | 0, HEAP32[44059] | 0);
  i19 = HEAP32[44058] | 0;
  i21 = HEAP32[44059] | 0;
  i22 = HEAP32[44039] | 0;
  i22 = _glfwCreateWindow(i19 | 0, i21 | 0, i22 | 0, _glfwGetPrimaryMonitor() | 0, 0) | 0;
  HEAP32[44037] = i22;
 } else {
  i22 = _glfwCreateWindow(HEAP32[44040] | 0, HEAP32[44041] | 0, HEAP32[44039] | 0, 0, 0) | 0;
  HEAP32[44037] = i22;
  if (HEAP32[44037] | 0) {
   HEAP32[44062] = HEAP32[44040];
   HEAP32[44063] = HEAP32[44041];
  }
 }
 if (!(HEAP32[44037] | 0)) {
  _glfwTerminate();
  _TraceLog(4, 35736, i16);
  HEAP8[i11 >> 0] = 0;
  i22 = HEAP8[i11 >> 0] | 0;
  i22 = i22 & 1;
  STACKTOP = i20;
  return i22 | 0;
 }
 _TraceLog(3, 35769, i17);
 i22 = HEAP32[44063] | 0;
 HEAP32[i18 >> 2] = HEAP32[44062];
 HEAP32[i18 + 4 >> 2] = i22;
 _TraceLog(3, 35809, i18);
 i22 = HEAP32[44041] | 0;
 HEAP32[i14 >> 2] = HEAP32[44040];
 HEAP32[i14 + 4 >> 2] = i22;
 _TraceLog(3, 35830, i14);
 i22 = HEAP32[44065] | 0;
 HEAP32[i5 >> 2] = HEAP32[44064];
 HEAP32[i5 + 4 >> 2] = i22;
 _TraceLog(3, 35851, i5);
 _glfwSetWindowSizeCallback(HEAP32[44037] | 0, 1) | 0;
 _glfwSetCursorEnterCallback(HEAP32[44037] | 0, 3) | 0;
 _glfwSetKeyCallback(HEAP32[44037] | 0, 1) | 0;
 _glfwSetMouseButtonCallback(HEAP32[44037] | 0, 1) | 0;
 _glfwSetCursorPosCallback(HEAP32[44037] | 0, 1) | 0;
 _glfwSetCharCallback(HEAP32[44037] | 0, 4) | 0;
 _glfwSetScrollCallback(HEAP32[44037] | 0, 2) | 0;
 _glfwSetWindowIconifyCallback(HEAP32[44037] | 0, 5) | 0;
 _glfwSetDropCallback(HEAP32[44037] | 0, 2) | 0;
 _glfwMakeContextCurrent(HEAP32[44037] | 0);
 if (0 | 0) {
  _glfwSwapInterval(1);
  _TraceLog(3, 35876, i15);
 }
 _rlglInit(HEAP32[44040] | 0, HEAP32[44041] | 0);
 HEAP32[i8 >> 2] = HEAP32[44062];
 HEAP32[i7 >> 2] = HEAP32[44063];
 _SetupViewport(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 HEAP8[i4 >> 0] = -11;
 HEAP8[i4 + 1 >> 0] = -11;
 HEAP8[i4 + 2 >> 0] = -11;
 HEAP8[i4 + 3 >> 0] = -1;
 HEAP8[i5 >> 0] = HEAP8[i4 >> 0] | 0;
 HEAP8[i5 + 1 >> 0] = HEAP8[i4 + 1 >> 0] | 0;
 HEAP8[i5 + 2 >> 0] = HEAP8[i4 + 2 >> 0] | 0;
 HEAP8[i5 + 3 >> 0] = HEAP8[i4 + 3 >> 0] | 0;
 _ClearBackground(i5);
 HEAP8[i11 >> 0] = 1;
 i22 = HEAP8[i11 >> 0] | 0;
 i22 = i22 & 1;
 STACKTOP = i20;
 return i22 | 0;
}

function _UpdateMusicStream(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i7 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i9 = i1 + 16 | 0;
 i5 = i1 + 48 | 0;
 i6 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP8[i5 >> 0] = 0;
 i11 = i8 + 16 + 12 | 0;
 HEAP32[i6 >> 2] = ((HEAP32[(HEAP32[i11 >> 2] | 0) + 46552 >> 2] | 0) >>> 0) / 2 | 0;
 i2 = i8 + 16 + 8 | 0;
 i12 = Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
 i12 = _calloc(((Math_imul(i12, HEAP32[i8 + 16 + 4 >> 2] | 0) | 0) >>> 0) / 8 | 0, 1) | 0;
 HEAP32[i3 >> 2] = i12;
 HEAP32[i4 >> 2] = 0;
 i2 = (HEAP32[i8 + 8 >> 2] | 0) - (Math_imul(HEAP32[(HEAP32[i11 >> 2] | 0) + 46556 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) | 0;
 HEAP32[i1 >> 2] = i2;
 while (1) {
  i12 = i8 + 16 | 0;
  HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  if (!(_IsAudioStreamProcessed(i9) | 0)) break;
  if ((((HEAP32[i1 >> 2] | 0) >>> 0) / ((HEAP32[i8 + 16 + 8 >> 2] | 0) >>> 0) | 0) >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) {
   i12 = Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i8 + 16 + 8 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i12;
  } else HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  switch (HEAP32[i8 >> 2] | 0) {
  case 1:
   {
    _stb_vorbis_get_samples_short_interleaved(HEAP32[i8 + 4 >> 2] | 0, HEAP32[i8 + 16 + 8 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
    break;
   }
  case 3:
   {
    _drmp3_read_pcm_frames_f32(HEAP32[i8 + 4 >> 2] | 0, ((HEAP32[i4 >> 2] | 0) >>> 0) / ((HEAP32[i8 + 16 + 8 >> 2] | 0) >>> 0) | 0, 0, HEAP32[i3 >> 2] | 0) | 0;
    getTempRet0() | 0;
    break;
   }
  case 4:
   {
    _jar_xm_generate_samples_16bit(HEAP32[i8 + 4 >> 2] | 0, HEAP32[i3 >> 2] | 0, (HEAP32[i4 >> 2] | 0) / 2 | 0);
    break;
   }
  case 5:
   {
    _jar_mod_fillbuffer(HEAP32[i8 + 4 >> 2] | 0, HEAP32[i3 >> 2] | 0, (HEAP32[i4 >> 2] | 0) / 2 | 0, 0);
    break;
   }
  default:
   {}
  }
  i2 = i8 + 16 | 0;
  i11 = HEAP32[i3 >> 2] | 0;
  i12 = HEAP32[i4 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  _UpdateAudioStream(i9, i11, i12);
  if ((HEAP32[i8 >> 2] | 0) == 4) i7 = 13; else if ((HEAP32[i8 >> 2] | 0) == 5) i7 = 13; else HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - (HEAP32[i4 >> 2] | 0);
  do if ((i7 | 0) == 13) {
   i7 = 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i4 >> 2] | 0) > 1) {
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - ((i2 | 0) / 2 | 0);
    break;
   } else {
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - i2;
    break;
   }
  } while (0);
  if ((HEAP32[i1 >> 2] | 0) <= 0) {
   i7 = 18;
   break;
  }
 }
 if ((i7 | 0) == 18) HEAP8[i5 >> 0] = 1;
 _free(HEAP32[i3 >> 2] | 0);
 if (!(HEAP8[i5 >> 0] & 1)) {
  HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i9 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
  HEAP32[i9 + 20 >> 2] = HEAP32[i8 + 20 >> 2];
  HEAP32[i9 + 24 >> 2] = HEAP32[i8 + 24 >> 2];
  HEAP32[i9 + 28 >> 2] = HEAP32[i8 + 28 >> 2];
  if (!(_IsMusicPlaying(i9) | 0)) {
   STACKTOP = i10;
   return;
  };
  HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i9 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
  HEAP32[i9 + 20 >> 2] = HEAP32[i8 + 20 >> 2];
  HEAP32[i9 + 24 >> 2] = HEAP32[i8 + 24 >> 2];
  HEAP32[i9 + 28 >> 2] = HEAP32[i8 + 28 >> 2];
  _PlayMusicStream(i9);
  STACKTOP = i10;
  return;
 };
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i9 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
 HEAP32[i9 + 20 >> 2] = HEAP32[i8 + 20 >> 2];
 HEAP32[i9 + 24 >> 2] = HEAP32[i8 + 24 >> 2];
 HEAP32[i9 + 28 >> 2] = HEAP32[i8 + 28 >> 2];
 _StopMusicStream(i9);
 i2 = i8 + 12 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((HEAP32[i8 + 12 >> 2] | 0) >>> 0 > 1) {
  HEAP32[i2 >> 2] = i1 + -1;
  HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i9 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
  HEAP32[i9 + 20 >> 2] = HEAP32[i8 + 20 >> 2];
  HEAP32[i9 + 24 >> 2] = HEAP32[i8 + 24 >> 2];
  HEAP32[i9 + 28 >> 2] = HEAP32[i8 + 28 >> 2];
  _PlayMusicStream(i9);
  STACKTOP = i10;
  return;
 }
 if (i1 | 0) {
  STACKTOP = i10;
  return;
 };
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i9 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
 HEAP32[i9 + 20 >> 2] = HEAP32[i8 + 20 >> 2];
 HEAP32[i9 + 24 >> 2] = HEAP32[i8 + 24 >> 2];
 HEAP32[i9 + 28 >> 2] = HEAP32[i8 + 28 >> 2];
 _PlayMusicStream(i9);
 STACKTOP = i10;
 return;
}

function _stbtt__rasterize(i8, i7, i12, i13, f1, f2, f9, f10, i5, i6, i4, i11) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f9 = Math_fround(f9);
 f10 = Math_fround(f10);
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 var i3 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i35 = 0;
 i36 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i26 = i3 + 88 | 0;
 i25 = i3 + 84 | 0;
 i32 = i3 + 80 | 0;
 i33 = i3 + 76 | 0;
 i27 = i3 + 72 | 0;
 i37 = i3 + 68 | 0;
 i28 = i3 + 64 | 0;
 i29 = i3 + 60 | 0;
 i22 = i3 + 56 | 0;
 i23 = i3 + 52 | 0;
 i17 = i3 + 48 | 0;
 i30 = i3 + 44 | 0;
 i34 = i3 + 40 | 0;
 i15 = i3 + 36 | 0;
 i21 = i3 + 32 | 0;
 i16 = i3 + 28 | 0;
 i18 = i3 + 24 | 0;
 i19 = i3 + 20 | 0;
 i20 = i3 + 16 | 0;
 i31 = i3 + 12 | 0;
 i24 = i3 + 8 | 0;
 i14 = i3 + 4 | 0;
 HEAP32[i26 >> 2] = i8;
 HEAP32[i25 >> 2] = i7;
 HEAP32[i32 >> 2] = i12;
 HEAP32[i33 >> 2] = i13;
 HEAPF32[i27 >> 2] = f1;
 HEAPF32[i37 >> 2] = f2;
 HEAPF32[i28 >> 2] = f9;
 HEAPF32[i29 >> 2] = f10;
 HEAP32[i22 >> 2] = i5;
 HEAP32[i23 >> 2] = i6;
 HEAP32[i17 >> 2] = i4;
 HEAP32[i30 >> 2] = i11;
 f10 = Math_fround(HEAPF32[i37 >> 2]);
 f9 = Math_fround(-f10);
 HEAPF32[i34 >> 2] = HEAP32[i17 >> 2] | 0 ? f9 : f10;
 HEAP32[i31 >> 2] = 1;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 while (1) {
  if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i33 >> 2] | 0)) break;
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[(HEAP32[i32 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0);
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 }
 i37 = _malloc(((HEAP32[i21 >> 2] | 0) + 1 | 0) * 20 | 0) | 0;
 HEAP32[i15 >> 2] = i37;
 if (!(HEAP32[i15 >> 2] | 0)) {
  STACKTOP = i36;
  return;
 }
 HEAP32[i21 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 while (1) {
  if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i33 >> 2] | 0)) break;
  HEAP32[i24 >> 2] = (HEAP32[i25 >> 2] | 0) + (HEAP32[i20 >> 2] << 3);
  HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + (HEAP32[(HEAP32[i32 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0);
  HEAP32[i18 >> 2] = (HEAP32[(HEAP32[i32 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0) - 1;
  HEAP32[i19 >> 2] = 0;
  while (1) {
   if ((HEAP32[i19 >> 2] | 0) >= (HEAP32[(HEAP32[i32 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0)) break;
   HEAP32[i14 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i3 >> 2] = HEAP32[i18 >> 2];
   f10 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) + 4 >> 2]);
   if (!(f10 == Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i19 >> 2] << 3) + 4 >> 2]))) {
    HEAP32[(HEAP32[i15 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) * 20 | 0) + 16 >> 2] = 0;
    f1 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) + 4 >> 2]);
    f2 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i19 >> 2] << 3) + 4 >> 2]);
    if (HEAP32[i17 >> 2] | 0) {
     if (f1 > f2) i35 = 13;
    } else if (f1 < f2) i35 = 13;
    if ((i35 | 0) == 13) {
     i35 = 0;
     HEAP32[(HEAP32[i15 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) * 20 | 0) + 16 >> 2] = 1;
     HEAP32[i14 >> 2] = HEAP32[i18 >> 2];
     HEAP32[i3 >> 2] = HEAP32[i19 >> 2];
    }
    f10 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) >> 2]);
    f10 = Math_fround(f10 * Math_fround(HEAPF32[i27 >> 2]));
    f10 = Math_fround(f10 + Math_fround(HEAPF32[i28 >> 2]));
    HEAPF32[(HEAP32[i15 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) * 20 | 0) >> 2] = f10;
    f10 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 4 >> 2]);
    f10 = Math_fround(f10 * Math_fround(HEAPF32[i34 >> 2]));
    f10 = Math_fround(f10 + Math_fround(HEAPF32[i29 >> 2]));
    f10 = Math_fround(f10 * Math_fround(HEAP32[i31 >> 2] | 0));
    HEAPF32[(HEAP32[i15 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) * 20 | 0) + 4 >> 2] = f10;
    f10 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i3 >> 2] << 3) >> 2]);
    f10 = Math_fround(f10 * Math_fround(HEAPF32[i27 >> 2]));
    f10 = Math_fround(f10 + Math_fround(HEAPF32[i28 >> 2]));
    HEAPF32[(HEAP32[i15 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) * 20 | 0) + 8 >> 2] = f10;
    f10 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i3 >> 2] << 3) + 4 >> 2]);
    f10 = Math_fround(f10 * Math_fround(HEAPF32[i34 >> 2]));
    f10 = Math_fround(f10 + Math_fround(HEAPF32[i29 >> 2]));
    f10 = Math_fround(f10 * Math_fround(HEAP32[i31 >> 2] | 0));
    HEAPF32[(HEAP32[i15 >> 2] | 0) + ((HEAP32[i21 >> 2] | 0) * 20 | 0) + 12 >> 2] = f10;
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
   }
   i37 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i37 + 1;
   HEAP32[i18 >> 2] = i37;
  }
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 }
 _stbtt__sort_edges(HEAP32[i15 >> 2] | 0, HEAP32[i21 >> 2] | 0);
 _stbtt__rasterize_sorted_edges(HEAP32[i26 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i21 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i22 >> 2] | 0, HEAP32[i23 >> 2] | 0, HEAP32[i30 >> 2] | 0);
 _free(HEAP32[i15 >> 2] | 0);
 STACKTOP = i36;
 return;
}

function _DrawTextEx(i12, i2, i16, f3, f4, i25) {
 i12 = i12 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 i25 = i25 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0;
 i27 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i26 = i1 + 128 | 0;
 i8 = i1 + 120 | 0;
 i18 = i1 + 104 | 0;
 i9 = i1 + 88 | 0;
 i24 = i1 + 68 | 0;
 i21 = i1 + 64 | 0;
 i7 = i1 + 60 | 0;
 i20 = i1 + 56 | 0;
 i15 = i1 + 52 | 0;
 i23 = i1 + 48 | 0;
 i22 = i1 + 44 | 0;
 i19 = i1 + 40 | 0;
 i13 = i1 + 36 | 0;
 i11 = i1 + 32 | 0;
 i10 = i1 + 28 | 0;
 i14 = i1 + 24 | 0;
 i17 = i1 + 8 | 0;
 HEAP32[i21 >> 2] = i2;
 HEAPF32[i7 >> 2] = f3;
 HEAPF32[i20 >> 2] = f4;
 i6 = _strlen(HEAP32[i21 >> 2] | 0) | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i23 >> 2] = 0;
 HEAPF32[i22 >> 2] = Math_fround(0.0);
 f4 = Math_fround(HEAPF32[i7 >> 2]);
 f4 = Math_fround(f4 / Math_fround(HEAP32[i12 >> 2] | 0));
 HEAPF32[i19 >> 2] = f4;
 HEAP32[i13 >> 2] = 0;
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break;
  HEAP32[i11 >> 2] = 0;
  i2 = _GetNextCodepoint((HEAP32[i21 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0, i11) | 0;
  HEAP32[i10 >> 2] = i2;
  i2 = HEAP32[i10 >> 2] | 0;
  i5 = i26;
  i6 = i12;
  i7 = i5 + 36 | 0;
  do {
   HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
   i5 = i5 + 4 | 0;
   i6 = i6 + 4 | 0;
  } while ((i5 | 0) < (i7 | 0));
  i7 = _GetGlyphIndex(i26, i2) | 0;
  HEAP32[i14 >> 2] = i7;
  if ((HEAP32[i10 >> 2] | 0) == 63) HEAP32[i11 >> 2] = 1;
  do if ((HEAP32[i10 >> 2] | 0) == 10) {
   i7 = HEAP32[i12 >> 2] | 0;
   f4 = Math_fround(i7 + ((i7 | 0) / 2 | 0) | 0);
   i7 = ~~Math_fround(f4 * Math_fround(HEAPF32[i19 >> 2]));
   HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + i7;
   HEAPF32[i22 >> 2] = Math_fround(0.0);
  } else {
   if ((HEAP32[i10 >> 2] | 0) != 32 & (HEAP32[i10 >> 2] | 0) != 9) {
    f4 = Math_fround(HEAPF32[i16 >> 2]);
    f4 = Math_fround(f4 + Math_fround(HEAPF32[i22 >> 2]));
    f3 = Math_fround(HEAP32[(HEAP32[i12 + 32 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) * 36 | 0) + 4 >> 2] | 0);
    f3 = Math_fround(f4 + Math_fround(f3 * Math_fround(HEAPF32[i19 >> 2])));
    HEAPF32[i17 >> 2] = f3;
    f3 = Math_fround(HEAPF32[i16 + 4 >> 2]);
    f3 = Math_fround(f3 + Math_fround(HEAP32[i23 >> 2] | 0));
    f4 = Math_fround(HEAP32[(HEAP32[i12 + 32 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) * 36 | 0) + 8 >> 2] | 0);
    f4 = Math_fround(f3 + Math_fround(f4 * Math_fround(HEAPF32[i19 >> 2])));
    HEAPF32[i17 + 4 >> 2] = f4;
    f4 = Math_fround(HEAPF32[(HEAP32[i12 + 28 >> 2] | 0) + (HEAP32[i14 >> 2] << 4) + 8 >> 2]);
    f4 = Math_fround(f4 * Math_fround(HEAPF32[i19 >> 2]));
    HEAPF32[i17 + 8 >> 2] = f4;
    f4 = Math_fround(HEAPF32[(HEAP32[i12 + 28 >> 2] | 0) + (HEAP32[i14 >> 2] << 4) + 12 >> 2]);
    f4 = Math_fround(f4 * Math_fround(HEAPF32[i19 >> 2]));
    HEAPF32[i17 + 12 >> 2] = f4;
    i6 = i12 + 8 | 0;
    i7 = (HEAP32[i12 + 28 >> 2] | 0) + (HEAP32[i14 >> 2] << 4) | 0;
    HEAPF32[i1 >> 2] = Math_fround(0.0);
    HEAPF32[i1 + 4 >> 2] = Math_fround(0.0);
    HEAP32[i24 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i24 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i24 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
    HEAP32[i24 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
    HEAP32[i24 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
    HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
    HEAP32[i9 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
    HEAP32[i9 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
    HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i18 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
    HEAP32[i18 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
    HEAP32[i18 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
    HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i8 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
    HEAP8[i26 >> 0] = HEAP8[i25 >> 0] | 0;
    HEAP8[i26 + 1 >> 0] = HEAP8[i25 + 1 >> 0] | 0;
    HEAP8[i26 + 2 >> 0] = HEAP8[i25 + 2 >> 0] | 0;
    HEAP8[i26 + 3 >> 0] = HEAP8[i25 + 3 >> 0] | 0;
    _DrawTexturePro(i24, i9, i18, i8, Math_fround(0.0), i26);
   }
   if (!(HEAP32[(HEAP32[i12 + 32 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) * 36 | 0) + 12 >> 2] | 0)) {
    f4 = Math_fround(HEAPF32[(HEAP32[i12 + 28 >> 2] | 0) + (HEAP32[i14 >> 2] << 4) + 8 >> 2]);
    f4 = Math_fround(f4 * Math_fround(HEAPF32[i19 >> 2]));
    f4 = Math_fround(f4 + Math_fround(HEAPF32[i20 >> 2]));
    f4 = Math_fround(Math_fround(HEAPF32[i22 >> 2]) + f4);
    HEAPF32[i22 >> 2] = f4;
    break;
   } else {
    f4 = Math_fround(HEAP32[(HEAP32[i12 + 32 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) * 36 | 0) + 12 >> 2] | 0);
    f4 = Math_fround(f4 * Math_fround(HEAPF32[i19 >> 2]));
    f4 = Math_fround(f4 + Math_fround(HEAPF32[i20 >> 2]));
    f4 = Math_fround(Math_fround(HEAPF32[i22 >> 2]) + f4);
    HEAPF32[i22 >> 2] = f4;
    break;
   }
  } while (0);
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) - 1);
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 STACKTOP = i27;
 return;
}

function _LoadBuffersDefault() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i9 = i10 + 8 | 0;
 i8 = i10;
 i1 = i10 + 36 | 0;
 i3 = i10 + 32 | 0;
 i4 = i10 + 28 | 0;
 i5 = i10 + 24 | 0;
 i7 = i10 + 20 | 0;
 i6 = i10 + 16 | 0;
 i2 = i10 + 12 | 0;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= 1) break;
  i11 = _malloc(98304) | 0;
  HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 12 >> 2] = i11;
  i11 = _malloc(65536) | 0;
  HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 16 >> 2] = i11;
  i11 = _malloc(32768) | 0;
  HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 20 >> 2] = i11;
  i11 = _malloc(24576) | 0;
  HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 24 >> 2] = i11;
  HEAP32[i3 >> 2] = 0;
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) >= 24576) break;
   HEAPF32[(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 12 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2] = Math_fround(0.0);
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  }
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= 16384) break;
   HEAPF32[(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 16 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2] = Math_fround(0.0);
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  HEAP32[i5 >> 2] = 0;
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) >= 32768) break;
   HEAP8[(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 20 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] = 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
  HEAP32[i7 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) >= 12288) break;
   HEAP16[(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + (HEAP32[i6 >> 2] << 1) >> 1] = HEAP32[i7 >> 2] << 2;
   HEAP16[(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 1 << 1) >> 1] = (HEAP32[i7 >> 2] << 2) + 1;
   HEAP16[(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 2 << 1) >> 1] = (HEAP32[i7 >> 2] << 2) + 2;
   HEAP16[(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 3 << 1) >> 1] = HEAP32[i7 >> 2] << 2;
   HEAP16[(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 4 << 1) >> 1] = (HEAP32[i7 >> 2] << 2) + 2;
   HEAP16[(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 5 << 1) >> 1] = (HEAP32[i7 >> 2] << 2) + 3;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 6;
  }
  HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) >> 2] = 0;
  HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 4 >> 2] = 0;
  HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 8 >> 2] = 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 _TraceLog(3, 33592, i8);
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= 1) break;
  if (HEAP8[177201] & 1) {
   FUNCTION_TABLE_vii[HEAP32[44013] & 63](1, 165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 28 | 0);
   FUNCTION_TABLE_vi[HEAP32[43934] & 31](HEAP32[165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 28 >> 2] | 0);
  }
  _glGenBuffers(1, 165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 32 | 0);
  _glBindBuffer(34962, HEAP32[165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 32 >> 2] | 0);
  _glBufferData(34962, 98304, HEAP32[165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 12 >> 2] | 0, 35048);
  _glEnableVertexAttribArray(HEAP32[HEAP32[43933] >> 2] | 0);
  _glVertexAttribPointer(HEAP32[HEAP32[43933] >> 2] | 0, 3, 5126, 0, 0, 0);
  _glGenBuffers(1, 165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 32 + 4 | 0);
  _glBindBuffer(34962, HEAP32[165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 32 + 4 >> 2] | 0);
  _glBufferData(34962, 65536, HEAP32[165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 16 >> 2] | 0, 35048);
  _glEnableVertexAttribArray(HEAP32[(HEAP32[43933] | 0) + 4 >> 2] | 0);
  _glVertexAttribPointer(HEAP32[(HEAP32[43933] | 0) + 4 >> 2] | 0, 2, 5126, 0, 0, 0);
  _glGenBuffers(1, 165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 32 + 8 | 0);
  _glBindBuffer(34962, HEAP32[165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 32 + 8 >> 2] | 0);
  _glBufferData(34962, 32768, HEAP32[165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 20 >> 2] | 0, 35048);
  _glEnableVertexAttribArray(HEAP32[(HEAP32[43933] | 0) + 20 >> 2] | 0);
  _glVertexAttribPointer(HEAP32[(HEAP32[43933] | 0) + 20 >> 2] | 0, 4, 5121, 1, 0, 0);
  _glGenBuffers(1, 165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 32 + 12 | 0);
  _glBindBuffer(34963, HEAP32[165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 32 + 12 >> 2] | 0);
  _glBufferData(34963, 24576, HEAP32[165328 + ((HEAP32[i2 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0, 35044);
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 _TraceLog(3, 33640, i9);
 if (!(HEAP8[177201] & 1)) {
  STACKTOP = i10;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[43934] & 31](0);
 STACKTOP = i10;
 return;
}

function _MatrixRotate(i3, i5, f2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 f2 = Math_fround(f2);
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, f16 = f0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i4 = i15 + 96 | 0;
 i1 = i15 + 32 | 0;
 i10 = i15 + 24 | 0;
 i11 = i15 + 20 | 0;
 i12 = i15 + 16 | 0;
 i7 = i15 + 12 | 0;
 i8 = i15 + 8 | 0;
 i6 = i15 + 4 | 0;
 i9 = i15;
 HEAPF32[i4 >> 2] = f2;
 i13 = i1;
 i14 = i13 + 64 | 0;
 do {
  HEAP32[i13 >> 2] = 0;
  i13 = i13 + 4 | 0;
 } while ((i13 | 0) < (i14 | 0));
 f2 = Math_fround(HEAPF32[i5 >> 2]);
 HEAPF32[i10 >> 2] = f2;
 f2 = Math_fround(HEAPF32[i5 + 4 >> 2]);
 HEAPF32[i11 >> 2] = f2;
 f2 = Math_fround(HEAPF32[i5 + 8 >> 2]);
 HEAPF32[i12 >> 2] = f2;
 f2 = Math_fround(HEAPF32[i10 >> 2]);
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i10 >> 2]));
 f16 = Math_fround(HEAPF32[i11 >> 2]);
 f16 = Math_fround(f2 + Math_fround(f16 * Math_fround(HEAPF32[i11 >> 2])));
 f2 = Math_fround(HEAPF32[i12 >> 2]);
 f2 = Math_fround(Math_sqrt(Math_fround(f16 + Math_fround(f2 * Math_fround(HEAPF32[i12 >> 2])))));
 HEAPF32[i7 >> 2] = f2;
 i14 = Math_fround(HEAPF32[i7 >> 2]) != Math_fround(1.0);
 if (i14 & Math_fround(HEAPF32[i7 >> 2]) != Math_fround(0.0)) {
  f16 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i7 >> 2]));
  HEAPF32[i7 >> 2] = f16;
  f16 = Math_fround(HEAPF32[i7 >> 2]);
  f16 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) * f16);
  HEAPF32[i10 >> 2] = f16;
  f16 = Math_fround(HEAPF32[i7 >> 2]);
  f16 = Math_fround(Math_fround(HEAPF32[i11 >> 2]) * f16);
  HEAPF32[i11 >> 2] = f16;
  f16 = Math_fround(HEAPF32[i7 >> 2]);
  f16 = Math_fround(Math_fround(HEAPF32[i12 >> 2]) * f16);
  HEAPF32[i12 >> 2] = f16;
 }
 f16 = Math_fround(+_llvm_sin_f32(+Math_fround(HEAPF32[i4 >> 2])));
 HEAPF32[i8 >> 2] = f16;
 f16 = Math_fround(+_llvm_cos_f32(+Math_fround(HEAPF32[i4 >> 2])));
 HEAPF32[i6 >> 2] = f16;
 f16 = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[i6 >> 2]));
 HEAPF32[i9 >> 2] = f16;
 f16 = Math_fround(HEAPF32[i10 >> 2]);
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i10 >> 2]));
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i9 >> 2]));
 f16 = Math_fround(f16 + Math_fround(HEAPF32[i6 >> 2]));
 HEAPF32[i1 >> 2] = f16;
 f16 = Math_fround(HEAPF32[i11 >> 2]);
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i10 >> 2]));
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i9 >> 2]));
 f2 = Math_fround(HEAPF32[i12 >> 2]);
 f2 = Math_fround(f16 + Math_fround(f2 * Math_fround(HEAPF32[i8 >> 2])));
 HEAPF32[i1 + 16 >> 2] = f2;
 f2 = Math_fround(HEAPF32[i12 >> 2]);
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i10 >> 2]));
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i9 >> 2]));
 f16 = Math_fround(HEAPF32[i11 >> 2]);
 f16 = Math_fround(f2 - Math_fround(f16 * Math_fround(HEAPF32[i8 >> 2])));
 HEAPF32[i1 + 32 >> 2] = f16;
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 f16 = Math_fround(HEAPF32[i10 >> 2]);
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i11 >> 2]));
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i9 >> 2]));
 f2 = Math_fround(HEAPF32[i12 >> 2]);
 f2 = Math_fround(f16 - Math_fround(f2 * Math_fround(HEAPF32[i8 >> 2])));
 HEAPF32[i1 + 4 >> 2] = f2;
 f2 = Math_fround(HEAPF32[i11 >> 2]);
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i11 >> 2]));
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i9 >> 2]));
 f2 = Math_fround(f2 + Math_fround(HEAPF32[i6 >> 2]));
 HEAPF32[i1 + 20 >> 2] = f2;
 f2 = Math_fround(HEAPF32[i12 >> 2]);
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i11 >> 2]));
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i9 >> 2]));
 f16 = Math_fround(HEAPF32[i10 >> 2]);
 f16 = Math_fround(f2 + Math_fround(f16 * Math_fround(HEAPF32[i8 >> 2])));
 HEAPF32[i1 + 36 >> 2] = f16;
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 f16 = Math_fround(HEAPF32[i10 >> 2]);
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i12 >> 2]));
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i9 >> 2]));
 f2 = Math_fround(HEAPF32[i11 >> 2]);
 f2 = Math_fround(f16 + Math_fround(f2 * Math_fround(HEAPF32[i8 >> 2])));
 HEAPF32[i1 + 8 >> 2] = f2;
 f2 = Math_fround(HEAPF32[i11 >> 2]);
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i12 >> 2]));
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i9 >> 2]));
 f16 = Math_fround(HEAPF32[i10 >> 2]);
 f16 = Math_fround(f2 - Math_fround(f16 * Math_fround(HEAPF32[i8 >> 2])));
 HEAPF32[i1 + 24 >> 2] = f16;
 f16 = Math_fround(HEAPF32[i12 >> 2]);
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i12 >> 2]));
 f16 = Math_fround(f16 * Math_fround(HEAPF32[i9 >> 2]));
 f16 = Math_fround(f16 + Math_fround(HEAPF32[i6 >> 2]));
 HEAPF32[i1 + 40 >> 2] = f16;
 HEAPF32[i1 + 56 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 12 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 28 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 44 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(1.0);
 i13 = i3;
 i14 = i13 + 64 | 0;
 do {
  HEAP32[i13 >> 2] = HEAP32[i1 >> 2];
  i13 = i13 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i13 | 0) < (i14 | 0));
 STACKTOP = i15;
 return;
}

function _stbv_vorbis_find_page(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i17 = i1 + 72 | 0;
 i14 = i1 + 68 | 0;
 i12 = i1 + 64 | 0;
 i13 = i1 + 60 | 0;
 i11 = i1 + 56 | 0;
 i16 = i1 + 52 | 0;
 i8 = i1 + 48 | 0;
 i15 = i1;
 i9 = i1 + 44 | 0;
 i6 = i1 + 40 | 0;
 i7 = i1 + 36 | 0;
 i10 = i1 + 32 | 0;
 i5 = i1 + 28 | 0;
 HEAP32[i14 >> 2] = i3;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i4;
 while (1) {
  if (HEAP32[(HEAP32[i14 >> 2] | 0) + 96 >> 2] | 0) {
   i1 = 3;
   break;
  }
  i4 = (_stbv_get8(HEAP32[i14 >> 2] | 0) | 0) & 255;
  HEAP32[i11 >> 2] = i4;
  if ((HEAP32[i11 >> 2] | 0) == 79) {
   i4 = _stb_vorbis_get_file_offset(HEAP32[i14 >> 2] | 0) | 0;
   HEAP32[i16 >> 2] = i4;
   if (((HEAP32[i16 >> 2] | 0) - 25 | 0) >>> 0 > (HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] | 0) >>> 0) {
    i1 = 6;
    break;
   }
   HEAP32[i8 >> 2] = 1;
   while (1) {
    if ((HEAP32[i8 >> 2] | 0) >= 4) break;
    i4 = (_stbv_get8(HEAP32[i14 >> 2] | 0) | 0) & 255;
    if ((i4 | 0) != (HEAPU8[47660 + (HEAP32[i8 >> 2] | 0) >> 0] | 0)) break;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   if (HEAP32[(HEAP32[i14 >> 2] | 0) + 96 >> 2] | 0) {
    i1 = 12;
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == 4) {
    HEAP32[i9 >> 2] = 0;
    while (1) {
     if ((HEAP32[i9 >> 2] | 0) >>> 0 >= 4) break;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP8[i15 + i4 >> 0] = HEAP8[47660 + i4 >> 0] | 0;
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    }
    while (1) {
     i1 = HEAP32[i14 >> 2] | 0;
     if ((HEAP32[i9 >> 2] | 0) >>> 0 >= 27) break;
     i4 = _stbv_get8(i1) | 0;
     HEAP8[i15 + (HEAP32[i9 >> 2] | 0) >> 0] = i4;
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    }
    if (HEAP32[i1 + 96 >> 2] | 0) {
     i1 = 21;
     break;
    }
    if (!(HEAPU8[i15 + 4 >> 0] | 0)) {
     HEAP32[i7 >> 2] = (HEAPU8[i15 + 22 >> 0] | 0) + (HEAPU8[i15 + 23 >> 0] << 8) + (HEAPU8[i15 + 24 >> 0] << 16) + (HEAPU8[i15 + 25 >> 0] << 24);
     HEAP32[i9 >> 2] = 22;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 >= 26) break;
      HEAP8[i15 + (HEAP32[i9 >> 2] | 0) >> 0] = 0;
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     }
     HEAP32[i6 >> 2] = 0;
     HEAP32[i9 >> 2] = 0;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 >= 27) break;
      i4 = _stbv_crc32_update(HEAP32[i6 >> 2] | 0, HEAP8[i15 + (HEAP32[i9 >> 2] | 0) >> 0] | 0) | 0;
      HEAP32[i6 >> 2] = i4;
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     }
     HEAP32[i10 >> 2] = 0;
     HEAP32[i9 >> 2] = 0;
     while (1) {
      if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAPU8[i15 + 26 >> 0] | 0) >>> 0) break;
      i4 = (_stbv_get8(HEAP32[i14 >> 2] | 0) | 0) & 255;
      HEAP32[i5 >> 2] = i4;
      i4 = _stbv_crc32_update(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] & 255) | 0;
      HEAP32[i6 >> 2] = i4;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     }
     if (HEAP32[i10 >> 2] | 0) if (HEAP32[(HEAP32[i14 >> 2] | 0) + 96 >> 2] | 0) {
      i1 = 34;
      break;
     }
     HEAP32[i9 >> 2] = 0;
     while (1) {
      i1 = HEAP32[i6 >> 2] | 0;
      if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) break;
      i4 = _stbv_crc32_update(i1, _stbv_get8(HEAP32[i14 >> 2] | 0) | 0) | 0;
      HEAP32[i6 >> 2] = i4;
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     }
     if ((i1 | 0) == (HEAP32[i7 >> 2] | 0)) {
      i1 = 39;
      break;
     }
    }
   }
   _stbv_set_file_offset(HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
  }
 }
 if ((i1 | 0) == 3) {
  HEAP32[i17 >> 2] = 0;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 } else if ((i1 | 0) == 6) {
  HEAP32[i17 >> 2] = 0;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 } else if ((i1 | 0) == 12) {
  HEAP32[i17 >> 2] = 0;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 } else if ((i1 | 0) == 21) {
  HEAP32[i17 >> 2] = 0;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 } else if ((i1 | 0) == 34) {
  HEAP32[i17 >> 2] = 0;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 } else if ((i1 | 0) == 39) {
  if (HEAP32[i12 >> 2] | 0) {
   i11 = _stb_vorbis_get_file_offset(HEAP32[i14 >> 2] | 0) | 0;
   HEAP32[HEAP32[i12 >> 2] >> 2] = i11;
  }
  do if (HEAP32[i13 >> 2] | 0) {
   i1 = HEAP32[i13 >> 2] | 0;
   if (HEAPU8[i15 + 5 >> 0] & 4 | 0) {
    HEAP32[i1 >> 2] = 1;
    break;
   } else {
    HEAP32[i1 >> 2] = 0;
    break;
   }
  } while (0);
  _stbv_set_file_offset(HEAP32[i14 >> 2] | 0, (HEAP32[i16 >> 2] | 0) - 1 | 0) | 0;
  HEAP32[i17 >> 2] = 1;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 return 0;
}

function _ma_device__post_init_setup(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i7 = i1 + 252 | 0;
 i6 = i1 + 248 | 0;
 i4 = i1 + 124 | 0;
 i5 = i1;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i6 >> 2] = i2;
 if (!(HEAP32[i7 >> 2] | 0)) ___assert_fail(36359, 36381, 25494, 43928);
 do if ((HEAP32[i6 >> 2] | 0) == 2 | (HEAP32[i6 >> 2] | 0) == 3) {
  if (HEAP8[(HEAP32[i7 >> 2] | 0) + 47360 + 260 >> 0] & 1 | 0) {
   i3 = (HEAP32[i7 >> 2] | 0) + 47360 | 0;
   HEAP32[i3 + 264 >> 2] = HEAP32[i3 + 304 >> 2];
  }
  if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 47360 + 260 >> 0] | 0) >>> 1 & 1 | 0) {
   i3 = (HEAP32[i7 >> 2] | 0) + 47360 | 0;
   HEAP32[i3 + 268 >> 2] = HEAP32[i3 + 308 >> 2];
  }
  if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 47360 + 260 >> 0] | 0) >>> 2 & 1 | 0) {
   i1 = (HEAP32[i7 >> 2] | 0) + 47360 | 0;
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 47360 + 308 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 47360 + 268 >> 2] | 0)) {
    i3 = (HEAP32[i7 >> 2] | 0) + 47360 | 0;
    _ma_channel_map_copy(i1 + 272 | 0, i3 + 316 | 0, HEAP32[i3 + 268 >> 2] | 0);
    break;
   } else {
    _ma_get_standard_channel_map(0, HEAP32[i1 + 268 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 47360 + 272 | 0);
    break;
   }
  }
 } while (0);
 do if ((HEAP32[i6 >> 2] | 0) == 1 | (HEAP32[i6 >> 2] | 0) == 3) {
  if (HEAP8[(HEAP32[i7 >> 2] | 0) + 384 + 260 >> 0] & 1 | 0) {
   i3 = (HEAP32[i7 >> 2] | 0) + 384 | 0;
   HEAP32[i3 + 264 >> 2] = HEAP32[i3 + 304 >> 2];
  }
  if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 384 + 260 >> 0] | 0) >>> 1 & 1 | 0) {
   i3 = (HEAP32[i7 >> 2] | 0) + 384 | 0;
   HEAP32[i3 + 268 >> 2] = HEAP32[i3 + 308 >> 2];
  }
  if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 384 + 260 >> 0] | 0) >>> 2 & 1 | 0) {
   i1 = (HEAP32[i7 >> 2] | 0) + 384 | 0;
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 384 + 308 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 384 + 268 >> 2] | 0)) {
    i3 = (HEAP32[i7 >> 2] | 0) + 384 | 0;
    _ma_channel_map_copy(i1 + 272 | 0, i3 + 316 | 0, HEAP32[i3 + 268 >> 2] | 0);
    break;
   } else {
    _ma_get_standard_channel_map(0, HEAP32[i1 + 268 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 384 + 272 | 0);
    break;
   }
  }
 } while (0);
 do if (HEAP8[(HEAP32[i7 >> 2] | 0) + 324 >> 0] & 1 | 0) {
  i1 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i6 >> 2] | 0) == 2 | (HEAP32[i6 >> 2] | 0) == 3) {
   HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = HEAP32[i1 + 47360 + 312 >> 2];
   break;
  } else {
   HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = HEAP32[i1 + 384 + 312 >> 2];
   break;
  }
 } while (0);
 if ((HEAP32[i6 >> 2] | 0) == 2 | (HEAP32[i6 >> 2] | 0) == 3 | (HEAP32[i6 >> 2] | 0) == 4) {
  _ma_pcm_converter_config_init_new(i4);
  i3 = i4 + 104 | 0;
  HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -2 | 1;
  HEAP32[i4 + 112 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 47360 + 304 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 47360 + 308 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 47360 + 312 >> 2];
  i3 = (HEAP32[i7 >> 2] | 0) + 47360 | 0;
  _ma_channel_map_copy(i4 + 12 | 0, i3 + 316 | 0, HEAP32[i3 + 308 >> 2] | 0);
  HEAP32[i4 + 44 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 47360 + 264 >> 2];
  HEAP32[i4 + 48 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 47360 + 268 >> 2];
  HEAP32[i4 + 52 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2];
  i3 = (HEAP32[i7 >> 2] | 0) + 47360 | 0;
  _ma_channel_map_copy(i4 + 56 | 0, i3 + 272 | 0, HEAP32[i3 + 268 >> 2] | 0);
  HEAP32[i4 + 108 >> 2] = 4;
  _ma_pcm_converter_init(i4, (HEAP32[i7 >> 2] | 0) + 47360 + 384 | 0) | 0;
 }
 if (!((HEAP32[i6 >> 2] | 0) == 1 | (HEAP32[i6 >> 2] | 0) == 3)) {
  STACKTOP = i8;
  return;
 }
 _ma_pcm_converter_config_init_new(i5);
 i4 = i5 + 104 | 0;
 HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -2 | 1;
 HEAP32[i5 + 112 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 384 + 264 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 384 + 268 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2];
 i4 = (HEAP32[i7 >> 2] | 0) + 384 | 0;
 _ma_channel_map_copy(i5 + 12 | 0, i4 + 272 | 0, HEAP32[i4 + 268 >> 2] | 0);
 HEAP32[i5 + 44 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 384 + 304 >> 2];
 HEAP32[i5 + 48 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 384 + 308 >> 2];
 HEAP32[i5 + 52 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 384 + 312 >> 2];
 i4 = (HEAP32[i7 >> 2] | 0) + 384 | 0;
 _ma_channel_map_copy(i5 + 56 | 0, i4 + 316 | 0, HEAP32[i4 + 308 >> 2] | 0);
 do if ((HEAP32[i6 >> 2] | 0) == 1) {
  i1 = i5 + 108 | 0;
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) == 1) {
   HEAP32[i1 >> 2] = 5;
   break;
  } else {
   HEAP32[i1 >> 2] = 6;
   break;
  }
 } else HEAP32[i5 + 108 >> 2] = 6; while (0);
 _ma_pcm_converter_init(i5, (HEAP32[i7 >> 2] | 0) + 384 + 384 | 0) | 0;
 STACKTOP = i8;
 return;
}

function ___floatscan(i11, i2, i9) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0;
 i4 = 0;
 switch (i2 | 0) {
 case 0:
  {
   i7 = 24;
   i8 = -149;
   i4 = 4;
   break;
  }
 case 1:
  {
   i7 = 53;
   i8 = -1074;
   i4 = 4;
   break;
  }
 case 2:
  {
   i7 = 53;
   i8 = -1074;
   i4 = 4;
   break;
  }
 default:
  d1 = 0.0;
 }
 L4 : do if ((i4 | 0) == 4) {
  i12 = i11 + 4 | 0;
  i10 = i11 + 104 | 0;
  do {
   i2 = HEAP32[i12 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i12 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i11) | 0;
  } while ((_isspace(i2) | 0) != 0);
  L13 : do switch (i2 | 0) {
  case 43:
  case 45:
   {
    i3 = 1 - (((i2 | 0) == 45 & 1) << 1) | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i12 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
     i6 = i3;
     break L13;
    } else {
     i2 = ___shgetc(i11) | 0;
     i6 = i3;
     break L13;
    }
   }
  default:
   i6 = 1;
  } while (0);
  i3 = i2;
  i2 = 0;
  while (1) {
   if ((i3 | 32 | 0) != (HEAP8[59310 + i2 >> 0] | 0)) break;
   do if (i2 >>> 0 < 7) {
    i3 = HEAP32[i12 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i12 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     break;
    } else {
     i3 = ___shgetc(i11) | 0;
     break;
    }
   } while (0);
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= 8) {
    i2 = 8;
    break;
   }
  }
  L29 : do switch (i2 & 2147483647 | 0) {
  case 8:
   break;
  case 3:
   {
    i4 = 23;
    break;
   }
  default:
   {
    i5 = (i9 | 0) != 0;
    if (i5 & i2 >>> 0 > 3) if ((i2 | 0) == 8) break L29; else {
     i4 = 23;
     break L29;
    }
    L34 : do if (!i2) {
     i2 = 0;
     while (1) {
      if ((i3 | 32 | 0) != (HEAP8[59319 + i2 >> 0] | 0)) break L34;
      do if (i2 >>> 0 < 2) {
       i3 = HEAP32[i12 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
        break;
       } else {
        i3 = ___shgetc(i11) | 0;
        break;
       }
      } while (0);
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= 3) {
       i2 = 3;
       break;
      }
     }
    } while (0);
    switch (i2 | 0) {
    case 3:
     {
      i2 = HEAP32[i12 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
       HEAP32[i12 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] | 0;
      } else i2 = ___shgetc(i11) | 0;
      if ((i2 | 0) != 40) {
       if (!(HEAP32[i10 >> 2] | 0)) {
        d1 = nan;
        break L4;
       }
       HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
       d1 = nan;
       break L4;
      }
      i2 = 1;
      while (1) {
       i3 = HEAP32[i12 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
       } else i3 = ___shgetc(i11) | 0;
       if (!((i3 + -48 | 0) >>> 0 < 10 | (i3 + -65 | 0) >>> 0 < 26)) if (!((i3 | 0) == 95 | (i3 + -97 | 0) >>> 0 < 26)) break;
       i2 = i2 + 1 | 0;
      }
      if ((i3 | 0) == 41) {
       d1 = nan;
       break L4;
      }
      i3 = (HEAP32[i10 >> 2] | 0) == 0;
      if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
      if (!i5) {
       i12 = ___errno_location() | 0;
       HEAP32[i12 >> 2] = 28;
       ___shlim(i11, 0, 0);
       d1 = 0.0;
       break L4;
      }
      if (!i2) {
       d1 = nan;
       break L4;
      }
      while (1) {
       i2 = i2 + -1 | 0;
       if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
       if (!i2) {
        d1 = nan;
        break L4;
       }
      }
     }
    case 0:
     {
      if ((i3 | 0) == 48) {
       i2 = HEAP32[i12 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i11) | 0;
       if ((i2 | 32 | 0) == 120) {
        d1 = +_hexfloat(i11, i7, i8, i6, i9);
        break L4;
       }
       if (!(HEAP32[i10 >> 2] | 0)) i2 = 48; else {
        HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
        i2 = 48;
       }
      } else i2 = i3;
      d1 = +_decfloat(i11, i2, i7, i8, i6, i9);
      break L4;
     }
    default:
     {
      if (HEAP32[i10 >> 2] | 0) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
      i12 = ___errno_location() | 0;
      HEAP32[i12 >> 2] = 28;
      ___shlim(i11, 0, 0);
      d1 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((i4 | 0) == 23) {
   i3 = (HEAP32[i10 >> 2] | 0) == 0;
   if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
   if ((i9 | 0) != 0 & i2 >>> 0 > 3) do {
    if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > 3);
  }
  d1 = +Math_fround(Math_fround(i6 | 0) * Math_fround(inf));
 } while (0);
 return +d1;
}

function _ImageMipmaps(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i19 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i3 = i1 + 80 | 0;
 i16 = i1 + 72 | 0;
 i15 = i1 + 48 | 0;
 i14 = i1 + 40 | 0;
 i13 = i1 + 32 | 0;
 i18 = i1 + 24 | 0;
 i17 = i1 + 16 | 0;
 i12 = i1;
 i5 = i1 + 148 | 0;
 i6 = i1 + 144 | 0;
 i9 = i1 + 140 | 0;
 i7 = i1 + 136 | 0;
 i8 = i1 + 132 | 0;
 i11 = i1 + 128 | 0;
 i10 = i1 + 124 | 0;
 i2 = i1 + 104 | 0;
 i1 = i1 + 100 | 0;
 HEAP32[i5 >> 2] = i4;
 if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
  STACKTOP = i19;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i19;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = i19;
  return;
 }
 HEAP32[i6 >> 2] = 1;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2];
 i4 = _GetPixelDataSize(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i4;
 while (1) {
  if (!((HEAP32[i9 >> 2] | 0) != 1 ? 1 : (HEAP32[i7 >> 2] | 0) != 1)) break;
  if ((HEAP32[i9 >> 2] | 0) != 1) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) / 2 | 0;
  if ((HEAP32[i7 >> 2] | 0) != 1) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) / 2 | 0;
  if ((HEAP32[i9 >> 2] | 0) < 1) HEAP32[i9 >> 2] = 1;
  if ((HEAP32[i7 >> 2] | 0) < 1) HEAP32[i7 >> 2] = 1;
  i20 = HEAP32[i7 >> 2] | 0;
  i4 = HEAP32[i8 >> 2] | 0;
  HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i12 + 4 >> 2] = i20;
  HEAP32[i12 + 8 >> 2] = i4;
  _TraceLog(2, 58707, i12);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  i4 = _GetPixelDataSize(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i4;
 }
 i20 = HEAP32[i6 >> 2] | 0;
 HEAP32[i17 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
 HEAP32[i17 + 4 >> 2] = i20;
 _TraceLog(2, 58752, i17);
 HEAP32[i18 >> 2] = HEAP32[i8 >> 2];
 _TraceLog(2, 58797, i18);
 HEAP32[i3 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 _TraceLog(2, 58829, i3);
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
  _TraceLog(4, 59013, i16);
  STACKTOP = i19;
  return;
 }
 i20 = _realloc(HEAP32[HEAP32[i5 >> 2] >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = i20;
 if (HEAP32[i11 >> 2] | 0) {
  HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[i11 >> 2];
  HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
  _TraceLog(2, 58867, i13);
 } else _TraceLog(4, 58909, i14);
 i18 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
 i20 = HEAP32[i5 >> 2] | 0;
 i20 = i18 + (_GetPixelDataSize(HEAP32[i20 + 4 >> 2] | 0, HEAP32[i20 + 8 >> 2] | 0, HEAP32[i20 + 16 >> 2] | 0) | 0) | 0;
 HEAP32[i10 >> 2] = i20;
 HEAP32[i9 >> 2] = (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) / 2 | 0;
 HEAP32[i7 >> 2] = (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) / 2 | 0;
 i20 = _GetPixelDataSize(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i20;
 i20 = HEAP32[i5 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i20 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i20 + 16 >> 2];
 _ImageCopy(i2, i3);
 HEAP32[i1 >> 2] = 1;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  i16 = HEAP32[i9 >> 2] | 0;
  i17 = HEAP32[i7 >> 2] | 0;
  i18 = HEAP32[i8 >> 2] | 0;
  i20 = HEAP32[i10 >> 2] | 0;
  HEAP32[i15 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i15 + 4 >> 2] = i16;
  HEAP32[i15 + 8 >> 2] = i17;
  HEAP32[i15 + 12 >> 2] = i18;
  HEAP32[i15 + 16 >> 2] = i20;
  _TraceLog(2, 58956, i15);
  _ImageResize(i2, HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  _memcpy(HEAP32[i10 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  i20 = (HEAP32[i5 >> 2] | 0) + 12 | 0;
  HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) / 2 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) / 2 | 0;
  if ((HEAP32[i9 >> 2] | 0) < 1) HEAP32[i9 >> 2] = 1;
  if ((HEAP32[i7 >> 2] | 0) < 1) HEAP32[i7 >> 2] = 1;
  i20 = _GetPixelDataSize(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = i20;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 _UnloadImage(i3);
 STACKTOP = i19;
 return;
}

function _drmp3_L3_decode_scalefactors(i10, i15, i2, i8, i20, i4) {
 i10 = i10 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i20 = i20 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, f28 = f0;
 i27 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i11 = i1 + 108 | 0;
 i16 = i1 + 104 | 0;
 i3 = i1 + 100 | 0;
 i9 = i1 + 96 | 0;
 i21 = i1 + 92 | 0;
 i5 = i1 + 88 | 0;
 i22 = i1 + 84 | 0;
 i24 = i1 + 112 | 0;
 i13 = i1;
 i12 = i1 + 80 | 0;
 i23 = i1 + 76 | 0;
 i7 = i1 + 72 | 0;
 i25 = i1 + 68 | 0;
 i6 = i1 + 64 | 0;
 i19 = i1 + 60 | 0;
 i17 = i1 + 56 | 0;
 i18 = i1 + 52 | 0;
 i26 = i1 + 48 | 0;
 i14 = i1 + 44 | 0;
 i1 = i1 + 40 | 0;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i16 >> 2] = i15;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i21 >> 2] = i20;
 HEAP32[i5 >> 2] = i4;
 i20 = HEAP32[i9 >> 2] | 0;
 HEAP32[i22 >> 2] = 21968 + (((((HEAP8[i20 + 14 >> 0] | 0) != 0 ^ 1 ^ 1) & 1) + (((HEAP8[i20 + 13 >> 0] | 0) != 0 ^ 1) & 1) | 0) * 28 | 0);
 HEAP32[i23 >> 2] = (HEAPU8[(HEAP32[i9 >> 2] | 0) + 25 >> 0] | 0) + 1;
 HEAP32[i25 >> 2] = HEAPU8[(HEAP32[i9 >> 2] | 0) + 27 >> 0];
 if (HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] & 8 | 0) {
  HEAP32[i19 >> 2] = HEAPU8[22064 + (HEAPU16[(HEAP32[i9 >> 2] | 0) + 8 >> 1] | 0) >> 0];
  i26 = HEAP32[i19 >> 2] >> 2 & 255;
  HEAP8[i24 >> 0] = i26;
  HEAP8[i24 + 1 >> 0] = i26;
  i26 = HEAP32[i19 >> 2] & 3;
  HEAP8[i24 + 2 >> 0] = i26;
  HEAP8[i24 + 3 >> 0] = i26;
 } else {
  HEAP32[i14 >> 2] = (HEAPU8[(HEAP32[i11 >> 2] | 0) + 3 >> 0] & 16 | 0 ? (HEAP32[i5 >> 2] | 0) != 0 : 0) & 1;
  HEAP32[i26 >> 2] = HEAPU16[(HEAP32[i9 >> 2] | 0) + 8 >> 1] >> HEAP32[i14 >> 2];
  HEAP32[i17 >> 2] = (HEAP32[i14 >> 2] | 0) * 3 << 2;
  while (1) {
   if ((HEAP32[i26 >> 2] | 0) < 0) break;
   HEAP32[i18 >> 2] = 1;
   HEAP32[i12 >> 2] = 3;
   while (1) {
    if ((HEAP32[i12 >> 2] | 0) < 0) break;
    i20 = HEAP32[i12 >> 2] | 0;
    HEAP8[i24 + i20 >> 0] = ((HEAP32[i26 >> 2] | 0) / (HEAP32[i18 >> 2] | 0) | 0 | 0) % (HEAPU8[22080 + ((HEAP32[i17 >> 2] | 0) + i20) >> 0] | 0) | 0;
    i20 = Math_imul(HEAP32[i18 >> 2] | 0, HEAPU8[22080 + ((HEAP32[i17 >> 2] | 0) + (HEAP32[i12 >> 2] | 0)) >> 0] | 0) | 0;
    HEAP32[i18 >> 2] = i20;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
   }
   HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 4;
  }
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
  HEAP32[i25 >> 2] = -16;
 }
 _drmp3_L3_read_scalefactors(i13, HEAP32[i16 >> 2] | 0, i24, HEAP32[i22 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i25 >> 2] | 0);
 L13 : do if (HEAP8[(HEAP32[i9 >> 2] | 0) + 14 >> 0] | 0) {
  HEAP32[i1 >> 2] = 3 - (HEAP32[i23 >> 2] | 0);
  HEAP32[i12 >> 2] = 0;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) >= (HEAPU8[(HEAP32[i9 >> 2] | 0) + 14 >> 0] | 0)) break L13;
   i26 = i13 + ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 13 >> 0] | 0) + (HEAP32[i12 >> 2] | 0) + 0) | 0;
   HEAP8[i26 >> 0] = (HEAPU8[i26 >> 0] | 0) + (HEAPU8[(HEAP32[i9 >> 2] | 0) + 21 >> 0] << HEAP32[i1 >> 2]);
   i26 = i13 + ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 13 >> 0] | 0) + (HEAP32[i12 >> 2] | 0) + 1) | 0;
   HEAP8[i26 >> 0] = (HEAPU8[i26 >> 0] | 0) + (HEAPU8[(HEAP32[i9 >> 2] | 0) + 21 + 1 >> 0] << HEAP32[i1 >> 2]);
   i26 = i13 + ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 13 >> 0] | 0) + (HEAP32[i12 >> 2] | 0) + 2) | 0;
   HEAP8[i26 >> 0] = (HEAPU8[i26 >> 0] | 0) + (HEAPU8[(HEAP32[i9 >> 2] | 0) + 21 + 2 >> 0] << HEAP32[i1 >> 2]);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 3;
  }
 } else if (HEAP8[(HEAP32[i9 >> 2] | 0) + 24 >> 0] | 0) {
  HEAP32[i12 >> 2] = 0;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) >= 10) break L13;
   i26 = i13 + (11 + (HEAP32[i12 >> 2] | 0)) | 0;
   HEAP8[i26 >> 0] = (HEAPU8[i26 >> 0] | 0) + (HEAPU8[48377 + (HEAP32[i12 >> 2] | 0) >> 0] | 0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i7 >> 2] = (HEAPU8[(HEAP32[i9 >> 2] | 0) + 10 >> 0] | 0) + -4 - 210 - ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 3 >> 0] & 224 | 0) == 96 ? 2 : 0);
 f28 = Math_fround(_drmp3_L3_ldexp_q2(Math_fround(2048.0), 44 - (HEAP32[i7 >> 2] | 0) | 0));
 HEAPF32[i6 >> 2] = f28;
 HEAP32[i12 >> 2] = 0;
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) >= ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 13 >> 0] | 0) + (HEAPU8[(HEAP32[i9 >> 2] | 0) + 14 >> 0] | 0) | 0)) break;
  f28 = Math_fround(HEAPF32[i6 >> 2]);
  f28 = Math_fround(_drmp3_L3_ldexp_q2(f28, HEAPU8[i13 + (HEAP32[i12 >> 2] | 0) >> 0] << HEAP32[i23 >> 2]));
  HEAPF32[(HEAP32[i21 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] = f28;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 STACKTOP = i27;
 return;
}

function _GifWriteLzwImage(i6, i10, i12, i18, i19, i8, i5, i16) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i9 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 i7 = i23 + 324 | 0;
 i11 = i23 + 320 | 0;
 i26 = i23 + 316 | 0;
 i25 = i23 + 312 | 0;
 i20 = i23 + 308 | 0;
 i9 = i23 + 304 | 0;
 i27 = i23 + 300 | 0;
 i24 = i23 + 296 | 0;
 i14 = i23 + 292 | 0;
 i1 = i23 + 288 | 0;
 i3 = i23 + 284 | 0;
 i4 = i23 + 280 | 0;
 i2 = i23 + 276 | 0;
 i13 = i23 + 272 | 0;
 i17 = i23 + 8 | 0;
 i22 = i23 + 4 | 0;
 i21 = i23;
 i15 = i23 + 328 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i26 >> 2] = i12;
 HEAP32[i25 >> 2] = i18;
 HEAP32[i20 >> 2] = i19;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i27 >> 2] = i5;
 HEAP32[i24 >> 2] = i16;
 _fputc(33, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(249, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(4, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(5, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(HEAP32[i27 >> 2] & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc((HEAP32[i27 >> 2] | 0) >>> 8 & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(0, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(0, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(44, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(HEAP32[i26 >> 2] & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc((HEAP32[i26 >> 2] | 0) >>> 8 & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(HEAP32[i25 >> 2] & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc((HEAP32[i25 >> 2] | 0) >>> 8 & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(HEAP32[i20 >> 2] & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc((HEAP32[i20 >> 2] | 0) >>> 8 & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(HEAP32[i9 >> 2] & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc((HEAP32[i9 >> 2] | 0) >>> 8 & 255, HEAP32[i7 >> 2] | 0) | 0;
 _fputc(128 + (HEAP32[HEAP32[i24 >> 2] >> 2] | 0) - 1 | 0, HEAP32[i7 >> 2] | 0) | 0;
 _GifWritePalette(HEAP32[i24 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 HEAP32[i14 >> 2] = HEAP32[HEAP32[i24 >> 2] >> 2];
 HEAP32[i1 >> 2] = 1 << HEAP32[HEAP32[i24 >> 2] >> 2];
 _fputc(HEAP32[i14 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 i19 = _malloc(2097152) | 0;
 HEAP32[i3 >> 2] = i19;
 _memset(HEAP32[i3 >> 2] | 0, 0, 2097152) | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i2 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 HEAP32[i13 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP8[i17 + 1 >> 0] = 0;
 HEAP8[i17 >> 0] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 _GifWriteCode(HEAP32[i7 >> 2] | 0, i17, HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0);
 HEAP32[i22 >> 2] = 0;
 while (1) {
  if ((HEAP32[i22 >> 2] | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) break;
  HEAP32[i21 >> 2] = 0;
  while (1) {
   if ((HEAP32[i21 >> 2] | 0) >>> 0 >= (HEAP32[i20 >> 2] | 0) >>> 0) break;
   i27 = Math_imul(HEAP32[i22 >> 2] | 0, HEAP32[i20 >> 2] | 0) | 0;
   HEAP8[i15 >> 0] = HEAP8[(HEAP32[i11 >> 2] | 0) + ((i27 + (HEAP32[i21 >> 2] | 0) << 2) + 3) >> 0] | 0;
   do if ((HEAP32[i4 >> 2] | 0) < 0) HEAP32[i4 >> 2] = HEAPU8[i15 >> 0]; else {
    if (HEAP16[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 9) + (HEAPU8[i15 >> 0] << 1) >> 1] | 0) {
     HEAP32[i4 >> 2] = HEAPU16[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 9) + (HEAPU8[i15 >> 0] << 1) >> 1];
     break;
    }
    _GifWriteCode(HEAP32[i7 >> 2] | 0, i17, HEAP32[i4 >> 2] | 0, HEAP32[i2 >> 2] | 0);
    i27 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
    HEAP32[i13 >> 2] = i27;
    HEAP16[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << 9) + (HEAPU8[i15 >> 0] << 1) >> 1] = i27;
    if ((HEAP32[i13 >> 2] | 0) >>> 0 >= 1 << HEAP32[i2 >> 2] >>> 0) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
    if ((HEAP32[i13 >> 2] | 0) == 4095) {
     _GifWriteCode(HEAP32[i7 >> 2] | 0, i17, HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0);
     _memset(HEAP32[i3 >> 2] | 0, 0, 2097152) | 0;
     HEAP32[i2 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
     HEAP32[i13 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
    }
    HEAP32[i4 >> 2] = HEAPU8[i15 >> 0];
   } while (0);
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
  }
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
 }
 _GifWriteCode(HEAP32[i7 >> 2] | 0, i17, HEAP32[i4 >> 2] | 0, HEAP32[i2 >> 2] | 0);
 _GifWriteCode(HEAP32[i7 >> 2] | 0, i17, HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0);
 _GifWriteCode(HEAP32[i7 >> 2] | 0, i17, (HEAP32[i1 >> 2] | 0) + 1 | 0, (HEAP32[i14 >> 2] | 0) + 1 | 0);
 while (1) {
  if (!(HEAP8[i17 >> 0] | 0)) break;
  _GifWriteBit(i17, 0);
 }
 if (!(HEAP32[i17 + 4 >> 2] | 0)) {
  i27 = HEAP32[i7 >> 2] | 0;
  _fputc(0, i27) | 0;
  i27 = HEAP32[i3 >> 2] | 0;
  _free(i27);
  STACKTOP = i23;
  return;
 }
 _GifWriteChunk(HEAP32[i7 >> 2] | 0, i17);
 i27 = HEAP32[i7 >> 2] | 0;
 _fputc(0, i27) | 0;
 i27 = HEAP32[i3 >> 2] | 0;
 _free(i27);
 STACKTOP = i23;
 return;
}

function _stbv_is_whole_packet_present(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i3 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 1380 >> 2];
 HEAP32[i5 >> 2] = 1;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 32 >> 2];
 do if ((HEAP32[i8 >> 2] | 0) != -1) {
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 1116 >> 2] | 0)) break;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAPU8[(HEAP32[i9 >> 2] | 0) + 1120 + (HEAP32[i8 >> 2] | 0) >> 0] | 0);
   if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 1120 + (HEAP32[i8 >> 2] | 0) >> 0] | 0 | 0) < 255) break;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  if (HEAP32[i3 >> 2] | 0) if ((HEAP32[i8 >> 2] | 0) < ((HEAP32[(HEAP32[i9 >> 2] | 0) + 1116 >> 2] | 0) - 1 | 0)) {
   i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 21) | 0;
   HEAP32[i10 >> 2] = i9;
   i10 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i11;
   return i10 | 0;
  }
  if ((HEAP32[i8 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 1116 >> 2] | 0)) HEAP32[i8 >> 2] = -1;
  if ((HEAP32[i6 >> 2] | 0) >>> 0 <= (HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] | 0) >>> 0) {
   HEAP32[i5 >> 2] = 0;
   break;
  }
  i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 1) | 0;
  HEAP32[i10 >> 2] = i9;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } while (0);
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) != -1) {
   i1 = 42;
   break;
  }
  if (((HEAP32[i6 >> 2] | 0) + 26 | 0) >>> 0 >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] | 0) >>> 0) {
   i1 = 17;
   break;
  }
  if (_memcmp(HEAP32[i6 >> 2] | 0, 47660, 4) | 0) {
   i1 = 19;
   break;
  }
  if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 4 >> 0] | 0 | 0) {
   i1 = 21;
   break;
  }
  if (HEAP32[i5 >> 2] | 0) {
   if (HEAP32[(HEAP32[i9 >> 2] | 0) + 992 >> 2] | 0) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 5 >> 0] | 0) & 1 | 0) {
    i1 = 25;
    break;
   }
  } else if (!((HEAPU8[(HEAP32[i6 >> 2] | 0) + 5 >> 0] | 0) & 1)) {
   i1 = 27;
   break;
  }
  HEAP32[i1 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + 26 >> 0];
  HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + 27;
  HEAP32[i6 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
  if ((HEAP32[i6 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] | 0) >>> 0) {
   i1 = 29;
   break;
  }
  HEAP32[i8 >> 2] = 0;
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i1 >> 2] | 0)) break;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0);
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0 | 0) < 255) break;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  if (HEAP32[i3 >> 2] | 0) if ((HEAP32[i8 >> 2] | 0) < ((HEAP32[i1 >> 2] | 0) - 1 | 0)) {
   i1 = 36;
   break;
  }
  if ((HEAP32[i8 >> 2] | 0) == (HEAP32[i1 >> 2] | 0)) HEAP32[i8 >> 2] = -1;
  if ((HEAP32[i6 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] | 0) >>> 0) {
   i1 = 40;
   break;
  }
  HEAP32[i5 >> 2] = 0;
 }
 if ((i1 | 0) == 17) {
  i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 1) | 0;
  HEAP32[i10 >> 2] = i9;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 19) {
  i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 21) | 0;
  HEAP32[i10 >> 2] = i9;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 21) {
  i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 21) | 0;
  HEAP32[i10 >> 2] = i9;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 25) {
  i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 21) | 0;
  HEAP32[i10 >> 2] = i9;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 27) {
  i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 21) | 0;
  HEAP32[i10 >> 2] = i9;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 29) {
  i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 1) | 0;
  HEAP32[i10 >> 2] = i9;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 36) {
  i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 21) | 0;
  HEAP32[i10 >> 2] = i9;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 40) {
  i9 = _stbv_error(HEAP32[i9 >> 2] | 0, 1) | 0;
  HEAP32[i10 >> 2] = i9;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 42) {
  HEAP32[i10 >> 2] = 1;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 return 0;
}

function _rlLoadTexture(i1, i11, i3, i2, i4) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i28 = i30 + 88 | 0;
 i27 = i30 + 72 | 0;
 i26 = i30 + 48 | 0;
 i8 = i30 + 40 | 0;
 i7 = i30 + 32 | 0;
 i6 = i30 + 24 | 0;
 i10 = i30 + 16 | 0;
 i9 = i30 + 8 | 0;
 i5 = i30;
 i25 = i30 + 148 | 0;
 i12 = i30 + 144 | 0;
 i29 = i30 + 140 | 0;
 i17 = i30 + 136 | 0;
 i13 = i30 + 132 | 0;
 i24 = i30 + 128 | 0;
 i19 = i30 + 124 | 0;
 i23 = i30 + 120 | 0;
 i20 = i30 + 116 | 0;
 i21 = i30 + 112 | 0;
 i18 = i30 + 108 | 0;
 i22 = i30 + 104 | 0;
 i15 = i30 + 100 | 0;
 i14 = i30 + 96 | 0;
 i16 = i30 + 92 | 0;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i29 >> 2] = i11;
 HEAP32[i17 >> 2] = i3;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i24 >> 2] = i4;
 _glBindTexture(3553, 0);
 HEAP32[i19 >> 2] = 0;
 if (!(HEAP8[177205] & 1)) if ((HEAP32[i13 >> 2] | 0) == 11 | (HEAP32[i13 >> 2] | 0) == 12 | (HEAP32[i13 >> 2] | 0) == 13 | (HEAP32[i13 >> 2] | 0) == 14) {
  _TraceLog(4, 34994, i5);
  HEAP32[i25 >> 2] = HEAP32[i19 >> 2];
  i29 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 if ((HEAP8[177206] & 1 ^ 1) & (HEAP32[i13 >> 2] | 0) == 15) {
  _TraceLog(4, 35038, i9);
  HEAP32[i25 >> 2] = HEAP32[i19 >> 2];
  i29 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 if (!(HEAP8[177207] & 1)) if ((HEAP32[i13 >> 2] | 0) == 16 | (HEAP32[i13 >> 2] | 0) == 17) {
  _TraceLog(4, 35083, i10);
  HEAP32[i25 >> 2] = HEAP32[i19 >> 2];
  i29 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 if (!(HEAP8[177208] & 1)) if ((HEAP32[i13 >> 2] | 0) == 18 | (HEAP32[i13 >> 2] | 0) == 19) {
  _TraceLog(4, 35128, i6);
  HEAP32[i25 >> 2] = HEAP32[i19 >> 2];
  i29 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 if (!(HEAP8[177209] & 1)) if ((HEAP32[i13 >> 2] | 0) == 20 | (HEAP32[i13 >> 2] | 0) == 21) {
  _TraceLog(4, 35173, i7);
  HEAP32[i25 >> 2] = HEAP32[i19 >> 2];
  i29 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 _glPixelStorei(3317, 1);
 _glGenTextures(1, i19 | 0);
 _glBindTexture(3553, HEAP32[i19 >> 2] | 0);
 HEAP32[i23 >> 2] = HEAP32[i29 >> 2];
 HEAP32[i20 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i21 >> 2] = 0;
 HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
 _TraceLog(2, 35218, i8);
 HEAP32[i18 >> 2] = 0;
 while (1) {
  if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i24 >> 2] | 0)) break;
  i8 = _GetPixelDataSize(HEAP32[i23 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[i22 >> 2] = i8;
  _rlGetGlTextureFormats(HEAP32[i13 >> 2] | 0, i15, i14, i16);
  i8 = HEAP32[i23 >> 2] | 0;
  i9 = HEAP32[i20 >> 2] | 0;
  i10 = HEAP32[i22 >> 2] | 0;
  i11 = HEAP32[i21 >> 2] | 0;
  HEAP32[i26 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i26 + 4 >> 2] = i8;
  HEAP32[i26 + 8 >> 2] = i9;
  HEAP32[i26 + 12 >> 2] = i10;
  HEAP32[i26 + 16 >> 2] = i11;
  _TraceLog(2, 35262, i26);
  do if ((HEAP32[i15 >> 2] | 0) != -1) {
   i1 = HEAP32[i18 >> 2] | 0;
   i2 = HEAP32[i15 >> 2] | 0;
   i3 = HEAP32[i23 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   if ((HEAP32[i13 >> 2] | 0) < 11) {
    _glTexImage2D(3553, i1 | 0, i2 | 0, i3 | 0, i4 | 0, 0, HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) | 0);
    break;
   } else {
    _glCompressedTexImage2D(3553, i1 | 0, i2 | 0, i3 | 0, i4 | 0, 0, HEAP32[i22 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) | 0);
    break;
   }
  } while (0);
  HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) / 2 | 0;
  HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) / 2 | 0;
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
  if ((HEAP32[i23 >> 2] | 0) < 1) HEAP32[i23 >> 2] = 1;
  if ((HEAP32[i20 >> 2] | 0) < 1) HEAP32[i20 >> 2] = 1;
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
 }
 if (HEAP8[177203] & 1) {
  _glTexParameteri(3553, 10242, 10497);
  _glTexParameteri(3553, 10243, 10497);
 } else {
  _glTexParameteri(3553, 10242, 33071);
  _glTexParameteri(3553, 10243, 33071);
 }
 _glTexParameteri(3553, 10240, 9728);
 _glTexParameteri(3553, 10241, 9728);
 _glBindTexture(3553, 0);
 if ((HEAP32[i19 >> 2] | 0) >>> 0 > 0) {
  i26 = HEAP32[i29 >> 2] | 0;
  i28 = HEAP32[i17 >> 2] | 0;
  i29 = HEAP32[i24 >> 2] | 0;
  HEAP32[i27 >> 2] = HEAP32[i19 >> 2];
  HEAP32[i27 + 4 >> 2] = i26;
  HEAP32[i27 + 8 >> 2] = i28;
  HEAP32[i27 + 12 >> 2] = i29;
  _TraceLog(3, 35315, i27);
 } else _TraceLog(4, 58205, i28);
 HEAP32[i25 >> 2] = HEAP32[i19 >> 2];
 i29 = HEAP32[i25 >> 2] | 0;
 STACKTOP = i30;
 return i29 | 0;
}

function _ma_device__on_read_from_client(i15, i19, i8, i22) {
 i15 = i15 | 0;
 i19 = i19 | 0;
 i8 = i8 | 0;
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i25 = 0;
 i26 = STACKTOP;
 i27 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 8288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(8288);
 i14 = i27 + 8272 | 0;
 i11 = i27 + 8268 | 0;
 i5 = i27 + 8264 | 0;
 i7 = i27 + 8260 | 0;
 i4 = i27 + 8256 | 0;
 i6 = i27 + 8252 | 0;
 i3 = i27 + 8248 | 0;
 i17 = i27 + 8244 | 0;
 i21 = i27 + 8240 | 0;
 i18 = i27 + 8236 | 0;
 i10 = i27 + 8232 | 0;
 i13 = i27 + 8228 | 0;
 i23 = i27;
 i1 = i27 + 8224 | 0;
 i2 = i27 + 8220 | 0;
 i24 = i27 + 8216 | 0;
 i12 = i27 + 8212 | 0;
 i20 = i27 + 8204 | 0;
 i9 = i27 + 8200 | 0;
 i28 = i27 + 8196 | 0;
 i16 = i27 + 8192 | 0;
 HEAP32[i27 + 8208 >> 2] = i15;
 HEAP32[i20 >> 2] = i19;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i28 >> 2] = i22;
 HEAP32[i16 >> 2] = HEAP32[i28 >> 2];
 if (!(HEAP32[i16 >> 2] | 0)) ___assert_fail(36359, 36381, 5770, 37113);
 i27 = HEAP32[i20 >> 2] | 0;
 i28 = HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i21 >> 2] = i27;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i10 >> 2] = i28;
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2];
 if (!(HEAP32[i13 >> 2] | 0)) {
  i28 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i26;
  return i28 | 0;
 }
 if (HEAP32[i21 >> 2] | 0 ? ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 324 >> 0] | 0) >>> 4 & 1 | 0) == 0 : 0) {
  i28 = (HEAP32[i17 >> 2] | 0) + 384 | 0;
  _ma_zero_pcm_frames(HEAP32[i21 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i28 + 264 >> 2] | 0, HEAP32[i28 + 268 >> 2] | 0);
 }
 L10 : do if (HEAP32[i18 >> 2] | 0) if (Math_fround(HEAPF32[(HEAP32[i17 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0)) {
  i28 = HEAP32[(HEAP32[i17 >> 2] | 0) + 47360 + 268 >> 2] | 0;
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + 47360 + 264 >> 2];
  HEAP32[i3 >> 2] = i28;
  i28 = _ma_get_bytes_per_sample(HEAP32[i6 >> 2] | 0) | 0;
  i28 = Math_imul(i28, HEAP32[i3 >> 2] | 0) | 0;
  HEAP32[i1 >> 2] = i28;
  i28 = HEAP32[(HEAP32[i17 >> 2] | 0) + 384 + 268 >> 2] | 0;
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + 384 + 264 >> 2];
  HEAP32[i4 >> 2] = i28;
  i28 = _ma_get_bytes_per_sample(HEAP32[i7 >> 2] | 0) | 0;
  i28 = Math_imul(i28, HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i2 >> 2] = i28;
  HEAP32[i24 >> 2] = 0;
  while (1) {
   if ((HEAP32[i24 >> 2] | 0) >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) break L10;
   HEAP32[i12 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i24 >> 2] | 0);
   if ((HEAP32[i12 >> 2] | 0) >>> 0 > (8192 / ((HEAP32[i1 >> 2] | 0) >>> 0) | 0) >>> 0) HEAP32[i12 >> 2] = 8192 / ((HEAP32[i1 >> 2] | 0) >>> 0) | 0;
   i22 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
   i27 = (HEAP32[i17 >> 2] | 0) + 47360 | 0;
   i28 = HEAP32[i17 >> 2] | 0;
   _ma_copy_and_apply_volume_factor_pcm_frames(i23, i22, HEAP32[i12 >> 2] | 0, HEAP32[i27 + 264 >> 2] | 0, HEAP32[i27 + 268 >> 2] | 0, Math_fround(HEAPF32[i28 + 328 >> 2]));
   i28 = (HEAP32[i21 >> 2] | 0) + (Math_imul(HEAP32[i24 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) | 0;
   FUNCTION_TABLE_viiii[HEAP32[i13 >> 2] & 31](HEAP32[i17 >> 2] | 0, i28, i23, HEAP32[i12 >> 2] | 0);
   HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
  }
 } else i25 = 13; else i25 = 13; while (0);
 if ((i25 | 0) == 13) FUNCTION_TABLE_viiii[HEAP32[i13 >> 2] & 31](HEAP32[i17 >> 2] | 0, HEAP32[i21 >> 2] | 0, HEAP32[i18 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 if (!(HEAP32[i21 >> 2] | 0)) {
  i28 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i26;
  return i28 | 0;
 }
 i28 = Math_fround(HEAPF32[(HEAP32[i17 >> 2] | 0) + 328 >> 2]) < Math_fround(1.0);
 if (i28 & (HEAP32[i18 >> 2] | 0) == 0) {
  i27 = (HEAP32[i17 >> 2] | 0) + 384 | 0;
  i28 = HEAP32[i17 >> 2] | 0;
  _ma_apply_volume_factor_pcm_frames(HEAP32[i21 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i27 + 264 >> 2] | 0, HEAP32[i27 + 268 >> 2] | 0, Math_fround(HEAPF32[i28 + 328 >> 2]));
 }
 if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 324 >> 0] | 0) >>> 5 & 1 | 0) {
  i28 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i26;
  return i28 | 0;
 }
 if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 384 + 264 >> 2] | 0) != 5) {
  i28 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i26;
  return i28 | 0;
 }
 i27 = HEAP32[i10 >> 2] | 0;
 i28 = HEAP32[(HEAP32[i17 >> 2] | 0) + 384 + 268 >> 2] | 0;
 HEAP32[i14 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i11 >> 2] = i27;
 HEAP32[i5 >> 2] = i28;
 _ma_clip_samples_f32(HEAP32[i14 >> 2] | 0, Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0);
 i28 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i26;
 return i28 | 0;
}

function _ImageCrop(i7, i3) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i2 = i1 + 48 | 0;
 i11 = i1;
 i8 = i1 + 44 | 0;
 i10 = i1 + 40 | 0;
 i4 = i1 + 36 | 0;
 i9 = i1 + 32 | 0;
 i6 = i1 + 28 | 0;
 i5 = i1 + 24 | 0;
 i1 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 if (!(HEAP32[HEAP32[i8 >> 2] >> 2] | 0)) {
  STACKTOP = i12;
  return;
 }
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i12;
  return;
 }
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = i12;
  return;
 }
 if (Math_fround(HEAPF32[i3 >> 2]) < Math_fround(0.0)) {
  f13 = Math_fround(HEAPF32[i3 >> 2]);
  i7 = i3 + 8 | 0;
  f13 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f13);
  HEAPF32[i7 >> 2] = f13;
  HEAPF32[i3 >> 2] = Math_fround(0.0);
 }
 if (Math_fround(HEAPF32[i3 + 4 >> 2]) < Math_fround(0.0)) {
  f13 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  i7 = i3 + 12 | 0;
  f13 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f13);
  HEAPF32[i7 >> 2] = f13;
  HEAPF32[i3 + 4 >> 2] = Math_fround(0.0);
 }
 f13 = Math_fround(HEAPF32[i3 >> 2]);
 f13 = Math_fround(f13 + Math_fround(HEAPF32[i3 + 8 >> 2]));
 if (f13 > Math_fround(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0)) {
  f13 = Math_fround(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0);
  f13 = Math_fround(f13 - Math_fround(HEAPF32[i3 >> 2]));
  HEAPF32[i3 + 8 >> 2] = f13;
 }
 f13 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f13 = Math_fround(f13 + Math_fround(HEAPF32[i3 + 12 >> 2]));
 if (f13 > Math_fround(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0)) {
  f13 = Math_fround(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0);
  f13 = Math_fround(f13 - Math_fround(HEAPF32[i3 + 4 >> 2]));
  HEAPF32[i3 + 12 >> 2] = f13;
 }
 f13 = Math_fround(HEAPF32[i3 >> 2]);
 if (f13 < Math_fround(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0)) {
  f13 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  if (f13 < Math_fround(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0)) {
   i11 = HEAP32[i8 >> 2] | 0;
   HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i2 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
   i11 = _GetImageData(i2) | 0;
   HEAP32[i10 >> 2] = i11;
   i11 = ~~Math_fround(HEAPF32[i3 + 8 >> 2]);
   i11 = _malloc((Math_imul(i11, ~~Math_fround(HEAPF32[i3 + 12 >> 2])) | 0) << 2) | 0;
   HEAP32[i4 >> 2] = i11;
   i11 = ~~Math_fround(HEAPF32[i3 + 4 >> 2]);
   HEAP32[i9 >> 2] = i11;
   while (1) {
    f13 = Math_fround(HEAPF32[i3 + 4 >> 2]);
    if ((HEAP32[i9 >> 2] | 0) >= (~~Math_fround(f13 + Math_fround(HEAPF32[i3 + 12 >> 2])) | 0)) break;
    i11 = ~~Math_fround(HEAPF32[i3 >> 2]);
    HEAP32[i6 >> 2] = i11;
    while (1) {
     f13 = Math_fround(HEAPF32[i3 >> 2]);
     if ((HEAP32[i6 >> 2] | 0) >= (~~Math_fround(f13 + Math_fround(HEAPF32[i3 + 8 >> 2])) | 0)) break;
     i11 = (HEAP32[i9 >> 2] | 0) - ~~Math_fround(HEAPF32[i3 + 4 >> 2]) | 0;
     i11 = Math_imul(i11, ~~Math_fround(HEAPF32[i3 + 8 >> 2])) | 0;
     i11 = (HEAP32[i4 >> 2] | 0) + (i11 + ((HEAP32[i6 >> 2] | 0) - ~~Math_fround(HEAPF32[i3 >> 2])) << 2) | 0;
     i7 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) | 0;
     i7 = (HEAP32[i10 >> 2] | 0) + (i7 + (HEAP32[i6 >> 2] | 0) << 2) | 0;
     HEAP8[i11 >> 0] = HEAP8[i7 >> 0] | 0;
     HEAP8[i11 + 1 >> 0] = HEAP8[i7 + 1 >> 0] | 0;
     HEAP8[i11 + 2 >> 0] = HEAP8[i7 + 2 >> 0] | 0;
     HEAP8[i11 + 3 >> 0] = HEAP8[i7 + 3 >> 0] | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    }
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   }
   _free(HEAP32[i10 >> 2] | 0);
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2];
   i11 = HEAP32[i8 >> 2] | 0;
   HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i2 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
   _UnloadImage(i2);
   i11 = HEAP32[i8 >> 2] | 0;
   i10 = ~~Math_fround(HEAPF32[i3 + 8 >> 2]);
   _LoadImageEx(i1, HEAP32[i4 >> 2] | 0, i10, ~~Math_fround(HEAPF32[i3 + 12 >> 2]));
   HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   HEAP32[i11 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
   _free(HEAP32[i4 >> 2] | 0);
   _ImageFormat(HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0);
   STACKTOP = i12;
   return;
  }
 }
 _TraceLog(4, 58598, i11);
 STACKTOP = i12;
 return;
}

function _GetNextCodepoint(i12, i2) {
 i12 = i12 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0;
 i14 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 16 | 0;
 i13 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 i6 = i1 + 25 | 0;
 i7 = i1 + 24 | 0;
 i9 = i1 + 23 | 0;
 i8 = i1 + 22 | 0;
 i10 = i1 + 21 | 0;
 i1 = i1 + 20 | 0;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = 63;
 HEAP32[i5 >> 2] = HEAPU8[HEAP32[i13 >> 2] >> 0];
 HEAP32[HEAP32[i3 >> 2] >> 2] = 1;
 L1 : do if ((HEAP32[i5 >> 2] | 0) <= 127) HEAP32[i4 >> 2] = HEAP8[HEAP32[i13 >> 2] >> 0]; else {
  if ((HEAP32[i5 >> 2] & 224 | 0) == 192) {
   HEAP8[i6 >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] | 0;
   if (HEAPU8[i6 >> 0] | 0) if ((HEAPU8[i6 >> 0] >> 6 | 0) == 2) {
    if (!((HEAP32[i5 >> 2] | 0) >= 194 & (HEAP32[i5 >> 2] | 0) <= 223)) break;
    HEAP32[i4 >> 2] = (HEAP32[i5 >> 2] & 31) << 6 | HEAPU8[i6 >> 0] & 63;
    HEAP32[HEAP32[i3 >> 2] >> 2] = 2;
    break;
   }
   HEAP32[HEAP32[i3 >> 2] >> 2] = 2;
   HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
   i14 = HEAP32[i11 >> 2] | 0;
   STACKTOP = i15;
   return i14 | 0;
  }
  if ((HEAP32[i5 >> 2] & 240 | 0) == 224) {
   HEAP8[i7 >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[i9 >> 0] = 0;
   if (HEAPU8[i7 >> 0] | 0) if ((HEAPU8[i7 >> 0] >> 6 | 0) == 2) {
    HEAP8[i9 >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] | 0;
    if (HEAPU8[i9 >> 0] | 0) if ((HEAPU8[i9 >> 0] >> 6 | 0) == 2) {
     if ((HEAP32[i5 >> 2] | 0) == 224) {
      if ((HEAPU8[i7 >> 0] | 0) >= 160) if ((HEAPU8[i7 >> 0] | 0) <= 191) i14 = 19;
     } else i14 = 19;
     do if ((i14 | 0) == 19) {
      if ((HEAP32[i5 >> 2] | 0) == 237) {
       if ((HEAPU8[i7 >> 0] | 0) < 128) break;
       if ((HEAPU8[i7 >> 0] | 0) > 159) break;
      }
      if ((HEAP32[i5 >> 2] | 0) < 224) break L1;
      HEAP32[i4 >> 2] = (HEAP32[i5 >> 2] & 15) << 12 | (HEAPU8[i7 >> 0] & 63) << 6 | HEAPU8[i9 >> 0] & 63;
      HEAP32[HEAP32[i3 >> 2] >> 2] = 3;
      break L1;
     } while (0);
     HEAP32[HEAP32[i3 >> 2] >> 2] = 2;
     HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
     i14 = HEAP32[i11 >> 2] | 0;
     STACKTOP = i15;
     return i14 | 0;
    }
    HEAP32[HEAP32[i3 >> 2] >> 2] = 3;
    HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
    i14 = HEAP32[i11 >> 2] | 0;
    STACKTOP = i15;
    return i14 | 0;
   }
   HEAP32[HEAP32[i3 >> 2] >> 2] = 2;
   HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
   i14 = HEAP32[i11 >> 2] | 0;
   STACKTOP = i15;
   return i14 | 0;
  }
  if ((HEAP32[i5 >> 2] & 248 | 0) == 240) {
   if ((HEAP32[i5 >> 2] | 0) > 244) {
    HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
    i14 = HEAP32[i11 >> 2] | 0;
    STACKTOP = i15;
    return i14 | 0;
   }
   HEAP8[i8 >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[i10 >> 0] = 0;
   HEAP8[i1 >> 0] = 0;
   if (HEAPU8[i8 >> 0] | 0) if ((HEAPU8[i8 >> 0] >> 6 | 0) == 2) {
    HEAP8[i10 >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] | 0;
    if (HEAPU8[i10 >> 0] | 0) if ((HEAPU8[i10 >> 0] >> 6 | 0) == 2) {
     HEAP8[i1 >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + 3 >> 0] | 0;
     if (HEAPU8[i1 >> 0] | 0) if ((HEAPU8[i1 >> 0] >> 6 | 0) == 2) {
      if ((HEAP32[i5 >> 2] | 0) == 240) {
       if ((HEAPU8[i8 >> 0] | 0) >= 144) if ((HEAPU8[i8 >> 0] | 0) <= 191) i14 = 40;
      } else i14 = 40;
      do if ((i14 | 0) == 40) {
       if ((HEAP32[i5 >> 2] | 0) == 244) {
        if ((HEAPU8[i8 >> 0] | 0) < 128) break;
        if ((HEAPU8[i8 >> 0] | 0) > 143) break;
       }
       if ((HEAP32[i5 >> 2] | 0) < 240) break L1;
       HEAP32[i4 >> 2] = (HEAP32[i5 >> 2] & 7) << 18 | (HEAPU8[i8 >> 0] & 63) << 12 | (HEAPU8[i10 >> 0] & 63) << 6 | HEAPU8[i1 >> 0] & 63;
       HEAP32[HEAP32[i3 >> 2] >> 2] = 4;
       break L1;
      } while (0);
      HEAP32[HEAP32[i3 >> 2] >> 2] = 2;
      HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
      i14 = HEAP32[i11 >> 2] | 0;
      STACKTOP = i15;
      return i14 | 0;
     }
     HEAP32[HEAP32[i3 >> 2] >> 2] = 4;
     HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
     i14 = HEAP32[i11 >> 2] | 0;
     STACKTOP = i15;
     return i14 | 0;
    }
    HEAP32[HEAP32[i3 >> 2] >> 2] = 3;
    HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
    i14 = HEAP32[i11 >> 2] | 0;
    STACKTOP = i15;
    return i14 | 0;
   }
   HEAP32[HEAP32[i3 >> 2] >> 2] = 2;
   HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
   i14 = HEAP32[i11 >> 2] | 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 } while (0);
 if ((HEAP32[i4 >> 2] | 0) > 1114111) HEAP32[i4 >> 2] = 63;
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 i14 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _twoway_strstr(i16, i19) {
 i16 = i16 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i20 = 0;
 i5 = 0;
 i20 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056);
 i18 = i1 + 1024 | 0;
 i17 = i1;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 HEAP32[i18 + 12 >> 2] = 0;
 HEAP32[i18 + 16 >> 2] = 0;
 HEAP32[i18 + 20 >> 2] = 0;
 HEAP32[i18 + 24 >> 2] = 0;
 HEAP32[i18 + 28 >> 2] = 0;
 i1 = HEAP8[i19 >> 0] | 0;
 L1 : do if (!(i1 << 24 >> 24)) {
  i4 = -1;
  i3 = -1;
  i15 = 0;
  i2 = 1;
  i1 = 1;
  i5 = 25;
 } else {
  i10 = 0;
  do {
   if (!(HEAP8[i16 + i10 >> 0] | 0)) {
    i1 = 0;
    break L1;
   }
   i15 = i1 & 255;
   i14 = i18 + (i15 >>> 5 << 2) | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1 << (i15 & 31);
   i10 = i10 + 1 | 0;
   HEAP32[i17 + (i15 << 2) >> 2] = i10;
   i1 = HEAP8[i19 + i10 >> 0] | 0;
  } while (i1 << 24 >> 24 != 0);
  i7 = i10 >>> 0 > 1;
  if (i7) {
   i6 = 1;
   i8 = -1;
   i4 = 0;
   i5 = 1;
   i2 = 1;
   while (1) {
    i1 = HEAP8[i19 + (i5 + i8) >> 0] | 0;
    i3 = HEAP8[i19 + i6 >> 0] | 0;
    do if (i1 << 24 >> 24 == i3 << 24 >> 24) if ((i5 | 0) == (i2 | 0)) {
     i9 = i8;
     i1 = i2 + i4 | 0;
     i3 = 1;
     break;
    } else {
     i9 = i8;
     i1 = i4;
     i3 = i5 + 1 | 0;
     break;
    } else if ((i1 & 255) > (i3 & 255)) {
     i9 = i8;
     i1 = i6;
     i3 = 1;
     i2 = i6 - i8 | 0;
     break;
    } else {
     i9 = i4;
     i1 = i4 + 1 | 0;
     i3 = 1;
     i2 = 1;
     break;
    } while (0);
    i6 = i3 + i1 | 0;
    if (i6 >>> 0 >= i10 >>> 0) break; else {
     i8 = i9;
     i4 = i1;
     i5 = i3;
    }
   }
   if (i7) {
    i7 = 1;
    i8 = -1;
    i6 = 0;
    i5 = 1;
    i1 = 1;
    while (1) {
     i3 = HEAP8[i19 + (i5 + i8) >> 0] | 0;
     i4 = HEAP8[i19 + i7 >> 0] | 0;
     do if (i3 << 24 >> 24 == i4 << 24 >> 24) if ((i5 | 0) == (i1 | 0)) {
      i3 = i8;
      i4 = i1 + i6 | 0;
      i5 = 1;
      break;
     } else {
      i3 = i8;
      i4 = i6;
      i5 = i5 + 1 | 0;
      break;
     } else if ((i3 & 255) < (i4 & 255)) {
      i3 = i8;
      i4 = i7;
      i5 = 1;
      i1 = i7 - i8 | 0;
      break;
     } else {
      i3 = i6;
      i4 = i6 + 1 | 0;
      i5 = 1;
      i1 = 1;
      break;
     } while (0);
     i7 = i5 + i4 | 0;
     if (i7 >>> 0 >= i10 >>> 0) {
      i4 = i9;
      i15 = i10;
      i5 = 25;
      break;
     } else {
      i8 = i3;
      i6 = i4;
     }
    }
   } else {
    i4 = i9;
    i3 = -1;
    i15 = i10;
    i1 = 1;
    i5 = 25;
   }
  } else {
   i4 = -1;
   i3 = -1;
   i15 = i10;
   i2 = 1;
   i1 = 1;
   i5 = 25;
  }
 } while (0);
 L34 : do if ((i5 | 0) == 25) {
  i13 = (i3 + 1 | 0) >>> 0 > (i4 + 1 | 0) >>> 0;
  i1 = i13 ? i1 : i2;
  i13 = i13 ? i3 : i4;
  i12 = i13 + 1 | 0;
  if (!(_memcmp(i19, i19 + i1 | 0, i12) | 0)) {
   i10 = i15 - i1 | 0;
   i14 = i10;
   i8 = i1;
  } else {
   i10 = i15 - i13 + -1 | 0;
   i10 = (i13 >>> 0 > i10 >>> 0 ? i13 : i10) + 1 | 0;
   i14 = 0;
   i8 = i10;
   i10 = i15 - i10 | 0;
  }
  i7 = i15 | 63;
  i9 = i15 + -1 | 0;
  i11 = (i14 | 0) != 0;
  i1 = i16;
  i3 = 0;
  i5 = i16;
  while (1) {
   i4 = i1;
   do if ((i5 - i4 | 0) >>> 0 < i15 >>> 0) {
    i2 = _memchr(i5, 0, i7) | 0;
    if (!i2) {
     i5 = i5 + i7 | 0;
     break;
    } else if ((i2 - i4 | 0) >>> 0 < i15 >>> 0) {
     i1 = 0;
     break L34;
    } else {
     i5 = i2;
     break;
    }
   } while (0);
   i2 = HEAPU8[i1 + i9 >> 0] | 0;
   L48 : do if (!(1 << (i2 & 31) & HEAP32[i18 + (i2 >>> 5 << 2) >> 2])) {
    i2 = i15;
    i3 = 0;
   } else {
    i2 = i15 - (HEAP32[i17 + (i2 << 2) >> 2] | 0) | 0;
    if (i2 | 0) {
     i2 = i11 & (i3 | 0) != 0 & i2 >>> 0 < i8 >>> 0 ? i10 : i2;
     i3 = 0;
     break;
    }
    i6 = i12 >>> 0 > i3 >>> 0;
    i4 = i6 ? i12 : i3;
    i2 = HEAP8[i19 + i4 >> 0] | 0;
    L53 : do if (i2 << 24 >> 24) {
     while (1) {
      if (i2 << 24 >> 24 != (HEAP8[i1 + i4 >> 0] | 0)) break;
      i4 = i4 + 1 | 0;
      i2 = HEAP8[i19 + i4 >> 0] | 0;
      if (!(i2 << 24 >> 24)) break L53;
     }
     i2 = i4 - i13 | 0;
     i3 = 0;
     break L48;
    } while (0);
    if (!i6) break L34;
    i2 = i12;
    while (1) {
     i2 = i2 + -1 | 0;
     if ((HEAP8[i19 + i2 >> 0] | 0) != (HEAP8[i1 + i2 >> 0] | 0)) {
      i2 = i8;
      i3 = i14;
      break L48;
     }
     if (i2 >>> 0 <= i3 >>> 0) break L34;
    }
   } while (0);
   i1 = i1 + i2 | 0;
  }
 } while (0);
 STACKTOP = i20;
 return i1 | 0;
}

function _ma_pcm_s24_to_s16__reference(i13, i20, i2, i3, i10) {
 i13 = i13 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i23 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i19 = i1 + 76 | 0;
 i12 = i1 + 72 | 0;
 i9 = i1 + 68 | 0;
 i8 = i1 + 64 | 0;
 i4 = i1 + 60 | 0;
 i5 = i1 + 56 | 0;
 i6 = i1 + 52 | 0;
 i25 = i1 + 48 | 0;
 i24 = i1 + 44 | 0;
 i7 = i1 + 16 | 0;
 i11 = i1 + 40 | 0;
 i16 = i1 + 36 | 0;
 i21 = i1 + 32 | 0;
 i17 = i1 + 8 | 0;
 i15 = i1 + 82 | 0;
 i14 = i1 + 80 | 0;
 i18 = i1;
 i22 = i1 + 28 | 0;
 i1 = i1 + 24 | 0;
 HEAP32[i25 >> 2] = i13;
 HEAP32[i24 >> 2] = i20;
 i20 = i7;
 HEAP32[i20 >> 2] = i2;
 HEAP32[i20 + 4 >> 2] = i3;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i16 >> 2] = HEAP32[i25 >> 2];
 HEAP32[i21 >> 2] = HEAP32[i24 >> 2];
 if (!(HEAP32[i11 >> 2] | 0)) {
  i25 = i17;
  HEAP32[i25 >> 2] = 0;
  HEAP32[i25 + 4 >> 2] = 0;
  while (1) {
   i24 = i17;
   i20 = HEAP32[i24 + 4 >> 2] | 0;
   i25 = i7;
   i22 = HEAP32[i25 + 4 >> 2] | 0;
   if (!(i20 >>> 0 < i22 >>> 0 | ((i20 | 0) == (i22 | 0) ? (HEAP32[i24 >> 2] | 0) >>> 0 < (HEAP32[i25 >> 2] | 0) >>> 0 : 0))) break;
   i22 = HEAP32[i21 >> 2] | 0;
   i24 = i17;
   i24 = ___muldi3(HEAP32[i24 >> 2] | 0, HEAP32[i24 + 4 >> 2] | 0, 3, 0) | 0;
   i24 = _i64Add(i24 | 0, getTempRet0() | 0, 1, 0) | 0;
   getTempRet0() | 0;
   HEAP16[i15 >> 1] = HEAPU8[i22 + i24 >> 0] | 0;
   i24 = HEAP32[i21 >> 2] | 0;
   i22 = i17;
   i22 = ___muldi3(HEAP32[i22 >> 2] | 0, HEAP32[i22 + 4 >> 2] | 0, 3, 0) | 0;
   i22 = _i64Add(i22 | 0, getTempRet0() | 0, 2, 0) | 0;
   getTempRet0() | 0;
   HEAP16[i14 >> 1] = (HEAPU8[i24 + i22 >> 0] & 65535) << 8;
   HEAP16[(HEAP32[i16 >> 2] | 0) + (HEAP32[i17 >> 2] << 1) >> 1] = HEAP16[i15 >> 1] | HEAPU16[i14 >> 1];
   i22 = i17;
   i22 = _i64Add(HEAP32[i22 >> 2] | 0, HEAP32[i22 + 4 >> 2] | 0, 1, 0) | 0;
   i24 = getTempRet0() | 0;
   i25 = i17;
   HEAP32[i25 >> 2] = i22;
   HEAP32[i25 + 4 >> 2] = i24;
  }
  STACKTOP = i23;
  return;
 }
 i25 = i18;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 while (1) {
  i24 = i18;
  i17 = HEAP32[i24 + 4 >> 2] | 0;
  i25 = i7;
  i20 = HEAP32[i25 + 4 >> 2] | 0;
  if (!(i17 >>> 0 < i20 >>> 0 | ((i17 | 0) == (i20 | 0) ? (HEAP32[i24 >> 2] | 0) >>> 0 < (HEAP32[i25 >> 2] | 0) >>> 0 : 0))) break;
  i24 = HEAP32[i21 >> 2] | 0;
  i25 = i18;
  i25 = ___muldi3(HEAP32[i25 >> 2] | 0, HEAP32[i25 + 4 >> 2] | 0, 3, 0) | 0;
  i25 = _i64Add(i25 | 0, getTempRet0() | 0, 0, 0) | 0;
  getTempRet0() | 0;
  i25 = HEAPU8[i24 + i25 >> 0] << 8;
  i24 = HEAP32[i21 >> 2] | 0;
  i20 = i18;
  i20 = ___muldi3(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 3, 0) | 0;
  i20 = _i64Add(i20 | 0, getTempRet0() | 0, 1, 0) | 0;
  getTempRet0() | 0;
  i20 = i25 | HEAPU8[i24 + i20 >> 0] << 16;
  i24 = HEAP32[i21 >> 2] | 0;
  i25 = i18;
  i25 = ___muldi3(HEAP32[i25 >> 2] | 0, HEAP32[i25 + 4 >> 2] | 0, 3, 0) | 0;
  i25 = _i64Add(i25 | 0, getTempRet0() | 0, 2, 0) | 0;
  getTempRet0() | 0;
  HEAP32[i22 >> 2] = i20 | HEAPU8[i24 + i25 >> 0] << 24;
  HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i9 >> 2] = -32768;
  HEAP32[i8 >> 2] = 32767;
  do if ((HEAP32[i12 >> 2] | 0) == 1) {
   i25 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i25;
   HEAP32[i19 >> 2] = HEAP32[i4 >> 2];
  } else if ((HEAP32[i12 >> 2] | 0) == 2) {
   i25 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, 0) | 0;
   HEAP32[i5 >> 2] = i25;
   i25 = _ma_rand_range_s32(0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i25;
   HEAP32[i19 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
   break;
  } else {
   HEAP32[i19 >> 2] = 0;
   break;
  } while (0);
  HEAP32[i1 >> 2] = HEAP32[i19 >> 2];
  i24 = HEAP32[i22 >> 2] | 0;
  i25 = HEAP32[i1 >> 2] | 0;
  i25 = _i64Add(i24 | 0, ((i24 | 0) < 0) << 31 >> 31 | 0, i25 | 0, ((i25 | 0) < 0) << 31 >> 31 | 0) | 0;
  i24 = getTempRet0() | 0;
  if ((i24 | 0) < 0 | (i24 | 0) == 0 & i25 >>> 0 <= 2147483647) HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + (HEAP32[i1 >> 2] | 0); else HEAP32[i22 >> 2] = 2147483647;
  HEAP32[i22 >> 2] = HEAP32[i22 >> 2] >> 16;
  HEAP16[(HEAP32[i16 >> 2] | 0) + (HEAP32[i18 >> 2] << 1) >> 1] = HEAP32[i22 >> 2];
  i20 = i18;
  i20 = _i64Add(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 1, 0) | 0;
  i24 = getTempRet0() | 0;
  i25 = i18;
  HEAP32[i25 >> 2] = i20;
  HEAP32[i25 + 4 >> 2] = i24;
 }
 STACKTOP = i23;
 return;
}

function _drmp3_L3_imdct36(i3, i9, i13, i7) {
 i3 = i3 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, f16 = f0, f17 = f0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i4 = i1 + 112 | 0;
 i10 = i1 + 108 | 0;
 i14 = i1 + 104 | 0;
 i8 = i1 + 100 | 0;
 i5 = i1 + 96 | 0;
 i6 = i1 + 92 | 0;
 i2 = i1 + 48 | 0;
 i12 = i1;
 i11 = i1 + 88 | 0;
 i1 = i1 + 84 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
  f16 = Math_fround(-Math_fround(HEAPF32[HEAP32[i4 >> 2] >> 2]));
  HEAPF32[i2 >> 2] = f16;
  f16 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + 68 >> 2]);
  HEAPF32[i12 >> 2] = f16;
  HEAP32[i5 >> 2] = 0;
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) >= 4) break;
   f16 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 1 << 2) >> 2]);
   f16 = Math_fround(f16 - Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 2 << 2) >> 2]));
   HEAPF32[i12 + (8 - (HEAP32[i5 >> 2] << 1) << 2) >> 2] = f16;
   f16 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 1 << 2) >> 2]);
   f16 = Math_fround(f16 + Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 2 << 2) >> 2]));
   HEAPF32[i2 + (1 + (HEAP32[i5 >> 2] << 1) << 2) >> 2] = f16;
   f16 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 4 << 2) >> 2]);
   f16 = Math_fround(f16 - Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 3 << 2) >> 2]));
   HEAPF32[i12 + (7 - (HEAP32[i5 >> 2] << 1) << 2) >> 2] = f16;
   f16 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 3 << 2) >> 2]);
   f16 = Math_fround(-Math_fround(f16 + Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 4 << 2) >> 2])));
   HEAPF32[i2 + (2 + (HEAP32[i5 >> 2] << 1) << 2) >> 2] = f16;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
  _drmp3_L3_dct3_9(i2);
  _drmp3_L3_dct3_9(i12);
  f16 = Math_fround(-Math_fround(HEAPF32[i12 + 4 >> 2]));
  HEAPF32[i12 + 4 >> 2] = f16;
  f16 = Math_fround(-Math_fround(HEAPF32[i12 + 12 >> 2]));
  HEAPF32[i12 + 12 >> 2] = f16;
  f16 = Math_fround(-Math_fround(HEAPF32[i12 + 20 >> 2]));
  HEAPF32[i12 + 20 >> 2] = f16;
  f16 = Math_fround(-Math_fround(HEAPF32[i12 + 28 >> 2]));
  HEAPF32[i12 + 28 >> 2] = f16;
  HEAP32[i5 >> 2] = 0;
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) >= 9) break;
   f16 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2]);
   HEAPF32[i11 >> 2] = f16;
   f16 = Math_fround(HEAPF32[i2 + (HEAP32[i5 >> 2] << 2) >> 2]);
   f16 = Math_fround(f16 * Math_fround(HEAPF32[16672 + (9 + (HEAP32[i5 >> 2] | 0) << 2) >> 2]));
   f17 = Math_fround(HEAPF32[i12 + (HEAP32[i5 >> 2] << 2) >> 2]);
   f17 = Math_fround(f16 + Math_fround(f17 * Math_fround(HEAPF32[16672 + (0 + (HEAP32[i5 >> 2] | 0) << 2) >> 2])));
   HEAPF32[i1 >> 2] = f17;
   f17 = Math_fround(HEAPF32[i2 + (HEAP32[i5 >> 2] << 2) >> 2]);
   f17 = Math_fround(f17 * Math_fround(HEAPF32[16672 + (0 + (HEAP32[i5 >> 2] | 0) << 2) >> 2]));
   f16 = Math_fround(HEAPF32[i12 + (HEAP32[i5 >> 2] << 2) >> 2]);
   f16 = Math_fround(f17 - Math_fround(f16 * Math_fround(HEAPF32[16672 + (9 + (HEAP32[i5 >> 2] | 0) << 2) >> 2])));
   HEAPF32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] = f16;
   f16 = Math_fround(HEAPF32[i11 >> 2]);
   f16 = Math_fround(f16 * Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (0 + (HEAP32[i5 >> 2] | 0) << 2) >> 2]));
   f17 = Math_fround(HEAPF32[i1 >> 2]);
   f17 = Math_fround(f16 - Math_fround(f17 * Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (9 + (HEAP32[i5 >> 2] | 0) << 2) >> 2])));
   HEAPF32[(HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] = f17;
   f17 = Math_fround(HEAPF32[i11 >> 2]);
   f17 = Math_fround(f17 * Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (9 + (HEAP32[i5 >> 2] | 0) << 2) >> 2]));
   f16 = Math_fround(HEAPF32[i1 >> 2]);
   f16 = Math_fround(f17 + Math_fround(f16 * Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + (0 + (HEAP32[i5 >> 2] | 0) << 2) >> 2])));
   HEAPF32[(HEAP32[i4 >> 2] | 0) + (17 - (HEAP32[i5 >> 2] | 0) << 2) >> 2] = f16;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 72;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 36;
 }
 STACKTOP = i15;
 return;
}

function _drmp3_read_src(i5, i2, i3, i4, i6) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i1 + 40 | 0;
 i8 = i1 + 8 | 0;
 i15 = i1 + 36 | 0;
 i16 = i1 + 32 | 0;
 i11 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i13 = i1;
 i9 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 HEAP32[i12 >> 2] = i5;
 i5 = i8;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i11 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i15 >> 2];
 i6 = i13;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 if (!(HEAP32[i11 >> 2] | 0)) ___assert_fail(48609, 48387, 2606, 48747);
 if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 6696 >> 2] | 0)) ___assert_fail(48720, 48387, 2607, 48747);
 while (1) {
  i16 = i8;
  i15 = HEAP32[i16 + 4 >> 2] | 0;
  if (!(i15 >>> 0 > 0 | (i15 | 0) == 0 & (HEAP32[i16 >> 2] | 0) >>> 0 > 0)) {
   i1 = 21;
   break;
  }
  while (1) {
   i16 = i8;
   i15 = HEAP32[i16 + 4 >> 2] | 0;
   if (!((HEAP32[(HEAP32[i11 >> 2] | 0) + 6720 >> 2] | 0) >>> 0 > 0 ? i15 >>> 0 > 0 | (i15 | 0) == 0 & (HEAP32[i16 >> 2] | 0) >>> 0 > 0 : 0)) break;
   HEAP32[i9 >> 2] = (HEAP32[i11 >> 2] | 0) + 6724;
   i1 = (HEAP32[(HEAP32[i11 >> 2] | 0) + 6688 >> 2] | 0) == 1;
   do if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 6708 >> 2] | 0) == 1) {
    f17 = Math_fround(Math_fround(HEAP16[(HEAP32[i9 >> 2] | 0) + (HEAP32[(HEAP32[i11 >> 2] | 0) + 6716 >> 2] << 1) >> 1] | 0) / Math_fround(32768.0));
    HEAPF32[HEAP32[i10 >> 2] >> 2] = f17;
    if (!i1) {
     f17 = Math_fround(Math_fround(HEAP16[(HEAP32[i9 >> 2] | 0) + (HEAP32[(HEAP32[i11 >> 2] | 0) + 6716 >> 2] << 1) >> 1] | 0) / Math_fround(32768.0));
     HEAPF32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] = f17;
    }
   } else if (i1) {
    HEAPF32[i7 >> 2] = Math_fround(0.0);
    i16 = HEAP32[i11 >> 2] | 0;
    i16 = (HEAP32[i9 >> 2] | 0) + ((Math_imul(HEAP32[i16 + 6716 >> 2] | 0, HEAP32[i16 + 6708 >> 2] | 0) | 0) + 0 << 1) | 0;
    f17 = Math_fround(Math_fround(HEAP16[i16 >> 1] | 0) / Math_fround(32768.0));
    f17 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f17);
    HEAPF32[i7 >> 2] = f17;
    i16 = HEAP32[i11 >> 2] | 0;
    i16 = (HEAP32[i9 >> 2] | 0) + ((Math_imul(HEAP32[i16 + 6716 >> 2] | 0, HEAP32[i16 + 6708 >> 2] | 0) | 0) + 1 << 1) | 0;
    f17 = Math_fround(Math_fround(HEAP16[i16 >> 1] | 0) / Math_fround(32768.0));
    f17 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f17);
    HEAPF32[i7 >> 2] = f17;
    f17 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) * Math_fround(.5));
    HEAPF32[HEAP32[i10 >> 2] >> 2] = f17;
    break;
   } else {
    i16 = HEAP32[i11 >> 2] | 0;
    i16 = (HEAP32[i9 >> 2] | 0) + ((Math_imul(HEAP32[i16 + 6716 >> 2] | 0, HEAP32[i16 + 6708 >> 2] | 0) | 0) + 0 << 1) | 0;
    f17 = Math_fround(Math_fround(HEAP16[i16 >> 1] | 0) / Math_fround(32768.0));
    HEAPF32[HEAP32[i10 >> 2] >> 2] = f17;
    i16 = HEAP32[i11 >> 2] | 0;
    i16 = (HEAP32[i9 >> 2] | 0) + ((Math_imul(HEAP32[i16 + 6716 >> 2] | 0, HEAP32[i16 + 6708 >> 2] | 0) | 0) + 1 << 1) | 0;
    f17 = Math_fround(Math_fround(HEAP16[i16 >> 1] | 0) / Math_fround(32768.0));
    HEAPF32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] = f17;
    break;
   } while (0);
   i16 = (HEAP32[i11 >> 2] | 0) + 6716 | 0;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   i16 = (HEAP32[i11 >> 2] | 0) + 6720 | 0;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
   i16 = i13;
   i16 = _i64Add(HEAP32[i16 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0, 1, 0) | 0;
   i15 = getTempRet0() | 0;
   i6 = i13;
   HEAP32[i6 >> 2] = i16;
   HEAP32[i6 + 4 >> 2] = i15;
   i6 = i8;
   i6 = _i64Subtract(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, 1, 0) | 0;
   i15 = getTempRet0() | 0;
   i16 = i8;
   HEAP32[i16 >> 2] = i6;
   HEAP32[i16 + 4 >> 2] = i15;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] << 2);
  }
  i16 = i8;
  if ((HEAP32[i16 >> 2] | 0) == 0 & (HEAP32[i16 + 4 >> 2] | 0) == 0) {
   i1 = 21;
   break;
  }
  if (HEAP32[(HEAP32[i11 >> 2] | 0) + 6720 >> 2] | 0) {
   i1 = 18;
   break;
  }
  if (!(_drmp3_decode_next_frame(HEAP32[i11 >> 2] | 0) | 0)) {
   i1 = 21;
   break;
  }
 }
 if ((i1 | 0) == 18) ___assert_fail(48762, 48387, 2672, 48747); else if ((i1 | 0) == 21) {
  i15 = i13;
  i16 = HEAP32[i15 >> 2] | 0;
  setTempRet0(HEAP32[i15 + 4 >> 2] | 0);
  STACKTOP = i14;
  return i16 | 0;
 }
 return 0;
}

function _LoadImage(i15, i2) {
 i15 = i15 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i5 = i1 + 32 | 0;
 i18 = i1 + 24 | 0;
 i17 = i1 + 8 | 0;
 i14 = i1;
 i13 = i1 + 156 | 0;
 i16 = i1 + 136 | 0;
 i9 = i1 + 132 | 0;
 i8 = i1 + 128 | 0;
 i6 = i1 + 124 | 0;
 i3 = i1 + 120 | 0;
 i7 = i1 + 116 | 0;
 i4 = i1 + 112 | 0;
 i10 = i1 + 92 | 0;
 i11 = i1 + 72 | 0;
 i12 = i1 + 52 | 0;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 HEAP32[i16 + 16 >> 2] = 0;
 do if (_IsFileExtension(HEAP32[i13 >> 2] | 0, 57434) | 0) {
  HEAP32[i9 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i14 = _fopen(HEAP32[i13 >> 2] | 0, 53420) | 0;
  HEAP32[i3 >> 2] = i14;
  if (HEAP32[i3 >> 2] | 0) {
   i14 = _stbi_load_from_file(HEAP32[i3 >> 2] | 0, i9, i8, i6, 0) | 0;
   HEAP32[i16 >> 2] = i14;
   _fclose(HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i16 + 4 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i16 + 12 >> 2] = 1;
   if ((HEAP32[i6 >> 2] | 0) == 1) {
    HEAP32[i16 + 16 >> 2] = 1;
    break;
   }
   if ((HEAP32[i6 >> 2] | 0) == 2) {
    HEAP32[i16 + 16 >> 2] = 2;
    break;
   }
   if ((HEAP32[i6 >> 2] | 0) == 3) {
    HEAP32[i16 + 16 >> 2] = 4;
    break;
   }
   if ((HEAP32[i6 >> 2] | 0) == 4) HEAP32[i16 + 16 >> 2] = 7;
  }
 } else if (_IsFileExtension(HEAP32[i13 >> 2] | 0, 57439) | 0) {
  HEAP32[i7 >> 2] = 0;
  i14 = _fopen(HEAP32[i13 >> 2] | 0, 53420) | 0;
  HEAP32[i4 >> 2] = i14;
  i14 = _stbi_loadf_from_file(HEAP32[i4 >> 2] | 0, i16 + 4 | 0, i16 + 8 | 0, i7, 0) | 0;
  HEAP32[i16 >> 2] = i14;
  _fclose(HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i16 + 12 >> 2] = 1;
  if ((HEAP32[i7 >> 2] | 0) == 1) {
   HEAP32[i16 + 16 >> 2] = 8;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 3) {
   HEAP32[i16 + 16 >> 2] = 9;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 4) {
   HEAP32[i16 + 16 >> 2] = 10;
   break;
  } else {
   HEAP32[i5 >> 2] = HEAP32[i13 >> 2];
   _TraceLog(4, 57444, i5);
   HEAP32[i5 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
   HEAP32[i5 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
   HEAP32[i5 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
   _UnloadImage(i5);
   break;
  }
 } else {
  i9 = _IsFileExtension(HEAP32[i13 >> 2] | 0, 57480) | 0;
  i1 = HEAP32[i13 >> 2] | 0;
  if (i9) {
   _LoadDDS(i10, i1);
   HEAP32[i16 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
   HEAP32[i16 + 16 >> 2] = HEAP32[i10 + 16 >> 2];
   break;
  }
  i10 = _IsFileExtension(i1, 57485) | 0;
  i1 = HEAP32[i13 >> 2] | 0;
  if (i10) {
   _LoadKTX(i11, i1);
   HEAP32[i16 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i16 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
   break;
  }
  i11 = _IsFileExtension(i1, 57490) | 0;
  i1 = HEAP32[i13 >> 2] | 0;
  if (i11) {
   _LoadASTC(i12, i1);
   HEAP32[i16 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
   HEAP32[i16 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
   break;
  } else {
   HEAP32[i14 >> 2] = i1;
   _TraceLog(4, 57444, i14);
   break;
  }
 } while (0);
 i1 = HEAP32[i13 >> 2] | 0;
 if (HEAP32[i16 >> 2] | 0) {
  i14 = HEAP32[i16 + 4 >> 2] | 0;
  i18 = HEAP32[i16 + 8 >> 2] | 0;
  HEAP32[i17 >> 2] = i1;
  HEAP32[i17 + 4 >> 2] = i14;
  HEAP32[i17 + 8 >> 2] = i18;
  _TraceLog(3, 57496, i17);
  HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i15 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
  HEAP32[i15 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
  STACKTOP = i19;
  return;
 } else {
  HEAP32[i18 >> 2] = i1;
  _TraceLog(4, 57535, i18);
  HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i15 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
  HEAP32[i15 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
  STACKTOP = i19;
  return;
 }
}

function _drmp3__full_read_and_close_f32(i9, i6, i11) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16448 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16448);
 i10 = i1 + 16440 | 0;
 i7 = i1 + 16436 | 0;
 i12 = i1 + 16432 | 0;
 i14 = i1 + 16416 | 0;
 i2 = i1 + 16408 | 0;
 i8 = i1 + 16428 | 0;
 i13 = i1;
 i4 = i1 + 16400 | 0;
 i3 = i1 + 16392 | 0;
 i5 = i1 + 16384 | 0;
 i1 = i1 + 16424 | 0;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i12 >> 2] = i11;
 i11 = i14;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 i11 = i2;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 if (!(HEAP32[i10 >> 2] | 0)) ___assert_fail(48609, 48387, 3604, 49171);
 do {
  i6 = i4;
  HEAP32[i6 >> 2] = 4096 / ((HEAP32[(HEAP32[i10 >> 2] | 0) + 6688 >> 2] | 0) >>> 0) | 0;
  HEAP32[i6 + 4 >> 2] = 0;
  i6 = i4;
  i6 = _drmp3_read_pcm_frames_f32(HEAP32[i10 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, i13) | 0;
  i9 = getTempRet0() | 0;
  i11 = i3;
  HEAP32[i11 >> 2] = i6;
  HEAP32[i11 + 4 >> 2] = i9;
  i11 = i3;
  if ((HEAP32[i11 >> 2] | 0) == 0 & (HEAP32[i11 + 4 >> 2] | 0) == 0) break;
  i17 = i2;
  i9 = HEAP32[i17 >> 2] | 0;
  i17 = HEAP32[i17 + 4 >> 2] | 0;
  i6 = i14;
  i11 = i3;
  i11 = _i64Add(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0) | 0;
  i6 = getTempRet0() | 0;
  if (i17 >>> 0 < i6 >>> 0 | (i17 | 0) == (i6 | 0) & i9 >>> 0 < i11 >>> 0) {
   i9 = i2;
   i9 = ___muldi3(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, 2, 0) | 0;
   i11 = getTempRet0() | 0;
   i6 = i2;
   HEAP32[i6 >> 2] = i9;
   HEAP32[i6 + 4 >> 2] = i11;
   i6 = i2;
   i11 = HEAP32[i6 >> 2] | 0;
   i6 = HEAP32[i6 + 4 >> 2] | 0;
   i9 = i14;
   i17 = i3;
   i17 = _i64Add(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i17 + 4 >> 2] | 0) | 0;
   i9 = getTempRet0() | 0;
   if (i6 >>> 0 < i9 >>> 0 | (i6 | 0) == (i9 | 0) & i11 >>> 0 < i17 >>> 0) {
    i11 = i14;
    i9 = i3;
    i9 = _i64Add(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0) | 0;
    i11 = getTempRet0() | 0;
    i17 = i2;
    HEAP32[i17 >> 2] = i9;
    HEAP32[i17 + 4 >> 2] = i11;
   }
   i9 = i2;
   i9 = ___muldi3(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 6688 >> 2] | 0, 0) | 0;
   i9 = ___muldi3(i9 | 0, getTempRet0() | 0, 4, 0) | 0;
   i11 = getTempRet0() | 0;
   i17 = i5;
   HEAP32[i17 >> 2] = i9;
   HEAP32[i17 + 4 >> 2] = i11;
   i17 = i5;
   i11 = HEAP32[i17 + 4 >> 2] | 0;
   if (i11 >>> 0 > 0 | (i11 | 0) == 0 & (HEAP32[i17 >> 2] | 0) >>> 0 > 4294967295) break;
   i17 = _realloc(HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = i17;
   if (!(HEAP32[i1 >> 2] | 0)) {
    i15 = 10;
    break;
   }
   HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
  }
  i11 = HEAP32[i8 >> 2] | 0;
  i17 = i14;
  i17 = ___muldi3(HEAP32[i17 >> 2] | 0, HEAP32[i17 + 4 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 6688 >> 2] | 0, 0) | 0;
  getTempRet0() | 0;
  i9 = i3;
  i9 = ___muldi3(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 6688 >> 2] | 0, 0) | 0;
  i9 = ___muldi3(i9 | 0, getTempRet0() | 0, 4, 0) | 0;
  getTempRet0() | 0;
  _memcpy(i11 + (i17 << 2) | 0, i13 | 0, i9 | 0) | 0;
  i9 = i3;
  i17 = i14;
  i9 = _i64Add(HEAP32[i17 >> 2] | 0, HEAP32[i17 + 4 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0) | 0;
  i17 = getTempRet0() | 0;
  i11 = i14;
  HEAP32[i11 >> 2] = i9;
  HEAP32[i11 + 4 >> 2] = i17;
  i11 = i3;
  i17 = i4;
 } while (!((HEAP32[i11 >> 2] | 0) != (HEAP32[i17 >> 2] | 0) ? 1 : (HEAP32[i11 + 4 >> 2] | 0) != (HEAP32[i17 + 4 >> 2] | 0)));
 if ((i15 | 0) == 10) _drmp3_free(HEAP32[i8 >> 2] | 0);
 if (HEAP32[i7 >> 2] | 0) {
  HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 6688 >> 2];
  HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 6692 >> 2];
 }
 _drmp3_uninit(HEAP32[i10 >> 2] | 0);
 if (!(HEAP32[i12 >> 2] | 0)) {
  i17 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i16;
  return i17 | 0;
 }
 i15 = HEAP32[i14 + 4 >> 2] | 0;
 i17 = HEAP32[i12 >> 2] | 0;
 HEAP32[i17 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i17 + 4 >> 2] = i15;
 i17 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i16;
 return i17 | 0;
}

function _stbtt__solve_cubic(f2, f3, f4, i10) {
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 i10 = i10 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0;
 i19 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i12 = i1 + 64 | 0;
 i22 = i1 + 60 | 0;
 i21 = i1 + 56 | 0;
 i20 = i1 + 52 | 0;
 i11 = i1 + 48 | 0;
 i13 = i1 + 44 | 0;
 i7 = i1 + 40 | 0;
 i9 = i1 + 36 | 0;
 i8 = i1 + 32 | 0;
 i5 = i1 + 28 | 0;
 i18 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i16 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i17 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAPF32[i22 >> 2] = f2;
 HEAPF32[i21 >> 2] = f3;
 HEAPF32[i20 >> 2] = f4;
 HEAP32[i11 >> 2] = i10;
 f4 = Math_fround(Math_fround(-Math_fround(HEAPF32[i22 >> 2])) / Math_fround(3.0));
 HEAPF32[i13 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i21 >> 2]);
 f3 = Math_fround(HEAPF32[i22 >> 2]);
 f3 = Math_fround(f4 - Math_fround(Math_fround(f3 * Math_fround(HEAPF32[i22 >> 2])) / Math_fround(3.0)));
 HEAPF32[i7 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i22 >> 2]);
 f4 = Math_fround(Math_fround(HEAPF32[i22 >> 2]) * Math_fround(2.0));
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i22 >> 2]));
 f4 = Math_fround(Math_fround(f3 * Math_fround(f4 - Math_fround(Math_fround(HEAPF32[i21 >> 2]) * Math_fround(9.0)))) / Math_fround(27.0));
 f4 = Math_fround(f4 + Math_fround(HEAPF32[i20 >> 2]));
 HEAPF32[i9 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i7 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i7 >> 2]));
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i7 >> 2]));
 HEAPF32[i8 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i9 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i9 >> 2]));
 f4 = Math_fround(f4 + Math_fround(Math_fround(Math_fround(HEAPF32[i8 >> 2]) * Math_fround(4.0)) / Math_fround(27.0)));
 HEAPF32[i5 >> 2] = f4;
 if (Math_fround(HEAPF32[i5 >> 2]) >= Math_fround(0.0)) {
  f4 = Math_fround(+Math_sqrt(+(+Math_fround(HEAPF32[i5 >> 2]))));
  HEAPF32[i18 >> 2] = f4;
  f4 = Math_fround(-Math_fround(HEAPF32[i9 >> 2]));
  f4 = Math_fround(Math_fround(f4 + Math_fround(HEAPF32[i18 >> 2])) / Math_fround(2.0));
  HEAPF32[i14 >> 2] = f4;
  f4 = Math_fround(-Math_fround(HEAPF32[i9 >> 2]));
  f4 = Math_fround(Math_fround(f4 - Math_fround(HEAPF32[i18 >> 2])) / Math_fround(2.0));
  HEAPF32[i16 >> 2] = f4;
  f4 = Math_fround(_stbtt__cuberoot(Math_fround(HEAPF32[i14 >> 2])));
  HEAPF32[i14 >> 2] = f4;
  f4 = Math_fround(_stbtt__cuberoot(Math_fround(HEAPF32[i16 >> 2])));
  HEAPF32[i16 >> 2] = f4;
  f4 = Math_fround(HEAPF32[i13 >> 2]);
  f4 = Math_fround(f4 + Math_fround(HEAPF32[i14 >> 2]));
  f4 = Math_fround(f4 + Math_fround(HEAPF32[i16 >> 2]));
  HEAPF32[HEAP32[i11 >> 2] >> 2] = f4;
  HEAP32[i12 >> 2] = 1;
  i22 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i19;
  return i22 | 0;
 } else {
  f3 = Math_fround(+Math_sqrt(+(+Math_fround(Math_fround(-Math_fround(HEAPF32[i7 >> 2])) / Math_fround(3.0)))));
  HEAPF32[i15 >> 2] = f3;
  d23 = -+Math_sqrt(+(+Math_fround(Math_fround(-27.0) / Math_fround(HEAPF32[i8 >> 2]))));
  f3 = Math_fround(Math_fround(+_acos(d23 * +Math_fround(HEAPF32[i9 >> 2]) / 2.0)) / Math_fround(3.0));
  HEAPF32[i17 >> 2] = f3;
  f3 = Math_fround(+_llvm_cos_f64(+(+Math_fround(HEAPF32[i17 >> 2]))));
  HEAPF32[i6 >> 2] = f3;
  f3 = Math_fround(Math_fround(+_llvm_cos_f64(+(+Math_fround(HEAPF32[i17 >> 2]) - 1.570796))) * Math_fround(1.73205078));
  HEAPF32[i1 >> 2] = f3;
  f3 = Math_fround(HEAPF32[i13 >> 2]);
  f4 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) * Math_fround(2.0));
  f4 = Math_fround(f3 + Math_fround(f4 * Math_fround(HEAPF32[i6 >> 2])));
  HEAPF32[HEAP32[i11 >> 2] >> 2] = f4;
  f4 = Math_fround(HEAPF32[i13 >> 2]);
  f3 = Math_fround(HEAPF32[i15 >> 2]);
  f2 = Math_fround(HEAPF32[i6 >> 2]);
  f2 = Math_fround(f4 - Math_fround(f3 * Math_fround(f2 + Math_fround(HEAPF32[i1 >> 2]))));
  HEAPF32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] = f2;
  f2 = Math_fround(HEAPF32[i13 >> 2]);
  f3 = Math_fround(HEAPF32[i15 >> 2]);
  f4 = Math_fround(HEAPF32[i6 >> 2]);
  f4 = Math_fround(f2 - Math_fround(f3 * Math_fround(f4 - Math_fround(HEAPF32[i1 >> 2]))));
  HEAPF32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] = f4;
  HEAP32[i12 >> 2] = 3;
  i22 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i19;
  return i22 | 0;
 }
 return 0;
}

function _ma_pcm_s24_to_u8__reference(i13, i18, i2, i3, i10) {
 i13 = i13 | 0;
 i18 = i18 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i22 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i17 = i1 + 76 | 0;
 i12 = i1 + 72 | 0;
 i9 = i1 + 68 | 0;
 i8 = i1 + 64 | 0;
 i4 = i1 + 60 | 0;
 i5 = i1 + 56 | 0;
 i6 = i1 + 52 | 0;
 i24 = i1 + 48 | 0;
 i23 = i1 + 44 | 0;
 i7 = i1 + 16 | 0;
 i11 = i1 + 40 | 0;
 i14 = i1 + 36 | 0;
 i19 = i1 + 32 | 0;
 i15 = i1 + 8 | 0;
 i20 = i1 + 80 | 0;
 i16 = i1;
 i21 = i1 + 28 | 0;
 i1 = i1 + 24 | 0;
 HEAP32[i24 >> 2] = i13;
 HEAP32[i23 >> 2] = i18;
 i18 = i7;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i18 + 4 >> 2] = i3;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i14 >> 2] = HEAP32[i24 >> 2];
 HEAP32[i19 >> 2] = HEAP32[i23 >> 2];
 if (!(HEAP32[i11 >> 2] | 0)) {
  i24 = i15;
  HEAP32[i24 >> 2] = 0;
  HEAP32[i24 + 4 >> 2] = 0;
  while (1) {
   i23 = i15;
   i18 = HEAP32[i23 + 4 >> 2] | 0;
   i24 = i7;
   i21 = HEAP32[i24 + 4 >> 2] | 0;
   if (!(i18 >>> 0 < i21 >>> 0 | ((i18 | 0) == (i21 | 0) ? (HEAP32[i23 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0 : 0))) break;
   i23 = HEAP32[i19 >> 2] | 0;
   i21 = i15;
   i21 = ___muldi3(HEAP32[i21 >> 2] | 0, HEAP32[i21 + 4 >> 2] | 0, 3, 0) | 0;
   i21 = _i64Add(i21 | 0, getTempRet0() | 0, 2, 0) | 0;
   getTempRet0() | 0;
   HEAP8[i20 >> 0] = (HEAP8[i23 + i21 >> 0] | 0) + 128;
   HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = HEAP8[i20 >> 0] | 0;
   i21 = i15;
   i21 = _i64Add(HEAP32[i21 >> 2] | 0, HEAP32[i21 + 4 >> 2] | 0, 1, 0) | 0;
   i23 = getTempRet0() | 0;
   i24 = i15;
   HEAP32[i24 >> 2] = i21;
   HEAP32[i24 + 4 >> 2] = i23;
  }
  STACKTOP = i22;
  return;
 }
 i24 = i16;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 while (1) {
  i23 = i16;
  i18 = HEAP32[i23 + 4 >> 2] | 0;
  i24 = i7;
  i20 = HEAP32[i24 + 4 >> 2] | 0;
  if (!(i18 >>> 0 < i20 >>> 0 | ((i18 | 0) == (i20 | 0) ? (HEAP32[i23 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0 : 0))) break;
  i23 = HEAP32[i19 >> 2] | 0;
  i24 = i16;
  i24 = ___muldi3(HEAP32[i24 >> 2] | 0, HEAP32[i24 + 4 >> 2] | 0, 3, 0) | 0;
  i24 = _i64Add(i24 | 0, getTempRet0() | 0, 0, 0) | 0;
  getTempRet0() | 0;
  i24 = HEAPU8[i23 + i24 >> 0] << 8;
  i23 = HEAP32[i19 >> 2] | 0;
  i20 = i16;
  i20 = ___muldi3(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 3, 0) | 0;
  i20 = _i64Add(i20 | 0, getTempRet0() | 0, 1, 0) | 0;
  getTempRet0() | 0;
  i20 = i24 | HEAPU8[i23 + i20 >> 0] << 16;
  i23 = HEAP32[i19 >> 2] | 0;
  i24 = i16;
  i24 = ___muldi3(HEAP32[i24 >> 2] | 0, HEAP32[i24 + 4 >> 2] | 0, 3, 0) | 0;
  i24 = _i64Add(i24 | 0, getTempRet0() | 0, 2, 0) | 0;
  getTempRet0() | 0;
  HEAP32[i21 >> 2] = i20 | HEAPU8[i23 + i24 >> 0] << 24;
  HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i9 >> 2] = -8388608;
  HEAP32[i8 >> 2] = 8388607;
  do if ((HEAP32[i12 >> 2] | 0) == 1) {
   i24 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i24;
   HEAP32[i17 >> 2] = HEAP32[i4 >> 2];
  } else if ((HEAP32[i12 >> 2] | 0) == 2) {
   i24 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, 0) | 0;
   HEAP32[i5 >> 2] = i24;
   i24 = _ma_rand_range_s32(0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i24;
   HEAP32[i17 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
   break;
  } else {
   HEAP32[i17 >> 2] = 0;
   break;
  } while (0);
  HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
  i23 = HEAP32[i21 >> 2] | 0;
  i24 = HEAP32[i1 >> 2] | 0;
  i24 = _i64Add(i23 | 0, ((i23 | 0) < 0) << 31 >> 31 | 0, i24 | 0, ((i24 | 0) < 0) << 31 >> 31 | 0) | 0;
  i23 = getTempRet0() | 0;
  if ((i23 | 0) < 0 | (i23 | 0) == 0 & i24 >>> 0 <= 2147483647) HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[i1 >> 2] | 0); else HEAP32[i21 >> 2] = 2147483647;
  HEAP32[i21 >> 2] = HEAP32[i21 >> 2] >> 24;
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 128;
  HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] = HEAP32[i21 >> 2];
  i20 = i16;
  i20 = _i64Add(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 1, 0) | 0;
  i23 = getTempRet0() | 0;
  i24 = i16;
  HEAP32[i24 >> 2] = i20;
  HEAP32[i24 + 4 >> 2] = i23;
 }
 STACKTOP = i22;
 return;
}

function _ma_device_init__webaudio(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 36 | 0;
 i6 = i1 + 32 | 0;
 i14 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i9 = i1 + 20 | 0;
 i11 = i1 + 16 | 0;
 i13 = i1 + 12 | 0;
 i12 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i11 >> 2] = i4;
 if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 4) {
  HEAP32[i14 >> 2] = -101;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 1) i1 = 5; else if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 3) i1 = 5; else i1 = 6;
 if ((i1 | 0) == 5) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 44 + 44 >> 2] | 0) != 1) i1 = 6;
 do if ((i1 | 0) == 6) {
  if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 2) i1 = 8; else if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 3) i1 = 8;
  if ((i1 | 0) == 8) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 92 + 44 >> 2] | 0) == 1) break;
  if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 2) i1 = 12; else if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 3) i1 = 12;
  if ((i1 | 0) == 12) {
   i4 = _ma_device_init_by_type__webaudio(HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, 2, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i13 >> 2] = i4;
   if (HEAP32[i13 >> 2] | 0) {
    HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
    i14 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i15;
    return i14 | 0;
   }
  }
  if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 1) i1 = 16; else if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 3) i1 = 16;
  if ((i1 | 0) == 16) {
   i10 = _ma_device_init_by_type__webaudio(HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, 1, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i13 >> 2] = i10;
   if (HEAP32[i13 >> 2] | 0) {
    if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 3) {
     i12 = HEAP32[i11 >> 2] | 0;
     _ma_device_uninit_by_index__webaudio(i12 | 0, 2, HEAP32[i12 + 94336 + 4 >> 2] | 0);
    }
    HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
    i14 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i15;
    return i14 | 0;
   }
  }
  do if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 3) {
   i10 = HEAP32[i11 >> 2] | 0;
   i9 = (HEAP32[i11 >> 2] | 0) + 47360 | 0;
   i9 = _ma_calculate_frame_count_after_src(HEAP32[i10 + 8 >> 2] | 0, HEAP32[i9 + 312 >> 2] | 0, HEAP32[i9 + 348 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAP32[i12 >> 2] = i9 << 1;
   i9 = (HEAP32[i11 >> 2] | 0) + 47360 | 0;
   i10 = HEAP32[i11 >> 2] | 0;
   i10 = _ma_pcm_rb_init(HEAP32[i9 + 264 >> 2] | 0, HEAP32[i9 + 268 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0, i10 + 94336 + 8 | 0) | 0;
   HEAP32[i13 >> 2] = i10;
   if (!(HEAP32[i13 >> 2] | 0)) {
    HEAP32[i8 >> 2] = ((HEAP32[i12 >> 2] | 0) >>> 0) / 3 | 0;
    _ma_pcm_rb_acquire_write((HEAP32[i11 >> 2] | 0) + 94336 + 8 | 0, i8, i5) | 0;
    i10 = HEAP32[i5 >> 2] | 0;
    i12 = HEAP32[i8 >> 2] | 0;
    i13 = HEAP32[(HEAP32[i11 >> 2] | 0) + 47360 + 268 >> 2] | 0;
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 47360 + 264 >> 2];
    HEAP32[i6 >> 2] = i13;
    i13 = _ma_get_bytes_per_sample(HEAP32[i7 >> 2] | 0) | 0;
    _memset(i10 | 0, 0, Math_imul(i12, Math_imul(i13, HEAP32[i6 >> 2] | 0) | 0) | 0) | 0;
    _ma_pcm_rb_commit_write((HEAP32[i11 >> 2] | 0) + 94336 + 8 | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
    break;
   }
   if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) == 2) i1 = 24; else if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) == 3) i1 = 24;
   if ((i1 | 0) == 24) {
    i12 = HEAP32[i11 >> 2] | 0;
    _ma_device_uninit_by_index__webaudio(i12 | 0, 2, HEAP32[i12 + 94336 + 4 >> 2] | 0);
   }
   if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) == 1) i1 = 27; else if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) == 3) i1 = 27;
   if ((i1 | 0) == 27) {
    i12 = HEAP32[i11 >> 2] | 0;
    _ma_device_uninit_by_index__webaudio(i12 | 0, 1, HEAP32[i12 + 94336 >> 2] | 0);
   }
   HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
   i14 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i15;
   return i14 | 0;
  } while (0);
  HEAP32[i14 >> 2] = 0;
  i14 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 } while (0);
 HEAP32[i14 >> 2] = -102;
 i14 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _stbir__calculate_memory(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, f6 = f0;
 i4 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 i1 = _stbir__get_filter_pixel_margin(HEAP32[i1 + 80 >> 2] | 0, Math_fround(HEAPF32[i1 + 56 >> 2])) | 0;
 HEAP32[i5 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 i1 = _stbir__get_filter_pixel_width(HEAP32[i1 + 84 >> 2] | 0, Math_fround(HEAPF32[i1 + 60 >> 2])) | 0;
 HEAP32[i2 >> 2] = i1;
 f6 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 56 >> 2]);
 i1 = HEAP32[i3 >> 2] | 0;
 i1 = _stbir__get_contributors(f6, HEAP32[i1 + 80 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 152 >> 2] = i1;
 f6 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 60 >> 2]);
 i1 = HEAP32[i3 >> 2] | 0;
 i1 = _stbir__get_contributors(f6, HEAP32[i1 + 84 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 156 >> 2] = i1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 164 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i2 + 188 >> 2] = HEAP32[i2 + 152 >> 2] << 3;
 i2 = (_stbir__get_total_horizontal_coefficients(HEAP32[i3 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 192 >> 2] = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i2 + 196 >> 2] = HEAP32[i2 + 156 >> 2] << 3;
 i2 = (_stbir__get_total_vertical_coefficients(HEAP32[i3 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 200 >> 2] = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 i2 = (Math_imul((HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i5 >> 2] << 1) | 0, HEAP32[i2 + 64 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 204 >> 2] = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 i2 = (Math_imul(HEAP32[i2 + 20 >> 2] | 0, HEAP32[i2 + 64 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 208 >> 2] = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 i2 = Math_imul(HEAP32[i2 + 20 >> 2] | 0, HEAP32[i2 + 64 >> 2] | 0) | 0;
 i2 = (Math_imul(i2, HEAP32[(HEAP32[i3 >> 2] | 0) + 164 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 212 >> 2] = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 i2 = (Math_imul(HEAP32[i2 + 20 >> 2] | 0, HEAP32[i2 + 64 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 216 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 80 >> 2] | 0)) ___assert_fail(57354, 54884, 2265, 57383);
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 80 >> 2] | 0) >>> 0 >= 6) ___assert_fail(54966, 54884, 2266, 57383);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(57407, 54884, 2267, 57383);
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 84 >> 2] | 0) >>> 0 >= 6) ___assert_fail(55067, 54884, 2268, 57383);
 i5 = (_stbir__use_height_upsampling(HEAP32[i3 >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i5) {
  HEAP32[i1 + 208 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  i3 = i5 | 0;
  i3 = i3 + 188 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i2 = i5 | 0;
  i2 = i2 + 192 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i2 = i3 + i2 | 0;
  i3 = i5 | 0;
  i3 = i3 + 196 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i3 = i2 + i3 | 0;
  i2 = i5 | 0;
  i2 = i2 + 200 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i2 = i3 + i2 | 0;
  i3 = i5 | 0;
  i3 = i3 + 204 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i3 = i2 + i3 | 0;
  i2 = i5 | 0;
  i2 = i2 + 208 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i2 = i3 + i2 | 0;
  i3 = i5 | 0;
  i3 = i3 + 212 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i3 = i2 + i3 | 0;
  i5 = i5 | 0;
  i5 = i5 + 216 | 0;
  i5 = HEAP32[i5 >> 2] | 0;
  i5 = i3 + i5 | 0;
  STACKTOP = i4;
  return i5 | 0;
 } else {
  HEAP32[i1 + 216 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  i3 = i5 | 0;
  i3 = i3 + 188 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i2 = i5 | 0;
  i2 = i2 + 192 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i2 = i3 + i2 | 0;
  i3 = i5 | 0;
  i3 = i3 + 196 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i3 = i2 + i3 | 0;
  i2 = i5 | 0;
  i2 = i2 + 200 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i2 = i3 + i2 | 0;
  i3 = i5 | 0;
  i3 = i3 + 204 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i3 = i2 + i3 | 0;
  i2 = i5 | 0;
  i2 = i2 + 208 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i2 = i3 + i2 | 0;
  i3 = i5 | 0;
  i3 = i3 + 212 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i3 = i2 + i3 | 0;
  i5 = i5 | 0;
  i5 = i5 + 216 | 0;
  i5 = HEAP32[i5 >> 2] | 0;
  i5 = i3 + i5 | 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 return 0;
}

function _drmp3_src_cache_read_frames(i8, i2, i3, i10) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i9 = i1 + 44 | 0;
 i5 = i1 + 24 | 0;
 i11 = i1 + 40 | 0;
 i4 = i1 + 36 | 0;
 i12 = i1 + 16 | 0;
 i7 = i1 + 32 | 0;
 i6 = i1 + 8 | 0;
 HEAP32[i9 >> 2] = i8;
 i8 = i5;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i8 + 4 >> 2] = i3;
 HEAP32[i11 >> 2] = i10;
 i10 = i12;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 if (!(HEAP32[i9 >> 2] | 0)) ___assert_fail(48435, 48387, 2304, 48456);
 if (!(HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) ___assert_fail(48484, 48387, 2305, 48456);
 if (!(HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + 20 >> 2] | 0)) ___assert_fail(48511, 48387, 2306, 48456);
 i10 = i5;
 i8 = HEAP32[i10 + 4 >> 2] | 0;
 if (!(i8 >>> 0 > 0 | (i8 | 0) == 0 & (HEAP32[i10 >> 2] | 0) >>> 0 > 0)) ___assert_fail(36454, 48387, 2307, 48456);
 if (!(HEAP32[i11 >> 2] | 0)) ___assert_fail(36560, 48387, 2308, 48456);
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + 8 >> 2];
 while (1) {
  i10 = i5;
  i8 = HEAP32[i10 + 4 >> 2] | 0;
  if (!(i8 >>> 0 > 0 | (i8 | 0) == 0 & (HEAP32[i10 >> 2] | 0) >>> 0 > 0)) {
   i1 = 22;
   break;
  }
  i10 = i6;
  i2 = HEAP32[i9 >> 2] | 0;
  HEAP32[i10 >> 2] = (HEAP32[i2 + 4100 >> 2] | 0) - (HEAP32[i2 + 4104 >> 2] | 0);
  HEAP32[i10 + 4 >> 2] = 0;
  i10 = i5;
  i2 = HEAP32[i10 + 4 >> 2] | 0;
  i8 = i1;
  HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i8 + 4 >> 2] = i2;
  i8 = i1;
  i2 = HEAP32[i8 + 4 >> 2] | 0;
  i10 = i6;
  i3 = HEAP32[i10 + 4 >> 2] | 0;
  if (i2 >>> 0 > i3 >>> 0 ? 1 : (i2 | 0) == (i3 | 0) ? (HEAP32[i8 >> 2] | 0) >>> 0 > (HEAP32[i10 >> 2] | 0) >>> 0 : 0) {
   i3 = i6;
   i8 = HEAP32[i3 + 4 >> 2] | 0;
   i10 = i1;
   HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 + 4 >> 2] = i8;
  }
  i3 = HEAP32[i11 >> 2] | 0;
  i8 = HEAP32[i9 >> 2] | 0;
  i8 = i8 + 4 + ((Math_imul(HEAP32[i8 + 4104 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0) << 2) | 0;
  i10 = i1;
  i10 = ___muldi3(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0, 0) | 0;
  i10 = ___muldi3(i10 | 0, getTempRet0() | 0, 4, 0) | 0;
  getTempRet0() | 0;
  _memcpy(i3 | 0, i8 | 0, i10 | 0) | 0;
  i10 = (HEAP32[i9 >> 2] | 0) + 4104 | 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
  i10 = i1;
  i8 = i12;
  i10 = _i64Add(HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0) | 0;
  i8 = getTempRet0() | 0;
  i3 = i12;
  HEAP32[i3 >> 2] = i10;
  HEAP32[i3 + 4 >> 2] = i8;
  i3 = i1;
  i8 = i5;
  i3 = _i64Subtract(HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0) | 0;
  i8 = getTempRet0() | 0;
  i10 = i5;
  HEAP32[i10 >> 2] = i3;
  HEAP32[i10 + 4 >> 2] = i8;
  i10 = i5;
  if ((HEAP32[i10 >> 2] | 0) == 0 & (HEAP32[i10 + 4 >> 2] | 0) == 0) {
   i1 = 22;
   break;
  }
  i10 = i5;
  i8 = HEAP32[i10 + 4 >> 2] | 0;
  if (!(i8 >>> 0 > 0 | (i8 | 0) == 0 & (HEAP32[i10 >> 2] | 0) >>> 0 > 0)) {
   i1 = 17;
   break;
  }
  i10 = i1;
  i10 = ___muldi3(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0, 0) | 0;
  getTempRet0() | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (i10 << 2);
  HEAP32[(HEAP32[i9 >> 2] | 0) + 4104 >> 2] = 0;
  HEAP32[(HEAP32[i9 >> 2] | 0) + 4100 >> 2] = 0;
  HEAP32[i7 >> 2] = 1024 / ((HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0;
  if ((HEAP32[i7 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + 16 >> 2] | 0) >>> 0) HEAP32[i7 >> 2] = HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + 16 >> 2];
  i10 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  i10 = FUNCTION_TABLE_iiiiii[HEAP32[i10 + 20 >> 2] & 3](i10 | 0, HEAP32[i7 >> 2] | 0, 0, (HEAP32[i9 >> 2] | 0) + 4 | 0, HEAP32[i10 + 24 >> 2] | 0) | 0;
  getTempRet0() | 0;
  HEAP32[(HEAP32[i9 >> 2] | 0) + 4100 >> 2] = i10;
  if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 4100 >> 2] | 0)) {
   i1 = 22;
   break;
  }
 }
 if ((i1 | 0) == 17) ___assert_fail(36454, 48387, 2332, 48456); else if ((i1 | 0) == 22) {
  i11 = i12;
  i12 = HEAP32[i11 >> 2] | 0;
  setTempRet0(HEAP32[i11 + 4 >> 2] | 0);
  STACKTOP = i13;
  return i12 | 0;
 }
 return 0;
}

function ___udivmoddi4(i5, i6, i8, i11, i13) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0;
 i9 = i5;
 i4 = i6;
 i7 = i4;
 i2 = i8;
 i12 = i11;
 i3 = i12;
 if (!i7) {
  i1 = (i13 | 0) != 0;
  if (!i3) {
   if (i1) {
    HEAP32[i13 >> 2] = (i9 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i9 >>> 0) / (i2 >>> 0) >>> 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  } else {
   if (!i1) {
    i12 = 0;
    i13 = 0;
    return (setTempRet0(i12 | 0), i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i6 & 0;
   i12 = 0;
   i13 = 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
 }
 i1 = (i3 | 0) == 0;
 do if (!i2) {
  if (i1) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = (i7 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i7 >>> 0) / (i2 >>> 0) >>> 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  if (!i9) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = 0;
    HEAP32[i13 + 4 >> 2] = (i7 >>> 0) % (i3 >>> 0);
   }
   i12 = 0;
   i13 = (i7 >>> 0) / (i3 >>> 0) >>> 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  i1 = i3 - 1 | 0;
  if (!(i1 & i3)) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = i5 | 0;
    HEAP32[i13 + 4 >> 2] = i1 & i7 | i6 & 0;
   }
   i12 = 0;
   i13 = i7 >>> ((_llvm_cttz_i32(i3 | 0) | 0) >>> 0);
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
  if (i1 >>> 0 <= 30) {
   i6 = i1 + 1 | 0;
   i3 = 31 - i1 | 0;
   i2 = i6;
   i5 = i7 << i3 | i9 >>> (i6 >>> 0);
   i6 = i7 >>> (i6 >>> 0);
   i1 = 0;
   i3 = i9 << i3;
   break;
  }
  if (!i13) {
   i12 = 0;
   i13 = 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  HEAP32[i13 >> 2] = i5 | 0;
  HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
  i12 = 0;
  i13 = 0;
  return (setTempRet0(i12 | 0), i13) | 0;
 } else {
  if (!i1) {
   i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
   if (i1 >>> 0 <= 31) {
    i10 = i1 + 1 | 0;
    i3 = 31 - i1 | 0;
    i6 = i1 - 31 >> 31;
    i2 = i10;
    i5 = i9 >>> (i10 >>> 0) & i6 | i7 << i3;
    i6 = i7 >>> (i10 >>> 0) & i6;
    i1 = 0;
    i3 = i9 << i3;
    break;
   }
   if (!i13) {
    i12 = 0;
    i13 = 0;
    return (setTempRet0(i12 | 0), i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
   i12 = 0;
   i13 = 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  i1 = i2 - 1 | 0;
  if (i1 & i2 | 0) {
   i3 = (Math_clz32(i2 | 0) | 0) + 33 - (Math_clz32(i7 | 0) | 0) | 0;
   i15 = 64 - i3 | 0;
   i10 = 32 - i3 | 0;
   i4 = i10 >> 31;
   i14 = i3 - 32 | 0;
   i6 = i14 >> 31;
   i2 = i3;
   i5 = i10 - 1 >> 31 & i7 >>> (i14 >>> 0) | (i7 << i10 | i9 >>> (i3 >>> 0)) & i6;
   i6 = i6 & i7 >>> (i3 >>> 0);
   i1 = i9 << i15 & i4;
   i3 = (i7 << i15 | i9 >>> (i14 >>> 0)) & i4 | i9 << i10 & i3 - 33 >> 31;
   break;
  }
  if (i13 | 0) {
   HEAP32[i13 >> 2] = i1 & i9;
   HEAP32[i13 + 4 >> 2] = 0;
  }
  if ((i2 | 0) == 1) {
   i14 = i4 | i6 & 0;
   i15 = i5 | 0 | 0;
   return (setTempRet0(i14 | 0), i15) | 0;
  } else {
   i15 = _llvm_cttz_i32(i2 | 0) | 0;
   i14 = i7 >>> (i15 >>> 0) | 0;
   i15 = i7 << 32 - i15 | i9 >>> (i15 >>> 0) | 0;
   return (setTempRet0(i14 | 0), i15) | 0;
  }
 } while (0);
 if (!i2) {
  i7 = i3;
  i4 = 0;
  i3 = 0;
 } else {
  i10 = i8 | 0 | 0;
  i9 = i12 | i11 & 0;
  i7 = _i64Add(i10 | 0, i9 | 0, -1, -1) | 0;
  i8 = getTempRet0() | 0;
  i4 = i3;
  i3 = 0;
  do {
   i16 = i4;
   i4 = i1 >>> 31 | i4 << 1;
   i1 = i3 | i1 << 1;
   i16 = i5 << 1 | i16 >>> 31 | 0;
   i11 = i5 >>> 31 | i6 << 1 | 0;
   _i64Subtract(i7 | 0, i8 | 0, i16 | 0, i11 | 0) | 0;
   i14 = getTempRet0() | 0;
   i15 = ((i14 | 0) < 0 ? -1 : 0) << 1 | 0;
   i12 = i14 >> 31 | i15;
   i3 = i12 & 1;
   i5 = _i64Subtract(i16 | 0, i11 | 0, i12 & i10 | 0, (((i14 | 0) < 0 ? -1 : 0) >> 31 | i15) & i9 | 0) | 0;
   i6 = getTempRet0() | 0;
   i2 = i2 - 1 | 0;
  } while ((i2 | 0) != 0);
  i7 = i4;
  i4 = 0;
 }
 i2 = 0;
 if (i13 | 0) {
  HEAP32[i13 >> 2] = i5;
  HEAP32[i13 + 4 >> 2] = i6;
 }
 i15 = (i1 | 0) >>> 31 | (i7 | i2) << 1 | (i2 << 1 | i1 >>> 31) & 0 | i4;
 i16 = (i1 << 1 | 0 >>> 31) & -2 | i3;
 return (setTempRet0(i15 | 0), i16) | 0;
}

function _stbi__compute_huffman_codes(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 2560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2560);
 i15 = i1 + 2544 | 0;
 i9 = i1 + 2540 | 0;
 i8 = i1 + 520 | 0;
 i12 = i1 + 32 | 0;
 i4 = i1;
 i6 = i1 + 516 | 0;
 i13 = i1 + 512 | 0;
 i11 = i1 + 508 | 0;
 i10 = i1 + 504 | 0;
 i5 = i1 + 500 | 0;
 i14 = i1 + 496 | 0;
 i7 = i1 + 492 | 0;
 i3 = i1 + 488 | 0;
 i1 = i1 + 2548 | 0;
 HEAP32[i9 >> 2] = i2;
 i2 = (_stbi__zreceive(HEAP32[i9 >> 2] | 0, 5) | 0) + 257 | 0;
 HEAP32[i11 >> 2] = i2;
 i2 = (_stbi__zreceive(HEAP32[i9 >> 2] | 0, 5) | 0) + 1 | 0;
 HEAP32[i10 >> 2] = i2;
 i2 = (_stbi__zreceive(HEAP32[i9 >> 2] | 0, 4) | 0) + 4 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i14 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP16[i4 + 16 >> 1] = 0;
 HEAP8[i4 + 18 >> 0] = 0;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) break;
  i2 = _stbi__zreceive(HEAP32[i9 >> 2] | 0, 3) | 0;
  HEAP32[i7 >> 2] = i2;
  HEAP8[i4 + (HEAPU8[27008 + (HEAP32[i6 >> 2] | 0) >> 0] | 0) >> 0] = HEAP32[i7 >> 2];
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if (!(_stbi__zbuild_huffman(i8, i4, 19) | 0)) {
  HEAP32[i15 >> 2] = 0;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i13 >> 2] = 0;
 L9 : while (1) {
  if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) {
   i1 = 25;
   break;
  }
  i7 = _stbi__zhuffman_decode(HEAP32[i9 >> 2] | 0, i8) | 0;
  HEAP32[i3 >> 2] = i7;
  if ((HEAP32[i3 >> 2] | 0) < 0 | (HEAP32[i3 >> 2] | 0) >= 19) {
   i1 = 9;
   break;
  }
  if ((HEAP32[i3 >> 2] | 0) < 16) {
   i6 = HEAP32[i3 >> 2] & 255;
   i7 = HEAP32[i13 >> 2] | 0;
   HEAP32[i13 >> 2] = i7 + 1;
   HEAP8[i12 + i7 >> 0] = i6;
  } else {
   HEAP8[i1 >> 0] = 0;
   do if ((HEAP32[i3 >> 2] | 0) == 16) {
    i7 = (_stbi__zreceive(HEAP32[i9 >> 2] | 0, 2) | 0) + 3 | 0;
    HEAP32[i3 >> 2] = i7;
    if (!(HEAP32[i13 >> 2] | 0)) {
     i1 = 14;
     break L9;
    }
    HEAP8[i1 >> 0] = HEAP8[i12 + ((HEAP32[i13 >> 2] | 0) - 1) >> 0] | 0;
   } else {
    if ((HEAP32[i3 >> 2] | 0) == 17) {
     i7 = (_stbi__zreceive(HEAP32[i9 >> 2] | 0, 3) | 0) + 3 | 0;
     HEAP32[i3 >> 2] = i7;
     break;
    }
    if ((HEAP32[i3 >> 2] | 0) != 18) {
     i1 = 19;
     break L9;
    }
    i7 = (_stbi__zreceive(HEAP32[i9 >> 2] | 0, 7) | 0) + 11 | 0;
    HEAP32[i3 >> 2] = i7;
   } while (0);
   if (((HEAP32[i14 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0) < (HEAP32[i3 >> 2] | 0)) {
    i1 = 22;
    break;
   }
   _memset(i12 + (HEAP32[i13 >> 2] | 0) | 0, (HEAPU8[i1 >> 0] | 0) & 255 | 0, HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i3 >> 2] | 0);
  }
 }
 if ((i1 | 0) == 9) {
  i14 = _stbi__err(54495) | 0;
  HEAP32[i15 >> 2] = i14;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 } else if ((i1 | 0) == 14) {
  i14 = _stbi__err(54495) | 0;
  HEAP32[i15 >> 2] = i14;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 } else if ((i1 | 0) == 19) ___assert_fail(54511, 53449, 4122, 54519); else if ((i1 | 0) == 22) {
  i14 = _stbi__err(54495) | 0;
  HEAP32[i15 >> 2] = i14;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 } else if ((i1 | 0) == 25) {
  if ((HEAP32[i13 >> 2] | 0) != (HEAP32[i14 >> 2] | 0)) {
   i14 = _stbi__err(54495) | 0;
   HEAP32[i15 >> 2] = i14;
   i15 = HEAP32[i15 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!(_stbi__zbuild_huffman((HEAP32[i9 >> 2] | 0) + 32 | 0, i12, HEAP32[i11 >> 2] | 0) | 0)) {
   HEAP32[i15 >> 2] = 0;
   i15 = HEAP32[i15 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (_stbi__zbuild_huffman((HEAP32[i9 >> 2] | 0) + 2052 | 0, i12 + (HEAP32[i11 >> 2] | 0) | 0, HEAP32[i10 >> 2] | 0) | 0) {
   HEAP32[i15 >> 2] = 1;
   i15 = HEAP32[i15 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  } else {
   HEAP32[i15 >> 2] = 0;
   i15 = HEAP32[i15 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 return 0;
}

function _stbv_vorbis_deinit(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i7 >> 2] = i2;
 L1 : do if (HEAP32[(HEAP32[i7 >> 2] | 0) + 396 >> 2] | 0) {
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 264 >> 2] | 0)) break L1;
   HEAP32[i4 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 396 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) * 24 | 0);
   if (HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) {
    HEAP32[i3 >> 2] = 0;
    while (1) {
     i1 = HEAP32[i7 >> 2] | 0;
     i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0;
     if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 124 >> 2] | 0) + ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 13 >> 0] | 0) * 2096 | 0) + 4 >> 2] | 0)) break;
     _stbv_setup_free(i1, HEAP32[i2 + (HEAP32[i3 >> 2] << 2) >> 2] | 0);
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    }
    _stbv_setup_free(i1, i2);
   }
   _stbv_setup_free(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 124 >> 2] | 0) {
  HEAP32[i6 >> 2] = 0;
  while (1) {
   i1 = HEAP32[i7 >> 2] | 0;
   if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 120 >> 2] | 0)) break;
   HEAP32[i5 >> 2] = (HEAP32[i1 + 124 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) * 2096 | 0);
   _stbv_setup_free(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0);
   _stbv_setup_free(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] | 0);
   _stbv_setup_free(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0);
   _stbv_setup_free(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 2084 >> 2] | 0);
   if (HEAP32[(HEAP32[i5 >> 2] | 0) + 2088 >> 2] | 0) i1 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 2088 >> 2] | 0) + -4 | 0; else i1 = 0;
   _stbv_setup_free(HEAP32[i7 >> 2] | 0, i1);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  _stbv_setup_free(i1, HEAP32[(HEAP32[i7 >> 2] | 0) + 124 >> 2] | 0);
 }
 i5 = HEAP32[i7 >> 2] | 0;
 _stbv_setup_free(i5 | 0, HEAP32[i5 + 260 >> 2] | 0);
 i5 = HEAP32[i7 >> 2] | 0;
 _stbv_setup_free(i5 | 0, HEAP32[i5 + 396 >> 2] | 0);
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 404 >> 2] | 0) {
  HEAP32[i6 >> 2] = 0;
  while (1) {
   i2 = HEAP32[i7 >> 2] | 0;
   i1 = i2 | 0;
   i2 = HEAP32[i2 + 404 >> 2] | 0;
   if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 400 >> 2] | 0)) break;
   _stbv_setup_free(i1, HEAP32[i2 + ((HEAP32[i6 >> 2] | 0) * 40 | 0) + 4 >> 2] | 0);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  _stbv_setup_free(i1, i2);
 }
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if (!((HEAP32[i6 >> 2] | 0) < (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) ? (HEAP32[i6 >> 2] | 0) < 16 : 0)) break;
  i5 = HEAP32[i7 >> 2] | 0;
  _stbv_setup_free(i5 | 0, HEAP32[i5 + 800 + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
  i5 = HEAP32[i7 >> 2] | 0;
  _stbv_setup_free(i5 | 0, HEAP32[i5 + 928 + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
  i5 = HEAP32[i7 >> 2] | 0;
  _stbv_setup_free(i5 | 0, HEAP32[i5 + 996 + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 HEAP32[i6 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i6 >> 2] | 0) >= 2) break;
  _stbv_setup_free(i1, HEAP32[(HEAP32[i7 >> 2] | 0) + 1068 + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
  i5 = HEAP32[i7 >> 2] | 0;
  _stbv_setup_free(i5 | 0, HEAP32[i5 + 1076 + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
  i5 = HEAP32[i7 >> 2] | 0;
  _stbv_setup_free(i5 | 0, HEAP32[i5 + 1084 + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
  i5 = HEAP32[i7 >> 2] | 0;
  _stbv_setup_free(i5 | 0, HEAP32[i5 + 1092 + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
  i5 = HEAP32[i7 >> 2] | 0;
  _stbv_setup_free(i5 | 0, HEAP32[i5 + 1100 + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if (!(HEAP32[i1 + 28 >> 2] | 0)) {
  STACKTOP = i8;
  return;
 }
 _fclose(HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) | 0;
 STACKTOP = i8;
 return;
}

function _stbv_compute_stereo_samples(i6, i5, i3, i2, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, f22 = f0;
 i21 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 i19 = i1 + 176 | 0;
 i16 = i1 + 172 | 0;
 i10 = i1 + 168 | 0;
 i9 = i1 + 164 | 0;
 i13 = i1 + 160 | 0;
 i8 = i1;
 i11 = i1 + 156 | 0;
 i12 = i1 + 152 | 0;
 i17 = i1 + 148 | 0;
 i15 = i1 + 144 | 0;
 i18 = i1 + 140 | 0;
 i14 = i1 + 136 | 0;
 i20 = i1 + 132 | 0;
 i7 = i1 + 128 | 0;
 HEAP32[i19 >> 2] = i6;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i15 >> 2] = 16;
 HEAP32[i17 >> 2] = 0;
 while (1) {
  if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) break;
  HEAP32[i18 >> 2] = HEAP32[i17 >> 2] << 1;
  i1 = i8;
  i2 = i1 + 128 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  if (((HEAP32[i17 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0) > (HEAP32[i13 >> 2] | 0)) HEAP32[i15 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
  HEAP32[i12 >> 2] = 0;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i16 >> 2] | 0)) break;
   HEAP32[i14 >> 2] = HEAP8[14560 + ((HEAP32[i16 >> 2] | 0) * 6 | 0) + (HEAP32[i12 >> 2] | 0) >> 0] & 6;
   L10 : do if ((HEAP32[i14 >> 2] | 0) == 6) {
    HEAP32[i11 >> 2] = 0;
    while (1) {
     if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break L10;
     f22 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]);
     i6 = i8 + ((HEAP32[i11 >> 2] << 1) + 0 << 2) | 0;
     f22 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f22);
     HEAPF32[i6 >> 2] = f22;
     f22 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]);
     i6 = i8 + ((HEAP32[i11 >> 2] << 1) + 1 << 2) | 0;
     f22 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f22);
     HEAPF32[i6 >> 2] = f22;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    }
   } else {
    if ((HEAP32[i14 >> 2] | 0) == 2) {
     HEAP32[i11 >> 2] = 0;
     while (1) {
      if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break L10;
      f22 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]);
      i6 = i8 + ((HEAP32[i11 >> 2] << 1) + 0 << 2) | 0;
      f22 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f22);
      HEAPF32[i6 >> 2] = f22;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     }
    }
    if ((HEAP32[i14 >> 2] | 0) == 4) {
     HEAP32[i11 >> 2] = 0;
     while (1) {
      if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break L10;
      f22 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 2) >> 2]);
      i6 = i8 + ((HEAP32[i11 >> 2] << 1) + 1 << 2) | 0;
      f22 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f22);
      HEAPF32[i6 >> 2] = f22;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     }
    }
   } while (0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  HEAP32[i11 >> 2] = 0;
  while (1) {
   if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i15 >> 2] << 1 | 0)) break;
   f22 = Math_fround(Math_fround(HEAPF32[i8 + (HEAP32[i11 >> 2] << 2) >> 2]) + Math_fround(384.0));
   HEAPF32[i20 >> 2] = f22;
   HEAP32[i7 >> 2] = (HEAP32[i20 >> 2] | 0) - 1136656384;
   if (((HEAP32[i7 >> 2] | 0) + 32768 | 0) >>> 0 > 65535) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) < 0 ? -32768 : 32767;
   HEAP16[(HEAP32[i19 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) << 1) >> 1] = HEAP32[i7 >> 2];
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 16;
 }
 STACKTOP = i21;
 return;
}

function _DrawTexturePro(i5, i9, i7, i3, f1, i6) {
 i5 = i5 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 f1 = Math_fround(f1);
 i6 = i6 | 0;
 var i2 = 0, i4 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0;
 i11 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i2 + 8 | 0;
 i10 = i2 + 4 | 0;
 i8 = i2;
 i2 = i2 + 12 | 0;
 HEAPF32[i4 >> 2] = f1;
 if ((HEAP32[i5 >> 2] | 0) >>> 0 <= 0) {
  STACKTOP = i11;
  return;
 }
 f1 = Math_fround(HEAP32[i5 + 4 >> 2] | 0);
 HEAPF32[i10 >> 2] = f1;
 f1 = Math_fround(HEAP32[i5 + 8 >> 2] | 0);
 HEAPF32[i8 >> 2] = f1;
 HEAP8[i2 >> 0] = 0;
 if (Math_fround(HEAPF32[i9 + 8 >> 2]) < Math_fround(0.0)) {
  HEAP8[i2 >> 0] = 1;
  i12 = i9 + 8 | 0;
  f1 = Math_fround(Math_fround(HEAPF32[i12 >> 2]) * Math_fround(-1.0));
  HEAPF32[i12 >> 2] = f1;
 }
 if (Math_fround(HEAPF32[i9 + 12 >> 2]) < Math_fround(0.0)) {
  f1 = Math_fround(HEAPF32[i9 + 12 >> 2]);
  i12 = i9 + 4 | 0;
  f1 = Math_fround(Math_fround(HEAPF32[i12 >> 2]) - f1);
  HEAPF32[i12 >> 2] = f1;
 }
 _rlEnableTexture(HEAP32[i5 >> 2] | 0);
 _rlPushMatrix();
 f1 = Math_fround(HEAPF32[i7 >> 2]);
 _rlTranslatef(f1, Math_fround(HEAPF32[i7 + 4 >> 2]), Math_fround(0.0));
 _rlRotatef(Math_fround(HEAPF32[i4 >> 2]), Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
 f1 = Math_fround(-Math_fround(HEAPF32[i3 >> 2]));
 _rlTranslatef(f1, Math_fround(-Math_fround(HEAPF32[i3 + 4 >> 2])), Math_fround(0.0));
 _rlBegin(7);
 _rlColor4ub(HEAP8[i6 >> 0] | 0, HEAP8[i6 + 1 >> 0] | 0, HEAP8[i6 + 2 >> 0] | 0, HEAP8[i6 + 3 >> 0] | 0);
 _rlNormal3f(Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
 f1 = Math_fround(HEAPF32[i9 >> 2]);
 if (HEAP8[i2 >> 0] & 1) {
  f13 = Math_fround(f1 + Math_fround(HEAPF32[i9 + 8 >> 2]));
  f13 = Math_fround(f13 / Math_fround(HEAPF32[i10 >> 2]));
  f1 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  _rlTexCoord2f(f13, Math_fround(f1 / Math_fround(HEAPF32[i8 >> 2])));
 } else {
  f1 = Math_fround(f1 / Math_fround(HEAPF32[i10 >> 2]));
  f13 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  _rlTexCoord2f(f1, Math_fround(f13 / Math_fround(HEAPF32[i8 >> 2])));
 }
 _rlVertex2f(Math_fround(0.0), Math_fround(0.0));
 f1 = Math_fround(HEAPF32[i9 >> 2]);
 if (HEAP8[i2 >> 0] & 1) {
  f1 = Math_fround(f1 + Math_fround(HEAPF32[i9 + 8 >> 2]));
  f1 = Math_fround(f1 / Math_fround(HEAPF32[i10 >> 2]));
  f13 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  f13 = Math_fround(f13 + Math_fround(HEAPF32[i9 + 12 >> 2]));
  _rlTexCoord2f(f1, Math_fround(f13 / Math_fround(HEAPF32[i8 >> 2])));
 } else {
  f1 = Math_fround(f1 / Math_fround(HEAPF32[i10 >> 2]));
  f13 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  f13 = Math_fround(f13 + Math_fround(HEAPF32[i9 + 12 >> 2]));
  _rlTexCoord2f(f1, Math_fround(f13 / Math_fround(HEAPF32[i8 >> 2])));
 }
 _rlVertex2f(Math_fround(0.0), Math_fround(HEAPF32[i7 + 12 >> 2]));
 f1 = Math_fround(HEAPF32[i9 >> 2]);
 if (HEAP8[i2 >> 0] & 1) {
  f1 = Math_fround(f1 / Math_fround(HEAPF32[i10 >> 2]));
  f13 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  f13 = Math_fround(f13 + Math_fround(HEAPF32[i9 + 12 >> 2]));
  _rlTexCoord2f(f1, Math_fround(f13 / Math_fround(HEAPF32[i8 >> 2])));
 } else {
  f1 = Math_fround(f1 + Math_fround(HEAPF32[i9 + 8 >> 2]));
  f1 = Math_fround(f1 / Math_fround(HEAPF32[i10 >> 2]));
  f13 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  f13 = Math_fround(f13 + Math_fround(HEAPF32[i9 + 12 >> 2]));
  _rlTexCoord2f(f1, Math_fround(f13 / Math_fround(HEAPF32[i8 >> 2])));
 }
 f1 = Math_fround(HEAPF32[i7 + 8 >> 2]);
 _rlVertex2f(f1, Math_fround(HEAPF32[i7 + 12 >> 2]));
 f1 = Math_fround(HEAPF32[i9 >> 2]);
 if (HEAP8[i2 >> 0] & 1) {
  f1 = Math_fround(f1 / Math_fround(HEAPF32[i10 >> 2]));
  f13 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  _rlTexCoord2f(f1, Math_fround(f13 / Math_fround(HEAPF32[i8 >> 2])));
 } else {
  f1 = Math_fround(f1 + Math_fround(HEAPF32[i9 + 8 >> 2]));
  f1 = Math_fround(f1 / Math_fround(HEAPF32[i10 >> 2]));
  f13 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  _rlTexCoord2f(f1, Math_fround(f13 / Math_fround(HEAPF32[i8 >> 2])));
 }
 _rlVertex2f(Math_fround(HEAPF32[i7 + 8 >> 2]), Math_fround(0.0));
 _rlEnd();
 _rlPopMatrix();
 _rlDisableTexture();
 STACKTOP = i11;
 return;
}

function _stbv_compute_sorted_huffman(i2, i4, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 40 | 0;
 i12 = i1 + 36 | 0;
 i14 = i1 + 32 | 0;
 i10 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i3 = i1 + 20 | 0;
 i9 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i15 = i1 + 8 | 0;
 i13 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 L1 : do if (HEAP8[(HEAP32[i7 >> 2] | 0) + 23 >> 0] | 0) {
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 2092 >> 2] | 0)) break L1;
   i5 = _stbv_bit_reverse(HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0) | 0;
   HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 2084 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] = i5;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
 } else {
  HEAP32[i3 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0)) break;
   if (_stbv_include_in_sort(HEAP32[i7 >> 2] | 0, HEAP8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0) | 0) {
    i2 = _stbv_bit_reverse(HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0) | 0;
    i4 = HEAP32[(HEAP32[i7 >> 2] | 0) + 2084 >> 2] | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = i5 + 1;
    HEAP32[i4 + (i5 << 2) >> 2] = i2;
   }
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  if ((HEAP32[i3 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 2092 >> 2] | 0)) break; else ___assert_fail(47835, 47181, 1160, 47858);
 } while (0);
 i1 = HEAP32[i7 >> 2] | 0;
 _qsort(HEAP32[i1 + 2084 >> 2] | 0, HEAP32[i1 + 2092 >> 2] | 0, 4, 6);
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[(HEAP32[i1 + 2084 >> 2] | 0) + (HEAP32[i1 + 2092 >> 2] << 2) >> 2] = -1;
 i1 = HEAP32[i7 >> 2] | 0;
 if (HEAPU8[(HEAP32[i7 >> 2] | 0) + 23 >> 0] | 0) i1 = HEAP32[i1 + 2092 >> 2] | 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i10 >> 2] = 0;
 L22 : while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) {
   i1 = 34;
   break;
  }
  i1 = HEAP32[i12 >> 2] | 0;
  if (HEAPU8[(HEAP32[i7 >> 2] | 0) + 23 >> 0] | 0) i1 = HEAPU8[i1 + (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0) >> 0] | 0; else i1 = HEAPU8[i1 + (HEAP32[i10 >> 2] | 0) >> 0] | 0;
  HEAP32[i9 >> 2] = i1;
  do if (_stbv_include_in_sort(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] & 255) | 0) {
   i5 = _stbv_bit_reverse(HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = i5;
   HEAP32[i15 >> 2] = 0;
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 2092 >> 2];
   while (1) {
    if ((HEAP32[i13 >> 2] | 0) <= 1) break;
    HEAP32[i6 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i13 >> 2] >> 1);
    if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 2084 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0) >>> 0 <= (HEAP32[i8 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[i13 >> 2] >> 1);
    } else HEAP32[i13 >> 2] = HEAP32[i13 >> 2] >> 1;
   }
   if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 2084 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] | 0) != (HEAP32[i8 >> 2] | 0)) {
    i1 = 29;
    break L22;
   }
   if (HEAP8[(HEAP32[i7 >> 2] | 0) + 23 >> 0] | 0) {
    HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2];
    HEAP8[(HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = HEAP32[i9 >> 2];
    break;
   } else {
    HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] = HEAP32[i10 >> 2];
    break;
   }
  } while (0);
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 29) ___assert_fail(47886, 47181, 1190, 47858); else if ((i1 | 0) == 34) {
  STACKTOP = i16;
  return;
 }
}

function _stbv_compute_codewords(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i17 = i1 + 168 | 0;
 i9 = i1 + 164 | 0;
 i11 = i1 + 160 | 0;
 i13 = i1 + 156 | 0;
 i15 = i1 + 152 | 0;
 i10 = i1 + 148 | 0;
 i6 = i1 + 144 | 0;
 i12 = i1 + 140 | 0;
 i8 = i1;
 i14 = i1 + 136 | 0;
 i16 = i1 + 132 | 0;
 i7 = i1 + 128 | 0;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i12 >> 2] = 0;
 i1 = i8;
 i2 = i1 + 128 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) break;
  if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0) < 255) break;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 i1 = HEAP32[i9 >> 2] | 0;
 if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) {
  if (HEAP32[i1 + 2092 >> 2] | 0) ___assert_fail(47953, 47181, 1063, 47976);
  HEAP32[i17 >> 2] = 1;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i4 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = i5 + 1;
 _stbv_add_entry(i1, 0, i4, i5, HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0, HEAP32[i15 >> 2] | 0);
 HEAP32[i10 >> 2] = 1;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) > (HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0)) break;
  HEAP32[i8 + (HEAP32[i10 >> 2] << 2) >> 2] = 1 << 32 - (HEAP32[i10 >> 2] | 0);
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 HEAP32[i10 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 L17 : while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) {
   i1 = 34;
   break;
  }
  HEAP32[i16 >> 2] = HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0];
  L20 : do if ((HEAP32[i16 >> 2] | 0) != 255) {
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) > 0) i2 = (HEAP32[i8 + (HEAP32[i16 >> 2] << 2) >> 2] | 0) != 0 ^ 1; else i2 = 0;
    i1 = HEAP32[i16 >> 2] | 0;
    if (!i2) break;
    HEAP32[i16 >> 2] = i1 + -1;
   }
   if (!i1) {
    i1 = 21;
    break L17;
   }
   HEAP32[i14 >> 2] = HEAP32[i8 + (HEAP32[i16 >> 2] << 2) >> 2];
   if (!((HEAP32[i16 >> 2] | 0) >= 0 & (HEAP32[i16 >> 2] | 0) < 32)) {
    i1 = 23;
    break L17;
   }
   HEAP32[i8 + (HEAP32[i16 >> 2] << 2) >> 2] = 0;
   i3 = HEAP32[i9 >> 2] | 0;
   i4 = _stbv_bit_reverse(HEAP32[i14 >> 2] | 0) | 0;
   i5 = HEAP32[i10 >> 2] | 0;
   i6 = HEAP32[i12 >> 2] | 0;
   HEAP32[i12 >> 2] = i6 + 1;
   _stbv_add_entry(i3, i4, i5, i6, HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0, HEAP32[i15 >> 2] | 0);
   if ((HEAP32[i16 >> 2] | 0) != (HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0)) {
    if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) < 0) {
     i1 = 27;
     break L17;
    }
    if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) >= 32) {
     i1 = 27;
     break L17;
    }
    HEAP32[i7 >> 2] = HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0];
    while (1) {
     if ((HEAP32[i7 >> 2] | 0) <= (HEAP32[i16 >> 2] | 0)) break L20;
     if (HEAP32[i8 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) {
      i1 = 31;
      break L17;
     }
     HEAP32[i8 + (HEAP32[i7 >> 2] << 2) >> 2] = (HEAP32[i14 >> 2] | 0) + (1 << 32 - (HEAP32[i7 >> 2] | 0));
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
    }
   }
  } while (0);
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 21) {
  HEAP32[i17 >> 2] = 0;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 } else if ((i1 | 0) == 23) ___assert_fail(47999, 47181, 1086, 47976); else if ((i1 | 0) == 27) ___assert_fail(48016, 47181, 1091, 47976); else if ((i1 | 0) == 31) ___assert_fail(48043, 47181, 1093, 47976); else if ((i1 | 0) == 34) {
  HEAP32[i17 >> 2] = 1;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 return 0;
}

function _stbir__calculate_coefficients_upsample(i6, f16, i12, i14, f10, i4, i2) {
 i6 = i6 | 0;
 f16 = Math_fround(f16);
 i12 = i12 | 0;
 i14 = i14 | 0;
 f10 = Math_fround(f10);
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i19 = 0;
 i20 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 40 | 0;
 i17 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i15 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i18 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAPF32[i17 >> 2] = f16;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i15 >> 2] = i14;
 HEAPF32[i11 >> 2] = f10;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAPF32[i18 >> 2] = Math_fround(0.0);
 i14 = (HEAP32[i15 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0;
 f16 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i17 >> 2]));
 if ((i14 | 0) > (~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[HEAP32[28352 + (HEAP32[i7 >> 2] << 3) + 4 >> 2] & 7](f16)) * Math_fround(2.0)))) | 0)) ___assert_fail(56943, 54884, 1043, 57042);
 HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[i13 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i15 >> 2];
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) ___assert_fail(56795, 54884, 1048, 57042);
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) > ((HEAP32[i15 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0)) break;
  f10 = Math_fround(Math_fround((HEAP32[i9 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0) + Math_fround(.5));
  HEAPF32[i1 >> 2] = f10;
  f10 = Math_fround(HEAPF32[i11 >> 2]);
  f10 = Math_fround(f10 - Math_fround(HEAPF32[i1 >> 2]));
  f16 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i17 >> 2]));
  f16 = Math_fround(FUNCTION_TABLE_fff[HEAP32[28352 + (HEAP32[i7 >> 2] << 3) >> 2] & 7](f10, f16));
  HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] = f16;
  if (!(HEAP32[i9 >> 2] | 0)) if (Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2]) != Math_fround(0.0)) i19 = 10; else {
   i14 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
   HEAP32[i13 >> 2] = i14;
   HEAP32[HEAP32[i5 >> 2] >> 2] = i14;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
  } else i19 = 10;
  if ((i19 | 0) == 10) {
   i19 = 0;
   f16 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2]);
   f16 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f16);
   HEAPF32[i18 >> 2] = f16;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 f10 = Math_fround(Math_fround((HEAP32[i15 >> 2] | 0) + 1 | 0) + Math_fround(.5));
 f10 = Math_fround(f10 - Math_fround(HEAPF32[i11 >> 2]));
 f16 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i17 >> 2]));
 if (!(Math_fround(FUNCTION_TABLE_fff[HEAP32[28352 + (HEAP32[i7 >> 2] << 3) >> 2] & 7](f10, f16)) == Math_fround(0.0))) ___assert_fail(57081, 54884, 1066, 57042);
 if (!(+Math_fround(HEAPF32[i18 >> 2]) > .9)) ___assert_fail(57189, 54884, 1068, 57042);
 if (!(Math_fround(HEAPF32[i18 >> 2]) < Math_fround(1.10000002))) ___assert_fail(57208, 54884, 1069, 57042);
 f16 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i18 >> 2]));
 HEAPF32[i8 >> 2] = f16;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) > ((HEAP32[i15 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0)) break;
  f16 = Math_fround(HEAPF32[i8 >> 2]);
  i19 = (HEAP32[i3 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) | 0;
  f16 = Math_fround(Math_fround(HEAPF32[i19 >> 2]) * f16);
  HEAPF32[i19 >> 2] = f16;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 HEAP32[i9 >> 2] = (HEAP32[i15 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) < 0) {
   i19 = 25;
   break;
  }
  if (Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2]) != Math_fround(0.0)) {
   i19 = 25;
   break;
  }
  HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + (HEAP32[i9 >> 2] | 0) - 1;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
 }
 if ((i19 | 0) == 25) {
  STACKTOP = i20;
  return;
 }
}

function _stbi__parse_huffman_block(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i4 = i1;
 i3 = i1 + 28 | 0;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2];
 L1 : while (1) {
  i1 = HEAP32[i8 >> 2] | 0;
  i1 = _stbi__zhuffman_decode(i1 | 0, i1 + 32 | 0) | 0;
  HEAP32[i7 >> 2] = i1;
  i1 = HEAP32[i7 >> 2] | 0;
  do if ((HEAP32[i7 >> 2] | 0) < 256) {
   if ((i1 | 0) < 0) {
    i1 = 4;
    break L1;
   }
   if ((HEAP32[i10 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
    if (!(_stbi__zexpand(HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, 1) | 0)) {
     i1 = 7;
     break L1;
    }
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2];
   }
   i1 = HEAP32[i7 >> 2] & 255;
   i2 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i1;
  } else {
   if ((i1 | 0) == 256) {
    i1 = 11;
    break L1;
   }
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - 257;
   HEAP32[i5 >> 2] = HEAP32[26496 + (HEAP32[i7 >> 2] << 2) >> 2];
   if (HEAP32[26624 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) {
    i2 = _stbi__zreceive(HEAP32[i8 >> 2] | 0, HEAP32[26624 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) | 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i2;
   }
   i2 = HEAP32[i8 >> 2] | 0;
   i2 = _stbi__zhuffman_decode(i2 | 0, i2 + 2052 | 0) | 0;
   HEAP32[i7 >> 2] = i2;
   if ((HEAP32[i7 >> 2] | 0) < 0) {
    i1 = 15;
    break L1;
   }
   HEAP32[i4 >> 2] = HEAP32[26752 + (HEAP32[i7 >> 2] << 2) >> 2];
   if (HEAP32[26880 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) {
    i2 = _stbi__zreceive(HEAP32[i8 >> 2] | 0, HEAP32[26880 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i2;
   }
   if (((HEAP32[i10 >> 2] | 0) - (HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] | 0) | 0) < (HEAP32[i4 >> 2] | 0)) {
    i1 = 19;
    break L1;
   }
   if (((HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
    if (!(_stbi__zexpand(HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0)) {
     i1 = 22;
     break L1;
    }
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2];
   }
   HEAP32[i6 >> 2] = (HEAP32[i10 >> 2] | 0) + (0 - (HEAP32[i4 >> 2] | 0));
   if ((HEAP32[i4 >> 2] | 0) == 1) {
    HEAP8[i3 >> 0] = HEAP8[HEAP32[i6 >> 2] >> 0] | 0;
    if (!(HEAP32[i5 >> 2] | 0)) break;
    do {
     i1 = HEAP8[i3 >> 0] | 0;
     i2 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i2 + 1;
     HEAP8[i2 >> 0] = i1;
     i2 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
     HEAP32[i5 >> 2] = i2;
    } while ((i2 | 0) != 0);
   } else {
    if (!(HEAP32[i5 >> 2] | 0)) break;
    do {
     i1 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i1 + 1;
     i1 = HEAP8[i1 >> 0] | 0;
     i2 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i2 + 1;
     HEAP8[i2 >> 0] = i1;
     i2 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
     HEAP32[i5 >> 2] = i2;
    } while ((i2 | 0) != 0);
   }
  } while (0);
 }
 if ((i1 | 0) == 4) {
  i10 = _stbi__err(54320) | 0;
  HEAP32[i9 >> 2] = i10;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 7) {
  HEAP32[i9 >> 2] = 0;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 11) {
  HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i9 >> 2] = 1;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 15) {
  i10 = _stbi__err(54320) | 0;
  HEAP32[i9 >> 2] = i10;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 19) {
  i10 = _stbi__err(54337) | 0;
  HEAP32[i9 >> 2] = i10;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 22) {
  HEAP32[i9 >> 2] = 0;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 return 0;
}

function _ma_format_converter_init_callbacks__default(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) ___assert_fail(45059, 36381, 29406, 45084);
 switch (HEAP32[HEAP32[i1 >> 2] >> 2] | 0) {
 case 1:
  {
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 1) {
    HEAP32[i2 + 44 >> 2] = 12;
    STACKTOP = i5;
    return;
   }
   i3 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i2 + 4 >> 2] | 0) == 2) {
    HEAP32[i3 + 44 >> 2] = 13;
    STACKTOP = i5;
    return;
   }
   i4 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i3 + 4 >> 2] | 0) == 3) {
    HEAP32[i4 + 44 >> 2] = 14;
    STACKTOP = i5;
    return;
   }
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i4 + 4 >> 2] | 0) == 4) {
    HEAP32[i2 + 44 >> 2] = 15;
    STACKTOP = i5;
    return;
   }
   if ((HEAP32[i2 + 4 >> 2] | 0) != 5) {
    STACKTOP = i5;
    return;
   }
   HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] = 16;
   STACKTOP = i5;
   return;
  }
 case 2:
  {
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 1) {
    HEAP32[i2 + 44 >> 2] = 17;
    STACKTOP = i5;
    return;
   }
   i3 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i2 + 4 >> 2] | 0) == 2) {
    HEAP32[i3 + 44 >> 2] = 18;
    STACKTOP = i5;
    return;
   }
   i4 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i3 + 4 >> 2] | 0) == 3) {
    HEAP32[i4 + 44 >> 2] = 19;
    STACKTOP = i5;
    return;
   }
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i4 + 4 >> 2] | 0) == 4) {
    HEAP32[i2 + 44 >> 2] = 20;
    STACKTOP = i5;
    return;
   }
   if ((HEAP32[i2 + 4 >> 2] | 0) != 5) {
    STACKTOP = i5;
    return;
   }
   HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] = 21;
   STACKTOP = i5;
   return;
  }
 case 3:
  {
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 1) {
    HEAP32[i2 + 44 >> 2] = 22;
    STACKTOP = i5;
    return;
   }
   i3 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i2 + 4 >> 2] | 0) == 2) {
    HEAP32[i3 + 44 >> 2] = 23;
    STACKTOP = i5;
    return;
   }
   i4 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i3 + 4 >> 2] | 0) == 3) {
    HEAP32[i4 + 44 >> 2] = 24;
    STACKTOP = i5;
    return;
   }
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i4 + 4 >> 2] | 0) == 4) {
    HEAP32[i2 + 44 >> 2] = 25;
    STACKTOP = i5;
    return;
   }
   if ((HEAP32[i2 + 4 >> 2] | 0) != 5) {
    STACKTOP = i5;
    return;
   }
   HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] = 26;
   STACKTOP = i5;
   return;
  }
 case 4:
  {
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 1) {
    HEAP32[i2 + 44 >> 2] = 27;
    STACKTOP = i5;
    return;
   }
   i3 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i2 + 4 >> 2] | 0) == 2) {
    HEAP32[i3 + 44 >> 2] = 28;
    STACKTOP = i5;
    return;
   }
   i4 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i3 + 4 >> 2] | 0) == 3) {
    HEAP32[i4 + 44 >> 2] = 29;
    STACKTOP = i5;
    return;
   }
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i4 + 4 >> 2] | 0) == 4) {
    HEAP32[i2 + 44 >> 2] = 30;
    STACKTOP = i5;
    return;
   }
   if ((HEAP32[i2 + 4 >> 2] | 0) != 5) {
    STACKTOP = i5;
    return;
   }
   HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] = 31;
   STACKTOP = i5;
   return;
  }
 default:
  {
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 1) {
    HEAP32[i2 + 44 >> 2] = 32;
    STACKTOP = i5;
    return;
   }
   i3 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i2 + 4 >> 2] | 0) == 2) {
    HEAP32[i3 + 44 >> 2] = 33;
    STACKTOP = i5;
    return;
   }
   i4 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i3 + 4 >> 2] | 0) == 3) {
    HEAP32[i4 + 44 >> 2] = 34;
    STACKTOP = i5;
    return;
   }
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i4 + 4 >> 2] | 0) == 4) {
    HEAP32[i2 + 44 >> 2] = 35;
    STACKTOP = i5;
    return;
   }
   if ((HEAP32[i2 + 4 >> 2] | 0) != 5) {
    STACKTOP = i5;
    return;
   }
   HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] = 36;
   STACKTOP = i5;
   return;
  }
 }
}

function _rlGetGlTextureFormats(i1, i4, i2, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i8 + 16 | 0;
 i5 = i8 + 12 | 0;
 i3 = i8 + 8 | 0;
 i7 = i8 + 4 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 HEAP32[HEAP32[i5 >> 2] >> 2] = -1;
 HEAP32[HEAP32[i3 >> 2] >> 2] = -1;
 HEAP32[HEAP32[i7 >> 2] >> 2] = -1;
 do switch (HEAP32[i9 >> 2] | 0) {
 case 1:
  {
   HEAP32[HEAP32[i5 >> 2] >> 2] = 6409;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6409;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 5121;
   STACKTOP = i8;
   return;
  }
 case 2:
  {
   HEAP32[HEAP32[i5 >> 2] >> 2] = 6410;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6410;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 5121;
   STACKTOP = i8;
   return;
  }
 case 3:
  {
   HEAP32[HEAP32[i5 >> 2] >> 2] = 6407;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6407;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 33635;
   STACKTOP = i8;
   return;
  }
 case 4:
  {
   HEAP32[HEAP32[i5 >> 2] >> 2] = 6407;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6407;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 5121;
   STACKTOP = i8;
   return;
  }
 case 5:
  {
   HEAP32[HEAP32[i5 >> 2] >> 2] = 6408;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6408;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 32820;
   STACKTOP = i8;
   return;
  }
 case 6:
  {
   HEAP32[HEAP32[i5 >> 2] >> 2] = 6408;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6408;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 32819;
   STACKTOP = i8;
   return;
  }
 case 7:
  {
   HEAP32[HEAP32[i5 >> 2] >> 2] = 6408;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6408;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 5121;
   STACKTOP = i8;
   return;
  }
 case 8:
  {
   if (HEAP8[177204] & 1) HEAP32[HEAP32[i5 >> 2] >> 2] = 6409;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6409;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 5126;
   STACKTOP = i8;
   return;
  }
 case 9:
  {
   if (HEAP8[177204] & 1) HEAP32[HEAP32[i5 >> 2] >> 2] = 6407;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6407;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 5126;
   STACKTOP = i8;
   return;
  }
 case 10:
  {
   if (HEAP8[177204] & 1) HEAP32[HEAP32[i5 >> 2] >> 2] = 6408;
   HEAP32[HEAP32[i3 >> 2] >> 2] = 6408;
   HEAP32[HEAP32[i7 >> 2] >> 2] = 5126;
   STACKTOP = i8;
   return;
  }
 case 11:
  {
   if (!(HEAP8[177205] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 33776;
   STACKTOP = i8;
   return;
  }
 case 12:
  {
   if (!(HEAP8[177205] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 33777;
   STACKTOP = i8;
   return;
  }
 case 13:
  {
   if (!(HEAP8[177205] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 33778;
   STACKTOP = i8;
   return;
  }
 case 14:
  {
   if (!(HEAP8[177205] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 33779;
   STACKTOP = i8;
   return;
  }
 case 15:
  {
   if (!(HEAP8[177206] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 36196;
   STACKTOP = i8;
   return;
  }
 case 16:
  {
   if (!(HEAP8[177207] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 37492;
   STACKTOP = i8;
   return;
  }
 case 17:
  {
   if (!(HEAP8[177207] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 37496;
   STACKTOP = i8;
   return;
  }
 case 18:
  {
   if (!(HEAP8[177208] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 35840;
   STACKTOP = i8;
   return;
  }
 case 19:
  {
   if (!(HEAP8[177208] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 35842;
   STACKTOP = i8;
   return;
  }
 case 20:
  {
   if (!(HEAP8[177209] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 37808;
   STACKTOP = i8;
   return;
  }
 case 21:
  {
   if (!(HEAP8[177209] & 1)) {
    STACKTOP = i8;
    return;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 37815;
   STACKTOP = i8;
   return;
  }
 default:
  {
   _TraceLog(4, 35377, i8);
   STACKTOP = i8;
   return;
  }
 } while (0);
}

function _stbv_codebook_decode_scalar_raw(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i11 = i1 + 32 | 0;
 i7 = i1 + 28 | 0;
 i5 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i5 >> 2] = i2;
 _stbv_prep_huffman(HEAP32[i7 >> 2] | 0);
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0)) if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 2084 >> 2] | 0)) {
  HEAP32[i11 >> 2] = -1;
  i13 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i1 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) > 8) {
  if (HEAP32[i1 + 2084 >> 2] | 0) i13 = 7;
 } else if (!(HEAP32[i1 + 32 >> 2] | 0)) i13 = 7;
 if ((i13 | 0) == 7) {
  i13 = _stbv_bit_reverse(HEAP32[(HEAP32[i7 >> 2] | 0) + 1392 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = i13;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 2092 >> 2];
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) <= 1) break;
   HEAP32[i4 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i10 >> 2] >> 1);
   if ((HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 2084 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2] | 0) >>> 0 <= (HEAP32[i6 >> 2] | 0) >>> 0) {
    HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i10 >> 2] >> 1);
   } else HEAP32[i10 >> 2] = HEAP32[i10 >> 2] >> 1;
  }
  if (!(HEAP8[(HEAP32[i5 >> 2] | 0) + 23 >> 0] | 0)) HEAP32[i12 >> 2] = HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 2088 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2];
  HEAP32[i9 >> 2] = HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) >> 0];
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 1396 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) {
   i13 = (HEAP32[i7 >> 2] | 0) + 1392 | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) >>> (HEAP32[i9 >> 2] | 0);
   i13 = (HEAP32[i7 >> 2] | 0) + 1396 | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
   HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
   i13 = HEAP32[i11 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  } else {
   HEAP32[(HEAP32[i7 >> 2] | 0) + 1396 >> 2] = 0;
   HEAP32[i11 >> 2] = -1;
   i13 = HEAP32[i11 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 if (HEAP8[(HEAP32[i5 >> 2] | 0) + 23 >> 0] | 0) ___assert_fail(47590, 47181, 1652, 47601);
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) {
   i13 = 28;
   break;
  }
  if ((HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0) != 255) if ((HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 1392 >> 2] & (1 << HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0]) - 1 | 0)) break;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i13 | 0) == 28) {
  _stbv_error(HEAP32[i7 >> 2] | 0, 21) | 0;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 1396 >> 2] = 0;
  HEAP32[i11 >> 2] = -1;
  i13 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 1396 >> 2] | 0) >= (HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0)) {
  i13 = (HEAP32[i7 >> 2] | 0) + 1392 | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) >>> (HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0);
  i13 = (HEAP32[i7 >> 2] | 0) + 1396 | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0);
  HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
  i13 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 } else {
  HEAP32[(HEAP32[i7 >> 2] | 0) + 1396 >> 2] = 0;
  HEAP32[i11 >> 2] = -1;
  i13 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 return 0;
}

function _load_assets() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 10944 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(10944);
 i10 = i17 + 10496 | 0;
 i12 = i17 + 10752 | 0;
 i3 = i17 + 8192 | 0;
 i2 = i17 + 7936 | 0;
 i6 = i17 + 7680 | 0;
 i9 = i17 + 4608 | 0;
 i13 = i17 + 2560 | 0;
 i15 = i17;
 i5 = i17 + 10916 | 0;
 i1 = i17 + 10880 | 0;
 i7 = i17 + 10848 | 0;
 i8 = i17 + 10816 | 0;
 i11 = i17 + 10796 | 0;
 i14 = i17 + 10776 | 0;
 i16 = i17 + 10756 | 0;
 _memcpy(i3 | 0, 1024, 2295) | 0;
 _memcpy(i2 | 0, 3328, 255) | 0;
 _memcpy(i6 | 0, 3584, 255) | 0;
 _memcpy(i9 | 0, 3840, 3060) | 0;
 _memcpy(i13 | 0, 6912, 2040) | 0;
 _memcpy(i15 | 0, 8960, 2550) | 0;
 i4 = 0;
 do {
  i18 = 156800 + (i4 * 20 | 0) | 0;
  _LoadTexture(i5, i3 + (i4 * 255 | 0) | 0);
  HEAP32[i18 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i18 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i18 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 9);
 _LoadFont(i1, i2);
 i3 = 156992;
 i2 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 _LoadMusicStream(i7, i6);
 HEAP32[43860] = HEAP32[i7 >> 2];
 HEAP32[43861] = HEAP32[i7 + 4 >> 2];
 HEAP32[43862] = HEAP32[i7 + 8 >> 2];
 HEAP32[43863] = HEAP32[i7 + 12 >> 2];
 HEAP32[43864] = HEAP32[i7 + 16 >> 2];
 HEAP32[43865] = HEAP32[i7 + 20 >> 2];
 HEAP32[43866] = HEAP32[i7 + 24 >> 2];
 HEAP32[43867] = HEAP32[i7 + 28 >> 2];
 _LoadMusicStream(i8, 31796);
 HEAP32[43868] = HEAP32[i8 >> 2];
 HEAP32[43869] = HEAP32[i8 + 4 >> 2];
 HEAP32[43870] = HEAP32[i8 + 8 >> 2];
 HEAP32[43871] = HEAP32[i8 + 12 >> 2];
 HEAP32[43872] = HEAP32[i8 + 16 >> 2];
 HEAP32[43873] = HEAP32[i8 + 20 >> 2];
 HEAP32[43874] = HEAP32[i8 + 24 >> 2];
 HEAP32[43875] = HEAP32[i8 + 28 >> 2];
 HEAP32[i10 >> 2] = HEAP32[43860];
 HEAP32[i10 + 4 >> 2] = HEAP32[43861];
 HEAP32[i10 + 8 >> 2] = HEAP32[43862];
 HEAP32[i10 + 12 >> 2] = HEAP32[43863];
 HEAP32[i10 + 16 >> 2] = HEAP32[43864];
 HEAP32[i10 + 20 >> 2] = HEAP32[43865];
 HEAP32[i10 + 24 >> 2] = HEAP32[43866];
 HEAP32[i10 + 28 >> 2] = HEAP32[43867];
 _SetMusicVolume(i10, Math_fround(.100000001));
 HEAP32[i10 >> 2] = HEAP32[43860];
 HEAP32[i10 + 4 >> 2] = HEAP32[43861];
 HEAP32[i10 + 8 >> 2] = HEAP32[43862];
 HEAP32[i10 + 12 >> 2] = HEAP32[43863];
 HEAP32[i10 + 16 >> 2] = HEAP32[43864];
 HEAP32[i10 + 20 >> 2] = HEAP32[43865];
 HEAP32[i10 + 24 >> 2] = HEAP32[43866];
 HEAP32[i10 + 28 >> 2] = HEAP32[43867];
 _PlayMusicStream(i10);
 i2 = 0;
 do {
  i1 = i9 + (i2 * 255 | 0) | 0;
  i3 = 0;
  do {
   _memset(i10 | 0, 0, 255) | 0;
   HEAP32[i12 >> 2] = i3;
   _sprintf(i10, i1, i12) | 0;
   i18 = 157040 + (i2 * 480 | 0) + (i3 * 20 | 0) | 0;
   _LoadTexture(i11, i10);
   HEAP32[i18 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i18 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i18 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i18 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i18 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != 24);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 12);
 i1 = 0;
 do {
  i18 = 162800 + (i1 * 20 | 0) | 0;
  _LoadSound(i14, i13 + (i1 * 255 | 0) | 0);
  HEAP32[i18 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
  HEAP32[i18 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
  HEAP32[i18 + 16 >> 2] = HEAP32[i14 + 16 >> 2];
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 8);
 i1 = 0;
 do {
  i18 = 162960 + (i1 * 20 | 0) | 0;
  _LoadTexture(i16, i15 + (i1 * 255 | 0) | 0);
  HEAP32[i18 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i18 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
  HEAP32[i18 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 10);
 STACKTOP = i17;
 return;
}

function _OnAudioBufferDSPRead(i11, i12, i4, i14) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i4 = i4 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i19 = 0;
 i20 = STACKTOP;
 i21 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i15 = i21 + 60 | 0;
 i13 = i21 + 52 | 0;
 i5 = i21 + 48 | 0;
 i22 = i21 + 44 | 0;
 i1 = i21 + 40 | 0;
 i16 = i21 + 36 | 0;
 i2 = i21 + 32 | 0;
 i10 = i21 + 64 | 0;
 i6 = i21 + 28 | 0;
 i7 = i21 + 24 | 0;
 i17 = i21 + 20 | 0;
 i8 = i21 + 16 | 0;
 i3 = i21 + 12 | 0;
 i9 = i21 + 8 | 0;
 i18 = i21 + 4 | 0;
 HEAP32[i21 + 56 >> 2] = i11;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i22 >> 2] = i14;
 HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
 i14 = HEAP32[(HEAP32[i1 >> 2] | 0) + 46552 >> 2] | 0;
 HEAP32[i16 >> 2] = (HEAP32[(HEAP32[i1 >> 2] | 0) + 46552 >> 2] | 0) >>> 0 > 1 ? (i14 >>> 0) / 2 | 0 : i14;
 HEAP32[i2 >> 2] = ((HEAP32[(HEAP32[i1 >> 2] | 0) + 46548 >> 2] | 0) >>> 0) / ((HEAP32[i16 >> 2] | 0) >>> 0) | 0;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 > 1) {
  _TraceLog(2, 49682, i21);
  HEAP32[i15 >> 2] = 0;
  i22 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i20;
  return i22 | 0;
 }
 HEAP8[i10 >> 0] = HEAP8[(HEAP32[i1 >> 2] | 0) + 46544 >> 0] & 1;
 HEAP8[i10 + 1 >> 0] = HEAP8[(HEAP32[i1 >> 2] | 0) + 46544 + 1 >> 0] & 1;
 i22 = _ma_get_bytes_per_sample(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0) | 0;
 i22 = Math_imul(i22, HEAP32[(HEAP32[i1 >> 2] | 0) + 8 + 8 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i22;
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 46540 >> 2] | 0)) {
   if ((HEAP32[i7 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
  } else if (HEAP8[i10 + (HEAP32[i2 >> 2] | 0) >> 0] & 1) break;
  HEAP32[i17 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
  if (!(HEAP32[i17 >> 2] | 0)) break;
  if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 46540 >> 2] | 0)) {
   i22 = HEAP32[i1 >> 2] | 0;
   HEAP32[i8 >> 2] = (HEAP32[i22 + 46552 >> 2] | 0) - (HEAP32[i22 + 46548 >> 2] | 0);
  } else {
   i22 = Math_imul(HEAP32[i16 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i22;
   HEAP32[i8 >> 2] = (HEAP32[i16 >> 2] | 0) - ((HEAP32[(HEAP32[i1 >> 2] | 0) + 46548 >> 2] | 0) - (HEAP32[i3 >> 2] | 0));
  }
  HEAP32[i9 >> 2] = HEAP32[i17 >> 2];
  if ((HEAP32[i9 >> 2] | 0) >>> 0 > (HEAP32[i8 >> 2] | 0) >>> 0) HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
  i21 = (HEAP32[i13 >> 2] | 0) + (Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
  i22 = HEAP32[i1 >> 2] | 0;
  i22 = (HEAP32[i22 + 46560 >> 2] | 0) + (Math_imul(HEAP32[i22 + 46548 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
  _memcpy(i21 | 0, i22 | 0, Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
  i22 = (HEAP32[i1 >> 2] | 0) + 46548 | 0;
  i21 = HEAP32[i1 >> 2] | 0;
  HEAP32[i22 >> 2] = (((HEAP32[i22 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0) >>> 0) % ((HEAP32[i21 + 46552 >> 2] | 0) >>> 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) {
   HEAP8[(HEAP32[i1 >> 2] | 0) + 46544 + (HEAP32[i2 >> 2] | 0) >> 0] = 1;
   HEAP8[i10 + (HEAP32[i2 >> 2] | 0) >> 0] = 1;
   HEAP32[i2 >> 2] = (((HEAP32[i2 >> 2] | 0) + 1 | 0) >>> 0) % 2 | 0;
   if (!(HEAP8[(HEAP32[i1 >> 2] | 0) + 46538 >> 0] & 1)) {
    i19 = 15;
    break;
   }
  }
 }
 if ((i19 | 0) == 15) _StopAudioBuffer(HEAP32[i1 >> 2] | 0);
 HEAP32[i18 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
 if ((HEAP32[i18 >> 2] | 0) >>> 0 > 0) {
  i22 = (HEAP32[i13 >> 2] | 0) + (Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
  _memset(i22 | 0, 0, Math_imul(HEAP32[i18 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
  if (HEAP32[(HEAP32[i1 >> 2] | 0) + 46540 >> 2] | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
 }
 HEAP32[i15 >> 2] = HEAP32[i7 >> 2];
 i22 = HEAP32[i15 >> 2] | 0;
 STACKTOP = i20;
 return i22 | 0;
}

function _stbi__zbuild_huffman(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i18 = 0;
 i19 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 i13 = i1 + 180 | 0;
 i17 = i1 + 176 | 0;
 i15 = i1 + 172 | 0;
 i12 = i1 + 168 | 0;
 i9 = i1 + 164 | 0;
 i10 = i1 + 160 | 0;
 i7 = i1 + 156 | 0;
 i11 = i1 + 80 | 0;
 i16 = i1;
 i14 = i1 + 152 | 0;
 i6 = i1 + 148 | 0;
 i8 = i1 + 184 | 0;
 i5 = i1 + 144 | 0;
 HEAP32[i17 >> 2] = i4;
 HEAP32[i15 >> 2] = i3;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i10 >> 2] = 0;
 i1 = i16;
 i2 = i1 + 68 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 _memset(HEAP32[i17 >> 2] | 0, 0, 1024) | 0;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
  i4 = i16 + (HEAPU8[(HEAP32[i15 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] << 2) | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 HEAP32[i16 >> 2] = 0;
 HEAP32[i9 >> 2] = 1;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= 16) break;
  if ((HEAP32[i16 + (HEAP32[i9 >> 2] << 2) >> 2] | 0) > (1 << HEAP32[i9 >> 2] | 0)) {
   i18 = 7;
   break;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i18 | 0) == 7) {
  i18 = _stbi__err(54547) | 0;
  HEAP32[i13 >> 2] = i18;
  i18 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 HEAP32[i9 >> 2] = 1;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= 16) break;
  HEAP32[i11 + (HEAP32[i9 >> 2] << 2) >> 2] = HEAP32[i7 >> 2];
  HEAP16[(HEAP32[i17 >> 2] | 0) + 1024 + (HEAP32[i9 >> 2] << 1) >> 1] = HEAP32[i7 >> 2];
  HEAP16[(HEAP32[i17 >> 2] | 0) + 1124 + (HEAP32[i9 >> 2] << 1) >> 1] = HEAP32[i10 >> 2];
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i16 + (HEAP32[i9 >> 2] << 2) >> 2] | 0);
  if (HEAP32[i16 + (HEAP32[i9 >> 2] << 2) >> 2] | 0) if (((HEAP32[i7 >> 2] | 0) - 1 | 0) >= (1 << HEAP32[i9 >> 2] | 0)) {
   i18 = 13;
   break;
  }
  HEAP32[(HEAP32[i17 >> 2] | 0) + 1056 + (HEAP32[i9 >> 2] << 2) >> 2] = HEAP32[i7 >> 2] << 16 - (HEAP32[i9 >> 2] | 0);
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] << 1;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i16 + (HEAP32[i9 >> 2] << 2) >> 2] | 0);
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i18 | 0) == 13) {
  i18 = _stbi__err(54495) | 0;
  HEAP32[i13 >> 2] = i18;
  i18 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 HEAP32[(HEAP32[i17 >> 2] | 0) + 1056 + 64 >> 2] = 65536;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
  HEAP32[i14 >> 2] = HEAPU8[(HEAP32[i15 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0];
  if (HEAP32[i14 >> 2] | 0) {
   i16 = HEAP32[i17 >> 2] | 0;
   i18 = HEAP32[i14 >> 2] << 1 | 0;
   HEAP32[i6 >> 2] = (HEAP32[i11 + (HEAP32[i14 >> 2] << 2) >> 2] | 0) - (HEAPU16[i16 + 1024 + i18 >> 1] | 0) + (HEAPU16[i16 + 1124 + i18 >> 1] | 0);
   HEAP16[i8 >> 1] = HEAP32[i14 >> 2] << 9 | HEAP32[i9 >> 2];
   HEAP8[(HEAP32[i17 >> 2] | 0) + 1156 + (HEAP32[i6 >> 2] | 0) >> 0] = HEAP32[i14 >> 2];
   HEAP16[(HEAP32[i17 >> 2] | 0) + 1444 + (HEAP32[i6 >> 2] << 1) >> 1] = HEAP32[i9 >> 2];
   L28 : do if ((HEAP32[i14 >> 2] | 0) <= 9) {
    i18 = _stbi__bit_reverse(HEAP32[i11 + (HEAP32[i14 >> 2] << 2) >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
    HEAP32[i5 >> 2] = i18;
    while (1) {
     if ((HEAP32[i5 >> 2] | 0) >= 512) break L28;
     HEAP16[(HEAP32[i17 >> 2] | 0) + (HEAP32[i5 >> 2] << 1) >> 1] = HEAP16[i8 >> 1] | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (1 << HEAP32[i14 >> 2]);
    }
   } while (0);
   i18 = i11 + (HEAP32[i14 >> 2] << 2) | 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 HEAP32[i13 >> 2] = 1;
 i18 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i19;
 return i18 | 0;
}

function _ma_pcm_converter_read(i8, i10, i1, i2) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i13 = i15 + 32 | 0;
 i9 = i15 + 60 | 0;
 i11 = i15 + 56 | 0;
 i4 = i15 + 24 | 0;
 i3 = i15 + 48 | 0;
 i12 = i15 + 44 | 0;
 i14 = i15 + 16 | 0;
 i5 = i15 + 40 | 0;
 i6 = i15 + 8 | 0;
 i7 = i15;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i11 >> 2] = i10;
 i10 = i4;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i10 + 4 >> 2] = i2;
 if ((HEAP32[i9 >> 2] | 0) == 0 | (HEAP32[i11 >> 2] | 0) == 0) {
  i14 = i13;
  HEAP32[i14 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  i14 = i13;
  i14 = HEAP32[i14 >> 2] | 0;
  i13 = i13 + 4 | 0;
  i13 = HEAP32[i13 >> 2] | 0;
  setTempRet0(i13 | 0);
  STACKTOP = i15;
  return i14 | 0;
 }
 if (!((HEAPU8[(HEAP32[i9 >> 2] | 0) + 46464 >> 0] | 0) >>> 6 & 1)) {
  if (((HEAPU8[(HEAP32[i9 >> 2] | 0) + 46464 >> 0] | 0) >>> 2 & 1 | 0) != 1) ___assert_fail(36585, 36381, 32512, 36627);
  HEAP32[i3 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2];
  i12 = i4;
  i11 = _ma_format_converter_read((HEAP32[i9 >> 2] | 0) + 64 | 0, HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, HEAP32[i11 >> 2] | 0, i3) | 0;
  i12 = getTempRet0() | 0;
  i14 = i13;
  HEAP32[i14 >> 2] = i11;
  HEAP32[i14 + 4 >> 2] = i12;
  i14 = i13;
  i14 = HEAP32[i14 >> 2] | 0;
  i13 = i13 + 4 | 0;
  i13 = HEAP32[i13 >> 2] | 0;
  setTempRet0(i13 | 0);
  STACKTOP = i15;
  return i14 | 0;
 }
 i10 = i4;
 i8 = HEAP32[i10 + 4 >> 2] | 0;
 if (i8 >>> 0 < 0 | (i8 | 0) == 0 & (HEAP32[i10 >> 2] | 0) >>> 0 <= 4294967295) {
  i12 = HEAP32[i9 >> 2] | 0;
  i12 = FUNCTION_TABLE_iiiii[HEAP32[HEAP32[i9 >> 2] >> 2] & 15](i12 | 0, HEAP32[i11 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0) | 0;
  i14 = i13;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i14 + 4 >> 2] = 0;
  i14 = i13;
  i14 = HEAP32[i14 >> 2] | 0;
  i13 = i13 + 4 | 0;
  i13 = HEAP32[i13 >> 2] | 0;
  setTempRet0(i13 | 0);
  STACKTOP = i15;
  return i14 | 0;
 }
 HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
 i11 = i14;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 while (1) {
  i10 = i14;
  i3 = HEAP32[i10 + 4 >> 2] | 0;
  i11 = i4;
  i8 = HEAP32[i11 + 4 >> 2] | 0;
  if (!(i3 >>> 0 < i8 >>> 0 ? 1 : (i3 | 0) == (i8 | 0) ? (HEAP32[i10 >> 2] | 0) >>> 0 < (HEAP32[i11 >> 2] | 0) >>> 0 : 0)) break;
  i3 = i4;
  i8 = i14;
  i8 = _i64Subtract(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0) | 0;
  i3 = getTempRet0() | 0;
  i10 = i6;
  HEAP32[i10 >> 2] = i8;
  HEAP32[i10 + 4 >> 2] = i3;
  i10 = i6;
  i3 = HEAP32[i10 >> 2] | 0;
  i10 = HEAP32[i10 + 4 >> 2] | 0;
  i8 = i7;
  HEAP32[i8 >> 2] = i3;
  HEAP32[i8 + 4 >> 2] = i10;
  i8 = i7;
  i11 = HEAP32[i8 + 4 >> 2] | 0;
  i8 = i11 >>> 0 > 0 | (i11 | 0) == 0 & (HEAP32[i8 >> 2] | 0) >>> 0 > 4294967295;
  i11 = i7;
  HEAP32[i11 >> 2] = i8 ? -1 : i3;
  HEAP32[i11 + 4 >> 2] = i8 ? 0 : i10;
  i11 = HEAP32[i9 >> 2] | 0;
  i11 = FUNCTION_TABLE_iiiii[HEAP32[HEAP32[i9 >> 2] >> 2] & 15](i11 | 0, HEAP32[i12 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = i11;
  if (!(HEAP32[i5 >> 2] | 0)) break;
  i8 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i9 >> 2] | 0) + 120 + 4 >> 2] | 0) | 0;
  i8 = Math_imul(i8, _ma_get_bytes_per_sample(HEAP32[(HEAP32[i9 >> 2] | 0) + 64 + 4 >> 2] | 0) | 0) | 0;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i8;
  i8 = i14;
  i8 = _i64Add(HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
  i10 = getTempRet0() | 0;
  i11 = i14;
  HEAP32[i11 >> 2] = i8;
  HEAP32[i11 + 4 >> 2] = i10;
 }
 i11 = i14;
 i12 = HEAP32[i11 + 4 >> 2] | 0;
 i14 = i13;
 HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i14 + 4 >> 2] = i12;
 i14 = i13;
 i14 = HEAP32[i14 >> 2] | 0;
 i13 = i13 + 4 | 0;
 i13 = HEAP32[i13 >> 2] | 0;
 setTempRet0(i13 | 0);
 STACKTOP = i15;
 return i14 | 0;
}

function _stbv_vorbis_decode_initial(i2, i5, i4, i7, i6, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i20 = i1 + 48 | 0;
 i9 = i1 + 44 | 0;
 i16 = i1 + 40 | 0;
 i15 = i1 + 36 | 0;
 i18 = i1 + 32 | 0;
 i17 = i1 + 28 | 0;
 i12 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i13 = i1 + 12 | 0;
 i19 = i1 + 8 | 0;
 i14 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i18 >> 2] = i7;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i12 >> 2] = i3;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 1508 >> 2] = 0;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 1504 >> 2] = 0;
 while (1) {
  if (HEAP32[(HEAP32[i9 >> 2] | 0) + 96 >> 2] | 0) {
   i2 = 3;
   break;
  }
  if (!(_stbv_maybe_start_packet(HEAP32[i9 >> 2] | 0) | 0)) {
   i2 = 5;
   break;
  }
  i7 = (_stbv_get_bits(HEAP32[i9 >> 2] | 0, 1) | 0) != 0;
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i7) {
   i2 = 13;
   break;
  }
  if (HEAP8[i1 + 48 >> 0] | 0) {
   i2 = 8;
   break;
  }
  do {} while (-1 != (_stbv_get8_packet(HEAP32[i9 >> 2] | 0) | 0));
 }
 if ((i2 | 0) == 3) {
  HEAP32[i20 >> 2] = 0;
  i20 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 } else if ((i2 | 0) == 5) {
  HEAP32[i20 >> 2] = 0;
  i20 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 } else if ((i2 | 0) == 8) {
  i19 = _stbv_error(HEAP32[i9 >> 2] | 0, 35) | 0;
  HEAP32[i20 >> 2] = i19;
  i20 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 } else if ((i2 | 0) == 13) {
  do if (HEAP32[i1 + 80 >> 2] | 0) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 80 + 4 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 92 >> 2] | 0)) break; else ___assert_fail(47308, 47181, 3140, 47633); while (0);
  i7 = HEAP32[i9 >> 2] | 0;
  i7 = _stbv_get_bits(i7, _stbv_ilog((HEAP32[(HEAP32[i9 >> 2] | 0) + 408 >> 2] | 0) - 1 | 0) | 0) | 0;
  HEAP32[i10 >> 2] = i7;
  if ((HEAP32[i10 >> 2] | 0) == -1) {
   HEAP32[i20 >> 2] = 0;
   i20 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i21;
   return i20 | 0;
  }
  if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 408 >> 2] | 0)) {
   HEAP32[i20 >> 2] = 0;
   i20 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i21;
   return i20 | 0;
  }
  HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i10 >> 2];
  HEAP32[i11 >> 2] = (HEAP32[i9 >> 2] | 0) + 412 + ((HEAP32[i10 >> 2] | 0) * 6 | 0);
  if (HEAP8[HEAP32[i11 >> 2] >> 0] | 0) {
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 116 >> 2];
   i12 = _stbv_get_bits(HEAP32[i9 >> 2] | 0, 1) | 0;
   HEAP32[i19 >> 2] = i12;
   i12 = _stbv_get_bits(HEAP32[i9 >> 2] | 0, 1) | 0;
   HEAP32[i14 >> 2] = i12;
  } else {
   HEAP32[i14 >> 2] = 0;
   HEAP32[i19 >> 2] = 0;
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 112 >> 2];
  }
  HEAP32[i8 >> 2] = HEAP32[i13 >> 2] >> 1;
  if (HEAP32[i19 >> 2] | 0 ? 1 : (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 0) {
   HEAP32[HEAP32[i16 >> 2] >> 2] = 0;
   HEAP32[HEAP32[i15 >> 2] >> 2] = HEAP32[i8 >> 2];
  } else {
   HEAP32[HEAP32[i16 >> 2] >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[(HEAP32[i9 >> 2] | 0) + 112 >> 2] | 0) >> 2;
   HEAP32[HEAP32[i15 >> 2] >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[(HEAP32[i9 >> 2] | 0) + 112 >> 2] | 0) >> 2;
  }
  if (HEAP32[i14 >> 2] | 0 ? 1 : (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 0) {
   HEAP32[HEAP32[i18 >> 2] >> 2] = HEAP32[i8 >> 2];
   HEAP32[HEAP32[i17 >> 2] >> 2] = HEAP32[i13 >> 2];
  } else {
   HEAP32[HEAP32[i18 >> 2] >> 2] = ((HEAP32[i13 >> 2] | 0) * 3 | 0) - (HEAP32[(HEAP32[i9 >> 2] | 0) + 112 >> 2] | 0) >> 2;
   HEAP32[HEAP32[i17 >> 2] >> 2] = ((HEAP32[i13 >> 2] | 0) * 3 | 0) + (HEAP32[(HEAP32[i9 >> 2] | 0) + 112 >> 2] | 0) >> 2;
  }
  HEAP32[i20 >> 2] = 1;
  i20 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 return 0;
}

function _drmp3d_synth_pair(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0, i9 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i5 + 12 | 0;
 i6 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i9 >> 2] = i3;
 f8 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 3584 >> 2]);
 f8 = Math_fround(Math_fround(f8 - Math_fround(HEAPF32[HEAP32[i9 >> 2] >> 2])) * Math_fround(29.0));
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 256 >> 2]);
 f8 = Math_fround(Math_fround(f8 + Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 3328 >> 2])) * Math_fround(213.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 3072 >> 2]);
 f8 = Math_fround(Math_fround(f8 - Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 512 >> 2])) * Math_fround(459.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 768 >> 2]);
 f8 = Math_fround(Math_fround(f8 + Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 2816 >> 2])) * Math_fround(2037.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 2560 >> 2]);
 f8 = Math_fround(Math_fround(f8 - Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 1024 >> 2])) * Math_fround(5153.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 1280 >> 2]);
 f8 = Math_fround(Math_fround(f8 + Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 2304 >> 2])) * Math_fround(6574.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 2048 >> 2]);
 f8 = Math_fround(Math_fround(f8 - Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 1536 >> 2])) * Math_fround(37489.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 1792 >> 2]) * Math_fround(75038.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 i3 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i5 >> 2])) | 0;
 HEAP16[HEAP32[i7 >> 2] >> 1] = i3;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 8;
 f8 = Math_fround(Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 3584 >> 2]) * Math_fround(104.0));
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 3072 >> 2]) * Math_fround(1567.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 2560 >> 2]) * Math_fround(9727.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 2048 >> 2]) * Math_fround(64019.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 1536 >> 2]) * Math_fround(-9975.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 1024 >> 2]) * Math_fround(-45.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(Math_fround(HEAPF32[(HEAP32[i9 >> 2] | 0) + 512 >> 2]) * Math_fround(146.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(Math_fround(HEAPF32[HEAP32[i9 >> 2] >> 2]) * Math_fround(-5.0));
 f8 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f8);
 HEAPF32[i5 >> 2] = f8;
 i5 = _drmp3d_scale_pcm(Math_fround(HEAPF32[i5 >> 2])) | 0;
 HEAP16[(HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] << 4 << 1) >> 1] = i5;
 STACKTOP = i4;
 return;
}

function _stbtt__tesselate_curve(i6, i4, f7, f10, f8, f11, f9, f12, f5, i3) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 f7 = Math_fround(f7);
 f10 = Math_fround(f10);
 f8 = Math_fround(f8);
 f11 = Math_fround(f11);
 f9 = Math_fround(f9);
 f12 = Math_fround(f12);
 f5 = Math_fround(f5);
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i26 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i19 = i1 + 56 | 0;
 i18 = i1 + 52 | 0;
 i16 = i1 + 48 | 0;
 i20 = i1 + 44 | 0;
 i23 = i1 + 40 | 0;
 i21 = i1 + 36 | 0;
 i24 = i1 + 32 | 0;
 i22 = i1 + 28 | 0;
 i25 = i1 + 24 | 0;
 i17 = i1 + 20 | 0;
 i15 = i1 + 16 | 0;
 i13 = i1 + 12 | 0;
 i14 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i18 >> 2] = i6;
 HEAP32[i16 >> 2] = i4;
 HEAPF32[i20 >> 2] = f7;
 HEAPF32[i23 >> 2] = f10;
 HEAPF32[i21 >> 2] = f8;
 HEAPF32[i24 >> 2] = f11;
 HEAPF32[i22 >> 2] = f9;
 HEAPF32[i25 >> 2] = f12;
 HEAPF32[i17 >> 2] = f5;
 HEAP32[i15 >> 2] = i3;
 f12 = Math_fround(HEAPF32[i20 >> 2]);
 f12 = Math_fround(f12 + Math_fround(Math_fround(HEAPF32[i21 >> 2]) * Math_fround(2.0)));
 f12 = Math_fround(Math_fround(f12 + Math_fround(HEAPF32[i22 >> 2])) / Math_fround(4.0));
 HEAPF32[i13 >> 2] = f12;
 f12 = Math_fround(HEAPF32[i23 >> 2]);
 f12 = Math_fround(f12 + Math_fround(Math_fround(HEAPF32[i24 >> 2]) * Math_fround(2.0)));
 f12 = Math_fround(Math_fround(f12 + Math_fround(HEAPF32[i25 >> 2])) / Math_fround(4.0));
 HEAPF32[i14 >> 2] = f12;
 f12 = Math_fround(HEAPF32[i20 >> 2]);
 f12 = Math_fround(Math_fround(f12 + Math_fround(HEAPF32[i22 >> 2])) / Math_fround(2.0));
 f12 = Math_fround(f12 - Math_fround(HEAPF32[i13 >> 2]));
 HEAPF32[i2 >> 2] = f12;
 f12 = Math_fround(HEAPF32[i23 >> 2]);
 f12 = Math_fround(Math_fround(f12 + Math_fround(HEAPF32[i25 >> 2])) / Math_fround(2.0));
 f12 = Math_fround(f12 - Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i1 >> 2] = f12;
 if ((HEAP32[i15 >> 2] | 0) > 16) {
  HEAP32[i19 >> 2] = 1;
  i25 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i26;
  return i25 | 0;
 }
 f11 = Math_fround(HEAPF32[i2 >> 2]);
 f11 = Math_fround(f11 * Math_fround(HEAPF32[i2 >> 2]));
 f12 = Math_fround(HEAPF32[i1 >> 2]);
 f12 = Math_fround(f11 + Math_fround(f12 * Math_fround(HEAPF32[i1 >> 2])));
 i6 = f12 > Math_fround(HEAPF32[i17 >> 2]);
 i1 = HEAP32[i18 >> 2] | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 if (i6) {
  f12 = Math_fround(HEAPF32[i20 >> 2]);
  f11 = Math_fround(HEAPF32[i23 >> 2]);
  f10 = Math_fround(HEAPF32[i20 >> 2]);
  f10 = Math_fround(Math_fround(f10 + Math_fround(HEAPF32[i21 >> 2])) / Math_fround(2.0));
  f9 = Math_fround(HEAPF32[i23 >> 2]);
  f9 = Math_fround(Math_fround(f9 + Math_fround(HEAPF32[i24 >> 2])) / Math_fround(2.0));
  f8 = Math_fround(HEAPF32[i13 >> 2]);
  f7 = Math_fround(HEAPF32[i14 >> 2]);
  f5 = Math_fround(HEAPF32[i17 >> 2]);
  _stbtt__tesselate_curve(i1, i2, f12, f11, f10, f9, f8, f7, f5, (HEAP32[i15 >> 2] | 0) + 1 | 0) | 0;
  f5 = Math_fround(HEAPF32[i13 >> 2]);
  f7 = Math_fround(HEAPF32[i14 >> 2]);
  f8 = Math_fround(HEAPF32[i21 >> 2]);
  f8 = Math_fround(Math_fround(f8 + Math_fround(HEAPF32[i22 >> 2])) / Math_fround(2.0));
  f9 = Math_fround(HEAPF32[i24 >> 2]);
  f9 = Math_fround(Math_fround(f9 + Math_fround(HEAPF32[i25 >> 2])) / Math_fround(2.0));
  f10 = Math_fround(HEAPF32[i22 >> 2]);
  f11 = Math_fround(HEAPF32[i25 >> 2]);
  f12 = Math_fround(HEAPF32[i17 >> 2]);
  _stbtt__tesselate_curve(HEAP32[i18 >> 2] | 0, HEAP32[i16 >> 2] | 0, f5, f7, f8, f9, f10, f11, f12, (HEAP32[i15 >> 2] | 0) + 1 | 0) | 0;
 } else {
  f12 = Math_fround(HEAPF32[i22 >> 2]);
  _stbtt__add_point(i1, HEAP32[i2 >> 2] | 0, f12, Math_fround(HEAPF32[i25 >> 2]));
  HEAP32[HEAP32[i16 >> 2] >> 2] = (HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 1;
 }
 HEAP32[i19 >> 2] = 1;
 i25 = HEAP32[i19 >> 2] | 0;
 STACKTOP = i26;
 return i25 | 0;
}

function _try_realloc_chunk(i12, i11) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = i12 + 4 | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i1 = i9 & -8;
 i6 = i12 + i1 | 0;
 if (!(i9 & 3)) {
  if (i11 >>> 0 < 256) {
   i12 = 0;
   return i12 | 0;
  }
  if (i1 >>> 0 >= (i11 + 4 | 0) >>> 0) if ((i1 - i11 | 0) >>> 0 <= HEAP32[44294] << 1 >>> 0) return i12 | 0;
  i12 = 0;
  return i12 | 0;
 }
 if (i1 >>> 0 >= i11 >>> 0) {
  i1 = i1 - i11 | 0;
  if (i1 >>> 0 <= 15) return i12 | 0;
  i8 = i12 + i11 | 0;
  HEAP32[i10 >> 2] = i9 & 1 | i11 | 2;
  HEAP32[i8 + 4 >> 2] = i1 | 3;
  i11 = i6 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i8, i1);
  return i12 | 0;
 }
 if ((HEAP32[44180] | 0) == (i6 | 0)) {
  i8 = (HEAP32[44177] | 0) + i1 | 0;
  i2 = i8 - i11 | 0;
  i1 = i12 + i11 | 0;
  if (i8 >>> 0 <= i11 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  HEAP32[i10 >> 2] = i9 & 1 | i11 | 2;
  HEAP32[i1 + 4 >> 2] = i2 | 1;
  HEAP32[44180] = i1;
  HEAP32[44177] = i2;
  return i12 | 0;
 }
 if ((HEAP32[44179] | 0) == (i6 | 0)) {
  i2 = (HEAP32[44176] | 0) + i1 | 0;
  if (i2 >>> 0 < i11 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  i1 = i2 - i11 | 0;
  if (i1 >>> 0 > 15) {
   i8 = i12 + i11 | 0;
   i2 = i12 + i2 | 0;
   HEAP32[i10 >> 2] = i9 & 1 | i11 | 2;
   HEAP32[i8 + 4 >> 2] = i1 | 1;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
   i2 = i8;
  } else {
   HEAP32[i10 >> 2] = i9 & 1 | i2 | 2;
   i2 = i12 + i2 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
   i2 = 0;
   i1 = 0;
  }
  HEAP32[44176] = i1;
  HEAP32[44179] = i2;
  return i12 | 0;
 }
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if (i2 & 2 | 0) {
  i12 = 0;
  return i12 | 0;
 }
 i7 = (i2 & -8) + i1 | 0;
 if (i7 >>> 0 < i11 >>> 0) {
  i12 = 0;
  return i12 | 0;
 }
 i8 = i7 - i11 | 0;
 i3 = i2 >>> 3;
 do if (i2 >>> 0 < 256) {
  i2 = HEAP32[i6 + 8 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) {
   HEAP32[44174] = HEAP32[44174] & ~(1 << i3);
   break;
  } else {
   HEAP32[i2 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i2;
   break;
  }
 } else {
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i3 = i6 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     break;
    } else i2 = i3;
   }
   while (1) {
    i4 = i1 + 20 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i4 = i1 + 16 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) break; else {
      i1 = i3;
      i2 = i4;
     }
    } else {
     i1 = i3;
     i2 = i4;
    }
   }
   HEAP32[i2 >> 2] = 0;
   i3 = i1;
  } else {
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i3 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i3;
   i3 = i1;
  } while (0);
  if (i5 | 0) {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   i2 = 177e3 + (i1 << 2) | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i2 >> 2] = i3;
    if (!i3) {
     HEAP32[44175] = HEAP32[44175] & ~(1 << i1);
     break;
    }
   } else {
    i4 = i5 + 16 | 0;
    HEAP32[((HEAP32[i4 >> 2] | 0) == (i6 | 0) ? i4 : i5 + 20 | 0) >> 2] = i3;
    if (!i3) break;
   }
   HEAP32[i3 + 24 >> 2] = i5;
   i2 = i6 + 16 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
  }
 } while (0);
 if (i8 >>> 0 < 16) {
  HEAP32[i10 >> 2] = i9 & 1 | i7 | 2;
  i11 = i12 + i7 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  return i12 | 0;
 } else {
  i6 = i12 + i11 | 0;
  HEAP32[i10 >> 2] = i9 & 1 | i11 | 2;
  HEAP32[i6 + 4 >> 2] = i8 | 3;
  i11 = i12 + i7 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i6, i8);
  return i12 | 0;
 }
 return 0;
}

function _jar_xm_frequency(i2, f5, f4) {
 i2 = i2 | 0;
 f5 = Math_fround(f5);
 f4 = Math_fround(f4);
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i14 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i13 = i1 + 16 | 0;
 i16 = i1 + 12 | 0;
 i12 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i6 = i1 + 26 | 0;
 i9 = i1 + 25 | 0;
 i7 = i1;
 i10 = i1 + 22 | 0;
 i11 = i1 + 20 | 0;
 i3 = i1 + 24 | 0;
 HEAP32[i16 >> 2] = i2;
 HEAPF32[i12 >> 2] = f5;
 HEAPF32[i8 >> 2] = f4;
 switch (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 + 52 >> 2] | 0) {
 case 0:
  {
   f5 = Math_fround(_jar_xm_linear_frequency(Math_fround(Math_fround(HEAPF32[i12 >> 2]) - Math_fround(Math_fround(HEAPF32[i8 >> 2]) * Math_fround(64.0)))));
   HEAPF32[i13 >> 2] = f5;
   f5 = Math_fround(HEAPF32[i13 >> 2]);
   STACKTOP = i15;
   return Math_fround(f5);
  }
 case 1:
  {
   if (Math_fround(HEAPF32[i8 >> 2]) == Math_fround(0.0)) {
    f5 = Math_fround(_jar_xm_amiga_frequency(Math_fround(HEAPF32[i12 >> 2])));
    HEAPF32[i13 >> 2] = f5;
    f5 = Math_fround(HEAPF32[i13 >> 2]);
    STACKTOP = i15;
    return Math_fround(f5);
   }
   HEAP8[i9 >> 0] = 0;
   HEAP8[i6 >> 0] = 0;
   L11 : do if (Math_fround(HEAPF32[i12 >> 2]) > Math_fround(HEAPU16[7368] | 0)) {
    HEAP8[i9 >> 0] = (HEAP8[i9 >> 0] | 0) + -1 << 24 >> 24;
    while (1) {
     f5 = Math_fround(HEAPF32[i12 >> 2]);
     if (!(f5 > Math_fround(HEAPU16[7368] << 0 - (HEAP8[i9 >> 0] | 0) | 0))) break L11;
     HEAP8[i9 >> 0] = (HEAP8[i9 >> 0] | 0) + -1 << 24 >> 24;
    }
   } else {
    f5 = Math_fround(HEAPF32[i12 >> 2]);
    if (f5 < Math_fround(HEAPU16[7380] | 0)) {
     HEAP8[i9 >> 0] = (HEAP8[i9 >> 0] | 0) + 1 << 24 >> 24;
     while (1) {
      f5 = Math_fround(HEAPF32[i12 >> 2]);
      if (!(f5 < Math_fround(HEAPU16[7380] >> HEAP8[i9 >> 0] | 0))) break L11;
      HEAP8[i9 >> 0] = (HEAP8[i9 >> 0] | 0) + 1 << 24 >> 24;
     }
    }
   } while (0);
   HEAP8[i3 >> 0] = 0;
   while (1) {
    if ((HEAPU8[i3 >> 0] | 0) >= 12) break;
    HEAP16[i10 >> 1] = HEAP16[14736 + (HEAPU8[i3 >> 0] << 1) >> 1] | 0;
    HEAP16[i11 >> 1] = HEAP16[14736 + ((HEAPU8[i3 >> 0] | 0) + 1 << 1) >> 1] | 0;
    i1 = HEAP8[i9 >> 0] | 0;
    if ((HEAP8[i9 >> 0] | 0) > 0) {
     HEAP16[i10 >> 1] = HEAPU16[i10 >> 1] >> i1;
     HEAP16[i11 >> 1] = HEAPU16[i11 >> 1] >> HEAP8[i9 >> 0];
    } else if ((i1 | 0) < 0) {
     HEAP16[i10 >> 1] = HEAPU16[i10 >> 1] << 0 - (HEAP8[i9 >> 0] | 0);
     HEAP16[i11 >> 1] = HEAPU16[i11 >> 1] << 0 - (HEAP8[i9 >> 0] | 0);
    }
    f5 = Math_fround(HEAPU16[i11 >> 1] | 0);
    if (f5 <= Math_fround(HEAPF32[i12 >> 2])) {
     f5 = Math_fround(HEAPF32[i12 >> 2]);
     if (f5 <= Math_fround(HEAPU16[i10 >> 1] | 0)) {
      i14 = 21;
      break;
     }
    }
    HEAP8[i3 >> 0] = (HEAP8[i3 >> 0] | 0) + 1 << 24 >> 24;
   }
   if ((i14 | 0) == 21) HEAP8[i6 >> 0] = HEAP8[i3 >> 0] | 0;
   f4 = Math_fround(Math_fround((HEAP8[i9 >> 0] | 0) + 2 | 0) * Math_fround(12.0));
   f4 = Math_fround(f4 + Math_fround(HEAPU8[i6 >> 0] | 0));
   f5 = Math_fround(HEAPF32[i12 >> 2]);
   f5 = Math_fround(f5 - Math_fround(HEAPU16[i10 >> 1] | 0));
   f5 = Math_fround(f4 + Math_fround(f5 / Math_fround((HEAPU16[i11 >> 1] | 0) - (HEAPU16[i10 >> 1] | 0) | 0)));
   HEAPF32[i7 >> 2] = f5;
   f5 = Math_fround(HEAPF32[i7 >> 2]);
   f5 = Math_fround(_jar_xm_amiga_frequency(Math_fround(_jar_xm_amiga_period(Math_fround(f5 + Math_fround(HEAPF32[i8 >> 2]))))));
   HEAPF32[i13 >> 2] = f5;
   f5 = Math_fround(HEAPF32[i13 >> 2]);
   STACKTOP = i15;
   return Math_fround(f5);
  }
 default:
  {
   HEAPF32[i13 >> 2] = Math_fround(0.0);
   f5 = Math_fround(HEAPF32[i13 >> 2]);
   STACKTOP = i15;
   return Math_fround(f5);
  }
 }
 return f0;
}

function _LoadFontEx(i16, i3, i5, i4, i2) {
 i16 = i16 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 i8 = i1 + 172 | 0;
 i7 = i1 + 148 | 0;
 i10 = i1 + 168 | 0;
 i12 = i1 + 144 | 0;
 i11 = i1 + 140 | 0;
 i9 = i1 + 136 | 0;
 i17 = i1 + 100 | 0;
 i6 = i1 + 80 | 0;
 i14 = i1 + 60 | 0;
 i13 = i1 + 56 | 0;
 i15 = i1 + 36 | 0;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i9 >> 2] = i2;
 i2 = i17;
 i3 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
 i12 = HEAP32[i9 >> 2] | 0;
 HEAP32[i17 + 4 >> 2] = (i12 | 0) > 0 ? i12 | 0 : 95;
 i12 = _LoadFontData(HEAP32[i10 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i17 + 4 >> 2] | 0, 0) | 0;
 HEAP32[i17 + 32 >> 2] = i12;
 if (!(HEAP32[i17 + 32 >> 2] | 0)) {
  _GetFontDefault(i1);
  i2 = i17;
  i3 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i3 | 0));
  i2 = i16;
  i1 = i17;
  i3 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i3 | 0));
  STACKTOP = i18;
  return;
 }
 _GenImageFontAtlas(i6, HEAP32[i17 + 32 >> 2] | 0, i17 + 28 | 0, HEAP32[i17 + 4 >> 2] | 0, HEAP32[i17 >> 2] | 0, 2, 0);
 i12 = i17 + 8 | 0;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i8 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 _LoadTextureFromImage(i14, i8);
 HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
 HEAP32[i12 + 16 >> 2] = HEAP32[i14 + 16 >> 2];
 HEAP32[i13 >> 2] = 0;
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i17 + 4 >> 2] | 0)) break;
  i14 = (HEAP32[i17 + 32 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) * 36 | 0) + 16 | 0;
  HEAP32[i8 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
  HEAP32[i8 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
  HEAP32[i8 + 16 >> 2] = HEAP32[i14 + 16 >> 2];
  _UnloadImage(i8);
  i14 = (HEAP32[i17 + 32 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) * 36 | 0) + 16 | 0;
  i12 = (HEAP32[i17 + 28 >> 2] | 0) + (HEAP32[i13 >> 2] << 4) | 0;
  HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  HEAP32[i7 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i8 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  _ImageFromImage(i15, i7, i8);
  HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
  HEAP32[i14 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
  HEAP32[i14 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i8 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 _UnloadImage(i8);
 i2 = i16;
 i1 = i17;
 i3 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 STACKTOP = i18;
 return;
}

function _ma_device_init_by_type__webaudio(i4, i3, i2, i5) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i1 + 28 | 0;
 i12 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i11 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i11 >> 2] = i5;
 if (!(HEAP32[i14 >> 2] | 0)) ___assert_fail(37253, 36381, 25063, 38595);
 if (!(HEAP32[i10 >> 2] | 0)) ___assert_fail(38628, 36381, 25064, 38595);
 if ((HEAP32[i9 >> 2] | 0) == 3) ___assert_fail(38650, 36381, 25065, 38595);
 if (!(HEAP32[i11 >> 2] | 0)) ___assert_fail(36359, 36381, 25066, 38595);
 if ((HEAP32[i9 >> 2] | 0) == 2) if (!(_ma_is_capture_supported__webaudio() | 0)) {
  HEAP32[i12 >> 2] = -104;
  i14 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2];
 if (!(HEAP32[i7 >> 2] | 0)) {
  i14 = HEAP32[i10 >> 2] | 0;
  i14 = _ma_calculate_buffer_size_in_frames_from_milliseconds(HEAP32[i14 + 12 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = i14;
 }
 do if ((HEAP32[i7 >> 2] | 0) >>> 0 < 256) HEAP32[i7 >> 2] = 256; else if ((HEAP32[i7 >> 2] | 0) >>> 0 > 16384) {
  HEAP32[i7 >> 2] = 16384;
  break;
 } else {
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | (HEAP32[i6 >> 2] | 0) >>> 1;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | (HEAP32[i6 >> 2] | 0) >>> 2;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | (HEAP32[i6 >> 2] | 0) >>> 4;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | (HEAP32[i6 >> 2] | 0) >>> 8;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | (HEAP32[i6 >> 2] | 0) >>> 16;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  break;
 } while (0);
 i1 = HEAP32[i10 >> 2] | 0;
 if ((HEAP32[i9 >> 2] | 0) == 2) i1 = HEAP32[i1 + 92 + 8 >> 2] | 0; else i1 = HEAP32[i1 + 44 + 8 >> 2] | 0;
 i14 = _emscripten_asm_const_iiiiii(3, i1 | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0, (HEAP32[i9 >> 2] | 0) == 2 | 0, HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i14;
 if ((HEAP32[i8 >> 2] | 0) < 0) {
  HEAP32[i12 >> 2] = -307;
  i14 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 i1 = HEAP32[i8 >> 2] | 0;
 i2 = (HEAP32[i11 >> 2] | 0) + 94336 | 0;
 if ((HEAP32[i9 >> 2] | 0) == 2) {
  HEAP32[i2 + 4 >> 2] = i1;
  HEAP32[(HEAP32[i11 >> 2] | 0) + 47360 + 304 >> 2] = 5;
  HEAP32[(HEAP32[i11 >> 2] | 0) + 47360 + 308 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 92 + 8 >> 2];
  i14 = (HEAP32[i11 >> 2] | 0) + 47360 | 0;
  _ma_get_standard_channel_map(3, HEAP32[i14 + 308 >> 2] | 0, i14 + 316 | 0);
  i14 = _emscripten_asm_const_ii(4, HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i11 >> 2] | 0) + 47360 + 312 >> 2] = i14;
  HEAP32[(HEAP32[i11 >> 2] | 0) + 47360 + 348 >> 2] = HEAP32[i7 >> 2];
  HEAP32[(HEAP32[i11 >> 2] | 0) + 47360 + 352 >> 2] = 1;
 } else {
  HEAP32[i2 >> 2] = i1;
  HEAP32[(HEAP32[i11 >> 2] | 0) + 384 + 304 >> 2] = 5;
  HEAP32[(HEAP32[i11 >> 2] | 0) + 384 + 308 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 44 + 8 >> 2];
  i14 = (HEAP32[i11 >> 2] | 0) + 384 | 0;
  _ma_get_standard_channel_map(3, HEAP32[i14 + 308 >> 2] | 0, i14 + 316 | 0);
  i14 = _emscripten_asm_const_ii(4, HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i11 >> 2] | 0) + 384 + 312 >> 2] = i14;
  HEAP32[(HEAP32[i11 >> 2] | 0) + 384 + 348 >> 2] = HEAP32[i7 >> 2];
  HEAP32[(HEAP32[i11 >> 2] | 0) + 384 + 352 >> 2] = 1;
 }
 HEAP32[i12 >> 2] = 0;
 i14 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i13;
 return i14 | 0;
}

function _drmp3_seek_to_pcm_frame__seek_table(i7, i2, i3) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0;
 i13 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i11 = i1 + 56 | 0;
 i8 = i1 + 52 | 0;
 i4 = i1 + 32 | 0;
 i12 = i1 + 8 | 0;
 i10 = i1 + 48 | 0;
 i5 = i1 + 60 | 0;
 i6 = i1;
 i9 = i1 + 44 | 0;
 i1 = i1 + 40 | 0;
 HEAP32[i8 >> 2] = i7;
 i7 = i4;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i7 + 4 >> 2] = i3;
 if (!(HEAP32[i8 >> 2] | 0)) ___assert_fail(48609, 48387, 3244, 49031);
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 21136 >> 2] | 0)) ___assert_fail(49067, 48387, 3245, 49031);
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 21140 >> 2] | 0) >>> 0 <= 0) ___assert_fail(49099, 48387, 3246, 49031);
 i7 = i4;
 if (_drmp3_find_closest_seek_point(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, i10) | 0) {
  i10 = (HEAP32[(HEAP32[i8 >> 2] | 0) + 21136 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 24 | 0) | 0;
  HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i12 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
  HEAP32[i12 + 16 >> 2] = HEAP32[i10 + 16 >> 2];
  HEAP32[i12 + 20 >> 2] = HEAP32[i10 + 20 >> 2];
 } else {
  i10 = i12;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  i10 = i12 + 8 | 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP16[i12 + 16 >> 1] = 0;
  HEAP16[i12 + 18 >> 1] = 0;
 }
 i10 = i12;
 if (!(_drmp3__on_seek_64(HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 0) | 0)) {
  HEAP32[i11 >> 2] = 0;
  i13 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 _drmp3_reset(HEAP32[i8 >> 2] | 0);
 HEAP16[i5 >> 1] = 0;
 while (1) {
  if ((HEAPU16[i5 >> 1] | 0) >= (HEAPU16[i12 + 16 >> 1] | 0)) break;
  HEAP32[i1 >> 2] = 0;
  if ((HEAPU16[i5 >> 1] | 0) == ((HEAPU16[i12 + 16 >> 1] | 0) - 1 | 0)) HEAP32[i1 >> 2] = (HEAP32[i8 >> 2] | 0) + 6724;
  i10 = _drmp3_decode_next_frame_ex(HEAP32[i8 >> 2] | 0, HEAP32[i1 >> 2] | 0, 1) | 0;
  HEAP32[i9 >> 2] = i10;
  if (!(HEAP32[i9 >> 2] | 0)) {
   i13 = 17;
   break;
  }
  HEAP16[i5 >> 1] = (HEAP16[i5 >> 1] | 0) + 1 << 16 >> 16;
 }
 if ((i13 | 0) == 17) {
  HEAP32[i11 >> 2] = 0;
  i13 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i10 = i12 + 8 | 0;
 i10 = _i64Subtract(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAPU16[i12 + 18 >> 1] | 0, 0) | 0;
 i13 = getTempRet0() | 0;
 i12 = (HEAP32[i8 >> 2] | 0) + 15944 | 0;
 HEAP32[i12 >> 2] = i10;
 HEAP32[i12 + 4 >> 2] = i13;
 i12 = (HEAP32[i8 >> 2] | 0) + 15944 | 0;
 i13 = (HEAP32[i8 >> 2] | 0) + 15960 | 0;
 HEAPF64[i13 + 5160 >> 3] = (+((HEAP32[i12 >> 2] | 0) >>> 0) + 4294967296.0 * +(HEAP32[i12 + 4 >> 2] | 0)) * (+((HEAP32[i13 >> 2] | 0) >>> 0) / +((HEAP32[i13 + 4 >> 2] | 0) >>> 0));
 i13 = (HEAP32[i8 >> 2] | 0) + 15960 + 5160 | 0;
 d15 = +(+HEAPF64[(HEAP32[i8 >> 2] | 0) + 15960 + 5160 >> 3]);
 HEAPF64[i13 >> 3] = +d15 - +(~~+d15 >>> 0 >>> 0);
 if (+HEAPF64[(HEAP32[i8 >> 2] | 0) + 15960 + 5160 >> 3] > 0.0) {
  i13 = (HEAP32[i8 >> 2] | 0) + 15960 + 5160 + 8 | 0;
  HEAP8[i13 >> 0] = HEAP8[i13 >> 0] & -2 | 1;
 }
 i12 = i4;
 i10 = (HEAP32[i8 >> 2] | 0) + 15944 | 0;
 i10 = _i64Subtract(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0) | 0;
 i12 = getTempRet0() | 0;
 i13 = i6;
 HEAP32[i13 >> 2] = i10;
 HEAP32[i13 + 4 >> 2] = i12;
 i13 = i6;
 i13 = _drmp3_seek_forward_by_pcm_frames__brute_force(HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = i13;
 i13 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _LoadWAV(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = 0;
 i17 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i9 = i1 + 48 | 0;
 i8 = i1 + 40 | 0;
 i7 = i1 + 32 | 0;
 i11 = i1 + 24 | 0;
 i10 = i1 + 16 | 0;
 i6 = i1 + 8 | 0;
 i5 = i1;
 i4 = i1 + 132 | 0;
 i14 = i1 + 120 | 0;
 i13 = i1 + 96 | 0;
 i12 = i1 + 88 | 0;
 i15 = i1 + 68 | 0;
 i1 = i1 + 64 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 HEAP32[i15 + 12 >> 2] = 0;
 HEAP32[i15 + 16 >> 2] = 0;
 i3 = _fopen(HEAP32[i4 >> 2] | 0, 53420) | 0;
 HEAP32[i1 >> 2] = i3;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
  _TraceLog(4, 50373, i5);
  HEAP32[i15 + 16 >> 2] = 0;
  HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
  HEAP32[i2 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
  STACKTOP = i17;
  return;
 }
 _fread(i14, 12, 1, HEAP32[i1 >> 2] | 0) | 0;
 do if (_strncmp(i14, 50407, 4) | 0) i16 = 5; else if (_strncmp(i14 + 8 | 0, 50412, 4) | 0) i16 = 5; else {
  _fread(i13, 24, 1, HEAP32[i1 >> 2] | 0) | 0;
  if ((HEAP8[i13 >> 0] | 0) == 102) if ((HEAP8[i13 + 1 >> 0] | 0) == 109) if ((HEAP8[i13 + 2 >> 0] | 0) == 116) if ((HEAP8[i13 + 3 >> 0] | 0) == 32) {
   if ((HEAP32[i13 + 4 >> 2] | 0) > 16) _fseek(HEAP32[i1 >> 2] | 0, 2, 1) | 0;
   _fread(i12, 8, 1, HEAP32[i1 >> 2] | 0) | 0;
   if ((HEAP8[i12 >> 0] | 0) == 100) if ((HEAP8[i12 + 1 >> 0] | 0) == 97) if ((HEAP8[i12 + 2 >> 0] | 0) == 116) if ((HEAP8[i12 + 3 >> 0] | 0) == 97) {
    i14 = _malloc(HEAP32[i12 + 4 >> 2] | 0) | 0;
    HEAP32[i15 + 16 >> 2] = i14;
    _fread(HEAP32[i15 + 16 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, HEAP32[i1 >> 2] | 0) | 0;
    HEAP32[i15 + 4 >> 2] = HEAP32[i13 + 12 >> 2];
    HEAP32[i15 + 8 >> 2] = HEAP16[i13 + 22 >> 1];
    HEAP32[i15 + 12 >> 2] = HEAP16[i13 + 10 >> 1];
    if ((HEAP32[i15 + 8 >> 2] | 0) != 8) if ((HEAP32[i15 + 8 >> 2] | 0) != 16) if ((HEAP32[i15 + 8 >> 2] | 0) != 32) {
     i14 = HEAP32[i15 + 8 >> 2] | 0;
     HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i7 + 4 >> 2] = i14;
     _TraceLog(4, 50500, i7);
     _WaveFormat(i15, HEAP32[i15 + 4 >> 2] | 0, 16, HEAP32[i15 + 12 >> 2] | 0);
    }
    if ((HEAP32[i15 + 12 >> 2] | 0) >>> 0 > 2) {
     _WaveFormat(i15, HEAP32[i15 + 4 >> 2] | 0, HEAP32[i15 + 8 >> 2] | 0, 2);
     i14 = HEAP32[i15 + 12 >> 2] | 0;
     HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i8 + 4 >> 2] = i14;
     _TraceLog(4, 50563, i8);
    }
    HEAP32[i15 >> 2] = ((((HEAP32[i12 + 4 >> 2] | 0) >>> 0) / ((((HEAP32[i15 + 8 >> 2] | 0) >>> 0) / 8 | 0) >>> 0) | 0) >>> 0) / ((HEAP32[i15 + 12 >> 2] | 0) >>> 0) | 0;
    i12 = HEAP32[i15 + 4 >> 2] | 0;
    i13 = HEAP32[i15 + 8 >> 2] | 0;
    i14 = (HEAP32[i15 + 12 >> 2] | 0) == 1 ? 50085 : 50090;
    HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i9 + 4 >> 2] = i12;
    HEAP32[i9 + 8 >> 2] = i13;
    HEAP32[i9 + 12 >> 2] = i14;
    _TraceLog(3, 50632, i9);
    break;
   }
   HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
   _TraceLog(4, 50475, i11);
   break;
  }
  HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
  _TraceLog(4, 50450, i10);
 } while (0);
 if ((i16 | 0) == 5) {
  HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
  _TraceLog(4, 50417, i6);
 }
 _fclose(HEAP32[i1 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
 STACKTOP = i17;
 return;
}

function _stbir__calculate_filters(i4, i3, i5, f2, f8, i6, i7) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 f2 = Math_fround(f2);
 f8 = Math_fround(f8);
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, f28 = f0;
 i27 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i11 = i1 + 68 | 0;
 i10 = i1 + 64 | 0;
 i12 = i1 + 60 | 0;
 i24 = i1 + 56 | 0;
 i25 = i1 + 52 | 0;
 i17 = i1 + 48 | 0;
 i23 = i1 + 44 | 0;
 i18 = i1 + 40 | 0;
 i26 = i1 + 36 | 0;
 i22 = i1 + 32 | 0;
 i13 = i1 + 28 | 0;
 i14 = i1 + 24 | 0;
 i15 = i1 + 20 | 0;
 i16 = i1 + 16 | 0;
 i19 = i1 + 12 | 0;
 i20 = i1 + 8 | 0;
 i21 = i1 + 4 | 0;
 i9 = i1;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i12 >> 2] = i5;
 HEAPF32[i24 >> 2] = f2;
 HEAPF32[i25 >> 2] = f8;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i23 >> 2] = i7;
 f2 = Math_fround(HEAPF32[i24 >> 2]);
 i7 = _stbir__get_contributors(f2, HEAP32[i12 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0;
 HEAP32[i26 >> 2] = i7;
 i7 = (_stbir__use_upsampling(Math_fround(HEAPF32[i24 >> 2])) | 0) != 0;
 i1 = HEAP32[28352 + (HEAP32[i12 >> 2] << 3) + 4 >> 2] | 0;
 f2 = Math_fround(HEAPF32[i24 >> 2]);
 if (i7) {
  f8 = Math_fround(Math_fround(1.0) / f2);
  f8 = Math_fround(FUNCTION_TABLE_ff[i1 & 7](f8));
  f8 = Math_fround(f8 * Math_fround(HEAPF32[i24 >> 2]));
  HEAPF32[i22 >> 2] = f8;
  HEAP32[i18 >> 2] = 0;
  while (1) {
   if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i26 >> 2] | 0)) break;
   f2 = Math_fround(HEAPF32[i22 >> 2]);
   f28 = Math_fround(HEAPF32[i24 >> 2]);
   _stbir__calculate_sample_range_upsample(HEAP32[i18 >> 2] | 0, f2, f28, Math_fround(HEAPF32[i25 >> 2]), i14, i15, i13);
   i19 = HEAP32[i12 >> 2] | 0;
   f28 = Math_fround(HEAPF32[i24 >> 2]);
   i20 = HEAP32[i14 >> 2] | 0;
   i21 = HEAP32[i15 >> 2] | 0;
   f2 = Math_fround(HEAPF32[i13 >> 2]);
   i23 = _stbir__get_contributor(HEAP32[i11 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0;
   f8 = Math_fround(HEAPF32[i24 >> 2]);
   _stbir__calculate_coefficients_upsample(i19, f28, i20, i21, f2, i23, _stbir__get_coefficient(HEAP32[i10 >> 2] | 0, HEAP32[i12 >> 2] | 0, f8, HEAP32[i18 >> 2] | 0, 0) | 0);
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  }
  STACKTOP = i27;
  return;
 }
 f28 = Math_fround(FUNCTION_TABLE_ff[i1 & 7](f2));
 f28 = Math_fround(f28 / Math_fround(HEAPF32[i24 >> 2]));
 HEAPF32[i16 >> 2] = f28;
 HEAP32[i18 >> 2] = 0;
 while (1) {
  if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i26 >> 2] | 0)) break;
  i13 = HEAP32[i18 >> 2] | 0;
  i13 = i13 - (_stbir__get_filter_pixel_margin(HEAP32[i12 >> 2] | 0, Math_fround(HEAPF32[i24 >> 2])) | 0) | 0;
  HEAP32[i9 >> 2] = i13;
  f8 = Math_fround(HEAPF32[i16 >> 2]);
  f2 = Math_fround(HEAPF32[i24 >> 2]);
  _stbir__calculate_sample_range_downsample(HEAP32[i9 >> 2] | 0, f8, f2, Math_fround(HEAPF32[i25 >> 2]), i20, i21, i19);
  i13 = HEAP32[i12 >> 2] | 0;
  f2 = Math_fround(HEAPF32[i24 >> 2]);
  i14 = HEAP32[i20 >> 2] | 0;
  i15 = HEAP32[i21 >> 2] | 0;
  f8 = Math_fround(HEAPF32[i19 >> 2]);
  i22 = _stbir__get_contributor(HEAP32[i11 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0;
  f28 = Math_fround(HEAPF32[i24 >> 2]);
  _stbir__calculate_coefficients_downsample(i13, f2, i14, i15, f8, i22, _stbir__get_coefficient(HEAP32[i10 >> 2] | 0, HEAP32[i12 >> 2] | 0, f28, HEAP32[i18 >> 2] | 0, 0) | 0);
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
 }
 f28 = Math_fround(HEAPF32[i24 >> 2]);
 _stbir__normalize_downsample_coefficients(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i12 >> 2] | 0, f28, HEAP32[i17 >> 2] | 0, HEAP32[i23 >> 2] | 0);
 STACKTOP = i27;
 return;
}

function _ma_pcm_f32_to_u8__reference(i6, i7, i3, i4, i5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var f1 = f0, i2 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, f28 = f0, f29 = f0;
 i25 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i18 = i2 + 84 | 0;
 i14 = i2 + 80 | 0;
 i8 = i2 + 76 | 0;
 i9 = i2 + 72 | 0;
 i17 = i2 + 68 | 0;
 i13 = i2 + 64 | 0;
 i23 = i2 + 60 | 0;
 i20 = i2 + 56 | 0;
 i16 = i2 + 52 | 0;
 i12 = i2 + 48 | 0;
 i27 = i2 + 44 | 0;
 i26 = i2 + 40 | 0;
 i10 = i2 + 8 | 0;
 i19 = i2 + 36 | 0;
 i22 = i2;
 i21 = i2 + 32 | 0;
 i24 = i2 + 28 | 0;
 i15 = i2 + 24 | 0;
 i11 = i2 + 20 | 0;
 i2 = i2 + 16 | 0;
 HEAP32[i27 >> 2] = i6;
 HEAP32[i26 >> 2] = i7;
 i7 = i10;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i7 + 4 >> 2] = i4;
 HEAP32[i19 >> 2] = i5;
 HEAP32[i21 >> 2] = HEAP32[i27 >> 2];
 HEAP32[i24 >> 2] = HEAP32[i26 >> 2];
 HEAPF32[i15 >> 2] = Math_fround(0.0);
 HEAPF32[i11 >> 2] = Math_fround(0.0);
 if (HEAP32[i19 >> 2] | 0) {
  HEAPF32[i15 >> 2] = Math_fround(-.0078125);
  HEAPF32[i11 >> 2] = Math_fround(.00787401571);
 }
 i27 = i22;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 while (1) {
  i26 = i22;
  i6 = HEAP32[i26 + 4 >> 2] | 0;
  i27 = i10;
  i7 = HEAP32[i27 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i7 >>> 0 | ((i6 | 0) == (i7 | 0) ? (HEAP32[i26 >> 2] | 0) >>> 0 < (HEAP32[i27 >> 2] | 0) >>> 0 : 0))) break;
  f1 = Math_fround(HEAPF32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i22 >> 2] << 2) >> 2]);
  HEAPF32[i2 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i2 >> 2]);
  f29 = Math_fround(HEAPF32[i15 >> 2]);
  f28 = Math_fround(HEAPF32[i11 >> 2]);
  HEAP32[i20 >> 2] = HEAP32[i19 >> 2];
  HEAPF32[i16 >> 2] = f29;
  HEAPF32[i12 >> 2] = f28;
  do if ((HEAP32[i20 >> 2] | 0) == 1) {
   f28 = Math_fround(HEAPF32[i16 >> 2]);
   f29 = Math_fround(HEAPF32[i12 >> 2]);
   HEAPF32[i17 >> 2] = f28;
   HEAPF32[i13 >> 2] = f29;
   f29 = Math_fround(HEAPF32[i17 >> 2]);
   f29 = Math_fround(_ma_rand_range_f32(f29, Math_fround(HEAPF32[i13 >> 2])));
   HEAPF32[i23 >> 2] = f29;
  } else if ((HEAP32[i20 >> 2] | 0) == 2) {
   f28 = Math_fround(HEAPF32[i16 >> 2]);
   f29 = Math_fround(HEAPF32[i12 >> 2]);
   HEAPF32[i18 >> 2] = f28;
   HEAPF32[i14 >> 2] = f29;
   f29 = Math_fround(_ma_rand_range_f32(Math_fround(HEAPF32[i18 >> 2]), Math_fround(0.0)));
   HEAPF32[i8 >> 2] = f29;
   f29 = Math_fround(_ma_rand_range_f32(Math_fround(0.0), Math_fround(HEAPF32[i14 >> 2])));
   HEAPF32[i9 >> 2] = f29;
   f29 = Math_fround(HEAPF32[i8 >> 2]);
   f29 = Math_fround(f29 + Math_fround(HEAPF32[i9 >> 2]));
   HEAPF32[i23 >> 2] = f29;
   break;
  } else {
   HEAPF32[i23 >> 2] = Math_fround(0.0);
   break;
  } while (0);
  f29 = Math_fround(f1 + Math_fround(HEAPF32[i23 >> 2]));
  HEAPF32[i2 >> 2] = f29;
  if (Math_fround(HEAPF32[i2 >> 2]) < Math_fround(-1.0)) f1 = Math_fround(-1.0); else {
   i27 = Math_fround(HEAPF32[i2 >> 2]) > Math_fround(1.0);
   f1 = Math_fround(HEAPF32[i2 >> 2]);
   f1 = i27 ? Math_fround(1.0) : f1;
  }
  HEAPF32[i2 >> 2] = f1;
  f29 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) + Math_fround(1.0));
  HEAPF32[i2 >> 2] = f29;
  f29 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) * Math_fround(127.5));
  HEAPF32[i2 >> 2] = f29;
  i7 = ~~Math_fround(HEAPF32[i2 >> 2]) & 255;
  HEAP8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] = i7;
  i7 = i22;
  i7 = _i64Add(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 1, 0) | 0;
  i26 = getTempRet0() | 0;
  i27 = i22;
  HEAP32[i27 >> 2] = i7;
  HEAP32[i27 + 4 >> 2] = i26;
 }
 STACKTOP = i25;
 return;
}

function _fmod(d12, d1) {
 d12 = +d12;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = 0;
 HEAPF64[tempDoublePtr >> 3] = d12;
 i7 = HEAP32[tempDoublePtr >> 2] | 0;
 i8 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i10 = HEAP32[tempDoublePtr >> 2] | 0;
 i11 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i3 = _bitshift64Lshr(i7 | 0, i8 | 0, 52) | 0;
 getTempRet0() | 0;
 i3 = i3 & 2047;
 i9 = _bitshift64Lshr(i10 | 0, i11 | 0, 52) | 0;
 getTempRet0() | 0;
 i9 = i9 & 2047;
 i13 = i8 & -2147483648;
 i6 = _bitshift64Shl(i10 | 0, i11 | 0, 1) | 0;
 i5 = getTempRet0() | 0;
 L1 : do if ((i6 | 0) == 0 & (i5 | 0) == 0) i14 = 3; else {
  i4 = ___DOUBLE_BITS_628(d1) | 0;
  i2 = (getTempRet0() | 0) & 2147483647;
  if ((i3 | 0) == 2047 | (i2 >>> 0 > 2146435072 | (i2 | 0) == 2146435072 & i4 >>> 0 > 0)) i14 = 3; else {
   i2 = _bitshift64Shl(i7 | 0, i8 | 0, 1) | 0;
   i4 = getTempRet0() | 0;
   if (!(i4 >>> 0 > i5 >>> 0 | (i4 | 0) == (i5 | 0) & i2 >>> 0 > i6 >>> 0)) return +((i2 | 0) == (i6 | 0) & (i4 | 0) == (i5 | 0) ? d12 * 0.0 : d12);
   if (!i3) {
    i2 = _bitshift64Shl(i7 | 0, i8 | 0, 12) | 0;
    i3 = getTempRet0() | 0;
    if ((i3 | 0) > -1 | (i3 | 0) == -1 & i2 >>> 0 > 4294967295) {
     i4 = i3;
     i3 = 0;
     do {
      i3 = i3 + -1 | 0;
      i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
      i4 = getTempRet0() | 0;
     } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295);
    } else i3 = 0;
    i7 = _bitshift64Shl(i7 | 0, i8 | 0, 1 - i3 | 0) | 0;
    i6 = getTempRet0() | 0;
   } else i6 = i8 & 1048575 | 1048576;
   if (!i9) {
    i2 = _bitshift64Shl(i10 | 0, i11 | 0, 12) | 0;
    i4 = getTempRet0() | 0;
    if ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295) {
     i5 = 0;
     do {
      i5 = i5 + -1 | 0;
      i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
      i4 = getTempRet0() | 0;
     } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295);
    } else i5 = 0;
    i10 = _bitshift64Shl(i10 | 0, i11 | 0, 1 - i5 | 0) | 0;
    i8 = getTempRet0() | 0;
    i9 = i5;
   } else i8 = i11 & 1048575 | 1048576;
   i2 = _i64Subtract(i7 | 0, i6 | 0, i10 | 0, i8 | 0) | 0;
   i4 = getTempRet0() | 0;
   i5 = (i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295;
   L25 : do if ((i3 | 0) > (i9 | 0)) {
    while (1) {
     if (i5) {
      if ((i2 | 0) == 0 & (i4 | 0) == 0) break;
     } else {
      i2 = i7;
      i4 = i6;
     }
     i7 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
     i6 = getTempRet0() | 0;
     i3 = i3 + -1 | 0;
     i2 = _i64Subtract(i7 | 0, i6 | 0, i10 | 0, i8 | 0) | 0;
     i4 = getTempRet0() | 0;
     i5 = (i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295;
     if ((i3 | 0) <= (i9 | 0)) break L25;
    }
    d1 = d12 * 0.0;
    break L1;
   } while (0);
   if (i5) {
    if ((i2 | 0) == 0 & (i4 | 0) == 0) {
     d1 = d12 * 0.0;
     break;
    }
   } else {
    i4 = i6;
    i2 = i7;
   }
   if (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0) do {
    i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
    i4 = getTempRet0() | 0;
    i3 = i3 + -1 | 0;
   } while (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0);
   if ((i3 | 0) > 0) {
    i11 = _i64Add(i2 | 0, i4 | 0, 0, -1048576) | 0;
    i2 = getTempRet0() | 0;
    i3 = _bitshift64Shl(i3 | 0, 0, 52) | 0;
    i2 = i2 | (getTempRet0() | 0);
    i3 = i11 | i3;
   } else {
    i3 = _bitshift64Lshr(i2 | 0, i4 | 0, 1 - i3 | 0) | 0;
    i2 = getTempRet0() | 0;
   }
   HEAP32[tempDoublePtr >> 2] = i3;
   HEAP32[tempDoublePtr + 4 >> 2] = i2 | i13;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((i14 | 0) == 3) {
  d1 = d12 * d1;
  d1 = d1 / d1;
 }
 return +d1;
}

function _SetupFramebuffer(i9, i3) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i8 = i12 + 24 | 0;
 i11 = i12 + 16 | 0;
 i7 = i12;
 i10 = i12 + 120 | 0;
 i4 = i12 + 116 | 0;
 i5 = i12 + 112 | 0;
 i1 = i12 + 48 | 0;
 i2 = i12 + 44 | 0;
 i6 = i12 + 40 | 0;
 HEAP32[i12 + 128 >> 2] = i9;
 HEAP32[i12 + 124 >> 2] = i3;
 if ((HEAP32[44040] | 0) <= (HEAP32[44058] | 0)) if ((HEAP32[44041] | 0) <= (HEAP32[44059] | 0)) {
  if ((HEAP32[44040] | 0) >= (HEAP32[44058] | 0)) if ((HEAP32[44041] | 0) >= (HEAP32[44059] | 0)) {
   HEAP32[44062] = HEAP32[44040];
   HEAP32[44063] = HEAP32[44041];
   HEAP32[44064] = 0;
   HEAP32[44065] = 0;
   STACKTOP = i12;
   return;
  }
  i9 = HEAP32[44041] | 0;
  i10 = HEAP32[44058] | 0;
  i11 = HEAP32[44059] | 0;
  HEAP32[i8 >> 2] = HEAP32[44040];
  HEAP32[i8 + 4 >> 2] = i9;
  HEAP32[i8 + 8 >> 2] = i10;
  HEAP32[i8 + 12 >> 2] = i11;
  _TraceLog(3, 36218, i8);
  f13 = Math_fround(HEAP32[44058] | 0);
  f13 = Math_fround(f13 / Math_fround(HEAP32[44059] | 0));
  HEAPF32[i2 >> 2] = f13;
  f13 = Math_fround(HEAP32[44040] | 0);
  f13 = Math_fround(f13 / Math_fround(HEAP32[44041] | 0));
  HEAPF32[i6 >> 2] = f13;
  f13 = Math_fround(HEAPF32[i2 >> 2]);
  if (f13 <= Math_fround(HEAPF32[i6 >> 2])) {
   HEAP32[44062] = HEAP32[44040];
   f13 = Math_fround(HEAP32[44040] | 0);
   i11 = ~~+_llvm_round_f64(+(+Math_fround(f13 / Math_fround(HEAPF32[i2 >> 2]))));
   HEAP32[44063] = i11;
   HEAP32[44064] = 0;
   HEAP32[44065] = (HEAP32[44063] | 0) - (HEAP32[44041] | 0);
   STACKTOP = i12;
   return;
  } else {
   f13 = Math_fround(HEAP32[44041] | 0);
   i11 = ~~+_llvm_round_f64(+(+Math_fround(f13 * Math_fround(HEAPF32[i2 >> 2]))));
   HEAP32[44062] = i11;
   HEAP32[44063] = HEAP32[44041];
   HEAP32[44064] = (HEAP32[44062] | 0) - (HEAP32[44040] | 0);
   HEAP32[44065] = 0;
   STACKTOP = i12;
   return;
  }
 }
 i6 = HEAP32[44041] | 0;
 i8 = HEAP32[44058] | 0;
 i9 = HEAP32[44059] | 0;
 HEAP32[i7 >> 2] = HEAP32[44040];
 HEAP32[i7 + 4 >> 2] = i6;
 HEAP32[i7 + 8 >> 2] = i8;
 HEAP32[i7 + 12 >> 2] = i9;
 _TraceLog(4, 36075, i7);
 f13 = Math_fround(HEAP32[44058] | 0);
 f13 = Math_fround(f13 / Math_fround(HEAP32[44040] | 0));
 HEAPF32[i10 >> 2] = f13;
 f13 = Math_fround(HEAP32[44059] | 0);
 f13 = Math_fround(f13 / Math_fround(HEAP32[44041] | 0));
 HEAPF32[i4 >> 2] = f13;
 f13 = Math_fround(HEAPF32[i10 >> 2]);
 if (f13 <= Math_fround(HEAPF32[i4 >> 2])) {
  HEAP32[44062] = HEAP32[44058];
  f13 = Math_fround(HEAP32[44041] | 0);
  i10 = ~~+_llvm_round_f64(+(+Math_fround(f13 * Math_fround(HEAPF32[i10 >> 2]))));
  HEAP32[44063] = i10;
  HEAP32[44064] = 0;
  HEAP32[44065] = (HEAP32[44059] | 0) - (HEAP32[44063] | 0);
 } else {
  f13 = Math_fround(HEAP32[44040] | 0);
  i10 = ~~+_llvm_round_f64(+(+Math_fround(f13 * Math_fround(HEAPF32[i4 >> 2]))));
  HEAP32[44062] = i10;
  HEAP32[44063] = HEAP32[44059];
  HEAP32[44064] = (HEAP32[44058] | 0) - (HEAP32[44062] | 0);
  HEAP32[44065] = 0;
 }
 f13 = Math_fround(HEAP32[44062] | 0);
 f13 = Math_fround(f13 / Math_fround(HEAP32[44040] | 0));
 HEAPF32[i5 >> 2] = f13;
 f13 = Math_fround(HEAPF32[i5 >> 2]);
 _MatrixScale(i1, f13, Math_fround(HEAPF32[i5 >> 2]), Math_fround(1.0));
 i3 = 176168;
 i2 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 HEAP32[44062] = HEAP32[44058];
 HEAP32[44063] = HEAP32[44059];
 i10 = HEAP32[44063] | 0;
 HEAP32[i11 >> 2] = HEAP32[44062];
 HEAP32[i11 + 4 >> 2] = i10;
 _TraceLog(4, 36153, i11);
 STACKTOP = i12;
 return;
}

function _jar_xm_create_context_safe(i4, i8, i10, i12) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i15 = i1 + 36 | 0;
 i5 = i1 + 32 | 0;
 i9 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i13 = i1 + 20 | 0;
 i14 = i1 + 16 | 0;
 i2 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i6 = i1 + 40 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i13 >> 2] = i12;
 i12 = _jar_xm_check_sanity_preload(HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = i12;
 if (i12 | 0) {
  HEAP32[i15 >> 2] = 1;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i12 = _jar_xm_get_memory_needed_for_context(HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = i12;
 i12 = _malloc(HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = i12;
 if ((HEAP32[i7 >> 2] | 0) == 0 & (HEAP32[i2 >> 2] | 0) >>> 0 > 0) {
  HEAP32[i15 >> 2] = 2;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 _memset(HEAP32[i7 >> 2] | 0, 0, HEAP32[i2 >> 2] | 0) | 0;
 i12 = HEAP32[i7 >> 2] | 0;
 HEAP32[HEAP32[i5 >> 2] >> 2] = i12;
 HEAP32[i3 >> 2] = i12;
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 392;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 324 >> 2] = HEAP32[i13 >> 2];
 i13 = _jar_xm_load_module(HEAP32[i3 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = i13;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 15 & -16;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 384 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + ((HEAPU16[(HEAP32[i3 >> 2] | 0) + 4 + 46 >> 1] | 0) * 288 | 0);
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 15 & -16;
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 332 >> 2] = Math_fround(1.0);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 336 >> 2] = Math_fround(.25);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 340 >> 2] = Math_fround(.0078125);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 344 >> 2] = Math_fround(.0078125);
 HEAP8[i6 >> 0] = 0;
 while (1) {
  if ((HEAPU8[i6 >> 0] | 0 | 0) >= (HEAPU16[(HEAP32[i3 >> 2] | 0) + 4 + 46 >> 1] | 0 | 0)) break;
  HEAP32[i1 >> 2] = (HEAP32[(HEAP32[i3 >> 2] | 0) + 384 >> 2] | 0) + ((HEAPU8[i6 >> 0] | 0) * 288 | 0);
  HEAP8[(HEAP32[i1 >> 2] | 0) + 36 >> 0] = 1;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] = 0;
  HEAP8[(HEAP32[i1 >> 2] | 0) + 104 >> 0] = 1;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 112 >> 2] = 0;
  HEAP8[(HEAP32[i1 >> 2] | 0) + 116 >> 0] = 1;
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] = Math_fround(1.0);
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 56 >> 2] = Math_fround(1.0);
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] = Math_fround(1.0);
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 60 >> 2] = Math_fround(.5);
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] = Math_fround(.5);
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 284 >> 2] = Math_fround(0.0);
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 280 >> 2] = Math_fround(.5);
  HEAP8[i6 >> 0] = (HEAP8[i6 >> 0] | 0) + 1 << 24 >> 24;
 }
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 15 & -16;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 376 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 256;
 i13 = _jar_xm_check_sanity_postload(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = i13;
 if (i13 | 0) {
  _jar_xm_free_context(HEAP32[i3 >> 2] | 0);
  HEAP32[i15 >> 2] = 1;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 } else {
  HEAP32[i15 >> 2] = 0;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 return 0;
}

function _ma_pcm_s32_to_u8__reference(i13, i18, i2, i3, i10) {
 i13 = i13 | 0;
 i18 = i18 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i22 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i17 = i1 + 80 | 0;
 i12 = i1 + 76 | 0;
 i9 = i1 + 72 | 0;
 i8 = i1 + 68 | 0;
 i4 = i1 + 64 | 0;
 i5 = i1 + 60 | 0;
 i6 = i1 + 56 | 0;
 i24 = i1 + 52 | 0;
 i23 = i1 + 48 | 0;
 i7 = i1 + 16 | 0;
 i11 = i1 + 44 | 0;
 i14 = i1 + 40 | 0;
 i19 = i1 + 36 | 0;
 i15 = i1 + 8 | 0;
 i20 = i1 + 32 | 0;
 i16 = i1;
 i21 = i1 + 28 | 0;
 i1 = i1 + 24 | 0;
 HEAP32[i24 >> 2] = i13;
 HEAP32[i23 >> 2] = i18;
 i18 = i7;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i18 + 4 >> 2] = i3;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i14 >> 2] = HEAP32[i24 >> 2];
 HEAP32[i19 >> 2] = HEAP32[i23 >> 2];
 if (!(HEAP32[i11 >> 2] | 0)) {
  i24 = i15;
  HEAP32[i24 >> 2] = 0;
  HEAP32[i24 + 4 >> 2] = 0;
  while (1) {
   i23 = i15;
   i18 = HEAP32[i23 + 4 >> 2] | 0;
   i24 = i7;
   i21 = HEAP32[i24 + 4 >> 2] | 0;
   if (!(i18 >>> 0 < i21 >>> 0 | ((i18 | 0) == (i21 | 0) ? (HEAP32[i23 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0 : 0))) break;
   HEAP32[i20 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2];
   HEAP32[i20 >> 2] = HEAP32[i20 >> 2] >> 24;
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 128;
   HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = HEAP32[i20 >> 2];
   i21 = i15;
   i21 = _i64Add(HEAP32[i21 >> 2] | 0, HEAP32[i21 + 4 >> 2] | 0, 1, 0) | 0;
   i23 = getTempRet0() | 0;
   i24 = i15;
   HEAP32[i24 >> 2] = i21;
   HEAP32[i24 + 4 >> 2] = i23;
  }
  STACKTOP = i22;
  return;
 }
 i24 = i16;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 while (1) {
  i23 = i16;
  i18 = HEAP32[i23 + 4 >> 2] | 0;
  i24 = i7;
  i20 = HEAP32[i24 + 4 >> 2] | 0;
  if (!(i18 >>> 0 < i20 >>> 0 | ((i18 | 0) == (i20 | 0) ? (HEAP32[i23 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i21 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2];
  HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i9 >> 2] = -8388608;
  HEAP32[i8 >> 2] = 8388607;
  do if ((HEAP32[i12 >> 2] | 0) == 1) {
   i24 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i24;
   HEAP32[i17 >> 2] = HEAP32[i4 >> 2];
  } else if ((HEAP32[i12 >> 2] | 0) == 2) {
   i24 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, 0) | 0;
   HEAP32[i5 >> 2] = i24;
   i24 = _ma_rand_range_s32(0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i24;
   HEAP32[i17 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
   break;
  } else {
   HEAP32[i17 >> 2] = 0;
   break;
  } while (0);
  HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
  i23 = HEAP32[i21 >> 2] | 0;
  i24 = HEAP32[i1 >> 2] | 0;
  i24 = _i64Add(i23 | 0, ((i23 | 0) < 0) << 31 >> 31 | 0, i24 | 0, ((i24 | 0) < 0) << 31 >> 31 | 0) | 0;
  i23 = getTempRet0() | 0;
  if ((i23 | 0) < 0 | (i23 | 0) == 0 & i24 >>> 0 <= 2147483647) HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[i1 >> 2] | 0); else HEAP32[i21 >> 2] = 2147483647;
  HEAP32[i21 >> 2] = HEAP32[i21 >> 2] >> 24;
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 128;
  HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] = HEAP32[i21 >> 2];
  i20 = i16;
  i20 = _i64Add(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 1, 0) | 0;
  i23 = getTempRet0() | 0;
  i24 = i16;
  HEAP32[i24 >> 2] = i20;
  HEAP32[i24 + 4 >> 2] = i23;
 }
 STACKTOP = i22;
 return;
}

function _ma_src_read_deinterleaved__passthrough(i5, i2, i3, i7, i6) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 i16 = i1 + 160 | 0;
 i13 = i1 + 184 | 0;
 i9 = i1 + 152 | 0;
 i8 = i1 + 180 | 0;
 i14 = i1 + 176 | 0;
 i12 = i1 + 172 | 0;
 i17 = i1 + 144 | 0;
 i15 = i1;
 i10 = i1 + 168 | 0;
 i11 = i1 + 136 | 0;
 i4 = i1 + 128 | 0;
 HEAP32[i13 >> 2] = i5;
 i5 = i9;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i14 >> 2] = i6;
 i7 = i9;
 i6 = HEAP32[i7 + 4 >> 2] | 0;
 if (i6 >>> 0 < 0 | (i6 | 0) == 0 & (HEAP32[i7 >> 2] | 0) >>> 0 <= 4294967295) {
  i15 = HEAP32[i13 >> 2] | 0;
  i15 = FUNCTION_TABLE_iiiii[HEAP32[i15 + 42048 + 20 >> 2] & 15](i15 | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
  i17 = i16;
  HEAP32[i17 >> 2] = i15;
  HEAP32[i17 + 4 >> 2] = 0;
  i17 = i16;
  i17 = HEAP32[i17 >> 2] | 0;
  i16 = i16 + 4 | 0;
  i16 = HEAP32[i16 >> 2] | 0;
  setTempRet0(i16 | 0);
  STACKTOP = i18;
  return i17 | 0;
 }
 HEAP32[i12 >> 2] = 0;
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i13 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break;
  i7 = HEAP32[i12 >> 2] << 2 | 0;
  HEAP32[i15 + i7 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + i7 >> 2];
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 i8 = i17;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 do {
  i7 = i17;
  i5 = HEAP32[i7 + 4 >> 2] | 0;
  i8 = i9;
  i6 = HEAP32[i8 + 4 >> 2] | 0;
  if (!(i5 >>> 0 < i6 >>> 0 ? 1 : (i5 | 0) == (i6 | 0) ? (HEAP32[i7 >> 2] | 0) >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0 : 0)) break;
  i5 = i9;
  i6 = i17;
  i6 = _i64Subtract(HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0) | 0;
  i5 = getTempRet0() | 0;
  i7 = i11;
  HEAP32[i7 >> 2] = i6;
  HEAP32[i7 + 4 >> 2] = i5;
  i7 = i11;
  i5 = HEAP32[i7 >> 2] | 0;
  i7 = HEAP32[i7 + 4 >> 2] | 0;
  i6 = i4;
  HEAP32[i6 >> 2] = i5;
  HEAP32[i6 + 4 >> 2] = i7;
  i6 = i4;
  i8 = HEAP32[i6 + 4 >> 2] | 0;
  i6 = i8 >>> 0 > 0 | (i8 | 0) == 0 & (HEAP32[i6 >> 2] | 0) >>> 0 > 4294967295;
  i8 = i4;
  HEAP32[i8 >> 2] = i6 ? -1 : i5;
  HEAP32[i8 + 4 >> 2] = i6 ? 0 : i7;
  i8 = HEAP32[i13 >> 2] | 0;
  i8 = FUNCTION_TABLE_iiiii[HEAP32[i8 + 42048 + 20 >> 2] & 15](i8 | 0, HEAP32[i4 >> 2] | 0, i15, HEAP32[i14 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = i8;
  if (!(HEAP32[i10 >> 2] | 0)) break;
  i6 = i17;
  i6 = _i64Add(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0) | 0;
  i7 = getTempRet0() | 0;
  i8 = i17;
  HEAP32[i8 >> 2] = i6;
  HEAP32[i8 + 4 >> 2] = i7;
  HEAP32[i12 >> 2] = 0;
  while (1) {
   i1 = HEAP32[i10 >> 2] | 0;
   if ((HEAP32[i12 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i13 >> 2] | 0) + 42048 + 8 >> 2] | 0) >>> 0) break;
   i8 = i15 + (HEAP32[i12 >> 2] << 2) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (i1 << 2);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  i8 = i4;
  i7 = HEAP32[i8 + 4 >> 2] | 0;
 } while (!(0 < i7 >>> 0 ? 1 : 0 == (i7 | 0) ? i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0 : 0));
 i14 = i17;
 i15 = HEAP32[i14 + 4 >> 2] | 0;
 i17 = i16;
 HEAP32[i17 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i17 + 4 >> 2] = i15;
 i17 = i16;
 i17 = HEAP32[i17 >> 2] | 0;
 i16 = i16 + 4 | 0;
 i16 = HEAP32[i16 >> 2] | 0;
 setTempRet0(i16 | 0);
 STACKTOP = i18;
 return i17 | 0;
}

function _ma_pcm_s32_to_s16__reference(i13, i18, i2, i3, i10) {
 i13 = i13 | 0;
 i18 = i18 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i22 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i17 = i1 + 80 | 0;
 i12 = i1 + 76 | 0;
 i9 = i1 + 72 | 0;
 i8 = i1 + 68 | 0;
 i4 = i1 + 64 | 0;
 i5 = i1 + 60 | 0;
 i6 = i1 + 56 | 0;
 i24 = i1 + 52 | 0;
 i23 = i1 + 48 | 0;
 i7 = i1 + 16 | 0;
 i11 = i1 + 44 | 0;
 i14 = i1 + 40 | 0;
 i19 = i1 + 36 | 0;
 i15 = i1 + 8 | 0;
 i20 = i1 + 32 | 0;
 i16 = i1;
 i21 = i1 + 28 | 0;
 i1 = i1 + 24 | 0;
 HEAP32[i24 >> 2] = i13;
 HEAP32[i23 >> 2] = i18;
 i18 = i7;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i18 + 4 >> 2] = i3;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i14 >> 2] = HEAP32[i24 >> 2];
 HEAP32[i19 >> 2] = HEAP32[i23 >> 2];
 if (!(HEAP32[i11 >> 2] | 0)) {
  i24 = i15;
  HEAP32[i24 >> 2] = 0;
  HEAP32[i24 + 4 >> 2] = 0;
  while (1) {
   i23 = i15;
   i18 = HEAP32[i23 + 4 >> 2] | 0;
   i24 = i7;
   i21 = HEAP32[i24 + 4 >> 2] | 0;
   if (!(i18 >>> 0 < i21 >>> 0 | ((i18 | 0) == (i21 | 0) ? (HEAP32[i23 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0 : 0))) break;
   HEAP32[i20 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2];
   HEAP32[i20 >> 2] = HEAP32[i20 >> 2] >> 16;
   HEAP16[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] << 1) >> 1] = HEAP32[i20 >> 2];
   i21 = i15;
   i21 = _i64Add(HEAP32[i21 >> 2] | 0, HEAP32[i21 + 4 >> 2] | 0, 1, 0) | 0;
   i23 = getTempRet0() | 0;
   i24 = i15;
   HEAP32[i24 >> 2] = i21;
   HEAP32[i24 + 4 >> 2] = i23;
  }
  STACKTOP = i22;
  return;
 }
 i24 = i16;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 while (1) {
  i23 = i16;
  i18 = HEAP32[i23 + 4 >> 2] | 0;
  i24 = i7;
  i20 = HEAP32[i24 + 4 >> 2] | 0;
  if (!(i18 >>> 0 < i20 >>> 0 | ((i18 | 0) == (i20 | 0) ? (HEAP32[i23 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i21 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2];
  HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i9 >> 2] = -32768;
  HEAP32[i8 >> 2] = 32767;
  do if ((HEAP32[i12 >> 2] | 0) == 1) {
   i24 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i24;
   HEAP32[i17 >> 2] = HEAP32[i4 >> 2];
  } else if ((HEAP32[i12 >> 2] | 0) == 2) {
   i24 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, 0) | 0;
   HEAP32[i5 >> 2] = i24;
   i24 = _ma_rand_range_s32(0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i24;
   HEAP32[i17 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
   break;
  } else {
   HEAP32[i17 >> 2] = 0;
   break;
  } while (0);
  HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
  i23 = HEAP32[i21 >> 2] | 0;
  i24 = HEAP32[i1 >> 2] | 0;
  i24 = _i64Add(i23 | 0, ((i23 | 0) < 0) << 31 >> 31 | 0, i24 | 0, ((i24 | 0) < 0) << 31 >> 31 | 0) | 0;
  i23 = getTempRet0() | 0;
  if ((i23 | 0) < 0 | (i23 | 0) == 0 & i24 >>> 0 <= 2147483647) HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[i1 >> 2] | 0); else HEAP32[i21 >> 2] = 2147483647;
  HEAP32[i21 >> 2] = HEAP32[i21 >> 2] >> 16;
  HEAP16[(HEAP32[i14 >> 2] | 0) + (HEAP32[i16 >> 2] << 1) >> 1] = HEAP32[i21 >> 2];
  i20 = i16;
  i20 = _i64Add(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 1, 0) | 0;
  i23 = getTempRet0() | 0;
  i24 = i16;
  HEAP32[i24 >> 2] = i20;
  HEAP32[i24 + 4 >> 2] = i23;
 }
 STACKTOP = i22;
 return;
}

function _DrawLineEx(i7, i6, f1, i9) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 f1 = Math_fround(f1);
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0;
 i12 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i11 = i2 + 48 | 0;
 i8 = i2 + 40 | 0;
 i4 = i2 + 32 | 0;
 i5 = i2 + 28 | 0;
 i10 = i2 + 24 | 0;
 i3 = i2 + 20 | 0;
 HEAPF32[i11 >> 2] = f1;
 f1 = Math_fround(HEAPF32[i7 >> 2]);
 if (f1 > Math_fround(HEAPF32[i6 >> 2])) {
  HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 }
 f13 = Math_fround(HEAPF32[i6 >> 2]);
 f13 = Math_fround(f13 - Math_fround(HEAPF32[i7 >> 2]));
 HEAPF32[i4 >> 2] = f13;
 f13 = Math_fround(HEAPF32[i6 + 4 >> 2]);
 f13 = Math_fround(f13 - Math_fround(HEAPF32[i7 + 4 >> 2]));
 HEAPF32[i5 >> 2] = f13;
 f13 = Math_fround(HEAPF32[i4 >> 2]);
 f13 = Math_fround(f13 * Math_fround(HEAPF32[i4 >> 2]));
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 f1 = Math_fround(Math_sqrt(Math_fround(f13 + Math_fround(f1 * Math_fround(HEAPF32[i5 >> 2])))));
 HEAPF32[i10 >> 2] = f1;
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 f1 = Math_fround(_asinf(Math_fround(f1 / Math_fround(HEAPF32[i10 >> 2]))));
 HEAPF32[i3 >> 2] = f1;
 _GetShapesTexture(i2);
 _rlEnableTexture(HEAP32[i2 >> 2] | 0);
 _rlPushMatrix();
 f1 = Math_fround(HEAPF32[i7 >> 2]);
 _rlTranslatef(f1, Math_fround(HEAPF32[i7 + 4 >> 2]), Math_fround(0.0));
 _rlRotatef(Math_fround(Math_fround(HEAPF32[i3 >> 2]) * Math_fround(57.2957763)), Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
 if (Math_fround(HEAPF32[i11 >> 2]) > Math_fround(1.0)) f1 = Math_fround(Math_fround(-Math_fround(HEAPF32[i11 >> 2])) / Math_fround(2.0)); else f1 = Math_fround(-1.0);
 _rlTranslatef(Math_fround(0.0), f1, Math_fround(0.0));
 _rlBegin(7);
 _rlColor4ub(HEAP8[i9 >> 0] | 0, HEAP8[i9 + 1 >> 0] | 0, HEAP8[i9 + 2 >> 0] | 0, HEAP8[i9 + 3 >> 0] | 0);
 _rlNormal3f(Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
 f13 = Math_fround(HEAPF32[44133]);
 f13 = Math_fround(f13 / Math_fround(HEAP32[44138] | 0));
 f1 = Math_fround(HEAPF32[44134]);
 _rlTexCoord2f(f13, Math_fround(f1 / Math_fround(HEAP32[44139] | 0)));
 _rlVertex2f(Math_fround(0.0), Math_fround(0.0));
 f1 = Math_fround(HEAPF32[44133]);
 f1 = Math_fround(f1 / Math_fround(HEAP32[44138] | 0));
 f13 = Math_fround(HEAPF32[44134]);
 f13 = Math_fround(f13 + Math_fround(HEAPF32[44136]));
 _rlTexCoord2f(f1, Math_fround(f13 / Math_fround(HEAP32[44139] | 0)));
 _rlVertex2f(Math_fround(0.0), Math_fround(HEAPF32[i11 >> 2]));
 f13 = Math_fround(HEAPF32[44133]);
 f13 = Math_fround(f13 + Math_fround(HEAPF32[44135]));
 f13 = Math_fround(f13 / Math_fround(HEAP32[44138] | 0));
 f1 = Math_fround(HEAPF32[44134]);
 f1 = Math_fround(f1 + Math_fround(HEAPF32[44136]));
 _rlTexCoord2f(f13, Math_fround(f1 / Math_fround(HEAP32[44139] | 0)));
 f1 = Math_fround(HEAPF32[i10 >> 2]);
 _rlVertex2f(f1, Math_fround(HEAPF32[i11 >> 2]));
 f1 = Math_fround(HEAPF32[44133]);
 f1 = Math_fround(f1 + Math_fround(HEAPF32[44135]));
 f1 = Math_fround(f1 / Math_fround(HEAP32[44138] | 0));
 f13 = Math_fround(HEAPF32[44134]);
 _rlTexCoord2f(f1, Math_fround(f13 / Math_fround(HEAP32[44139] | 0)));
 _rlVertex2f(Math_fround(HEAPF32[i10 >> 2]), Math_fround(0.0));
 _rlEnd();
 _rlPopMatrix();
 _rlDisableTexture();
 STACKTOP = i12;
 return;
}

function _ma_pcm_interleave_s24__reference(i6, i10, i2, i3, i4) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i8 = i1 + 8 | 0;
 i5 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i9 = i1;
 i1 = i1 + 16 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i10;
 i10 = i8;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 i10 = i9;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 while (1) {
  i13 = i9;
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i8;
  i10 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i10 >>> 0 | ((i6 | 0) == (i10 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   i14 = HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0;
   i13 = i9;
   i13 = ___muldi3(HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0, 3, 0) | 0;
   i13 = _i64Add(i13 | 0, getTempRet0() | 0, 0, 0) | 0;
   getTempRet0() | 0;
   i13 = HEAP8[i14 + i13 >> 0] | 0;
   i14 = HEAP32[i7 >> 2] | 0;
   i10 = i9;
   i10 = ___muldi3(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 3, 0) | 0;
   i6 = getTempRet0() | 0;
   i6 = ___muldi3(i10 | 0, i6 | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i10 = getTempRet0() | 0;
   i10 = _i64Add(i6 | 0, i10 | 0, (HEAP32[i1 >> 2] | 0) * 3 | 0, 0) | 0;
   i10 = _i64Add(i10 | 0, getTempRet0() | 0, 0, 0) | 0;
   getTempRet0() | 0;
   HEAP8[i14 + i10 >> 0] = i13;
   i10 = HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0;
   i14 = i9;
   i14 = ___muldi3(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 3, 0) | 0;
   i14 = _i64Add(i14 | 0, getTempRet0() | 0, 1, 0) | 0;
   getTempRet0() | 0;
   i14 = HEAP8[i10 + i14 >> 0] | 0;
   i10 = HEAP32[i7 >> 2] | 0;
   i13 = i9;
   i13 = ___muldi3(HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0, 3, 0) | 0;
   i6 = getTempRet0() | 0;
   i6 = ___muldi3(i13 | 0, i6 | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i13 = getTempRet0() | 0;
   i13 = _i64Add(i6 | 0, i13 | 0, (HEAP32[i1 >> 2] | 0) * 3 | 0, 0) | 0;
   i13 = _i64Add(i13 | 0, getTempRet0() | 0, 1, 0) | 0;
   getTempRet0() | 0;
   HEAP8[i10 + i13 >> 0] = i14;
   i13 = HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0;
   i10 = i9;
   i10 = ___muldi3(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 3, 0) | 0;
   i10 = _i64Add(i10 | 0, getTempRet0() | 0, 2, 0) | 0;
   getTempRet0() | 0;
   i10 = HEAP8[i13 + i10 >> 0] | 0;
   i13 = HEAP32[i7 >> 2] | 0;
   i14 = i9;
   i14 = ___muldi3(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 3, 0) | 0;
   i6 = getTempRet0() | 0;
   i6 = ___muldi3(i14 | 0, i6 | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i14 = getTempRet0() | 0;
   i14 = _i64Add(i6 | 0, i14 | 0, (HEAP32[i1 >> 2] | 0) * 3 | 0, 0) | 0;
   i14 = _i64Add(i14 | 0, getTempRet0() | 0, 2, 0) | 0;
   getTempRet0() | 0;
   HEAP8[i13 + i14 >> 0] = i10;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  i10 = i9;
  i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i9;
  HEAP32[i14 >> 2] = i10;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i12;
 return;
}

function _drmp3_get_mp3_and_pcm_frame_count(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, f19 = f0, f20 = f0;
 i17 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i12 = i1 + 56 | 0;
 i7 = i1 + 52 | 0;
 i8 = i1 + 48 | 0;
 i9 = i1 + 44 | 0;
 i6 = i1 + 16 | 0;
 i15 = i1 + 8 | 0;
 i14 = i1;
 i16 = i1 + 40 | 0;
 i10 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i11 = i1 + 28 | 0;
 i5 = i1 + 24 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i12 >> 2] = 0;
  i17 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 6700 >> 2] | 0)) {
  HEAP32[i12 >> 2] = 0;
  i17 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i2 = (HEAP32[i7 >> 2] | 0) + 15944 | 0;
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 i4 = i6;
 HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i4 + 4 >> 2] = i3;
 if (!(_drmp3_seek_to_start_of_stream(HEAP32[i7 >> 2] | 0) | 0)) {
  HEAP32[i12 >> 2] = 0;
  i17 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i4 = i15;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i14;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAPF32[i16 >> 2] = Math_fround(0.0);
 while (1) {
  i1 = _drmp3_decode_next_frame_ex(HEAP32[i7 >> 2] | 0, 0, 0) | 0;
  HEAP32[i10 >> 2] = i1;
  i1 = HEAP32[i7 >> 2] | 0;
  if (!(HEAP32[i10 >> 2] | 0)) break;
  f19 = Math_fround((HEAP32[i1 + 6712 >> 2] | 0) >>> 0);
  f19 = Math_fround(f19 / Math_fround((HEAP32[(HEAP32[i7 >> 2] | 0) + 6692 >> 2] | 0) >>> 0));
  HEAPF32[i13 >> 2] = f19;
  if (!(Math_fround(HEAPF32[i13 >> 2]) > Math_fround(0.0))) {
   i17 = 10;
   break;
  }
  f20 = Math_fround(HEAPF32[i16 >> 2]);
  f19 = Math_fround((HEAP32[i10 >> 2] | 0) >>> 0);
  f19 = Math_fround(f20 + Math_fround(f19 / Math_fround(HEAPF32[i13 >> 2])));
  HEAPF32[i11 >> 2] = f19;
  i4 = ~~Math_fround(HEAPF32[i11 >> 2]) >>> 0;
  HEAP32[i5 >> 2] = i4;
  f19 = Math_fround(HEAPF32[i11 >> 2]);
  f19 = Math_fround(f19 - Math_fround((HEAP32[i5 >> 2] | 0) >>> 0));
  HEAPF32[i16 >> 2] = f19;
  i4 = i15;
  i4 = _i64Add(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
  i3 = getTempRet0() | 0;
  i2 = i15;
  HEAP32[i2 >> 2] = i4;
  HEAP32[i2 + 4 >> 2] = i3;
  i2 = i14;
  i2 = _i64Add(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, 1, 0) | 0;
  i3 = getTempRet0() | 0;
  i4 = i14;
  HEAP32[i4 >> 2] = i2;
  HEAP32[i4 + 4 >> 2] = i3;
 }
 if ((i17 | 0) == 10) ___assert_fail(49124, 48387, 3368, 49137);
 if (!(_drmp3_seek_to_start_of_stream(i1) | 0)) {
  HEAP32[i12 >> 2] = 0;
  i17 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i17 = i6;
 if (!(_drmp3_seek_to_pcm_frame(HEAP32[i7 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i17 + 4 >> 2] | 0) | 0)) {
  HEAP32[i12 >> 2] = 0;
  i17 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 if (HEAP32[i8 >> 2] | 0) {
  i16 = HEAP32[i14 + 4 >> 2] | 0;
  i17 = HEAP32[i8 >> 2] | 0;
  HEAP32[i17 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i17 + 4 >> 2] = i16;
 }
 if (HEAP32[i9 >> 2] | 0) {
  i16 = HEAP32[i15 + 4 >> 2] | 0;
  i17 = HEAP32[i9 >> 2] | 0;
  HEAP32[i17 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i17 + 4 >> 2] = i16;
 }
 HEAP32[i12 >> 2] = 1;
 i17 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i18;
 return i17 | 0;
}

function _ma_pcm_s16_to_u8__reference(i13, i18, i2, i3, i10) {
 i13 = i13 | 0;
 i18 = i18 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i22 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i17 = i1 + 72 | 0;
 i12 = i1 + 68 | 0;
 i9 = i1 + 64 | 0;
 i8 = i1 + 60 | 0;
 i4 = i1 + 56 | 0;
 i5 = i1 + 52 | 0;
 i6 = i1 + 48 | 0;
 i24 = i1 + 44 | 0;
 i23 = i1 + 40 | 0;
 i7 = i1 + 16 | 0;
 i11 = i1 + 36 | 0;
 i14 = i1 + 32 | 0;
 i19 = i1 + 28 | 0;
 i15 = i1 + 8 | 0;
 i20 = i1 + 78 | 0;
 i16 = i1;
 i21 = i1 + 76 | 0;
 i1 = i1 + 24 | 0;
 HEAP32[i24 >> 2] = i13;
 HEAP32[i23 >> 2] = i18;
 i18 = i7;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i18 + 4 >> 2] = i3;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i14 >> 2] = HEAP32[i24 >> 2];
 HEAP32[i19 >> 2] = HEAP32[i23 >> 2];
 if (!(HEAP32[i11 >> 2] | 0)) {
  i24 = i15;
  HEAP32[i24 >> 2] = 0;
  HEAP32[i24 + 4 >> 2] = 0;
  while (1) {
   i23 = i15;
   i18 = HEAP32[i23 + 4 >> 2] | 0;
   i24 = i7;
   i21 = HEAP32[i24 + 4 >> 2] | 0;
   if (!(i18 >>> 0 < i21 >>> 0 | ((i18 | 0) == (i21 | 0) ? (HEAP32[i23 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0 : 0))) break;
   HEAP16[i20 >> 1] = HEAP16[(HEAP32[i19 >> 2] | 0) + (HEAP32[i15 >> 2] << 1) >> 1] | 0;
   HEAP16[i20 >> 1] = HEAP16[i20 >> 1] >> 8;
   HEAP16[i20 >> 1] = (HEAP16[i20 >> 1] | 0) + 128;
   HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = HEAP16[i20 >> 1];
   i21 = i15;
   i21 = _i64Add(HEAP32[i21 >> 2] | 0, HEAP32[i21 + 4 >> 2] | 0, 1, 0) | 0;
   i23 = getTempRet0() | 0;
   i24 = i15;
   HEAP32[i24 >> 2] = i21;
   HEAP32[i24 + 4 >> 2] = i23;
  }
  STACKTOP = i22;
  return;
 }
 i24 = i16;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 while (1) {
  i23 = i16;
  i18 = HEAP32[i23 + 4 >> 2] | 0;
  i24 = i7;
  i20 = HEAP32[i24 + 4 >> 2] | 0;
  if (!(i18 >>> 0 < i20 >>> 0 | ((i18 | 0) == (i20 | 0) ? (HEAP32[i23 >> 2] | 0) >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0 : 0))) break;
  HEAP16[i21 >> 1] = HEAP16[(HEAP32[i19 >> 2] | 0) + (HEAP32[i16 >> 2] << 1) >> 1] | 0;
  HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i9 >> 2] = -128;
  HEAP32[i8 >> 2] = 127;
  do if ((HEAP32[i12 >> 2] | 0) == 1) {
   i24 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i24;
   HEAP32[i17 >> 2] = HEAP32[i4 >> 2];
  } else if ((HEAP32[i12 >> 2] | 0) == 2) {
   i24 = _ma_rand_range_s32(HEAP32[i9 >> 2] | 0, 0) | 0;
   HEAP32[i5 >> 2] = i24;
   i24 = _ma_rand_range_s32(0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i24;
   HEAP32[i17 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
   break;
  } else {
   HEAP32[i17 >> 2] = 0;
   break;
  } while (0);
  HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
  if (((HEAP16[i21 >> 1] | 0) + (HEAP32[i1 >> 2] | 0) | 0) <= 32767) HEAP16[i21 >> 1] = (HEAP16[i21 >> 1] | 0) + (HEAP32[i1 >> 2] | 0); else HEAP16[i21 >> 1] = 32767;
  HEAP16[i21 >> 1] = HEAP16[i21 >> 1] >> 8;
  HEAP16[i21 >> 1] = (HEAP16[i21 >> 1] | 0) + 128;
  HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] = HEAP16[i21 >> 1];
  i20 = i16;
  i20 = _i64Add(HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, 1, 0) | 0;
  i23 = getTempRet0() | 0;
  i24 = i16;
  HEAP32[i24 >> 2] = i20;
  HEAP32[i24 + 4 >> 2] = i23;
 }
 STACKTOP = i22;
 return;
}

function _jar_xm_row(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i7 = i1 + 17 | 0;
 i6 = i1 + 16 | 0;
 i8 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i4 >> 2] = i3;
 i1 = HEAP32[i4 >> 2] | 0;
 if (HEAP8[(HEAP32[i4 >> 2] | 0) + 368 >> 0] & 1) {
  HEAP8[(HEAP32[i4 >> 2] | 0) + 348 >> 0] = HEAP8[i1 + 370 >> 0] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  HEAP8[i3 + 349 >> 0] = HEAP8[i3 + 371 >> 0] | 0;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 368 >> 0] = 0;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 369 >> 0] = 0;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 371 >> 0] = 0;
  _jar_xm_post_pattern_change(HEAP32[i4 >> 2] | 0);
 } else if (HEAP8[i1 + 369 >> 0] & 1) {
  i3 = (HEAP32[i4 >> 2] | 0) + 348 | 0;
  HEAP8[i3 >> 0] = (HEAP8[i3 >> 0] | 0) + 1 << 24 >> 24;
  i3 = HEAP32[i4 >> 2] | 0;
  HEAP8[i3 + 349 >> 0] = HEAP8[i3 + 371 >> 0] | 0;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 369 >> 0] = 0;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 371 >> 0] = 0;
  _jar_xm_post_pattern_change(HEAP32[i4 >> 2] | 0);
 }
 i1 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 >> 2] = (HEAP32[i1 + 312 >> 2] | 0) + (HEAPU8[i1 + 56 + (HEAPU8[i3 + 348 >> 0] | 0) >> 0] << 3);
 HEAP8[i7 >> 0] = 0;
 HEAP8[i6 >> 0] = 0;
 while (1) {
  if ((HEAPU8[i6 >> 0] | 0) >= (HEAPU16[(HEAP32[i4 >> 2] | 0) + 4 + 46 >> 1] | 0)) break;
  i3 = HEAP32[i4 >> 2] | 0;
  i3 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) + ((Math_imul(HEAPU8[i3 + 349 >> 0] | 0, HEAPU16[i3 + 4 + 46 >> 1] | 0) | 0) * 5 | 0) | 0;
  HEAP32[i8 >> 2] = i3 + ((HEAPU8[i6 >> 0] | 0) * 5 | 0);
  HEAP32[i2 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 384 >> 2] | 0) + ((HEAPU8[i6 >> 0] | 0) * 288 | 0);
  HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] = HEAP32[i8 >> 2];
  if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] | 0) != 14) i9 = 9; else if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 4 >> 0] >> 4 | 0) != 13) i9 = 9; else HEAP8[(HEAP32[i2 >> 2] | 0) + 93 >> 0] = HEAPU8[(HEAP32[i8 >> 2] | 0) + 4 >> 0] & 15;
  if ((i9 | 0) == 9) {
   i9 = 0;
   _jar_xm_handle_note_and_instrument(HEAP32[i4 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i8 >> 2] | 0);
  }
  if (!(HEAP8[i7 >> 0] & 1)) if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 95 >> 0] | 0) > 0) HEAP8[i7 >> 0] = 1;
  HEAP8[i6 >> 0] = (HEAP8[i6 >> 0] | 0) + 1 << 24 >> 24;
 }
 if (!(HEAP8[i7 >> 0] & 1)) {
  i8 = HEAP32[i4 >> 2] | 0;
  i8 = (HEAP32[i8 + 376 >> 2] | 0) + ((HEAPU8[i8 + 348 >> 0] << 8) + (HEAPU8[i8 + 349 >> 0] | 0)) | 0;
  i9 = HEAP8[i8 >> 0] | 0;
  HEAP8[i8 >> 0] = i9 + 1 << 24 >> 24;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 380 >> 0] = i9;
 }
 i9 = (HEAP32[i4 >> 2] | 0) + 349 | 0;
 HEAP8[i9 >> 0] = (HEAP8[i9 >> 0] | 0) + 1 << 24 >> 24;
 if (HEAP8[(HEAP32[i4 >> 2] | 0) + 368 >> 0] & 1) {
  STACKTOP = i10;
  return;
 }
 if (HEAP8[(HEAP32[i4 >> 2] | 0) + 369 >> 0] & 1) {
  STACKTOP = i10;
  return;
 }
 if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 349 >> 0] | 0) < (HEAPU16[HEAP32[i5 >> 2] >> 1] | 0)) if (HEAPU8[(HEAP32[i4 >> 2] | 0) + 349 >> 0] | 0) {
  STACKTOP = i10;
  return;
 }
 i9 = (HEAP32[i4 >> 2] | 0) + 348 | 0;
 HEAP8[i9 >> 0] = (HEAP8[i9 >> 0] | 0) + 1 << 24 >> 24;
 i9 = HEAP32[i4 >> 2] | 0;
 HEAP8[i9 + 349 >> 0] = HEAP8[i9 + 371 >> 0] | 0;
 HEAP8[(HEAP32[i4 >> 2] | 0) + 371 >> 0] = 0;
 _jar_xm_post_pattern_change(HEAP32[i4 >> 2] | 0);
 STACKTOP = i10;
 return;
}

function _GifGetClosestPaletteColor(i10, i11, i7, i1, i4, i3, i13) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i13 = i13 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i18 = i23 + 64 | 0;
 i19 = i23 + 60 | 0;
 i17 = i23 + 56 | 0;
 i14 = i23 + 52 | 0;
 i16 = i23 + 48 | 0;
 i15 = i23 + 44 | 0;
 i22 = i23 + 40 | 0;
 i9 = i23 + 36 | 0;
 i12 = i23 + 32 | 0;
 i8 = i23 + 28 | 0;
 i2 = i23 + 24 | 0;
 i6 = i23 + 20 | 0;
 i5 = i23 + 8 | 0;
 i20 = i23 + 4 | 0;
 i21 = i23;
 HEAP32[i18 >> 2] = i10;
 HEAP32[i19 >> 2] = i11;
 HEAP32[i17 >> 2] = i7;
 HEAP32[i14 >> 2] = i1;
 HEAP32[i16 >> 2] = i4;
 HEAP32[i15 >> 2] = i3;
 HEAP32[i22 >> 2] = i13;
 if ((HEAP32[i22 >> 2] | 0) > ((1 << HEAP32[HEAP32[i18 >> 2] >> 2]) - 1 | 0)) {
  HEAP32[i9 >> 2] = (HEAP32[i22 >> 2] | 0) - (1 << HEAP32[HEAP32[i18 >> 2] >> 2]);
  if (!(HEAP32[i9 >> 2] | 0)) {
   STACKTOP = i23;
   return;
  }
  HEAP32[i12 >> 2] = (HEAP32[i19 >> 2] | 0) - (HEAPU8[(HEAP32[i18 >> 2] | 0) + 4 + (HEAP32[i9 >> 2] | 0) >> 0] | 0);
  HEAP32[i8 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAPU8[(HEAP32[i18 >> 2] | 0) + 260 + (HEAP32[i9 >> 2] | 0) >> 0] | 0);
  HEAP32[i2 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAPU8[(HEAP32[i18 >> 2] | 0) + 516 + (HEAP32[i9 >> 2] | 0) >> 0] | 0);
  i20 = HEAP32[i12 >> 2] | 0;
  i21 = HEAP32[i8 >> 2] | 0;
  i22 = HEAP32[i2 >> 2] | 0;
  HEAP32[i6 >> 2] = ((HEAP32[i12 >> 2] | 0) < 0 ? 0 - i20 | 0 : i20) + ((HEAP32[i8 >> 2] | 0) < 0 ? 0 - i21 | 0 : i21) + ((HEAP32[i2 >> 2] | 0) < 0 ? 0 - i22 | 0 : i22);
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[HEAP32[i15 >> 2] >> 2] | 0)) {
   STACKTOP = i23;
   return;
  }
  HEAP32[HEAP32[i16 >> 2] >> 2] = HEAP32[i9 >> 2];
  HEAP32[HEAP32[i15 >> 2] >> 2] = HEAP32[i6 >> 2];
  STACKTOP = i23;
  return;
 }
 HEAP32[i5 >> 2] = HEAP32[i19 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i20 >> 2] = HEAP32[i5 + ((HEAPU8[(HEAP32[i18 >> 2] | 0) + 772 + (HEAP32[i22 >> 2] | 0) >> 0] | 0) << 2) >> 2];
 HEAP32[i21 >> 2] = HEAPU8[(HEAP32[i18 >> 2] | 0) + 1027 + (HEAP32[i22 >> 2] | 0) >> 0];
 i1 = HEAP32[i18 >> 2] | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i3 = HEAP32[i17 >> 2] | 0;
 i4 = HEAP32[i14 >> 2] | 0;
 i5 = HEAP32[i16 >> 2] | 0;
 i6 = HEAP32[i15 >> 2] | 0;
 i7 = HEAP32[i22 >> 2] << 1;
 if ((HEAP32[i21 >> 2] | 0) > (HEAP32[i20 >> 2] | 0)) {
  _GifGetClosestPaletteColor(i1, i2, i3, i4, i5, i6, i7);
  if ((HEAP32[HEAP32[i15 >> 2] >> 2] | 0) <= ((HEAP32[i21 >> 2] | 0) - (HEAP32[i20 >> 2] | 0) | 0)) {
   STACKTOP = i23;
   return;
  }
  _GifGetClosestPaletteColor(HEAP32[i18 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0, (HEAP32[i22 >> 2] << 1) + 1 | 0);
  STACKTOP = i23;
  return;
 } else {
  _GifGetClosestPaletteColor(i1, i2, i3, i4, i5, i6, i7 + 1 | 0);
  if ((HEAP32[HEAP32[i15 >> 2] >> 2] | 0) <= ((HEAP32[i20 >> 2] | 0) - (HEAP32[i21 >> 2] | 0) | 0)) {
   STACKTOP = i23;
   return;
  }
  _GifGetClosestPaletteColor(HEAP32[i18 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i22 >> 2] << 1);
  STACKTOP = i23;
  return;
 }
}

function _ma_context_init(i4, i3, i5, i6) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i19 = 0;
 i20 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i18 = i2 + 164 | 0;
 i10 = i2 + 160 | 0;
 i9 = i2 + 156 | 0;
 i7 = i2 + 152 | 0;
 i16 = i2 + 148 | 0;
 i17 = i2 + 144 | 0;
 i12 = i2 + 108 | 0;
 i13 = i2;
 i14 = i2 + 104 | 0;
 i15 = i2 + 100 | 0;
 i11 = i2 + 96 | 0;
 i1 = i2 + 60 | 0;
 i8 = i2 + 56 | 0;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i7 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 if (!(HEAP32[i16 >> 2] | 0)) {
  HEAP32[i18 >> 2] = -2;
  i19 = HEAP32[i18 >> 2] | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 _memset(HEAP32[i16 >> 2] | 0, 0, 204) | 0;
 if (HEAP32[i7 >> 2] | 0) {
  i3 = i12;
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = i3 + 36 | 0;
  do {
   HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
   i3 = i3 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i3 | 0) < (i2 | 0));
 } else {
  _ma_context_config_init(i1);
  i3 = i12;
  i2 = i3 + 36 | 0;
  do {
   HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
   i3 = i3 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i3 | 0) < (i2 | 0));
 }
 HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] = HEAP32[i12 >> 2];
 HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] = HEAP32[i12 + 8 >> 2];
 i7 = _ma_context_init_backend_apis(HEAP32[i16 >> 2] | 0) | 0;
 HEAP32[i17 >> 2] = i7;
 if (HEAP32[i17 >> 2] | 0) {
  HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
  i19 = HEAP32[i18 >> 2] | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 HEAP32[i14 >> 2] = 0;
 while (1) {
  if ((HEAP32[i14 >> 2] | 0) >>> 0 > 13) break;
  HEAP32[i13 + (HEAP32[i14 >> 2] << 2) >> 2] = HEAP32[i14 >> 2];
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 }
 HEAP32[i15 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
 if (!(HEAP32[i15 >> 2] | 0)) {
  HEAP32[i15 >> 2] = i13;
  HEAP32[i11 >> 2] = 14;
 }
 if (!(HEAP32[i15 >> 2] | 0)) ___assert_fail(45256, 36381, 25878, 45289);
 HEAP32[i14 >> 2] = 0;
 while (1) {
  if ((HEAP32[i14 >> 2] | 0) >>> 0 >= (HEAP32[i11 >> 2] | 0) >>> 0) {
   i19 = 26;
   break;
  }
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2];
  HEAP32[i17 >> 2] = -103;
  if ((HEAP32[i8 >> 2] | 0) == 12) {
   i13 = _ma_context_init__webaudio(i12, HEAP32[i16 >> 2] | 0) | 0;
   HEAP32[i17 >> 2] = i13;
  }
  if (!(HEAP32[i17 >> 2] | 0)) break;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 }
 if ((i19 | 0) == 26) {
  _memset(HEAP32[i16 >> 2] | 0, 0, 204) | 0;
  HEAP32[i18 >> 2] = -103;
  i19 = HEAP32[i18 >> 2] | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 i19 = HEAP32[i16 >> 2] | 0;
 i19 = _ma_mutex_init(i19 | 0, i19 + 16 | 0) | 0;
 HEAP32[i17 >> 2] = i19;
 if (HEAP32[i17 >> 2] | 0) _ma_context_post_error(HEAP32[i16 >> 2] | 0, 0, 2, 45305, -311) | 0;
 i19 = HEAP32[i16 >> 2] | 0;
 i19 = _ma_mutex_init(i19 | 0, i19 + 48 | 0) | 0;
 HEAP32[i17 >> 2] = i19;
 if (HEAP32[i17 >> 2] | 0) _ma_context_post_error(HEAP32[i16 >> 2] | 0, 0, 2, 45401, -311) | 0;
 HEAP32[HEAP32[i16 >> 2] >> 2] = HEAP32[i8 >> 2];
 HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
 i19 = HEAP32[i18 >> 2] | 0;
 STACKTOP = i20;
 return i19 | 0;
}

function _ma_pcm_interleave_u8__optimized(i6, i12, i2, i3, i4) {
 i6 = i6 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 44 | 0;
 i13 = i1 + 40 | 0;
 i9 = i1 + 16 | 0;
 i5 = i1 + 36 | 0;
 i8 = i1 + 32 | 0;
 i14 = i1 + 28 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1;
 i1 = i1 + 24 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i13 >> 2] = i12;
 i12 = i9;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i12 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
 if ((HEAP32[i5 >> 2] | 0) == 1) {
  i12 = HEAP32[i7 >> 2] | 0;
  i13 = HEAP32[HEAP32[i13 >> 2] >> 2] | 0;
  i14 = i9;
  i14 = ___muldi3(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 1, 0) | 0;
  _ma_copy_memory_64(i12, i13, i14, getTempRet0() | 0);
  STACKTOP = i15;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) == 2) {
  i13 = i10;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i13 + 4 >> 2] = 0;
  while (1) {
   i12 = i10;
   i7 = HEAP32[i12 + 4 >> 2] | 0;
   i13 = i9;
   i11 = HEAP32[i13 + 4 >> 2] | 0;
   if (!(i7 >>> 0 < i11 >>> 0 | ((i7 | 0) == (i11 | 0) ? (HEAP32[i12 >> 2] | 0) >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0 : 0))) break;
   i11 = HEAP8[(HEAP32[HEAP32[i14 >> 2] >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0;
   i12 = HEAP32[i8 >> 2] | 0;
   i13 = i10;
   i13 = ___muldi3(HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0, 2, 0) | 0;
   i13 = _i64Add(i13 | 0, getTempRet0() | 0, 0, 0) | 0;
   getTempRet0() | 0;
   HEAP8[i12 + i13 >> 0] = i11;
   i13 = HEAP8[(HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0;
   i12 = HEAP32[i8 >> 2] | 0;
   i11 = i10;
   i11 = ___muldi3(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, 2, 0) | 0;
   i11 = _i64Add(i11 | 0, getTempRet0() | 0, 1, 0) | 0;
   getTempRet0() | 0;
   HEAP8[i12 + i11 >> 0] = i13;
   i11 = i10;
   i11 = _i64Add(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, 1, 0) | 0;
   i12 = getTempRet0() | 0;
   i13 = i10;
   HEAP32[i13 >> 2] = i11;
   HEAP32[i13 + 4 >> 2] = i12;
  }
  STACKTOP = i15;
  return;
 }
 i13 = i11;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 while (1) {
  i12 = i11;
  i7 = HEAP32[i12 + 4 >> 2] | 0;
  i13 = i9;
  i10 = HEAP32[i13 + 4 >> 2] | 0;
  if (!(i7 >>> 0 < i10 >>> 0 | ((i7 | 0) == (i10 | 0) ? (HEAP32[i12 >> 2] | 0) >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   i10 = HEAP8[(HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] | 0;
   i12 = HEAP32[i8 >> 2] | 0;
   i7 = i11;
   i7 = ___muldi3(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i13 = getTempRet0() | 0;
   i13 = _i64Add(i7 | 0, i13 | 0, HEAP32[i1 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAP8[i12 + i13 >> 0] = i10;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  i10 = i11;
  i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
  i12 = getTempRet0() | 0;
  i13 = i11;
  HEAP32[i13 >> 2] = i10;
  HEAP32[i13 + 4 >> 2] = i12;
 }
 STACKTOP = i15;
 return;
}

function _stbir__resize_arbitrary(i1, i16, i21, i18, i19, i23, i28, i25, i26, f31, f33, f32, f34, i35, i4, i2, i12, i36, i14, i38, i7, i9, i5) {
 i1 = i1 | 0;
 i16 = i16 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i23 = i23 | 0;
 i28 = i28 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 f31 = Math_fround(f31);
 f33 = Math_fround(f33);
 f32 = Math_fround(f32);
 f34 = Math_fround(f34);
 i35 = i35 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i36 = i36 | 0;
 i14 = i14 | 0;
 i38 = i38 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 var i3 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i17 = 0, i20 = 0, i22 = 0, i24 = 0, i27 = 0, i29 = 0, i30 = 0, i37 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0;
 i39 = STACKTOP;
 i40 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 i30 = i40 + 324 | 0;
 i17 = i40 + 316 | 0;
 i52 = i40 + 312 | 0;
 i51 = i40 + 308 | 0;
 i20 = i40 + 304 | 0;
 i24 = i40 + 300 | 0;
 i50 = i40 + 296 | 0;
 i49 = i40 + 292 | 0;
 i27 = i40 + 288 | 0;
 i47 = i40 + 284 | 0;
 i46 = i40 + 280 | 0;
 i45 = i40 + 276 | 0;
 i44 = i40 + 272 | 0;
 i43 = i40 + 268 | 0;
 i48 = i40 + 264 | 0;
 i3 = i40 + 260 | 0;
 i13 = i40 + 256 | 0;
 i37 = i40 + 252 | 0;
 i42 = i40 + 248 | 0;
 i41 = i40 + 244 | 0;
 i8 = i40 + 240 | 0;
 i10 = i40 + 236 | 0;
 i6 = i40 + 232 | 0;
 i15 = i40 + 12 | 0;
 i29 = i40 + 8 | 0;
 i22 = i40 + 4 | 0;
 i11 = i40;
 HEAP32[i40 + 320 >> 2] = i1;
 HEAP32[i17 >> 2] = i16;
 HEAP32[i52 >> 2] = i21;
 HEAP32[i51 >> 2] = i18;
 HEAP32[i20 >> 2] = i19;
 HEAP32[i24 >> 2] = i23;
 HEAP32[i50 >> 2] = i28;
 HEAP32[i49 >> 2] = i25;
 HEAP32[i27 >> 2] = i26;
 HEAPF32[i47 >> 2] = f31;
 HEAPF32[i46 >> 2] = f33;
 HEAPF32[i45 >> 2] = f32;
 HEAPF32[i44 >> 2] = f34;
 HEAP32[i43 >> 2] = i35;
 HEAP32[i48 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i37 >> 2] = i36;
 HEAP32[i42 >> 2] = i14;
 HEAP32[i41 >> 2] = i38;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i6 >> 2] = i5;
 _stbir__setup(i15, HEAP32[i52 >> 2] | 0, HEAP32[i51 >> 2] | 0, HEAP32[i50 >> 2] | 0, HEAP32[i49 >> 2] | 0, HEAP32[i48 >> 2] | 0);
 f31 = Math_fround(HEAPF32[i47 >> 2]);
 f32 = Math_fround(HEAPF32[i46 >> 2]);
 f33 = Math_fround(HEAPF32[i45 >> 2]);
 f34 = Math_fround(HEAPF32[i44 >> 2]);
 _stbir__calculate_transform(i15, f31, f32, f33, f34, HEAP32[i43 >> 2] | 0);
 _stbir__choose_filter(i15, HEAP32[i42 >> 2] | 0, HEAP32[i41 >> 2] | 0);
 i40 = _stbir__calculate_memory(i15) | 0;
 HEAP32[i22 >> 2] = i40;
 i40 = _malloc(HEAP32[i22 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = i40;
 if (HEAP32[i11 >> 2] | 0) {
  i52 = _stbir__resize_allocated(i15, HEAP32[i17 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i27 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i37 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i22 >> 2] | 0) | 0;
  HEAP32[i29 >> 2] = i52;
  _free(HEAP32[i11 >> 2] | 0);
  HEAP32[i30 >> 2] = HEAP32[i29 >> 2];
  i52 = HEAP32[i30 >> 2] | 0;
  STACKTOP = i39;
  return i52 | 0;
 } else {
  HEAP32[i30 >> 2] = 0;
  i52 = HEAP32[i30 >> 2] | 0;
  STACKTOP = i39;
  return i52 | 0;
 }
 return 0;
}

function _stbv_vorbis_finish_frame(i2, i10, i8, i15) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i15 = i15 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, f18 = f0, f19 = f0;
 i17 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 44 | 0;
 i3 = i1 + 40 | 0;
 i11 = i1 + 36 | 0;
 i9 = i1 + 32 | 0;
 i16 = i1 + 28 | 0;
 i13 = i1 + 24 | 0;
 i4 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i12 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i16 >> 2] = i15;
 L1 : do if (HEAP32[(HEAP32[i3 >> 2] | 0) + 992 >> 2] | 0) {
  HEAP32[i12 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 992 >> 2];
  i15 = _stbv_get_window(HEAP32[i3 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
  HEAP32[i1 >> 2] = i15;
  HEAP32[i5 >> 2] = 0;
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) break L1;
   HEAP32[i7 >> 2] = 0;
   while (1) {
    if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
    f19 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 800 + (HEAP32[i5 >> 2] << 2) >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) << 2) >> 2]);
    f19 = Math_fround(f19 * Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2]));
    f18 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 928 + (HEAP32[i5 >> 2] << 2) >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2]);
    f18 = Math_fround(f19 + Math_fround(f18 * Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) - 1 - (HEAP32[i7 >> 2] | 0) << 2) >> 2])));
    HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 800 + (HEAP32[i5 >> 2] << 2) >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) << 2) >> 2] = f18;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   }
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 992 >> 2];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 992 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i16 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) break;
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if (((HEAP32[i16 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) >= (HEAP32[i11 >> 2] | 0)) break;
   f19 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 800 + (HEAP32[i4 >> 2] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) << 2) >> 2]);
   HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 928 + (HEAP32[i4 >> 2] << 2) >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] = f19;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 if (!(HEAP32[i13 >> 2] | 0)) {
  HEAP32[i14 >> 2] = 0;
  i16 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 if ((HEAP32[i11 >> 2] | 0) < (HEAP32[i16 >> 2] | 0)) HEAP32[i16 >> 2] = HEAP32[i11 >> 2];
 i15 = (HEAP32[i3 >> 2] | 0) + 1416 | 0;
 HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) - (HEAP32[i9 >> 2] | 0));
 HEAP32[i14 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
 i16 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i17;
 return i16 | 0;
}

function _LoadFont(i9, i3) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i13 = i2 + 228 | 0;
 i5 = i2 + 204 | 0;
 i14 = i2;
 i10 = i2 + 224 | 0;
 i11 = i2 + 168 | 0;
 i1 = i2 + 132 | 0;
 i7 = i2 + 96 | 0;
 i12 = i2 + 76 | 0;
 i4 = i2 + 248 | 0;
 i8 = i2 + 40 | 0;
 i6 = i2 + 4 | 0;
 HEAP32[i10 >> 2] = i3;
 i2 = i11;
 i3 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 i3 = _IsFileExtension(HEAP32[i10 >> 2] | 0, 51834) | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 do if (i3) {
  _LoadFontEx(i1, i2, 32, 0, 95);
  i2 = i11;
  i3 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i3 | 0));
 } else {
  i3 = _IsFileExtension(i2, 51844) | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  if (i3) {
   _LoadBMFont(i7, i1);
   i2 = i11;
   i1 = i7;
   i3 = i2 + 36 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i3 | 0));
   break;
  }
  _LoadImage(i12, i1);
  if (HEAP32[i12 >> 2] | 0) {
   HEAP8[i4 >> 0] = -1;
   HEAP8[i4 + 1 >> 0] = 0;
   HEAP8[i4 + 2 >> 0] = -1;
   HEAP8[i4 + 3 >> 0] = -1;
   HEAP32[i5 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i5 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
   HEAP32[i5 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
   HEAP8[i13 >> 0] = HEAP8[i4 >> 0] | 0;
   HEAP8[i13 + 1 >> 0] = HEAP8[i4 + 1 >> 0] | 0;
   HEAP8[i13 + 2 >> 0] = HEAP8[i4 + 2 >> 0] | 0;
   HEAP8[i13 + 3 >> 0] = HEAP8[i4 + 3 >> 0] | 0;
   _LoadFontFromImage(i8, i5, i13, 32);
   i2 = i11;
   i1 = i8;
   i3 = i2 + 36 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i2 | 0) < (i3 | 0));
  };
  HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  HEAP32[i13 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
  _UnloadImage(i13);
 } while (0);
 if (!(HEAP32[i11 + 8 >> 2] | 0)) {
  HEAP32[i14 >> 2] = HEAP32[i10 >> 2];
  _TraceLog(4, 51849, i14);
  _GetFontDefault(i6);
  i2 = i11;
  i1 = i6;
  i3 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i3 | 0));
  i2 = i9;
  i1 = i11;
  i3 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i3 | 0));
  STACKTOP = i15;
  return;
 } else {
  i2 = i11 + 8 | 0;
  HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i13 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
  _SetTextureFilter(i13, 0);
  i2 = i9;
  i1 = i11;
  i3 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i2 | 0) < (i3 | 0));
  STACKTOP = i15;
  return;
 }
}

function _drmp3_read_pcm_frames_f32(i8, i2, i3, i6) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16432 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16432);
 i10 = i1 + 16416 | 0;
 i9 = i1 + 16428 | 0;
 i5 = i1 + 16408 | 0;
 i7 = i1 + 16424 | 0;
 i12 = i1 + 16400 | 0;
 i11 = i1;
 i4 = i1 + 16392 | 0;
 i1 = i1 + 16384 | 0;
 HEAP32[i9 >> 2] = i8;
 i8 = i5;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i8 + 4 >> 2] = i3;
 HEAP32[i7 >> 2] = i6;
 i8 = i12;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 if (HEAP32[i9 >> 2] | 0) if (HEAP32[(HEAP32[i9 >> 2] | 0) + 6696 >> 2] | 0) {
  L4 : do if (!(HEAP32[i7 >> 2] | 0)) while (1) {
   i8 = i5;
   i7 = HEAP32[i8 + 4 >> 2] | 0;
   if (!(i7 >>> 0 > 0 | (i7 | 0) == 0 & (HEAP32[i8 >> 2] | 0) >>> 0 > 0)) break L4;
   i7 = i1;
   HEAP32[i7 >> 2] = 4096 / ((HEAP32[(HEAP32[i9 >> 2] | 0) + 6688 >> 2] | 0) >>> 0) | 0;
   HEAP32[i7 + 4 >> 2] = 0;
   i7 = i1;
   i3 = HEAP32[i7 + 4 >> 2] | 0;
   i8 = i5;
   i6 = HEAP32[i8 + 4 >> 2] | 0;
   if (i3 >>> 0 > i6 >>> 0 | ((i3 | 0) == (i6 | 0) ? (HEAP32[i7 >> 2] | 0) >>> 0 > (HEAP32[i8 >> 2] | 0) >>> 0 : 0)) {
    i6 = i5;
    i7 = HEAP32[i6 + 4 >> 2] | 0;
    i8 = i1;
    HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i8 + 4 >> 2] = i7;
   }
   i6 = i1;
   i6 = _drmp3_read_pcm_frames_f32(HEAP32[i9 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, i11) | 0;
   i7 = getTempRet0() | 0;
   i8 = i4;
   HEAP32[i8 >> 2] = i6;
   HEAP32[i8 + 4 >> 2] = i7;
   i8 = i4;
   if ((HEAP32[i8 >> 2] | 0) == 0 & (HEAP32[i8 + 4 >> 2] | 0) == 0) break L4;
   i8 = i4;
   i7 = i5;
   i8 = _i64Subtract(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0) | 0;
   i7 = getTempRet0() | 0;
   i6 = i5;
   HEAP32[i6 >> 2] = i8;
   HEAP32[i6 + 4 >> 2] = i7;
   i6 = i4;
   i7 = i12;
   i6 = _i64Add(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0) | 0;
   i7 = getTempRet0() | 0;
   i8 = i12;
   HEAP32[i8 >> 2] = i6;
   HEAP32[i8 + 4 >> 2] = i7;
  } else {
   i11 = i5;
   i7 = _drmp3_src_read_frames_ex((HEAP32[i9 >> 2] | 0) + 15960 | 0, HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1) | 0;
   i11 = getTempRet0() | 0;
   i8 = i12;
   HEAP32[i8 >> 2] = i7;
   HEAP32[i8 + 4 >> 2] = i11;
   i8 = i12;
   i11 = (HEAP32[i9 >> 2] | 0) + 15944 | 0;
   i9 = i11;
   i8 = _i64Add(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0) | 0;
   i9 = getTempRet0() | 0;
   HEAP32[i11 >> 2] = i8;
   HEAP32[i11 + 4 >> 2] = i9;
  } while (0);
  i9 = i12;
  i12 = HEAP32[i9 + 4 >> 2] | 0;
  i11 = i10;
  HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i11 + 4 >> 2] = i12;
  i11 = i10;
  i12 = i11;
  i12 = HEAP32[i12 >> 2] | 0;
  i11 = i11 + 4 | 0;
  i11 = HEAP32[i11 >> 2] | 0;
  setTempRet0(i11 | 0);
  STACKTOP = i13;
  return i12 | 0;
 }
 i11 = i10;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 i11 = i10;
 i12 = i11;
 i12 = HEAP32[i12 >> 2] | 0;
 i11 = i11 + 4 | 0;
 i11 = HEAP32[i11 >> 2] | 0;
 setTempRet0(i11 | 0);
 STACKTOP = i13;
 return i12 | 0;
}

function _stbtt_GetGlyphBitmapSubpixel(i7, f14, f16, f18, f20, i3, i23, i5, i25, i27) {
 i7 = i7 | 0;
 f14 = Math_fround(f14);
 f16 = Math_fround(f16);
 f18 = Math_fround(f18);
 f20 = Math_fround(f20);
 i3 = i3 | 0;
 i23 = i23 | 0;
 i5 = i5 | 0;
 i25 = i25 | 0;
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i17 = 0, i19 = 0, i21 = 0, i22 = 0, i24 = 0, i26 = 0, i28 = 0, i29 = 0;
 i29 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i13 = i1 + 80 | 0;
 i8 = i1 + 76 | 0;
 i15 = i1 + 72 | 0;
 i17 = i1 + 68 | 0;
 i19 = i1 + 64 | 0;
 i21 = i1 + 60 | 0;
 i4 = i1 + 56 | 0;
 i24 = i1 + 52 | 0;
 i6 = i1 + 48 | 0;
 i26 = i1 + 44 | 0;
 i28 = i1 + 40 | 0;
 i9 = i1 + 36 | 0;
 i11 = i1 + 32 | 0;
 i10 = i1 + 28 | 0;
 i12 = i1 + 24 | 0;
 i2 = i1 + 8 | 0;
 i22 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAPF32[i15 >> 2] = f14;
 HEAPF32[i17 >> 2] = f16;
 HEAPF32[i19 >> 2] = f18;
 HEAPF32[i21 >> 2] = f20;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i24 >> 2] = i23;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i26 >> 2] = i25;
 HEAP32[i28 >> 2] = i27;
 i27 = _stbtt_GetGlyphShape(HEAP32[i8 >> 2] | 0, HEAP32[i4 >> 2] | 0, i22) | 0;
 HEAP32[i1 >> 2] = i27;
 if (Math_fround(HEAPF32[i15 >> 2]) == Math_fround(0.0)) {
  f20 = Math_fround(HEAPF32[i17 >> 2]);
  HEAPF32[i15 >> 2] = f20;
 }
 do if (Math_fround(HEAPF32[i17 >> 2]) == Math_fround(0.0)) {
  if (!(Math_fround(HEAPF32[i15 >> 2]) == Math_fround(0.0))) {
   f20 = Math_fround(HEAPF32[i15 >> 2]);
   HEAPF32[i17 >> 2] = f20;
   break;
  }
  _free(HEAP32[i22 >> 2] | 0);
  HEAP32[i13 >> 2] = 0;
  i28 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i29;
  return i28 | 0;
 } while (0);
 f16 = Math_fround(HEAPF32[i15 >> 2]);
 f18 = Math_fround(HEAPF32[i17 >> 2]);
 f20 = Math_fround(HEAPF32[i19 >> 2]);
 _stbtt_GetGlyphBitmapBoxSubpixel(HEAP32[i8 >> 2] | 0, HEAP32[i4 >> 2] | 0, f16, f18, f20, Math_fround(HEAPF32[i21 >> 2]), i9, i11, i10, i12);
 HEAP32[i2 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
 HEAP32[i2 + 4 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
 HEAP32[i2 + 12 >> 2] = 0;
 if (HEAP32[i24 >> 2] | 0) HEAP32[HEAP32[i24 >> 2] >> 2] = HEAP32[i2 >> 2];
 if (HEAP32[i6 >> 2] | 0) HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i2 + 4 >> 2];
 if (HEAP32[i26 >> 2] | 0) HEAP32[HEAP32[i26 >> 2] >> 2] = HEAP32[i9 >> 2];
 if (HEAP32[i28 >> 2] | 0) HEAP32[HEAP32[i28 >> 2] >> 2] = HEAP32[i11 >> 2];
 if (HEAP32[i2 >> 2] | 0) if (HEAP32[i2 + 4 >> 2] | 0) {
  i28 = _malloc(Math_imul(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0) | 0) | 0;
  HEAP32[i2 + 12 >> 2] = i28;
  if (HEAP32[i2 + 12 >> 2] | 0) {
   HEAP32[i2 + 8 >> 2] = HEAP32[i2 >> 2];
   f14 = Math_fround(HEAPF32[i15 >> 2]);
   f16 = Math_fround(HEAPF32[i17 >> 2]);
   f18 = Math_fround(HEAPF32[i19 >> 2]);
   f20 = Math_fround(HEAPF32[i21 >> 2]);
   _stbtt_Rasterize(i2, Math_fround(.349999994), HEAP32[i22 >> 2] | 0, HEAP32[i1 >> 2] | 0, f14, f16, f18, f20, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0, 1, HEAP32[HEAP32[i8 >> 2] >> 2] | 0);
  }
 }
 _free(HEAP32[i22 >> 2] | 0);
 HEAP32[i13 >> 2] = HEAP32[i2 + 12 >> 2];
 i28 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i29;
 return i28 | 0;
}

function _ImageAlphaMask(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i13 = i1 + 56 | 0;
 i6 = i1 + 8 | 0;
 i5 = i1;
 i10 = i1 + 52 | 0;
 i12 = i1 + 32 | 0;
 i8 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 HEAP32[i10 >> 2] = i3;
 if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i2 + 4 >> 2] | 0)) if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
  if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) >= 11) {
   _TraceLog(4, 59083, i6);
   STACKTOP = i14;
   return;
  };
  HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i13 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
  _ImageCopy(i12, i13);
  if ((HEAP32[i12 + 16 >> 2] | 0) != 1) _ImageFormat(i12, 1);
  i1 = HEAP32[i10 >> 2] | 0;
  L11 : do if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) == 1) {
   i7 = _malloc((Math_imul(HEAP32[i1 + 4 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[i8 >> 2] = i7;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   while (1) {
    if ((HEAP32[i9 >> 2] | 0) < (Math_imul(HEAP32[i12 + 4 >> 2] | 0, HEAP32[i12 + 8 >> 2] | 0) | 0)) i2 = 1; else {
     i2 = HEAP32[i10 >> 2] | 0;
     i2 = (HEAP32[i9 >> 2] | 0) < (Math_imul(HEAP32[i2 + 4 >> 2] | 0, HEAP32[i2 + 8 >> 2] | 0) | 0);
    }
    i1 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
    if (!i2) break;
    HEAP8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] = HEAP8[i1 + (HEAP32[i9 >> 2] | 0) >> 0] | 0;
    HEAP8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + 1) >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 2;
   }
   _free(i1);
   HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[i8 >> 2];
   HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] = 2;
  } else {
   if ((HEAP32[i1 + 16 >> 2] | 0) != 7) _ImageFormat(HEAP32[i10 >> 2] | 0, 7);
   HEAP32[i7 >> 2] = 0;
   HEAP32[i4 >> 2] = 3;
   while (1) {
    if ((HEAP32[i7 >> 2] | 0) >= (Math_imul(HEAP32[i12 + 4 >> 2] | 0, HEAP32[i12 + 8 >> 2] | 0) | 0)) if ((HEAP32[i7 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) | 0)) break L11;
    HEAP8[(HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 4;
   }
  } while (0);
  HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  HEAP32[i13 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
  _UnloadImage(i13);
  STACKTOP = i14;
  return;
 }
 _TraceLog(4, 59045, i5);
 STACKTOP = i14;
 return;
}

function _draw_game(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i10 = i11 + 40 | 0;
 i6 = i11 + 12 | 0;
 i2 = i11 + 36 | 0;
 i4 = i11 + 8 | 0;
 i3 = i11 + 32 | 0;
 i7 = i11 + 4 | 0;
 i8 = i11;
 _BeginDrawing();
 i5 = i9 + 12 | 0;
 L1 : do switch (HEAP32[i5 >> 2] | 0) {
 case 0:
  {
   i1 = i9 + 16 | 0;
   if ((HEAP32[i1 >> 2] | 0) == -1) {
    HEAP8[i2 >> 0] = 0;
    HEAP8[i2 + 1 >> 0] = 0;
    HEAP8[i2 + 2 >> 0] = 0;
    HEAP8[i2 + 3 >> 0] = -1;
    HEAP8[i10 >> 0] = HEAP8[i2 >> 0] | 0;
    HEAP8[i10 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
    HEAP8[i10 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
    HEAP8[i10 + 3 >> 0] = HEAP8[i2 + 3 >> 0] | 0;
    _ClearBackground(i10);
    i5 = HEAP32[39202] | 0;
    HEAP32[i4 >> 2] = -1;
    HEAP32[i6 >> 2] = HEAP32[39200];
    HEAP32[i6 + 4 >> 2] = HEAP32[39201];
    HEAP32[i6 + 8 >> 2] = HEAP32[39202];
    HEAP32[i6 + 12 >> 2] = HEAP32[39203];
    HEAP32[i6 + 16 >> 2] = HEAP32[39204];
    HEAP8[i10 >> 0] = HEAP8[i4 >> 0] | 0;
    HEAP8[i10 + 1 >> 0] = HEAP8[i4 + 1 >> 0] | 0;
    HEAP8[i10 + 2 >> 0] = HEAP8[i4 + 2 >> 0] | 0;
    HEAP8[i10 + 3 >> 0] = HEAP8[i4 + 3 >> 0] | 0;
    _DrawTexture(i6, 512 - (i5 << 1) | 0, 384 - i5 | 0, i10);
    HEAP32[i1 >> 2] = 0;
    _load_assets();
    break L1;
   }
   i1 = 0;
   do {
    _spin(i9);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 3);
   HEAP32[i5 >> 2] = 1;
   break;
  }
 case 1:
  {
   i1 = i9 + 16 | 0;
   if ((HEAP32[i1 >> 2] | 0) == -1) {
    HEAP8[i3 >> 0] = 0;
    HEAP8[i3 + 1 >> 0] = 0;
    HEAP8[i3 + 2 >> 0] = 0;
    HEAP8[i3 + 3 >> 0] = -1;
    HEAP8[i10 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i10 + 1 >> 0] = HEAP8[i3 + 1 >> 0] | 0;
    HEAP8[i10 + 2 >> 0] = HEAP8[i3 + 2 >> 0] | 0;
    HEAP8[i10 + 3 >> 0] = HEAP8[i3 + 3 >> 0] | 0;
    _ClearBackground(i10);
    HEAP32[i1 >> 2] = 0;
    break L1;
   } else {
    _game_draw(i9);
    break L1;
   }
  }
 case 2:
  if (!(HEAP32[i9 + 36 >> 2] | 0)) {
   _bonus_draw(i9);
   break L1;
  } else {
   _bonus_stage(i9);
   break L1;
  }
 default:
  {}
 } while (0);
 if (!(HEAP32[i9 + 20 >> 2] | 0)) {
  HEAP32[i7 >> 2] = -1;
  HEAP32[i6 >> 2] = HEAP32[39220];
  HEAP32[i6 + 4 >> 2] = HEAP32[39221];
  HEAP32[i6 + 8 >> 2] = HEAP32[39222];
  HEAP32[i6 + 12 >> 2] = HEAP32[39223];
  HEAP32[i6 + 16 >> 2] = HEAP32[39224];
  HEAP8[i10 >> 0] = HEAP8[i7 >> 0] | 0;
  HEAP8[i10 + 1 >> 0] = HEAP8[i7 + 1 >> 0] | 0;
  HEAP8[i10 + 2 >> 0] = HEAP8[i7 + 2 >> 0] | 0;
  HEAP8[i10 + 3 >> 0] = HEAP8[i7 + 3 >> 0] | 0;
  _DrawTexture(i6, 40, 718, i10);
 }
 if (!(HEAP32[i9 + 24 >> 2] | 0)) {
  HEAP32[i8 >> 2] = -1;
  HEAP32[i6 >> 2] = HEAP32[39215];
  HEAP32[i6 + 4 >> 2] = HEAP32[39216];
  HEAP32[i6 + 8 >> 2] = HEAP32[39217];
  HEAP32[i6 + 12 >> 2] = HEAP32[39218];
  HEAP32[i6 + 16 >> 2] = HEAP32[39219];
  HEAP8[i10 >> 0] = HEAP8[i8 >> 0] | 0;
  HEAP8[i10 + 1 >> 0] = HEAP8[i8 + 1 >> 0] | 0;
  HEAP8[i10 + 2 >> 0] = HEAP8[i8 + 2 >> 0] | 0;
  HEAP8[i10 + 3 >> 0] = HEAP8[i8 + 3 >> 0] | 0;
  _DrawTexture(i6, 80, 718, i10);
 }
 _EndDrawing();
 STACKTOP = i11;
 return;
}

function _stbv_do_floor(i1, i4, i3, i5, i7, i2, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0;
 i21 = STACKTOP;
 i8 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i19 = i8 + 68 | 0;
 i22 = i8 + 64 | 0;
 i24 = i8 + 60 | 0;
 i25 = i8 + 56 | 0;
 i26 = i8 + 52 | 0;
 i20 = i8 + 48 | 0;
 i9 = i8 + 44 | 0;
 i17 = i8 + 36 | 0;
 i23 = i8 + 32 | 0;
 i10 = i8 + 28 | 0;
 i11 = i8 + 24 | 0;
 i14 = i8 + 20 | 0;
 i18 = i8 + 16 | 0;
 i15 = i8 + 12 | 0;
 i16 = i8 + 8 | 0;
 i13 = i8 + 4 | 0;
 i12 = i8;
 HEAP32[i22 >> 2] = i1;
 HEAP32[i24 >> 2] = i4;
 HEAP32[i25 >> 2] = i3;
 HEAP32[i26 >> 2] = i5;
 HEAP32[i20 >> 2] = i7;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i8 + 40 >> 2] = i6;
 HEAP32[i17 >> 2] = HEAP32[i26 >> 2] >> 1;
 HEAP32[i23 >> 2] = HEAPU8[(HEAP32[(HEAP32[i24 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) * 3 | 0) + 2 >> 0];
 HEAP32[i10 >> 2] = HEAPU8[(HEAP32[i24 >> 2] | 0) + 9 + (HEAP32[i23 >> 2] | 0) >> 0];
 i1 = HEAP32[i22 >> 2] | 0;
 if (!(HEAPU16[(HEAP32[i22 >> 2] | 0) + 132 + (HEAP32[i10 >> 2] << 1) >> 1] | 0)) {
  i26 = _stbv_error(i1, 21) | 0;
  HEAP32[i19 >> 2] = i26;
  i26 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i21;
  return i26 | 0;
 }
 HEAP32[i11 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) * 1596 | 0);
 HEAP32[i15 >> 2] = 0;
 i26 = Math_imul(HEAP16[HEAP32[i9 >> 2] >> 1] | 0, HEAPU8[(HEAP32[i11 >> 2] | 0) + 1588 >> 0] | 0) | 0;
 HEAP32[i16 >> 2] = i26;
 HEAP32[i18 >> 2] = 1;
 while (1) {
  if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[i11 >> 2] | 0) + 1592 >> 2] | 0)) break;
  HEAP32[i14 >> 2] = HEAPU8[(HEAP32[i11 >> 2] | 0) + 838 + (HEAP32[i18 >> 2] | 0) >> 0];
  if ((HEAP16[(HEAP32[i9 >> 2] | 0) + (HEAP32[i14 >> 2] << 1) >> 1] | 0) >= 0) {
   i26 = Math_imul(HEAP16[(HEAP32[i9 >> 2] | 0) + (HEAP32[i14 >> 2] << 1) >> 1] | 0, HEAPU8[(HEAP32[i11 >> 2] | 0) + 1588 >> 0] | 0) | 0;
   HEAP32[i13 >> 2] = i26;
   HEAP32[i12 >> 2] = HEAPU16[(HEAP32[i11 >> 2] | 0) + 338 + (HEAP32[i14 >> 2] << 1) >> 1];
   if ((HEAP32[i15 >> 2] | 0) != (HEAP32[i12 >> 2] | 0)) _stbv_draw_line(HEAP32[i20 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i17 >> 2] | 0);
   HEAP32[i15 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
  }
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
 }
 L15 : do if ((HEAP32[i15 >> 2] | 0) < (HEAP32[i17 >> 2] | 0)) {
  HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break L15;
   f27 = Math_fround(HEAPF32[13520 + (HEAP32[i16 >> 2] << 2) >> 2]);
   i26 = (HEAP32[i20 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) | 0;
   f27 = Math_fround(Math_fround(HEAPF32[i26 >> 2]) * f27);
   HEAPF32[i26 >> 2] = f27;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i19 >> 2] = 1;
 i26 = HEAP32[i19 >> 2] | 0;
 STACKTOP = i21;
 return i26 | 0;
}

function _drmp3_L3_imdct12(i10, i3, i6) {
 i10 = i10 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, f12 = f0, i13 = 0, f14 = f0, f15 = f0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i1 + 44 | 0;
 i4 = i1 + 40 | 0;
 i7 = i1 + 36 | 0;
 i2 = i1 + 24 | 0;
 i9 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i13 >> 2] = i10;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i7 >> 2] = i6;
 f12 = Math_fround(-Math_fround(HEAPF32[HEAP32[i13 >> 2] >> 2]));
 f14 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 24 >> 2]);
 f14 = Math_fround(f14 + Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 12 >> 2]));
 f15 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 48 >> 2]);
 _drmp3_L3_idct3(f12, f14, Math_fround(f15 + Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 36 >> 2])), i2);
 f15 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 60 >> 2]);
 f14 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 48 >> 2]);
 f14 = Math_fround(f14 - Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 36 >> 2]));
 f12 = Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 24 >> 2]);
 _drmp3_L3_idct3(f15, f14, Math_fround(f12 - Math_fround(HEAPF32[(HEAP32[i13 >> 2] | 0) + 12 >> 2])), i9);
 f12 = Math_fround(-Math_fround(HEAPF32[i9 + 4 >> 2]));
 HEAPF32[i9 + 4 >> 2] = f12;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 3) break;
  f15 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2]);
  HEAPF32[i8 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i2 + (HEAP32[i5 >> 2] << 2) >> 2]);
  f15 = Math_fround(f15 * Math_fround(HEAPF32[16640 + (3 + (HEAP32[i5 >> 2] | 0) << 2) >> 2]));
  f14 = Math_fround(HEAPF32[i9 + (HEAP32[i5 >> 2] << 2) >> 2]);
  f14 = Math_fround(f15 + Math_fround(f14 * Math_fround(HEAPF32[16640 + (0 + (HEAP32[i5 >> 2] | 0) << 2) >> 2])));
  HEAPF32[i1 >> 2] = f14;
  f14 = Math_fround(HEAPF32[i2 + (HEAP32[i5 >> 2] << 2) >> 2]);
  f14 = Math_fround(f14 * Math_fround(HEAPF32[16640 + (0 + (HEAP32[i5 >> 2] | 0) << 2) >> 2]));
  f15 = Math_fround(HEAPF32[i9 + (HEAP32[i5 >> 2] << 2) >> 2]);
  f15 = Math_fround(f14 - Math_fround(f15 * Math_fround(HEAPF32[16640 + (3 + (HEAP32[i5 >> 2] | 0) << 2) >> 2])));
  HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] = f15;
  f15 = Math_fround(HEAPF32[i8 >> 2]);
  f15 = Math_fround(f15 * Math_fround(HEAPF32[16640 + (2 - (HEAP32[i5 >> 2] | 0) << 2) >> 2]));
  f14 = Math_fround(HEAPF32[i1 >> 2]);
  f14 = Math_fround(f15 - Math_fround(f14 * Math_fround(HEAPF32[16640 + (5 - (HEAP32[i5 >> 2] | 0) << 2) >> 2])));
  HEAPF32[(HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] = f14;
  f14 = Math_fround(HEAPF32[i8 >> 2]);
  f14 = Math_fround(f14 * Math_fround(HEAPF32[16640 + (5 - (HEAP32[i5 >> 2] | 0) << 2) >> 2]));
  f15 = Math_fround(HEAPF32[i1 >> 2]);
  f15 = Math_fround(f14 + Math_fround(f15 * Math_fround(HEAPF32[16640 + (2 - (HEAP32[i5 >> 2] | 0) << 2) >> 2])));
  HEAPF32[(HEAP32[i4 >> 2] | 0) + (5 - (HEAP32[i5 >> 2] | 0) << 2) >> 2] = f15;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 STACKTOP = i11;
 return;
}

function _ma_convert_frames__on_read(i6, i7, i3, i9) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i14 = STACKTOP;
 i10 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i2 = i10 + 40 | 0;
 i1 = i10 + 36 | 0;
 i8 = i10 + 28 | 0;
 i4 = i10 + 24 | 0;
 i15 = i10 + 20 | 0;
 i13 = i10 + 16 | 0;
 i12 = i10 + 12 | 0;
 i5 = i10;
 i11 = i10 + 8 | 0;
 HEAP32[i10 + 32 >> 2] = i6;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i15 >> 2] = i9;
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 if (!(HEAP32[i13 >> 2] | 0)) ___assert_fail(37276, 36381, 32540, 46898);
 i15 = HEAP32[i13 >> 2] | 0;
 i10 = i15 + 16 | 0;
 i7 = HEAP32[i10 + 4 >> 2] | 0;
 i15 = i15 + 24 | 0;
 i9 = HEAP32[i15 + 4 >> 2] | 0;
 if (!(i7 >>> 0 > i9 >>> 0 ? 1 : (i7 | 0) == (i9 | 0) ? (HEAP32[i10 >> 2] | 0) >>> 0 >= (HEAP32[i15 >> 2] | 0) >>> 0 : 0)) ___assert_fail(46925, 36381, 32541, 46898);
 HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
 i9 = HEAP32[i13 >> 2] | 0;
 i10 = i9 + 16 | 0;
 i9 = i9 + 24 | 0;
 i9 = _i64Subtract(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0) | 0;
 i10 = getTempRet0() | 0;
 i15 = i5;
 HEAP32[i15 >> 2] = i9;
 HEAP32[i15 + 4 >> 2] = i10;
 i15 = i5;
 i10 = HEAP32[i15 + 4 >> 2] | 0;
 if (0 > i10 >>> 0 ? 1 : 0 == (i10 | 0) ? (HEAP32[i12 >> 2] | 0) >>> 0 > (HEAP32[i15 >> 2] | 0) >>> 0 : 0) HEAP32[i12 >> 2] = HEAP32[i5 >> 2];
 i15 = HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2];
 HEAP32[i1 >> 2] = i15;
 i15 = _ma_get_bytes_per_sample(HEAP32[i2 >> 2] | 0) | 0;
 i1 = Math_imul(i15, HEAP32[i1 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = i1;
 i1 = HEAP32[i8 >> 2] | 0;
 if (HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] | 0) {
  _memset(i1 | 0, 0, Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
  i10 = HEAP32[i12 >> 2] | 0;
  i15 = HEAP32[i13 >> 2] | 0;
  i15 = i15 + 24 | 0;
  i13 = i15;
  i11 = i13;
  i11 = HEAP32[i11 >> 2] | 0;
  i13 = i13 + 4 | 0;
  i13 = HEAP32[i13 >> 2] | 0;
  i10 = _i64Add(i11 | 0, i13 | 0, i10 | 0, 0) | 0;
  i13 = getTempRet0() | 0;
  i11 = i15;
  HEAP32[i11 >> 2] = i10;
  i15 = i15 + 4 | 0;
  HEAP32[i15 >> 2] = i13;
  i15 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i14;
  return i15 | 0;
 } else {
  i15 = HEAP32[HEAP32[i13 >> 2] >> 2] | 0;
  i10 = (HEAP32[i13 >> 2] | 0) + 24 | 0;
  i10 = ___muldi3(HEAP32[i11 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0) | 0;
  getTempRet0() | 0;
  _memcpy(i1 | 0, i15 + i10 | 0, Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) | 0;
  i10 = HEAP32[i12 >> 2] | 0;
  i15 = HEAP32[i13 >> 2] | 0;
  i15 = i15 + 24 | 0;
  i13 = i15;
  i11 = i13;
  i11 = HEAP32[i11 >> 2] | 0;
  i13 = i13 + 4 | 0;
  i13 = HEAP32[i13 >> 2] | 0;
  i10 = _i64Add(i11 | 0, i13 | 0, i10 | 0, 0) | 0;
  i13 = getTempRet0() | 0;
  i11 = i15;
  HEAP32[i11 >> 2] = i10;
  i15 = i15 + 4 | 0;
  HEAP32[i15 >> 2] = i13;
  i15 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i14;
  return i15 | 0;
 }
 return 0;
}

function _stbi__hdr_to_ldr(i3, i4, i5, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, f18 = f0;
 i17 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i1 + 40 | 0;
 i8 = i1 + 36 | 0;
 i14 = i1 + 32 | 0;
 i15 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i9 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i12 = i1 + 8 | 0;
 i16 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i7 >> 2] = i2;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i13 >> 2] = 0;
  i16 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i5 = _stbi__malloc_mad3(HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
 HEAP32[i12 >> 2] = i5;
 if (!(HEAP32[i12 >> 2] | 0)) {
  _free(HEAP32[i8 >> 2] | 0);
  i16 = (_stbi__err(53511) | 0) != 0;
  HEAP32[i13 >> 2] = i16 ? 0 : 0;
  i16 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i1 = HEAP32[i7 >> 2] | 0;
 if (HEAP32[i7 >> 2] & 1 | 0) HEAP32[i11 >> 2] = i1; else HEAP32[i11 >> 2] = i1 - 1;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (Math_imul(HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0)) break;
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
   i5 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   f18 = Math_fround(Math_fround(Math_fround(+Math_pow(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + (i5 + (HEAP32[i10 >> 2] | 0) << 2) >> 2]) * Math_fround(1.0))), +(+Math_fround(.454545438)))) * Math_fround(255.0)) + Math_fround(.5));
   HEAPF32[i16 >> 2] = f18;
   if (Math_fround(HEAPF32[i16 >> 2]) < Math_fround(0.0)) HEAPF32[i16 >> 2] = Math_fround(0.0);
   if (Math_fround(HEAPF32[i16 >> 2]) > Math_fround(255.0)) HEAPF32[i16 >> 2] = Math_fround(255.0);
   i4 = ~~Math_fround(HEAPF32[i16 >> 2]) & 255;
   i5 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   HEAP8[(HEAP32[i12 >> 2] | 0) + (i5 + (HEAP32[i10 >> 2] | 0)) >> 0] = i4;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  if ((HEAP32[i10 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) {
   i5 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   f18 = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + (i5 + (HEAP32[i10 >> 2] | 0) << 2) >> 2]) * Math_fround(255.0)) + Math_fround(.5));
   HEAPF32[i6 >> 2] = f18;
   if (Math_fround(HEAPF32[i6 >> 2]) < Math_fround(0.0)) HEAPF32[i6 >> 2] = Math_fround(0.0);
   if (Math_fround(HEAPF32[i6 >> 2]) > Math_fround(255.0)) HEAPF32[i6 >> 2] = Math_fround(255.0);
   i4 = ~~Math_fround(HEAPF32[i6 >> 2]) & 255;
   i5 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   HEAP8[(HEAP32[i12 >> 2] | 0) + (i5 + (HEAP32[i10 >> 2] | 0)) >> 0] = i4;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 _free(HEAP32[i8 >> 2] | 0);
 HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
 i16 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i17;
 return i16 | 0;
}

function _ma_rb_acquire_write(i14, i17, i19) {
 i14 = i14 | 0;
 i17 = i17 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i6 = i1 + 92 | 0;
 i16 = i1 + 88 | 0;
 i9 = i1 + 84 | 0;
 i5 = i1 + 80 | 0;
 i7 = i1 + 76 | 0;
 i11 = i1 + 72 | 0;
 i13 = i1 + 68 | 0;
 i8 = i1 + 64 | 0;
 i4 = i1 + 60 | 0;
 i3 = i1 + 56 | 0;
 i10 = i1 + 52 | 0;
 i12 = i1 + 48 | 0;
 i24 = i1 + 44 | 0;
 i15 = i1 + 40 | 0;
 i18 = i1 + 36 | 0;
 i20 = i1 + 32 | 0;
 i21 = i1 + 28 | 0;
 i22 = i1 + 24 | 0;
 i23 = i1 + 20 | 0;
 i25 = i1 + 16 | 0;
 i26 = i1 + 12 | 0;
 i27 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i20 >> 2] = i19;
 if ((HEAP32[i15 >> 2] | 0) == 0 | (HEAP32[i18 >> 2] | 0) == 0 | (HEAP32[i20 >> 2] | 0) == 0) {
  HEAP32[i24 >> 2] = -2;
  i27 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i28;
  return i27 | 0;
 }
 HEAP32[i21 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 16 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i10 >> 2] = i22;
 HEAP32[i12 >> 2] = i23;
 if (!(HEAP32[i10 >> 2] | 0)) ___assert_fail(36687, 36381, 32734, 36716);
 if (!(HEAP32[i12 >> 2] | 0)) ___assert_fail(36742, 36381, 32735, 36716);
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[i4 >> 2] & 2147483647;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i8 >> 2] & -2147483648;
 HEAP32[i25 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 20 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i25 >> 2];
 HEAP32[i11 >> 2] = i26;
 HEAP32[i13 >> 2] = i27;
 if (!(HEAP32[i11 >> 2] | 0)) ___assert_fail(36687, 36381, 32734, 36716);
 if (!(HEAP32[i13 >> 2] | 0)) ___assert_fail(36742, 36381, 32735, 36716);
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i5 >> 2] & 2147483647;
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 HEAP32[HEAP32[i13 >> 2] >> 2] = HEAP32[i9 >> 2] & -2147483648;
 if ((HEAP32[i27 >> 2] | 0) == (HEAP32[i23 >> 2] | 0)) HEAP32[i2 >> 2] = (HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i26 >> 2] | 0); else HEAP32[i2 >> 2] = (HEAP32[i22 >> 2] | 0) - (HEAP32[i26 >> 2] | 0);
 HEAP32[i1 >> 2] = HEAP32[HEAP32[i18 >> 2] >> 2];
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[HEAP32[i18 >> 2] >> 2] = HEAP32[i1 >> 2];
 HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
 if (!(HEAP32[i16 >> 2] | 0)) ___assert_fail(36507, 36381, 32723, 36976);
 i27 = HEAP32[HEAP32[i16 >> 2] >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2];
 HEAP32[HEAP32[i20 >> 2] >> 2] = i27 + (HEAP32[i6 >> 2] & 2147483647);
 if ((HEAPU8[(HEAP32[i15 >> 2] | 0) + 24 >> 0] | 0) >>> 1 & 1 | 0) _memset(HEAP32[HEAP32[i20 >> 2] >> 2] | 0, 0, HEAP32[HEAP32[i18 >> 2] >> 2] | 0) | 0;
 HEAP32[i24 >> 2] = 0;
 i27 = HEAP32[i24 >> 2] | 0;
 STACKTOP = i28;
 return i27 | 0;
}

function _OnSendAudioDataToDevice(i2, i4, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i17 = 0;
 i18 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 4144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4144);
 i16 = i5 + 4096 | 0;
 i19 = i5 + 4140 | 0;
 i14 = i5 + 4136 | 0;
 i7 = i5 + 4128 | 0;
 i6 = i5 + 4124 | 0;
 i11 = i5 + 4120 | 0;
 i12 = i5 + 4116 | 0;
 i15 = i5;
 i13 = i5 + 4112 | 0;
 i9 = i5 + 4108 | 0;
 i10 = i5 + 4104 | 0;
 i8 = i5 + 4100 | 0;
 HEAP32[i19 >> 2] = i2;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i5 + 4132 >> 2] = i3;
 HEAP32[i7 >> 2] = i1;
 i4 = HEAP32[i14 >> 2] | 0;
 i5 = Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i19 >> 2] | 0) + 384 + 268 >> 2] | 0) | 0;
 _memset(i4 | 0, 0, Math_imul(i5, _ma_get_bytes_per_sample(HEAP32[(HEAP32[i19 >> 2] | 0) + 384 + 264 >> 2] | 0) | 0) | 0) | 0;
 _ma_mutex_lock(176492);
 HEAP32[i6 >> 2] = HEAP32[44131];
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) break;
  L4 : do if (HEAP8[(HEAP32[i6 >> 2] | 0) + 46536 >> 0] & 1) if (!(HEAP8[(HEAP32[i6 >> 2] | 0) + 46537 >> 0] & 1)) {
   HEAP32[i11 >> 2] = 0;
   while (1) {
    if ((HEAP32[i11 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) break;
    if ((HEAP32[i11 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) break L4;
    HEAP32[i12 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
    while (1) {
     if ((HEAP32[i12 >> 2] | 0) >>> 0 <= 0) break;
     i19 = HEAP32[i12 >> 2] | 0;
     HEAP32[i13 >> 2] = i19;
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) >>> 0 > 512 ? 512 : i19;
     i19 = _ma_pcm_converter_read(HEAP32[i6 >> 2] | 0, i15, HEAP32[i13 >> 2] | 0, 0) | 0;
     getTempRet0() | 0;
     HEAP32[i9 >> 2] = i19;
     if ((HEAP32[i9 >> 2] | 0) >>> 0 > 0) {
      i19 = (HEAP32[i14 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[15763] | 0) | 0) << 2) | 0;
      HEAP32[i10 >> 2] = i19;
      HEAP32[i8 >> 2] = i15;
      _MixAudioFrames(HEAP32[i10 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 46528 >> 2]));
      HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
     }
     if (!(HEAP8[(HEAP32[i6 >> 2] | 0) + 46536 >> 0] & 1)) {
      i17 = 14;
      break;
     }
     if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAP32[i13 >> 2] | 0) >>> 0) continue;
     i1 = HEAP32[i6 >> 2] | 0;
     if (!(HEAP8[(HEAP32[i6 >> 2] | 0) + 46538 >> 0] & 1)) {
      i17 = 17;
      break;
     }
     HEAP32[i1 + 46548 >> 2] = 0;
    }
    if ((i17 | 0) == 14) {
     i17 = 0;
     HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
    } else if ((i17 | 0) == 17) {
     i17 = 0;
     _StopAudioBuffer(i1);
    }
    if ((HEAP32[i12 >> 2] | 0) >>> 0 > 0) break L4;
   }
   _TraceLog(2, 49819, i16);
  } while (0);
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 46564 >> 2];
 }
 _ma_mutex_unlock(176492);
 STACKTOP = i18;
 return;
}

function _LoadASTC(i2, i6) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i12 = i1 + 40 | 0;
 i11 = i1 + 32 | 0;
 i14 = i1 + 24 | 0;
 i13 = i1 + 16 | 0;
 i10 = i1 + 8 | 0;
 i9 = i1;
 i7 = i1 + 76 | 0;
 i8 = i1 + 56 | 0;
 i3 = i1 + 52 | 0;
 i4 = i1 + 80 | 0;
 i5 = i1 + 48 | 0;
 i1 = i1 + 44 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i6 = _fopen(HEAP32[i7 >> 2] | 0, 53420) | 0;
 HEAP32[i3 >> 2] = i6;
 if (!(HEAP32[i3 >> 2] | 0)) {
  HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
  _TraceLog(4, 57566, i9);
  HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i2 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
  STACKTOP = i16;
  return;
 }
 _fread(i4, 16, 1, HEAP32[i3 >> 2] | 0) | 0;
 do if ((HEAPU8[i4 + 3 >> 0] | 0 | 0) != 92) i15 = 7; else if ((HEAPU8[i4 + 2 >> 0] | 0 | 0) != 161) i15 = 7; else if ((HEAPU8[i4 + 1 >> 0] | 0 | 0) != 171) i15 = 7; else if ((HEAPU8[i4 >> 0] | 0 | 0) != 19) i15 = 7; else {
  HEAP32[i8 + 4 >> 2] = (HEAPU8[i4 + 7 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 + 7 + 1 >> 0] | 0) << 8 | (HEAPU8[i4 + 7 >> 0] | 0);
  HEAP32[i8 + 8 >> 2] = (HEAPU8[i4 + 10 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 + 10 + 1 >> 0] | 0) << 8 | (HEAPU8[i4 + 10 >> 0] | 0);
  HEAP32[i13 >> 2] = HEAP32[i8 + 4 >> 2];
  _TraceLog(2, 57650, i13);
  HEAP32[i14 >> 2] = HEAP32[i8 + 8 >> 2];
  _TraceLog(2, 57671, i14);
  i14 = HEAPU8[i4 + 5 >> 0] | 0;
  HEAP32[i11 >> 2] = HEAPU8[i4 + 4 >> 0];
  HEAP32[i11 + 4 >> 2] = i14;
  _TraceLog(2, 57693, i11);
  HEAP32[i8 + 12 >> 2] = 1;
  i14 = 128 / (Math_imul(HEAPU8[i4 + 4 >> 0] | 0, HEAPU8[i4 + 5 >> 0] | 0) | 0) | 0;
  HEAP32[i5 >> 2] = i14;
  if (!((HEAP32[i5 >> 2] | 0) == 8 | (HEAP32[i5 >> 2] | 0) == 2)) {
   HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
   _TraceLog(4, 57718, i12);
   break;
  }
  i14 = Math_imul(HEAP32[i8 + 4 >> 2] | 0, HEAP32[i8 + 8 >> 2] | 0) | 0;
  i14 = (Math_imul(i14, HEAP32[i5 >> 2] | 0) | 0) / 8 | 0;
  HEAP32[i1 >> 2] = i14;
  i14 = _malloc(HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = i14;
  _fread(HEAP32[i8 >> 2] | 0, HEAP32[i1 >> 2] | 0, 1, HEAP32[i3 >> 2] | 0) | 0;
  if ((HEAP32[i5 >> 2] | 0) == 8) {
   HEAP32[i8 + 16 >> 2] = 20;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) == 2) HEAP32[i8 + 16 >> 2] = 21;
 } while (0);
 if ((i15 | 0) == 7) {
  HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
  _TraceLog(4, 57601, i10);
 }
 _fclose(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
 STACKTOP = i16;
 return;
}

function _drmp3d_find_frame(i7, i9, i4, i11) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i15 = i1 + 40 | 0;
 i8 = i1 + 36 | 0;
 i10 = i1 + 32 | 0;
 i5 = i1 + 28 | 0;
 i14 = i1 + 24 | 0;
 i13 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i12 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i14 >> 2] = i11;
 HEAP32[i13 >> 2] = 0;
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) >= ((HEAP32[i10 >> 2] | 0) - 4 | 0)) {
   i1 = 20;
   break;
  }
  if (_drmp3_hdr_valid(HEAP32[i8 >> 2] | 0) | 0) {
   i11 = _drmp3_hdr_frame_bytes(HEAP32[i8 >> 2] | 0, HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i11;
   i11 = HEAP32[i3 >> 2] | 0;
   i11 = i11 + (_drmp3_hdr_padding(HEAP32[i8 >> 2] | 0) | 0) | 0;
   HEAP32[i12 >> 2] = i11;
   HEAP32[i6 >> 2] = 4;
   while (1) {
    if (!((HEAP32[i3 >> 2] | 0) == 0 & (HEAP32[i6 >> 2] | 0) < 2304)) break;
    if (((HEAP32[i13 >> 2] | 0) + (HEAP32[i6 >> 2] << 1) | 0) >= ((HEAP32[i10 >> 2] | 0) - 4 | 0)) break;
    if (_drmp3_hdr_compare(HEAP32[i8 >> 2] | 0, (HEAP32[i8 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0) {
     i11 = HEAP32[i6 >> 2] | 0;
     i11 = i11 - (_drmp3_hdr_padding(HEAP32[i8 >> 2] | 0) | 0) | 0;
     HEAP32[i2 >> 2] = i11;
     i11 = HEAP32[i2 >> 2] | 0;
     i11 = i11 + (_drmp3_hdr_padding((HEAP32[i8 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0) | 0;
     HEAP32[i1 >> 2] = i11;
     if (((HEAP32[i13 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) + 4 | 0) <= (HEAP32[i10 >> 2] | 0)) if (_drmp3_hdr_compare(HEAP32[i8 >> 2] | 0, (HEAP32[i8 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) | 0) | 0) {
      HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
      HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
      HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[i2 >> 2];
     }
    }
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   }
   if (HEAP32[i3 >> 2] | 0) if (((HEAP32[i13 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0) <= (HEAP32[i10 >> 2] | 0)) if (_drmp3d_match_frame(HEAP32[i8 >> 2] | 0, (HEAP32[i10 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0, HEAP32[i3 >> 2] | 0) | 0) {
    i1 = 17;
    break;
   }
   if (!(HEAP32[i13 >> 2] | 0)) if ((HEAP32[i12 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) {
    i1 = 17;
    break;
   }
   HEAP32[HEAP32[i5 >> 2] >> 2] = 0;
  }
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 17) {
  HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i12 >> 2];
  HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 } else if ((i1 | 0) == 20) {
  HEAP32[HEAP32[i14 >> 2] >> 2] = 0;
  HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 return 0;
}

function _stb_vorbis_stream_length_in_samples(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i1 + 32 | 0;
 i6 = i1 + 28 | 0;
 i12 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 i7 = i1;
 i3 = i1 + 36 | 0;
 HEAP32[i6 >> 2] = i2;
 i1 = HEAP32[i6 >> 2] | 0;
 if (HEAP8[(HEAP32[i6 >> 2] | 0) + 48 >> 0] | 0) {
  i12 = _stbv_error(i1, 2) | 0;
  HEAP32[i13 >> 2] = i12;
  i13 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!(HEAP32[i1 + 796 >> 2] | 0)) {
  i2 = _stb_vorbis_get_file_offset(HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i12 >> 2] = i2;
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] | 0) >>> 0 >= 65536) if (((HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] | 0) - 65536 | 0) >>> 0 >= (HEAP32[(HEAP32[i6 >> 2] | 0) + 52 >> 2] | 0) >>> 0) HEAP32[i11 >> 2] = (HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] | 0) - 65536; else i4 = 7; else i4 = 7;
  if ((i4 | 0) == 7) HEAP32[i11 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 52 >> 2];
  _stbv_set_file_offset(HEAP32[i6 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
  i4 = (_stbv_vorbis_find_page(HEAP32[i6 >> 2] | 0, i5, i8) | 0) != 0;
  i1 = HEAP32[i6 >> 2] | 0;
  do if (i4) {
   i4 = _stb_vorbis_get_file_offset(i1) | 0;
   HEAP32[i9 >> 2] = i4;
   while (1) {
    if (!((HEAP32[i8 >> 2] | 0) != 0 ^ 1)) break;
    _stbv_set_file_offset(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
    if (!(_stbv_vorbis_find_page(HEAP32[i6 >> 2] | 0, i5, i8) | 0)) break;
    HEAP32[i11 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    i4 = _stb_vorbis_get_file_offset(HEAP32[i6 >> 2] | 0) | 0;
    HEAP32[i9 >> 2] = i4;
   }
   _stbv_set_file_offset(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   _stbv_getn(HEAP32[i6 >> 2] | 0, i3, 6) | 0;
   i11 = _stbv_get32(HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i11;
   i11 = _stbv_get32(HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i11;
   if ((HEAP32[i10 >> 2] | 0) == -1 & (HEAP32[i7 >> 2] | 0) == -1) {
    HEAP32[(HEAP32[i6 >> 2] | 0) + 100 >> 2] = 36;
    HEAP32[(HEAP32[i6 >> 2] | 0) + 796 >> 2] = -1;
    break;
   }
   if (HEAP32[i7 >> 2] | 0) HEAP32[i10 >> 2] = -2;
   HEAP32[(HEAP32[i6 >> 2] | 0) + 796 >> 2] = HEAP32[i10 >> 2];
   HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] = HEAP32[i9 >> 2];
   HEAP32[(HEAP32[i6 >> 2] | 0) + 68 + 4 >> 2] = HEAP32[i5 >> 2];
   HEAP32[(HEAP32[i6 >> 2] | 0) + 68 + 8 >> 2] = HEAP32[i10 >> 2];
  } else {
   HEAP32[i1 + 100 >> 2] = 36;
   HEAP32[(HEAP32[i6 >> 2] | 0) + 796 >> 2] = -1;
  } while (0);
  _stbv_set_file_offset(HEAP32[i6 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
 }
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 796 >> 2] | 0) == -1) i1 = 0; else i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + 796 >> 2] | 0;
 HEAP32[i13 >> 2] = i1;
 i13 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _drmp3_L3_decode(i6, i11, i4, i9) {
 i6 = i6 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 28 | 0;
 i12 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = (HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) + (HEAPU16[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) * 28 | 0) + 4 >> 1] | 0);
  i9 = HEAP32[i12 >> 2] | 0;
  i11 = HEAP32[i3 >> 2] | 0;
  _drmp3_L3_decode_scalefactors((HEAP32[i7 >> 2] | 0) + 6152 | 0, i9 + 16156 + ((i11 | 0) * 39 | 0) | 0, i9 | 0, (HEAP32[i5 >> 2] | 0) + ((i11 | 0) * 28 | 0) | 0, i9 + 7548 | 0, i11 | 0);
  i11 = HEAP32[i12 >> 2] | 0;
  i9 = HEAP32[i3 >> 2] | 0;
  _drmp3_L3_huffman(i11 + 2940 + ((i9 | 0) * 2304 | 0) | 0, i11 | 0, (HEAP32[i5 >> 2] | 0) + ((i9 | 0) * 28 | 0) | 0, i11 + 7548 | 0, HEAP32[i8 >> 2] | 0);
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 if (HEAPU8[(HEAP32[i7 >> 2] | 0) + 6152 + 3 >> 0] & 16 | 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  _drmp3_L3_intensity_stereo(i11 + 2940 | 0, i11 + 16156 + 39 | 0, HEAP32[i5 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 6152 | 0);
 } else if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 6152 + 3 >> 0] & 224 | 0) == 96) _drmp3_L3_midside_stereo((HEAP32[i12 >> 2] | 0) + 2940 | 0, 576);
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
  HEAP32[i2 >> 2] = 31;
  i9 = (HEAP32[i7 >> 2] | 0) + 6152 | 0;
  i11 = (HEAP32[i7 >> 2] | 0) + 6152 + 1 | 0;
  HEAP32[i1 >> 2] = (HEAPU8[(HEAP32[i5 >> 2] | 0) + 12 >> 0] | 0 ? 2 : 0) << (((HEAPU8[i9 + 2 >> 0] >> 2 & 3) + (((HEAPU8[i11 >> 0] >> 3 & 1) + (HEAPU8[i11 >> 0] >> 4 & 1) | 0) * 3 | 0) | 0) == 2 & 1);
  if (HEAP8[(HEAP32[i5 >> 2] | 0) + 14 >> 0] | 0) {
   HEAP32[i2 >> 2] = (HEAP32[i1 >> 2] | 0) - 1;
   i11 = HEAP32[i12 >> 2] | 0;
   _drmp3_L3_reorder(i11 + 2940 + ((HEAP32[i3 >> 2] | 0) * 2304 | 0) + ((HEAP32[i1 >> 2] | 0) * 18 << 2) | 0, i11 + 7708 | 0, (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + (HEAPU8[(HEAP32[i5 >> 2] | 0) + 13 >> 0] | 0) | 0);
  }
  _drmp3_L3_antialias((HEAP32[i12 >> 2] | 0) + 2940 + ((HEAP32[i3 >> 2] | 0) * 2304 | 0) | 0, HEAP32[i2 >> 2] | 0);
  i11 = HEAP32[i3 >> 2] | 0;
  _drmp3_L3_imdct_gr((HEAP32[i12 >> 2] | 0) + 2940 + ((i11 | 0) * 2304 | 0) | 0, (HEAP32[i7 >> 2] | 0) + ((i11 | 0) * 1152 | 0) | 0, HEAPU8[(HEAP32[i5 >> 2] | 0) + 11 >> 0] | 0, HEAP32[i1 >> 2] | 0);
  _drmp3_L3_change_sign((HEAP32[i12 >> 2] | 0) + 2940 + ((HEAP32[i3 >> 2] | 0) * 2304 | 0) | 0);
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 28;
 }
 STACKTOP = i13;
 return;
}

function _stbv_start_page_no_capturepattern(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i11 = i1 + 40 | 0;
 i7 = i1 + 36 | 0;
 i10 = i1 + 32 | 0;
 i5 = i1 + 28 | 0;
 i3 = i1 + 24 | 0;
 i4 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i6 = i1;
 HEAP32[i7 >> 2] = i2;
 i2 = 0 != ((_stbv_get8(HEAP32[i7 >> 2] | 0) | 0) & 255 | 0);
 i1 = HEAP32[i7 >> 2] | 0;
 if (i2) {
  i10 = _stbv_error(i1, 31) | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = _stbv_get8(i1) | 0;
 HEAP8[(HEAP32[i7 >> 2] | 0) + 1375 >> 0] = i1;
 i1 = _stbv_get32(HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = i1;
 i1 = _stbv_get32(HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i1;
 _stbv_get32(HEAP32[i7 >> 2] | 0) | 0;
 i1 = _stbv_get32(HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 1112 >> 2] = HEAP32[i3 >> 2];
 _stbv_get32(HEAP32[i7 >> 2] | 0) | 0;
 i3 = (_stbv_get8(HEAP32[i7 >> 2] | 0) | 0) & 255;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 1116 >> 2] = i3;
 i3 = HEAP32[i7 >> 2] | 0;
 i3 = (_stbv_getn(i3 | 0, i3 + 1120 | 0, HEAP32[i3 + 1116 >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i3) {
  i10 = _stbv_error(i1, 10) | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 HEAP32[i1 + 1404 >> 2] = -2;
 if ((HEAP32[i10 >> 2] | 0) != -1 | (HEAP32[i5 >> 2] | 0) != -1) {
  HEAP32[i4 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 1116 >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) < 0) break;
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1120 + (HEAP32[i4 >> 2] | 0) >> 0] | 0) < 255) break;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
  }
  if ((HEAP32[i4 >> 2] | 0) >= 0) {
   HEAP32[(HEAP32[i7 >> 2] | 0) + 1404 >> 2] = HEAP32[i4 >> 2];
   HEAP32[(HEAP32[i7 >> 2] | 0) + 1408 >> 2] = HEAP32[i10 >> 2];
  }
 }
 if (HEAP8[(HEAP32[i7 >> 2] | 0) + 1377 >> 0] | 0) {
  HEAP32[i9 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  while (1) {
   i1 = HEAP32[i7 >> 2] | 0;
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 1116 >> 2] | 0)) break;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAPU8[i1 + 1120 + (HEAP32[i8 >> 2] | 0) >> 0] | 0);
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (27 + (HEAP32[i1 + 1116 >> 2] | 0));
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 52 >> 2];
  HEAP32[i6 + 4 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
  HEAP32[i6 + 8 >> 2] = HEAP32[i10 >> 2];
  i10 = (HEAP32[i7 >> 2] | 0) + 56 | 0;
  HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 }
 HEAP32[(HEAP32[i7 >> 2] | 0) + 1380 >> 2] = 0;
 HEAP32[i11 >> 2] = 1;
 i11 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i12;
 return i11 | 0;
}

function _ma_rb_acquire_read(i14, i17, i19) {
 i14 = i14 | 0;
 i17 = i17 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i6 = i1 + 92 | 0;
 i16 = i1 + 88 | 0;
 i9 = i1 + 84 | 0;
 i5 = i1 + 80 | 0;
 i7 = i1 + 76 | 0;
 i11 = i1 + 72 | 0;
 i13 = i1 + 68 | 0;
 i8 = i1 + 64 | 0;
 i4 = i1 + 60 | 0;
 i3 = i1 + 56 | 0;
 i10 = i1 + 52 | 0;
 i12 = i1 + 48 | 0;
 i24 = i1 + 44 | 0;
 i15 = i1 + 40 | 0;
 i18 = i1 + 36 | 0;
 i20 = i1 + 32 | 0;
 i25 = i1 + 28 | 0;
 i26 = i1 + 24 | 0;
 i27 = i1 + 20 | 0;
 i21 = i1 + 16 | 0;
 i22 = i1 + 12 | 0;
 i23 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i20 >> 2] = i19;
 if ((HEAP32[i15 >> 2] | 0) == 0 | (HEAP32[i18 >> 2] | 0) == 0 | (HEAP32[i20 >> 2] | 0) == 0) {
  HEAP32[i24 >> 2] = -2;
  i27 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i28;
  return i27 | 0;
 }
 HEAP32[i25 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 20 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i25 >> 2];
 HEAP32[i10 >> 2] = i26;
 HEAP32[i12 >> 2] = i27;
 if (!(HEAP32[i10 >> 2] | 0)) ___assert_fail(36687, 36381, 32734, 36716);
 if (!(HEAP32[i12 >> 2] | 0)) ___assert_fail(36742, 36381, 32735, 36716);
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[i4 >> 2] & 2147483647;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i8 >> 2] & -2147483648;
 HEAP32[i21 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 16 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i11 >> 2] = i22;
 HEAP32[i13 >> 2] = i23;
 if (!(HEAP32[i11 >> 2] | 0)) ___assert_fail(36687, 36381, 32734, 36716);
 if (!(HEAP32[i13 >> 2] | 0)) ___assert_fail(36742, 36381, 32735, 36716);
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i5 >> 2] & 2147483647;
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 HEAP32[HEAP32[i13 >> 2] >> 2] = HEAP32[i9 >> 2] & -2147483648;
 if ((HEAP32[i23 >> 2] | 0) == (HEAP32[i27 >> 2] | 0)) HEAP32[i2 >> 2] = (HEAP32[i26 >> 2] | 0) - (HEAP32[i22 >> 2] | 0); else HEAP32[i2 >> 2] = (HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i22 >> 2] | 0);
 HEAP32[i1 >> 2] = HEAP32[HEAP32[i18 >> 2] >> 2];
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[HEAP32[i18 >> 2] >> 2] = HEAP32[i1 >> 2];
 HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
 if (!(HEAP32[i16 >> 2] | 0)) ___assert_fail(36507, 36381, 32717, 36667);
 i27 = HEAP32[HEAP32[i16 >> 2] >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2];
 HEAP32[HEAP32[i20 >> 2] >> 2] = i27 + (HEAP32[i6 >> 2] & 2147483647);
 HEAP32[i24 >> 2] = 0;
 i27 = HEAP32[i24 >> 2] | 0;
 STACKTOP = i28;
 return i27 | 0;
}

function _LoadKTX(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i12 = i1 + 32 | 0;
 i14 = i1 + 24 | 0;
 i13 = i1 + 16 | 0;
 i11 = i1 + 8 | 0;
 i10 = i1;
 i4 = i1 + 136 | 0;
 i6 = i1 + 116 | 0;
 i7 = i1 + 112 | 0;
 i8 = i1 + 48 | 0;
 i9 = i1 + 140 | 0;
 i5 = i1 + 40 | 0;
 i1 = i1 + 36 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 i3 = _fopen(HEAP32[i4 >> 2] | 0, 53420) | 0;
 HEAP32[i7 >> 2] = i3;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
  _TraceLog(4, 57767, i10);
  HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  HEAP32[i2 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
  STACKTOP = i16;
  return;
 }
 _fread(i8, 64, 1, HEAP32[i7 >> 2] | 0) | 0;
 do if ((HEAP8[i8 + 1 >> 0] | 0) != 75) i15 = 9; else if ((HEAP8[i8 + 2 >> 0] | 0) != 84) i15 = 9; else if ((HEAP8[i8 + 3 >> 0] | 0) != 88) i15 = 9; else if ((HEAP8[i8 + 4 >> 0] | 0) != 32) i15 = 9; else if ((HEAP8[i8 + 5 >> 0] | 0) != 49) i15 = 9; else if ((HEAP8[i8 + 6 >> 0] | 0) != 49) i15 = 9; else {
  HEAP32[i6 + 4 >> 2] = HEAP32[i8 + 36 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i8 + 40 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i8 + 56 >> 2];
  HEAP32[i13 >> 2] = HEAP32[i8 + 36 >> 2];
  _TraceLog(2, 57854, i13);
  HEAP32[i14 >> 2] = HEAP32[i8 + 40 >> 2];
  _TraceLog(2, 57880, i14);
  HEAP32[i12 >> 2] = HEAP32[i8 + 28 >> 2];
  _TraceLog(2, 57907, i12);
  L12 : do if ((HEAP32[i8 + 60 >> 2] | 0) >>> 0 > 0) {
   HEAP32[i5 >> 2] = 0;
   while (1) {
    if ((HEAP32[i5 >> 2] | 0) >>> 0 >= (HEAP32[i8 + 60 >> 2] | 0) >>> 0) break L12;
    _fread(i9, 1, 1, HEAP32[i7 >> 2] | 0) | 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   }
  } while (0);
  _fread(i1, 4, 1, HEAP32[i7 >> 2] | 0) | 0;
  i14 = _malloc(HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = i14;
  _fread(HEAP32[i6 >> 2] | 0, HEAP32[i1 >> 2] | 0, 1, HEAP32[i7 >> 2] | 0) | 0;
  if ((HEAP32[i8 + 28 >> 2] | 0) == 36196) {
   HEAP32[i6 + 16 >> 2] = 15;
   break;
  }
  if ((HEAP32[i8 + 28 >> 2] | 0) == 37492) {
   HEAP32[i6 + 16 >> 2] = 16;
   break;
  }
  if ((HEAP32[i8 + 28 >> 2] | 0) == 37496) HEAP32[i6 + 16 >> 2] = 17;
 } while (0);
 if ((i15 | 0) == 9) {
  HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
  _TraceLog(4, 57807, i11);
 }
 _fclose(HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 STACKTOP = i16;
 return;
}

function _stbv_iter_54(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, f5 = f0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i4 = i3 + 32 | 0;
 i10 = i3 + 28 | 0;
 i7 = i3 + 24 | 0;
 i6 = i3 + 20 | 0;
 i9 = i3 + 16 | 0;
 i12 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i11 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 f5 = Math_fround(HEAPF32[HEAP32[i4 >> 2] >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -16 >> 2]));
 HEAPF32[i10 >> 2] = f5;
 f5 = Math_fround(HEAPF32[HEAP32[i4 >> 2] >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -16 >> 2]));
 HEAPF32[i12 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -8 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -24 >> 2]));
 HEAPF32[i11 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -8 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -24 >> 2]));
 HEAPF32[i6 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i12 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i11 >> 2]));
 HEAPF32[HEAP32[i4 >> 2] >> 2] = f5;
 f5 = Math_fround(HEAPF32[i12 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i11 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + -8 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -12 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -28 >> 2]));
 HEAPF32[i9 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i10 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i9 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + -16 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i10 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i9 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + -24 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -4 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -20 >> 2]));
 HEAPF32[i7 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -4 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -20 >> 2]));
 HEAPF32[i8 >> 2] = f5;
 f5 = Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -12 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + -28 >> 2]));
 HEAPF32[i3 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i8 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i3 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + -4 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i8 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i3 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + -12 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i7 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i6 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + -20 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i7 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i6 >> 2]));
 HEAPF32[(HEAP32[i4 >> 2] | 0) + -28 >> 2] = f5;
 STACKTOP = i2;
 return;
}

function _ma_src_init(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i5 >> 2] = i3;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i6 >> 2] = -2;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 _memset(HEAP32[i5 >> 2] | 0, 0, 42112) | 0;
 if (HEAP32[i4 >> 2] | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) {
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) >>> 0 <= 32) {
   i1 = (HEAP32[i5 >> 2] | 0) + 42048 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   i3 = i1 + 36 | 0;
   do {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
   } while ((i1 | 0) < (i3 | 0));
   if (0) i1 = ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 16 >> 0] | 0) >>> 1 & 1 | 0) != 0 ^ 1; else i1 = 0;
   i3 = (HEAP32[i5 >> 2] | 0) + 42084 | 0;
   HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -3 | (i1 & 1) << 1 & 255;
   if (0) i1 = ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 16 >> 0] | 0) >>> 2 & 1 | 0) != 0 ^ 1; else i1 = 0;
   i3 = (HEAP32[i5 >> 2] | 0) + 42084 | 0;
   HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -5 | (i1 & 1) << 2 & 255;
   if (0) i1 = ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 16 >> 0] | 0) >>> 3 & 1 | 0) != 0 ^ 1; else i1 = 0;
   i3 = (HEAP32[i5 >> 2] | 0) + 42084 | 0;
   HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -9 | (i1 & 1) << 3 & 255;
   if (0) i1 = ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 16 >> 0] | 0) >>> 4 & 1 | 0) != 0 ^ 1; else i1 = 0;
   i4 = (HEAP32[i5 >> 2] | 0) + 42084 | 0;
   HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -17 | (i1 & 1) << 4 & 255;
   L23 : do if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 42048 + 12 >> 2] | 0) == 1) {
    if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 42048 + 28 + 4 >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 42048 + 28 + 4 >> 2] = 32;
    if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 42048 + 28 + 4 >> 2] | 0) >>> 0 < 2) HEAP32[(HEAP32[i5 >> 2] | 0) + 42048 + 28 + 4 >> 2] = 2;
    if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 42048 + 28 + 4 >> 2] | 0) >>> 0 > 32) HEAP32[(HEAP32[i5 >> 2] | 0) + 42048 + 28 + 4 >> 2] = 32;
    switch (HEAP32[(HEAP32[i5 >> 2] | 0) + 42048 + 28 >> 2] | 0) {
    case 0:
     {
      _ma_src__build_sinc_table__hann(HEAP32[i5 >> 2] | 0);
      break L23;
     }
    case 1:
     {
      _ma_src__build_sinc_table__rectangular(HEAP32[i5 >> 2] | 0);
      break L23;
     }
    default:
     {
      HEAP32[i6 >> 2] = -2;
      i6 = HEAP32[i6 >> 2] | 0;
      STACKTOP = i7;
      return i6 | 0;
     }
    }
   } while (0);
   HEAP32[i6 >> 2] = 0;
   i6 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i7;
   return i6 | 0;
  }
  HEAP32[i6 >> 2] = -2;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i6 >> 2] = -2;
 i6 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _stbir__calculate_coefficients_downsample(i6, f16, i11, i13, f9, i4, i2) {
 i6 = i6 | 0;
 f16 = Math_fround(f16);
 i11 = i11 | 0;
 i13 = i13 | 0;
 f9 = Math_fround(f9);
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 36 | 0;
 i17 = i1 + 32 | 0;
 i12 = i1 + 28 | 0;
 i14 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i15 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAPF32[i17 >> 2] = f16;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i14 >> 2] = i13;
 HEAPF32[i10 >> 2] = f9;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 i13 = (HEAP32[i14 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0;
 f16 = Math_fround(HEAPF32[i17 >> 2]);
 if ((i13 | 0) > (~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[HEAP32[28352 + (HEAP32[i7 >> 2] << 3) + 4 >> 2] & 7](f16)) * Math_fround(2.0)))) | 0)) ___assert_fail(56649, 54884, 1091, 56754);
 HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[i12 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i14 >> 2];
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) ___assert_fail(56795, 54884, 1096, 56754);
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) > ((HEAP32[i14 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0)) break;
  f9 = Math_fround(Math_fround((HEAP32[i8 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0) + Math_fround(.5));
  HEAPF32[i15 >> 2] = f9;
  f9 = Math_fround(HEAPF32[i15 >> 2]);
  f9 = Math_fround(f9 - Math_fround(HEAPF32[i10 >> 2]));
  HEAPF32[i1 >> 2] = f9;
  f9 = Math_fround(HEAPF32[i1 >> 2]);
  f16 = Math_fround(HEAPF32[i17 >> 2]);
  f16 = Math_fround(FUNCTION_TABLE_fff[HEAP32[28352 + (HEAP32[i7 >> 2] << 3) >> 2] & 7](f9, f16));
  f16 = Math_fround(f16 * Math_fround(HEAPF32[i17 >> 2]));
  HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] = f16;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 f9 = Math_fround(Math_fround((HEAP32[i14 >> 2] | 0) + 1 | 0) + Math_fround(.5));
 f9 = Math_fround(f9 - Math_fround(HEAPF32[i10 >> 2]));
 f16 = Math_fround(HEAPF32[i17 >> 2]);
 if (!(Math_fround(FUNCTION_TABLE_fff[HEAP32[28352 + (HEAP32[i7 >> 2] << 3) >> 2] & 7](f9, f16)) == Math_fround(0.0))) ___assert_fail(56830, 54884, 1105, 56754);
 HEAP32[i8 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) < 0) {
   i1 = 14;
   break;
  }
  if (Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2]) != Math_fround(0.0)) {
   i1 = 14;
   break;
  }
  HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + (HEAP32[i8 >> 2] | 0) - 1;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
 }
 if ((i1 | 0) == 14) {
  STACKTOP = i18;
  return;
 }
}

function _rlEnd() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i1 = i6 + 16 | 0;
 i3 = i6 + 12 | 0;
 i2 = i6 + 8 | 0;
 i5 = i6 + 4 | 0;
 i4 = i6;
 L1 : do if ((HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] | 0) != (HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 >> 2] | 0)) {
  i7 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
  HEAP32[i1 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i7 + 8 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i1 >> 2] | 0)) break L1;
   i7 = HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 20 >> 2] | 0;
   i8 = HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[i7 + i8 >> 0] = HEAP8[i7 + (i8 - 4) >> 0] | 0;
   i8 = HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 20 >> 2] | 0;
   i7 = HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[i8 + (i7 + 1) >> 0] = HEAP8[i8 + (i7 - 3) >> 0] | 0;
   i7 = HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 20 >> 2] | 0;
   i8 = HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[i7 + (i8 + 2) >> 0] = HEAP8[i7 + (i8 - 2) >> 0] | 0;
   i8 = HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 20 >> 2] | 0;
   i7 = HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[i8 + (i7 + 3) >> 0] = HEAP8[i8 + (i7 - 1) >> 0] | 0;
   i7 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  }
 } while (0);
 L7 : do if ((HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] | 0) != (HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 4 >> 2] | 0)) {
  i8 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
  HEAP32[i2 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i2 >> 2] | 0)) break L7;
   i8 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
   HEAPF32[(HEAP32[i8 + 16 >> 2] | 0) + (HEAP32[i8 + 4 >> 2] << 1 << 2) >> 2] = Math_fround(0.0);
   i8 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
   HEAPF32[(HEAP32[i8 + 16 >> 2] | 0) + ((HEAP32[i8 + 4 >> 2] << 1) + 1 << 2) >> 2] = Math_fround(0.0);
   i8 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) + 4 | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
 } while (0);
 f9 = Math_fround(Math_fround(HEAPF32[7869]) + Math_fround(.0000499999987));
 HEAPF32[7869] = f9;
 if ((HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] | 0) < 8188) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[43911];
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) < 0) break;
  _rlPopMatrix();
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
 }
 _rlglDraw();
 STACKTOP = i6;
 return;
}

function _stbi__do_png(i3, i7, i8, i2, i4, i6) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i12 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i15 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i11 = i1 + 8 | 0;
 i13 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i14 >> 2] = i7;
 HEAP32[i15 >> 2] = i8;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i5 >> 2] = 0;
 if ((HEAP32[i11 >> 2] | 0) < 0 | (HEAP32[i11 >> 2] | 0) > 4) {
  i15 = (_stbi__err(53709) | 0) != 0;
  HEAP32[i12 >> 2] = i15 ? 0 : 0;
  i15 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (_stbi__parse_png_file(HEAP32[i10 >> 2] | 0, 0, HEAP32[i11 >> 2] | 0) | 0) {
  if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) < 8) HEAP32[HEAP32[i13 >> 2] >> 2] = 8; else HEAP32[HEAP32[i13 >> 2] >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2];
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2];
  HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] = 0;
  if (HEAP32[i11 >> 2] | 0) if ((HEAP32[i11 >> 2] | 0) != (HEAP32[(HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + 12 >> 2] | 0)) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == 8) {
    i13 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
    i13 = _stbi__convert_format(i1, HEAP32[i13 + 12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[HEAP32[HEAP32[i10 >> 2] >> 2] >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0) | 0;
    HEAP32[i5 >> 2] = i13;
   } else {
    i13 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
    i13 = _stbi__convert_format16(i1, HEAP32[i13 + 12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[HEAP32[HEAP32[i10 >> 2] >> 2] >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0) | 0;
    HEAP32[i5 >> 2] = i13;
   }
   HEAP32[(HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + 12 >> 2] = HEAP32[i11 >> 2];
   if (!(HEAP32[i5 >> 2] | 0)) {
    HEAP32[i12 >> 2] = HEAP32[i5 >> 2];
    i15 = HEAP32[i12 >> 2] | 0;
    STACKTOP = i16;
    return i15 | 0;
   }
  }
  HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[HEAP32[HEAP32[i10 >> 2] >> 2] >> 2];
  HEAP32[HEAP32[i15 >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + 4 >> 2];
  if (HEAP32[i9 >> 2] | 0) HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + 8 >> 2];
 }
 _free(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] = 0;
 _free(HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = 0;
 _free(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[i12 >> 2] = HEAP32[i5 >> 2];
 i15 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _jar_xm_create_context_from_file(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = STACKTOP;
 i16 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i13 = i16 + 40 | 0;
 i12 = i16 + 32 | 0;
 i11 = i16 + 24 | 0;
 i10 = i16 + 16 | 0;
 i8 = i16 + 72 | 0;
 i2 = i16 + 68 | 0;
 i6 = i16 + 64 | 0;
 i17 = i16 + 60 | 0;
 i14 = i16 + 56 | 0;
 i9 = i16 + 52 | 0;
 i7 = i16 + 48 | 0;
 i3 = i16 + 44 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i17 >> 2] = i4;
 i5 = _fopen(HEAP32[i17 >> 2] | 0, 53420) | 0;
 HEAP32[i14 >> 2] = i5;
 if (!(HEAP32[i14 >> 2] | 0)) {
  _fprintf(HEAP32[7885] | 0, 48136, i16) | 0;
  _fflush(HEAP32[7885] | 0) | 0;
  HEAP32[HEAP32[i2 >> 2] >> 2] = 0;
  HEAP32[i8 >> 2] = 3;
  i17 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i15;
  return i17 | 0;
 }
 _fseek(HEAP32[i14 >> 2] | 0, 0, 2) | 0;
 i17 = _ftell(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i17;
 _rewind(HEAP32[i14 >> 2] | 0);
 if ((HEAP32[i9 >> 2] | 0) == -1) {
  _fclose(HEAP32[i14 >> 2] | 0) | 0;
  _fprintf(HEAP32[7885] | 0, 48162, i16 + 8 | 0) | 0;
  _fflush(HEAP32[7885] | 0) | 0;
  HEAP32[HEAP32[i2 >> 2] >> 2] = 0;
  HEAP32[i8 >> 2] = 4;
  i17 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i15;
  return i17 | 0;
 }
 i17 = _malloc((HEAP32[i9 >> 2] | 0) + 1 | 0) | 0;
 HEAP32[i3 >> 2] = i17;
 if (HEAP32[i3 >> 2] | 0) {
  i17 = _fread(HEAP32[i3 >> 2] | 0, 1, HEAP32[i9 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
  if (i17 >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) {
   _fclose(HEAP32[i14 >> 2] | 0) | 0;
   i17 = _jar_xm_create_context_safe(HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i17;
   _free(HEAP32[i3 >> 2] | 0);
   switch (HEAP32[i7 >> 2] | 0) {
   case 0:
    {
     HEAP32[i8 >> 2] = 0;
     i17 = HEAP32[i8 >> 2] | 0;
     STACKTOP = i15;
     return i17 | 0;
    }
   case 1:
    {
     _fprintf(HEAP32[7885] | 0, 48214, i11) | 0;
     _fflush(HEAP32[7885] | 0) | 0;
     HEAP32[HEAP32[i2 >> 2] >> 2] = 0;
     HEAP32[i8 >> 2] = 1;
     i17 = HEAP32[i8 >> 2] | 0;
     STACKTOP = i15;
     return i17 | 0;
    }
   case 2:
    {
     _fprintf(HEAP32[7885] | 0, 48260, i12) | 0;
     _fflush(HEAP32[7885] | 0) | 0;
     _exit(1);
     break;
    }
   default:
    {
     _fprintf(HEAP32[7885] | 0, 48301, i13) | 0;
     _fflush(HEAP32[7885] | 0) | 0;
     _exit(1);
    }
   }
  }
 }
 _fclose(HEAP32[i14 >> 2] | 0) | 0;
 _fprintf(HEAP32[7885] | 0, HEAP32[i3 >> 2] | 0 ? 48177 : 48192, i10) | 0;
 _fflush(HEAP32[7885] | 0) | 0;
 _free(HEAP32[i3 >> 2] | 0);
 HEAP32[HEAP32[i2 >> 2] >> 2] = 0;
 HEAP32[i8 >> 2] = 5;
 i17 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i15;
 return i17 | 0;
}

function _UpdateAudioStream(i9, i3, i7) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = 0;
 i16 = STACKTOP;
 i17 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i14 = i17 + 8 | 0;
 i13 = i17;
 i4 = i17 + 52 | 0;
 i8 = i17 + 48 | 0;
 i1 = i17 + 44 | 0;
 i12 = i17 + 40 | 0;
 i11 = i17 + 36 | 0;
 i10 = i17 + 32 | 0;
 i5 = i17 + 28 | 0;
 i2 = i17 + 24 | 0;
 i6 = i17 + 20 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i1 >> 2] = HEAP32[i9 + 12 >> 2];
 if (!(HEAP32[i1 >> 2] | 0)) {
  _TraceLog(5, 51433, i17 + 16 | 0);
  STACKTOP = i16;
  return;
 }
 if (!(HEAP8[(HEAP32[i1 >> 2] | 0) + 46544 >> 0] & 1)) if (!(HEAP8[(HEAP32[i1 >> 2] | 0) + 46544 + 1 >> 0] & 1)) {
  _TraceLog(5, 51371, i14);
  STACKTOP = i16;
  return;
 }
 HEAP32[i12 >> 2] = 0;
 if (HEAP8[(HEAP32[i1 >> 2] | 0) + 46544 >> 0] & 1) if (HEAP8[(HEAP32[i1 >> 2] | 0) + 46544 + 1 >> 0] & 1) {
  HEAP32[i12 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 46548 >> 2] = 0;
 } else i15 = 7; else i15 = 7;
 if ((i15 | 0) == 7) HEAP32[i12 >> 2] = HEAP8[(HEAP32[i1 >> 2] | 0) + 46544 >> 0] & 1 ? 0 : 1;
 HEAP32[i11 >> 2] = ((HEAP32[(HEAP32[i1 >> 2] | 0) + 46552 >> 2] | 0) >>> 0) / 2 | 0;
 i17 = Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i9 + 8 >> 2] | 0) | 0;
 i17 = Math_imul(i17, ((HEAP32[i9 + 4 >> 2] | 0) >>> 0) / 8 | 0) | 0;
 i17 = (HEAP32[(HEAP32[i1 >> 2] | 0) + 46560 >> 2] | 0) + (Math_imul(i17, HEAP32[i12 >> 2] | 0) | 0) | 0;
 HEAP32[i10 >> 2] = i17;
 i17 = (HEAP32[i1 >> 2] | 0) + 46556 | 0;
 HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 if ((HEAP32[i11 >> 2] | 0) >>> 0 < (((HEAP32[i8 >> 2] | 0) >>> 0) / ((HEAP32[i9 + 8 >> 2] | 0) >>> 0) | 0) >>> 0) {
  _TraceLog(5, 51303, i13);
  STACKTOP = i16;
  return;
 }
 HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
 if ((HEAP32[i5 >> 2] | 0) >>> 0 > (((HEAP32[i8 >> 2] | 0) >>> 0) / ((HEAP32[i9 + 8 >> 2] | 0) >>> 0) | 0) >>> 0) HEAP32[i5 >> 2] = ((HEAP32[i8 >> 2] | 0) >>> 0) / ((HEAP32[i9 + 8 >> 2] | 0) >>> 0) | 0;
 i17 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i9 + 8 >> 2] | 0) | 0;
 i17 = Math_imul(i17, ((HEAP32[i9 + 4 >> 2] | 0) >>> 0) / 8 | 0) | 0;
 HEAP32[i2 >> 2] = i17;
 _memcpy(HEAP32[i10 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i5 >> 2] | 0);
 if ((HEAP32[i6 >> 2] | 0) >>> 0 > 0) {
  i17 = Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i9 + 8 >> 2] | 0) | 0;
  _memset((HEAP32[i10 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) | 0, 0, Math_imul(i17, ((HEAP32[i9 + 4 >> 2] | 0) >>> 0) / 8 | 0) | 0) | 0;
 }
 HEAP8[(HEAP32[i1 >> 2] | 0) + 46544 + (HEAP32[i12 >> 2] | 0) >> 0] = 0;
 STACKTOP = i16;
 return;
}

function _drmp3_L12_read_scale_info(i5, i4, i7) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i10 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i12 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 i1 = i1 + 32 | 0;
 HEAP32[i10 >> 2] = i5;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i12 >> 2] = i7;
 i7 = _drmp3_L12_subband_alloc_table(HEAP32[i10 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i3 >> 2] = 15120;
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= (HEAPU8[(HEAP32[i12 >> 2] | 0) + 768 >> 0] | 0)) break;
  if ((HEAP32[i11 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) {
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAPU8[(HEAP32[i8 >> 2] | 0) + 2 >> 0] | 0);
   HEAP32[i2 >> 2] = HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0];
   HEAP32[i3 >> 2] = 15120 + (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0);
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 3;
  }
  i7 = HEAP32[i3 >> 2] | 0;
  i7 = i7 + (_drmp3_bs_get_bits(HEAP32[i9 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) | 0;
  HEAP8[i1 >> 0] = HEAP8[i7 >> 0] | 0;
  HEAP8[(HEAP32[i12 >> 2] | 0) + 770 + (HEAP32[i11 >> 2] << 1) >> 0] = HEAP8[i1 >> 0] | 0;
  if ((HEAP32[i11 >> 2] | 0) < (HEAPU8[(HEAP32[i12 >> 2] | 0) + 769 >> 0] | 0)) {
   i7 = HEAP32[i3 >> 2] | 0;
   i7 = i7 + (_drmp3_bs_get_bits(HEAP32[i9 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) | 0;
   HEAP8[i1 >> 0] = HEAP8[i7 >> 0] | 0;
  }
  i7 = HEAP32[i12 >> 2] | 0;
  HEAP8[i7 + 770 + ((HEAP32[i11 >> 2] << 1) + 1) >> 0] = HEAPU8[i7 + 769 >> 0] | 0 ? HEAPU8[i1 >> 0] | 0 : 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= (HEAPU8[(HEAP32[i12 >> 2] | 0) + 768 >> 0] << 1 | 0)) break;
  if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 770 + (HEAP32[i11 >> 2] | 0) >> 0] | 0) if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 1 >> 0] & 6 | 0) == 6) i1 = 2; else i1 = _drmp3_bs_get_bits(HEAP32[i9 >> 2] | 0, 2) | 0; else i1 = 6;
  HEAP8[(HEAP32[i12 >> 2] | 0) + 834 + (HEAP32[i11 >> 2] | 0) >> 0] = i1;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 i10 = HEAP32[i12 >> 2] | 0;
 _drmp3_L12_read_scalefactors(HEAP32[i9 >> 2] | 0, i10 + 770 | 0, i10 + 834 | 0, HEAPU8[i10 + 768 >> 0] << 1, i10 | 0);
 HEAP32[i11 >> 2] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 769 >> 0];
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= (HEAPU8[(HEAP32[i12 >> 2] | 0) + 768 >> 0] | 0)) break;
  HEAP8[(HEAP32[i12 >> 2] | 0) + 770 + ((HEAP32[i11 >> 2] << 1) + 1) >> 0] = 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 STACKTOP = i13;
 return;
}

function _stbir__buffer_loop_upsample(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 24 | 0;
 i9 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i8 >> 2] = i2;
 f11 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + 60 >> 2]);
 HEAPF32[i7 >> 2] = f11;
 f11 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i7 >> 2]));
 f11 = Math_fround(FUNCTION_TABLE_ff[HEAP32[28352 + (HEAP32[(HEAP32[i8 >> 2] | 0) + 84 >> 2] << 3) + 4 >> 2] & 7](f11));
 f11 = Math_fround(f11 * Math_fround(HEAPF32[i7 >> 2]));
 HEAPF32[i6 >> 2] = f11;
 if (!(_stbir__use_height_upsampling(HEAP32[i8 >> 2] | 0) | 0)) ___assert_fail(56399, 54884, 2069, 56440);
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0)) {
   i1 = 19;
   break;
  }
  HEAPF32[i4 >> 2] = Math_fround(0.0);
  HEAP32[i5 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  f12 = Math_fround(HEAPF32[i6 >> 2]);
  f11 = Math_fround(HEAPF32[i7 >> 2]);
  _stbir__calculate_sample_range_upsample(HEAP32[i9 >> 2] | 0, f12, f11, Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + 52 >> 2]), i5, i3, i4);
  if (((HEAP32[i3 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[i8 >> 2] | 0) + 164 >> 2] | 0)) {
   i1 = 6;
   break;
  }
  L8 : do if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 176 >> 2] | 0) >= 0) {
   while (1) {
    if ((HEAP32[i5 >> 2] | 0) <= (HEAP32[(HEAP32[i8 >> 2] | 0) + 168 >> 2] | 0)) break L8;
    i1 = HEAP32[i8 >> 2] | 0;
    if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 168 >> 2] | 0) == (HEAP32[(HEAP32[i8 >> 2] | 0) + 172 >> 2] | 0)) break;
    i2 = i1 + 168 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
    i2 = (HEAP32[i8 >> 2] | 0) + 176 | 0;
    i1 = HEAP32[i8 >> 2] | 0;
    HEAP32[i2 >> 2] = ((HEAP32[i2 >> 2] | 0) + 1 | 0) % (HEAP32[i1 + 164 >> 2] | 0) | 0;
   }
   HEAP32[i1 + 176 >> 2] = -1;
   HEAP32[(HEAP32[i8 >> 2] | 0) + 168 >> 2] = 0;
   HEAP32[(HEAP32[i8 >> 2] | 0) + 172 >> 2] = 0;
  } while (0);
  if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 176 >> 2] | 0) < 0) _stbir__decode_and_resample_upsample(HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0);
  while (1) {
   i1 = HEAP32[i8 >> 2] | 0;
   if ((HEAP32[i3 >> 2] | 0) <= (HEAP32[(HEAP32[i8 >> 2] | 0) + 172 >> 2] | 0)) break;
   _stbir__decode_and_resample_upsample(i1, (HEAP32[(HEAP32[i8 >> 2] | 0) + 172 >> 2] | 0) + 1 | 0);
  }
  _stbir__resample_vertical_upsample(i1, HEAP32[i9 >> 2] | 0);
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 6) ___assert_fail(56468, 54884, 2078, 56440); else if ((i1 | 0) == 19) {
  STACKTOP = i10;
  return;
 }
}

function _stbi__expand_png_palette(i1, i11, i4, i9) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 i17 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i17 + 44 | 0;
 i2 = i17 + 40 | 0;
 i12 = i17 + 36 | 0;
 i10 = i17 + 28 | 0;
 i3 = i17 + 24 | 0;
 i13 = i17 + 20 | 0;
 i8 = i17 + 16 | 0;
 i15 = i17 + 12 | 0;
 i7 = i17 + 8 | 0;
 i5 = i17 + 4 | 0;
 i6 = i17;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i17 + 32 >> 2] = i4;
 HEAP32[i10 >> 2] = i9;
 i17 = Math_imul(HEAP32[HEAP32[HEAP32[i2 >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[i2 >> 2] >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i17;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2];
 i17 = _stbi__malloc_mad2(HEAP32[i13 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0) | 0;
 HEAP32[i8 >> 2] = i17;
 if (!(HEAP32[i8 >> 2] | 0)) {
  i17 = _stbi__err(53511) | 0;
  HEAP32[i14 >> 2] = i17;
  i17 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i16;
  return i17 | 0;
 }
 HEAP32[i15 >> 2] = HEAP32[i8 >> 2];
 i17 = (HEAP32[i10 >> 2] | 0) == 3;
 HEAP32[i3 >> 2] = 0;
 L5 : do if (i17) while (1) {
  if ((HEAP32[i3 >> 2] | 0) >>> 0 >= (HEAP32[i13 >> 2] | 0) >>> 0) break L5;
  HEAP32[i5 >> 2] = (HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] | 0) << 2;
  HEAP8[HEAP32[i8 >> 2] >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) + 1) >> 0] | 0;
  HEAP8[(HEAP32[i8 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) + 2) >> 0] | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 3;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 } else while (1) {
  if ((HEAP32[i3 >> 2] | 0) >>> 0 >= (HEAP32[i13 >> 2] | 0) >>> 0) break L5;
  HEAP32[i6 >> 2] = (HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] | 0) << 2;
  HEAP8[HEAP32[i8 >> 2] >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 1) >> 0] | 0;
  HEAP8[(HEAP32[i8 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 2) >> 0] | 0;
  HEAP8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 3) >> 0] | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 4;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 } while (0);
 _free(HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i14 >> 2] = 1;
 i17 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i16;
 return i17 | 0;
}

function _stbir__empty_ring_buffer(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = 0;
 i17 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i15 = i1 + 52 | 0;
 i8 = i1 + 48 | 0;
 i11 = i1 + 44 | 0;
 i6 = i1 + 40 | 0;
 i5 = i1 + 36 | 0;
 i19 = i1 + 32 | 0;
 i18 = i1 + 28 | 0;
 i12 = i1 + 24 | 0;
 i9 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i13 = i1 + 12 | 0;
 i14 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2];
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 64 >> 2];
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 68 >> 2];
 HEAP32[i19 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 76 >> 2];
 HEAP32[i18 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 96 >> 2];
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 20 >> 2];
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 16 >> 2];
 HEAP32[i7 >> 2] = (HEAP32[i19 >> 2] << 1) + (HEAP32[i18 >> 2] | 0);
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 180 >> 2];
 HEAP32[i14 >> 2] = ((HEAP32[(HEAP32[i15 >> 2] | 0) + 160 >> 2] | 0) >>> 0) / 4 | 0;
 if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 176 >> 2] | 0) < 0) {
  STACKTOP = i17;
  return;
 }
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[(HEAP32[i15 >> 2] | 0) + 168 >> 2] | 0)) {
   i16 = 10;
   break;
  }
  if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 168 >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 168 >> 2] | 0) < (HEAP32[(HEAP32[i15 >> 2] | 0) + 24 >> 2] | 0)) {
   i19 = Math_imul(HEAP32[(HEAP32[i15 >> 2] | 0) + 168 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i19;
   i19 = _stbir__get_ring_buffer_entry(HEAP32[i13 >> 2] | 0, HEAP32[(HEAP32[i15 >> 2] | 0) + 176 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i19;
   _stbir__encode_scanline(HEAP32[i15 >> 2] | 0, HEAP32[i12 >> 2] | 0, (HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0, HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  }
  i1 = HEAP32[i15 >> 2] | 0;
  if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 168 >> 2] | 0) == (HEAP32[(HEAP32[i15 >> 2] | 0) + 172 >> 2] | 0)) break;
  i19 = i1 + 168 | 0;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
  i19 = (HEAP32[i15 >> 2] | 0) + 176 | 0;
  i18 = HEAP32[i15 >> 2] | 0;
  HEAP32[i19 >> 2] = ((HEAP32[i19 >> 2] | 0) + 1 | 0) % (HEAP32[i18 + 164 >> 2] | 0) | 0;
 }
 if ((i16 | 0) == 10) {
  STACKTOP = i17;
  return;
 }
 HEAP32[i1 + 176 >> 2] = -1;
 HEAP32[(HEAP32[i15 >> 2] | 0) + 168 >> 2] = 0;
 HEAP32[(HEAP32[i15 >> 2] | 0) + 172 >> 2] = 0;
 STACKTOP = i17;
 return;
}

function _ma_worker_thread(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i19 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i14 = i1 + 64 | 0;
 i18 = i1 + 60 | 0;
 i13 = i1 + 56 | 0;
 i7 = i1 + 52 | 0;
 i12 = i1 + 48 | 0;
 i17 = i1 + 44 | 0;
 i11 = i1 + 40 | 0;
 i6 = i1 + 36 | 0;
 i10 = i1 + 32 | 0;
 i16 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i15 = i1 + 20 | 0;
 i4 = i1 + 16 | 0;
 i2 = i1 + 12 | 0;
 i20 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i20 >> 2] = i3;
 HEAP32[i8 >> 2] = HEAP32[i20 >> 2];
 if (!(HEAP32[i8 >> 2] | 0)) ___assert_fail(36359, 36381, 25584, 45175);
 HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i2 >> 2] = 1;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = HEAP32[i2 >> 2];
 _ma_event_signal((HEAP32[i8 >> 2] | 0) + 228 | 0) | 0;
 while (1) {
  _ma_event_wait((HEAP32[i8 >> 2] | 0) + 60 | 0) | 0;
  HEAP32[(HEAP32[i8 >> 2] | 0) + 320 >> 2] = 0;
  HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i15 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2];
  i2 = HEAP32[i8 >> 2] | 0;
  if (!(HEAP32[i15 >> 2] | 0)) {
   i1 = 18;
   break;
  }
  HEAP32[i10 >> 2] = i2;
  HEAP32[i16 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2];
  if ((HEAP32[i16 >> 2] | 0) != 3) {
   i1 = 6;
   break;
  }
  HEAP32[i13 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i7 >> 2] = 2;
  HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] = HEAP32[i7 >> 2];
  _ma_event_signal((HEAP32[i8 >> 2] | 0) + 144 | 0) | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if (HEAP32[(HEAP32[HEAP32[i8 >> 2] >> 2] | 0) + 132 >> 2] | 0) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 132 >> 2] & 31](HEAP32[i8 >> 2] | 0) | 0; else _ma_post_error(i1, 1, 45227, -105) | 0;
  HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i18 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2];
  if (HEAP32[i18 >> 2] | 0) if (HEAP32[(HEAP32[HEAP32[i8 >> 2] >> 2] | 0) + 128 >> 2] | 0) FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i8 >> 2] >> 2] | 0) + 128 >> 2] & 31](HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2];
  if (HEAP32[i5 >> 2] | 0) FUNCTION_TABLE_vi[HEAP32[i5 >> 2] & 31](HEAP32[i8 >> 2] | 0);
  HEAP32[i12 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i17 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2];
  if (HEAP32[i17 >> 2] | 0) {
   HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i6 >> 2] = 1;
   HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] = HEAP32[i6 >> 2];
   _ma_event_signal((HEAP32[i8 >> 2] | 0) + 228 | 0) | 0;
  }
 }
 if ((i1 | 0) == 6) ___assert_fail(45192, 36381, 25618, 45175); else if ((i1 | 0) == 18) {
  _ma_event_signal(i2 + 228 | 0) | 0;
  STACKTOP = i19;
  return 0;
 }
 return 0;
}

function _drmp3_L3_stereo_process(i10, i6, i17, i2, i12, i15) {
 i10 = i10 | 0;
 i6 = i6 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i15 = i15 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0, i14 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, f21 = f0, f22 = f0;
 i19 = 0;
 i20 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i11 = i1 + 44 | 0;
 i7 = i1 + 40 | 0;
 i18 = i1 + 36 | 0;
 i3 = i1 + 32 | 0;
 i13 = i1 + 28 | 0;
 i16 = i1 + 24 | 0;
 i4 = i1 + 20 | 0;
 i14 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i16 >> 2] = i15;
 HEAP32[i14 >> 2] = HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] & 8 | 0 ? 7 : 64;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if (!(HEAP8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] | 0)) break;
  HEAP32[i5 >> 2] = HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0];
  if ((HEAP32[i4 >> 2] | 0) > (HEAP32[(HEAP32[i13 >> 2] | 0) + ((((HEAP32[i4 >> 2] | 0) >>> 0) % 3 | 0) << 2) >> 2] | 0)) if ((HEAP32[i5 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
   f21 = HEAPU8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] & 32 | 0 ? Math_fround(1.41421354) : Math_fround(1.0);
   HEAPF32[i1 >> 2] = f21;
   if (HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] & 8 | 0) {
    f21 = Math_fround(HEAPF32[16816 + (HEAP32[i5 >> 2] << 1 << 2) >> 2]);
    HEAPF32[i8 >> 2] = f21;
    f21 = Math_fround(HEAPF32[16816 + ((HEAP32[i5 >> 2] << 1) + 1 << 2) >> 2]);
    HEAPF32[i9 >> 2] = f21;
   } else {
    HEAPF32[i8 >> 2] = Math_fround(1.0);
    f21 = Math_fround(_drmp3_L3_ldexp_q2(Math_fround(1.0), ((HEAP32[i5 >> 2] | 0) + 1 | 0) >>> 1 << HEAP32[i16 >> 2]));
    HEAPF32[i9 >> 2] = f21;
    if (HEAP32[i5 >> 2] & 1 | 0) {
     f21 = Math_fround(HEAPF32[i9 >> 2]);
     HEAPF32[i8 >> 2] = f21;
     HEAPF32[i9 >> 2] = Math_fround(1.0);
    }
   }
   f22 = Math_fround(HEAPF32[i8 >> 2]);
   f22 = Math_fround(f22 * Math_fround(HEAPF32[i1 >> 2]));
   f21 = Math_fround(HEAPF32[i9 >> 2]);
   _drmp3_L3_intensity_stereo_band(HEAP32[i11 >> 2] | 0, HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] | 0, f22, Math_fround(f21 * Math_fround(HEAPF32[i1 >> 2])));
  } else i19 = 10; else i19 = 10;
  if ((i19 | 0) == 10) {
   i19 = 0;
   if (HEAPU8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] & 32 | 0) _drmp3_L3_midside_stereo(HEAP32[i11 >> 2] | 0, HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] | 0);
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] << 2);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i20;
 return;
}

function _stbi__de_iphone(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i12 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i5 = i1;
 i8 = i1 + 24 | 0;
 i2 = i1 + 23 | 0;
 i9 = i1 + 22 | 0;
 i3 = i1 + 21 | 0;
 i1 = i1 + 20 | 0;
 HEAP32[i12 >> 2] = i10;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i12 >> 2] >> 2];
 i10 = Math_imul(HEAP32[HEAP32[i7 >> 2] >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i10;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2];
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) == 3) {
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) break;
   HEAP8[i8 >> 0] = HEAP8[HEAP32[i5 >> 2] >> 0] | 0;
   HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] = HEAP8[i8 >> 0] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 3;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  STACKTOP = i11;
  return;
 }
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) != 4) ___assert_fail(54050, 53449, 4767, 54068);
 HEAP32[i4 >> 2] = 0;
 if (!0) {
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) break;
   HEAP8[i1 >> 0] = HEAP8[HEAP32[i5 >> 2] >> 0] | 0;
   HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] = HEAP8[i1 >> 0] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 4;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  STACKTOP = i11;
  return;
 }
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) break;
  HEAP8[i2 >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + 3 >> 0] | 0;
  HEAP8[i9 >> 0] = HEAP8[HEAP32[i5 >> 2] >> 0] | 0;
  if (HEAP8[i2 >> 0] | 0) {
   HEAP8[i3 >> 0] = (HEAPU8[i2 >> 0] | 0) / 2 | 0;
   HEAP8[HEAP32[i5 >> 2] >> 0] = (((HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0) * 255 | 0) + (HEAPU8[i3 >> 0] | 0) | 0) / (HEAPU8[i2 >> 0] | 0) | 0;
   i12 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
   HEAP8[i12 >> 0] = (((HEAPU8[i12 >> 0] | 0) * 255 | 0) + (HEAPU8[i3 >> 0] | 0) | 0) / (HEAPU8[i2 >> 0] | 0) | 0;
   HEAP8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] = (((HEAPU8[i9 >> 0] | 0) * 255 | 0) + (HEAPU8[i3 >> 0] | 0) | 0) / (HEAPU8[i2 >> 0] | 0) | 0;
  } else {
   HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] = HEAP8[i9 >> 0] | 0;
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 4;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i11;
 return;
}

function _stbv_init_blocksize(i4, i2, i6) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i8 >> 2] = HEAP32[i7 >> 2] >> 1;
 HEAP32[i11 >> 2] = HEAP32[i7 >> 2] >> 2;
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2] >> 3;
 i6 = _stbv_setup_malloc(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] << 2) | 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 1068 + (HEAP32[i3 >> 2] << 2) >> 2] = i6;
 i6 = _stbv_setup_malloc(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] << 2) | 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 1076 + (HEAP32[i3 >> 2] << 2) >> 2] = i6;
 i6 = _stbv_setup_malloc(HEAP32[i5 >> 2] | 0, HEAP32[i11 >> 2] << 2) | 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 1084 + (HEAP32[i3 >> 2] << 2) >> 2] = i6;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 1068 + (HEAP32[i3 >> 2] << 2) >> 2] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 1076 + (HEAP32[i3 >> 2] << 2) >> 2] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 1084 + (HEAP32[i3 >> 2] << 2) >> 2] | 0) {
  i6 = HEAP32[i5 >> 2] | 0;
  i11 = HEAP32[i3 >> 2] << 2 | 0;
  _stbv_compute_twiddle_factors(HEAP32[i7 >> 2] | 0, HEAP32[i6 + 1068 + i11 >> 2] | 0, HEAP32[i6 + 1076 + i11 >> 2] | 0, HEAP32[i6 + 1084 + i11 >> 2] | 0);
  i11 = _stbv_setup_malloc(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] << 2) | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 1092 + (HEAP32[i3 >> 2] << 2) >> 2] = i11;
  if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 1092 + (HEAP32[i3 >> 2] << 2) >> 2] | 0)) {
   i11 = _stbv_error(HEAP32[i5 >> 2] | 0, 3) | 0;
   HEAP32[i9 >> 2] = i11;
   i11 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i10;
   return i11 | 0;
  }
  _stbv_compute_window(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 1092 + (HEAP32[i3 >> 2] << 2) >> 2] | 0);
  i11 = _stbv_setup_malloc(HEAP32[i5 >> 2] | 0, HEAP32[i1 >> 2] << 1) | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 1100 + (HEAP32[i3 >> 2] << 2) >> 2] = i11;
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 1100 + (HEAP32[i3 >> 2] << 2) >> 2] | 0) {
   _stbv_compute_bitreverse(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 1100 + (HEAP32[i3 >> 2] << 2) >> 2] | 0);
   HEAP32[i9 >> 2] = 1;
   i11 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i10;
   return i11 | 0;
  } else {
   i11 = _stbv_error(HEAP32[i5 >> 2] | 0, 3) | 0;
   HEAP32[i9 >> 2] = i11;
   i11 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i10;
   return i11 | 0;
  }
 }
 i11 = _stbv_error(HEAP32[i5 >> 2] | 0, 3) | 0;
 HEAP32[i9 >> 2] = i11;
 i11 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i10;
 return i11 | 0;
}

function _drmp3_L12_dequantize_granule(i4, i2, i6, i5) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, f20 = f0;
 i19 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i11 = i1 + 48 | 0;
 i8 = i1 + 44 | 0;
 i18 = i1 + 40 | 0;
 i12 = i1 + 36 | 0;
 i14 = i1 + 32 | 0;
 i15 = i1 + 28 | 0;
 i16 = i1 + 24 | 0;
 i9 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i13 = i1 + 8 | 0;
 i17 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i18 >> 2] = i6;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i9 >> 2] = 576;
 HEAP32[i15 >> 2] = 0;
 while (1) {
  if ((HEAP32[i15 >> 2] | 0) >= 4) break;
  i6 = (HEAP32[i11 >> 2] | 0) + ((Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0) << 2) | 0;
  HEAP32[i10 >> 2] = i6;
  HEAP32[i14 >> 2] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAPU8[(HEAP32[i18 >> 2] | 0) + 768 >> 0] << 1 | 0)) break;
   HEAP32[i7 >> 2] = HEAPU8[(HEAP32[i18 >> 2] | 0) + 770 + (HEAP32[i14 >> 2] | 0) >> 0];
   L7 : do if (HEAP32[i7 >> 2] | 0) {
    i1 = HEAP32[i7 >> 2] | 0;
    if ((HEAP32[i7 >> 2] | 0) < 17) {
     HEAP32[i13 >> 2] = (1 << i1 - 1) - 1;
     HEAP32[i16 >> 2] = 0;
     while (1) {
      if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break L7;
      i6 = _drmp3_bs_get_bits(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
      f20 = Math_fround(i6 - (HEAP32[i13 >> 2] | 0) | 0);
      HEAPF32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] = f20;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
     }
    } else {
     HEAP32[i17 >> 2] = (2 << i1 - 17) + 1;
     i6 = HEAP32[i17 >> 2] | 0;
     i6 = _drmp3_bs_get_bits(HEAP32[i8 >> 2] | 0, i6 + 2 - ((i6 | 0) >>> 3) | 0) | 0;
     HEAP32[i3 >> 2] = i6;
     HEAP32[i16 >> 2] = 0;
     while (1) {
      if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break L7;
      i6 = (HEAP32[i17 >> 2] | 0) >>> 0 >>> 0;
      f20 = Math_fround((((HEAP32[i3 >> 2] | 0) >>> 0) % (i6 >>> 0) | 0) - ((i6 >>> 0) / 2 | 0) | 0);
      HEAPF32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] = f20;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
      HEAP32[i3 >> 2] = ((HEAP32[i3 >> 2] | 0) >>> 0) / ((HEAP32[i17 >> 2] | 0) >>> 0) | 0;
     }
    }
   } while (0);
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i9 >> 2] << 2);
   HEAP32[i9 >> 2] = 18 - (HEAP32[i9 >> 2] | 0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
 }
 STACKTOP = i19;
 return HEAP32[i12 >> 2] << 2 | 0;
}

function _stbir__calculate_transform(i2, f4, f8, f6, f10, i12) {
 i2 = i2 | 0;
 f4 = Math_fround(f4);
 f8 = Math_fround(f8);
 f6 = Math_fround(f6);
 f10 = Math_fround(f10);
 i12 = i12 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAPF32[i5 >> 2] = f4;
 HEAPF32[i9 >> 2] = f8;
 HEAPF32[i7 >> 2] = f6;
 HEAPF32[i11 >> 2] = f10;
 HEAP32[i1 >> 2] = i12;
 f10 = Math_fround(HEAPF32[i5 >> 2]);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = f10;
 f10 = Math_fround(HEAPF32[i9 >> 2]);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] = f10;
 f10 = Math_fround(HEAPF32[i7 >> 2]);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = f10;
 f10 = Math_fround(HEAPF32[i11 >> 2]);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] = f10;
 if (HEAP32[i1 >> 2] | 0) {
  f10 = Math_fround(HEAPF32[HEAP32[i1 >> 2] >> 2]);
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] = f10;
  f10 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 4 >> 2]);
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 60 >> 2] = f10;
  f10 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 8 >> 2]);
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] = f10;
  f10 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 12 >> 2]);
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] = f10;
  STACKTOP = i13;
  return;
 } else {
  f10 = Math_fround(HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0);
  f10 = Math_fround(f10 / Math_fround(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0));
  f8 = Math_fround(HEAPF32[i7 >> 2]);
  f8 = Math_fround(f10 / Math_fround(f8 - Math_fround(HEAPF32[i5 >> 2])));
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] = f8;
  f8 = Math_fround(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0);
  f8 = Math_fround(f8 / Math_fround(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0));
  f10 = Math_fround(HEAPF32[i11 >> 2]);
  f10 = Math_fround(f8 / Math_fround(f10 - Math_fround(HEAPF32[i9 >> 2])));
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 60 >> 2] = f10;
  f10 = Math_fround(HEAPF32[i5 >> 2]);
  f10 = Math_fround(f10 * Math_fround(HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0));
  f8 = Math_fround(HEAPF32[i7 >> 2]);
  f8 = Math_fround(f10 / Math_fround(f8 - Math_fround(HEAPF32[i5 >> 2])));
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] = f8;
  f8 = Math_fround(HEAPF32[i9 >> 2]);
  f8 = Math_fround(f8 * Math_fround(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0));
  f10 = Math_fround(HEAPF32[i11 >> 2]);
  f10 = Math_fround(f8 / Math_fround(f10 - Math_fround(HEAPF32[i9 >> 2])));
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] = f10;
  STACKTOP = i13;
  return;
 }
}

function _LoadOGG(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, f14 = f0, d15 = 0.0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i11 = i1 + 32 | 0;
 i10 = i1 + 24 | 0;
 i9 = i1 + 8 | 0;
 i8 = i1;
 i4 = i1 + 104 | 0;
 i12 = i1 + 84 | 0;
 i6 = i1 + 80 | 0;
 i5 = i1 + 56 | 0;
 i7 = i1 + 52 | 0;
 i1 = i1 + 48 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAP32[i12 + 16 >> 2] = 0;
 i3 = _stb_vorbis_open_filename(HEAP32[i4 >> 2] | 0, 0, 0) | 0;
 HEAP32[i6 >> 2] = i3;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
  _TraceLog(4, 50151, i8);
  HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  HEAP32[i2 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
  STACKTOP = i13;
  return;
 }
 _stb_vorbis_get_info(i5, HEAP32[i6 >> 2] | 0);
 HEAP32[i12 + 4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i12 + 8 >> 2] = 16;
 HEAP32[i12 + 12 >> 2] = HEAP32[i5 + 4 >> 2];
 i8 = _stb_vorbis_stream_length_in_samples(HEAP32[i6 >> 2] | 0) | 0;
 i8 = Math_imul(i8, HEAP32[i5 + 4 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = i8;
 f14 = Math_fround(_stb_vorbis_stream_length_in_seconds(HEAP32[i6 >> 2] | 0));
 HEAPF32[i7 >> 2] = f14;
 if (Math_fround(HEAPF32[i7 >> 2]) > Math_fround(10.0)) {
  d15 = +Math_fround(HEAPF32[i7 >> 2]);
  HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
  HEAPF64[i9 + 8 >> 3] = d15;
  _TraceLog(4, 50185, i9);
 }
 i8 = _malloc((Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 12 >> 2] | 0) | 0) << 1) | 0;
 HEAP32[i12 + 16 >> 2] = i8;
 i8 = _stb_vorbis_get_samples_short_interleaved(HEAP32[i6 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i12 + 16 >> 2] | 0, Math_imul(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 12 >> 2] | 0) | 0) | 0;
 HEAP32[i1 >> 2] = i8;
 i8 = HEAP32[i1 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i10 + 4 >> 2] = i8;
 _TraceLog(2, 50293, i10);
 i8 = HEAP32[i12 + 4 >> 2] | 0;
 i9 = HEAP32[i12 + 8 >> 2] | 0;
 i10 = (HEAP32[i12 + 12 >> 2] | 0) == 1 ? 50085 : 50090;
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i11 + 4 >> 2] = i8;
 HEAP32[i11 + 8 >> 2] = i9;
 HEAP32[i11 + 12 >> 2] = i10;
 _TraceLog(3, 50319, i11);
 _stb_vorbis_close(HEAP32[i6 >> 2] | 0);
 HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
 STACKTOP = i13;
 return;
}

function _atan2f(f1, f8) {
 f1 = Math_fround(f1);
 f8 = Math_fround(f8);
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = 0;
 i7 = (HEAPF32[tempDoublePtr >> 2] = f8, HEAP32[tempDoublePtr >> 2] | 0);
 i4 = i7 & 2147483647;
 L1 : do if (i4 >>> 0 > 2139095040) i9 = 3; else {
  i2 = (HEAPF32[tempDoublePtr >> 2] = f1, HEAP32[tempDoublePtr >> 2] | 0);
  i5 = i2 & 2147483647;
  if (i5 >>> 0 > 2139095040) i9 = 3; else {
   if ((i7 | 0) == 1065353216) {
    f1 = Math_fround(_atanf(f1));
    break;
   }
   i3 = i2 >>> 31;
   i6 = i7 >>> 30 & 2 | i3;
   if (!i5) switch (i6 & 3) {
   case 1:
   case 0:
    break L1;
   case 2:
    {
     f1 = Math_fround(3.14159274);
     break L1;
    }
   case 3:
    {
     f1 = Math_fround(-3.14159274);
     break L1;
    }
   default:
    {}
   }
   i2 = i7 & 2147483647;
   L14 : do if ((i2 | 0) < 2139095040) {
    switch (i2 | 0) {
    case 0:
     break;
    default:
     break L14;
    }
    f1 = (i3 | 0) == 0 ? Math_fround(1.57079637) : Math_fround(-1.57079637);
    break L1;
   } else {
    switch (i2 | 0) {
    case 2139095040:
     break;
    default:
     break L14;
    }
    i2 = i6 & 255;
    if ((i5 | 0) == 2139095040) switch (i2 & 3) {
    case 0:
     {
      f1 = Math_fround(.785398185);
      break L1;
     }
    case 1:
     {
      f1 = Math_fround(-.785398185);
      break L1;
     }
    case 2:
     {
      f1 = Math_fround(2.3561945);
      break L1;
     }
    case 3:
     {
      f1 = Math_fround(-2.3561945);
      break L1;
     }
    default:
     {}
    } else switch (i2 & 3) {
    case 0:
     {
      f1 = Math_fround(0.0);
      break L1;
     }
    case 1:
     {
      f1 = Math_fround(-0.0);
      break L1;
     }
    case 2:
     {
      f1 = Math_fround(3.14159274);
      break L1;
     }
    case 3:
     {
      f1 = Math_fround(-3.14159274);
      break L1;
     }
    default:
     {}
    }
   } while (0);
   if ((i5 | 0) == 2139095040 | (i4 + 218103808 | 0) >>> 0 < i5 >>> 0) {
    f1 = (i3 | 0) == 0 ? Math_fround(1.57079637) : Math_fround(-1.57079637);
    break;
   }
   if ((i7 | 0) < 0 & (i5 + 218103808 | 0) >>> 0 < i4 >>> 0) f1 = Math_fround(0.0); else f1 = Math_fround(_atanf(Math_fround(Math_abs(Math_fround(f1 / f8)))));
   switch (i6 & 3) {
   case 0:
    break L1;
   case 1:
    {
     f1 = Math_fround(-f1);
     break L1;
    }
   case 2:
    {
     f1 = Math_fround(Math_fround(3.14159274) - Math_fround(f1 + Math_fround(8.74227765e-08)));
     break L1;
    }
   default:
    {
     f1 = Math_fround(Math_fround(f1 + Math_fround(8.74227765e-08)) + Math_fround(-3.14159274));
     break L1;
    }
   }
  }
 } while (0);
 if ((i9 | 0) == 3) f1 = Math_fround(f1 + f8);
 return Math_fround(f1);
}

function _stbrp__skyline_find_min_y(i1, i2, i5, i4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i17 = i6 + 36 | 0;
 i14 = i6 + 32 | 0;
 i13 = i6 + 28 | 0;
 i9 = i6 + 24 | 0;
 i8 = i6 + 20 | 0;
 i15 = i6 + 16 | 0;
 i7 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i12 = i6 + 4 | 0;
 i10 = i6;
 HEAP32[i6 + 40 >> 2] = i1;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i8 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i15 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
 if ((HEAPU16[HEAP32[i17 >> 2] >> 1] | 0 | 0) > (HEAP32[i14 >> 2] | 0)) ___assert_fail(51715, 51514, 294, 51730);
 if ((HEAPU16[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] >> 1] | 0 | 0) <= (HEAP32[i14 >> 2] | 0)) ___assert_fail(51756, 51514, 301, 51730);
 if ((HEAPU16[HEAP32[i8 >> 2] >> 1] | 0 | 0) > (HEAP32[i14 >> 2] | 0)) ___assert_fail(51775, 51514, 304, 51730);
 HEAP32[i7 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAPU16[HEAP32[i8 >> 2] >> 1] | 0 | 0) >= (HEAP32[i15 >> 2] | 0)) break;
  do if ((HEAPU16[(HEAP32[i8 >> 2] | 0) + 2 >> 1] | 0 | 0) > (HEAP32[i7 >> 2] | 0)) {
   i1 = Math_imul(HEAP32[i11 >> 2] | 0, (HEAPU16[(HEAP32[i8 >> 2] | 0) + 2 >> 1] | 0) - (HEAP32[i7 >> 2] | 0) | 0) | 0;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i1;
   HEAP32[i7 >> 2] = HEAPU16[(HEAP32[i8 >> 2] | 0) + 2 >> 1];
   i1 = HEAPU16[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] >> 1] | 0;
   if ((HEAPU16[HEAP32[i8 >> 2] >> 1] | 0 | 0) < (HEAP32[i14 >> 2] | 0)) {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (i1 - (HEAP32[i14 >> 2] | 0));
    break;
   } else {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (i1 - (HEAPU16[HEAP32[i8 >> 2] >> 1] | 0));
    break;
   }
  } else {
   HEAP32[i10 >> 2] = (HEAPU16[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] >> 1] | 0) - (HEAPU16[HEAP32[i8 >> 2] >> 1] | 0);
   if (((HEAP32[i10 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0) > (HEAP32[i13 >> 2] | 0)) HEAP32[i10 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
   i17 = Math_imul(HEAP32[i10 >> 2] | 0, (HEAP32[i7 >> 2] | 0) - (HEAPU16[(HEAP32[i8 >> 2] | 0) + 2 >> 1] | 0) | 0) | 0;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i17;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  } while (0);
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2];
 }
 HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i12 >> 2];
 STACKTOP = i16;
 return HEAP32[i7 >> 2] | 0;
}

function _stbi__ldr_to_hdr(i3, i5, i6, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, f16 = f0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i1 + 32 | 0;
 i8 = i1 + 28 | 0;
 i13 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i7 >> 2] = i2;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i12 >> 2] = 0;
  i14 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i6 = _stbi__malloc_mad4(HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i7 >> 2] | 0, 4, 0) | 0;
 HEAP32[i4 >> 2] = i6;
 if (!(HEAP32[i4 >> 2] | 0)) {
  _free(HEAP32[i8 >> 2] | 0);
  i14 = (_stbi__err(53511) | 0) != 0;
  HEAP32[i12 >> 2] = i14 ? 0 : 0;
  i14 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[i7 >> 2] | 0;
 if (HEAP32[i7 >> 2] & 1 | 0) HEAP32[i11 >> 2] = i1; else HEAP32[i11 >> 2] = i1 - 1;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0)) break;
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
   i6 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   f16 = Math_fround(+Math_pow(+(+Math_fround(Math_fround(HEAPU8[(HEAP32[i8 >> 2] | 0) + (i6 + (HEAP32[i10 >> 2] | 0)) >> 0] | 0 | 0) / Math_fround(255.0))), +(+Math_fround(2.20000005))) * +Math_fround(1.0));
   i6 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   HEAPF32[(HEAP32[i4 >> 2] | 0) + (i6 + (HEAP32[i10 >> 2] | 0) << 2) >> 2] = f16;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 L21 : do if ((HEAP32[i11 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) {
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0)) break L21;
   i10 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   f16 = Math_fround(Math_fround(HEAPU8[(HEAP32[i8 >> 2] | 0) + (i10 + (HEAP32[i11 >> 2] | 0)) >> 0] | 0 | 0) / Math_fround(255.0));
   i10 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   HEAPF32[(HEAP32[i4 >> 2] | 0) + (i10 + (HEAP32[i11 >> 2] | 0) << 2) >> 2] = f16;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
 } while (0);
 _free(HEAP32[i8 >> 2] | 0);
 HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
 i14 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _stbir__buffer_loop_downsample(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, f14 = f0, f15 = f0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i1 + 36 | 0;
 i11 = i1 + 32 | 0;
 i10 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i12 >> 2] = i4;
 f14 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 60 >> 2]);
 HEAPF32[i10 >> 2] = f14;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2];
 f14 = Math_fround(HEAPF32[i10 >> 2]);
 f14 = Math_fround(FUNCTION_TABLE_ff[HEAP32[28352 + (HEAP32[(HEAP32[i12 >> 2] | 0) + 84 >> 2] << 3) + 4 >> 2] & 7](f14));
 f14 = Math_fround(f14 / Math_fround(HEAPF32[i10 >> 2]));
 HEAPF32[i5 >> 2] = f14;
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 148 >> 2];
 HEAP32[i6 >> 2] = (HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i3 >> 2] | 0);
 if (_stbir__use_height_upsampling(HEAP32[i12 >> 2] | 0) | 0) ___assert_fail(55532, 54884, 2170, 55574);
 HEAP32[i11 >> 2] = 0 - (HEAP32[i3 >> 2] | 0);
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
   i1 = 16;
   break;
  }
  f15 = Math_fround(HEAPF32[i5 >> 2]);
  f14 = Math_fround(HEAPF32[i10 >> 2]);
  _stbir__calculate_sample_range_downsample(HEAP32[i11 >> 2] | 0, f15, f14, Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + 52 >> 2]), i8, i2, i7);
  if (((HEAP32[i2 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[i12 >> 2] | 0) + 164 >> 2] | 0)) {
   i1 = 6;
   break;
  }
  if ((HEAP32[i2 >> 2] | 0) >= 0) if ((HEAP32[i8 >> 2] | 0) < (HEAP32[i9 >> 2] | 0)) {
   _stbir__empty_ring_buffer(HEAP32[i12 >> 2] | 0, HEAP32[i8 >> 2] | 0);
   _stbir__decode_and_resample_downsample(HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 176 >> 2] | 0) < 0) _stbir__add_empty_ring_buffer_entry(HEAP32[i12 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
   while (1) {
    i1 = HEAP32[i12 >> 2] | 0;
    if ((HEAP32[i2 >> 2] | 0) <= (HEAP32[(HEAP32[i12 >> 2] | 0) + 172 >> 2] | 0)) break;
    _stbir__add_empty_ring_buffer_entry(i1, (HEAP32[(HEAP32[i12 >> 2] | 0) + 172 >> 2] | 0) + 1 | 0) | 0;
   }
   _stbir__resample_vertical_downsample(i1, HEAP32[i11 >> 2] | 0);
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 6) ___assert_fail(55604, 54884, 2179, 55574); else if ((i1 | 0) == 16) {
  i12 = HEAP32[i12 >> 2] | 0;
  _stbir__empty_ring_buffer(i12 | 0, HEAP32[i12 + 24 >> 2] | 0);
  STACKTOP = i13;
  return;
 }
}

function _stbtt_GetGlyphBitmapBoxSubpixel(i2, i3, f8, f9, f10, f11, i4, i6, i5, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 f8 = Math_fround(f8);
 f9 = Math_fround(f9);
 f10 = Math_fround(f10);
 f11 = Math_fround(f11);
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i24 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i26 = i1 + 52 | 0;
 i25 = i1 + 48 | 0;
 i17 = i1 + 44 | 0;
 i18 = i1 + 40 | 0;
 i19 = i1 + 36 | 0;
 i20 = i1 + 32 | 0;
 i13 = i1 + 28 | 0;
 i15 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i16 = i1 + 16 | 0;
 i21 = i1 + 12 | 0;
 i23 = i1 + 8 | 0;
 i22 = i1 + 4 | 0;
 i12 = i1;
 HEAP32[i26 >> 2] = i2;
 HEAP32[i25 >> 2] = i3;
 HEAPF32[i17 >> 2] = f8;
 HEAPF32[i18 >> 2] = f9;
 HEAPF32[i19 >> 2] = f10;
 HEAPF32[i20 >> 2] = f11;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i16 >> 2] = i7;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 i7 = (_stbtt_GetGlyphBox(HEAP32[i26 >> 2] | 0, HEAP32[i25 >> 2] | 0, i21, i23, i22, i12) | 0) != 0;
 i1 = (HEAP32[i13 >> 2] | 0) != 0;
 if (i7) {
  if (i1) {
   f11 = Math_fround(HEAP32[i21 >> 2] | 0);
   f11 = Math_fround(f11 * Math_fround(HEAPF32[i17 >> 2]));
   i26 = ~~+Math_floor(+(+Math_fround(f11 + Math_fround(HEAPF32[i19 >> 2]))));
   HEAP32[HEAP32[i13 >> 2] >> 2] = i26;
  }
  if (HEAP32[i15 >> 2] | 0) {
   f11 = Math_fround(0 - (HEAP32[i12 >> 2] | 0) | 0);
   f11 = Math_fround(f11 * Math_fround(HEAPF32[i18 >> 2]));
   i26 = ~~+Math_floor(+(+Math_fround(f11 + Math_fround(HEAPF32[i20 >> 2]))));
   HEAP32[HEAP32[i15 >> 2] >> 2] = i26;
  }
  if (HEAP32[i14 >> 2] | 0) {
   f11 = Math_fround(HEAP32[i22 >> 2] | 0);
   f11 = Math_fround(f11 * Math_fround(HEAPF32[i17 >> 2]));
   i26 = ~~+Math_ceil(+(+Math_fround(f11 + Math_fround(HEAPF32[i19 >> 2]))));
   HEAP32[HEAP32[i14 >> 2] >> 2] = i26;
  }
  if (!(HEAP32[i16 >> 2] | 0)) {
   STACKTOP = i24;
   return;
  }
  f11 = Math_fround(0 - (HEAP32[i23 >> 2] | 0) | 0);
  f11 = Math_fround(f11 * Math_fround(HEAPF32[i18 >> 2]));
  i26 = ~~+Math_ceil(+(+Math_fround(f11 + Math_fround(HEAPF32[i20 >> 2]))));
  HEAP32[HEAP32[i16 >> 2] >> 2] = i26;
  STACKTOP = i24;
  return;
 } else {
  if (i1) HEAP32[HEAP32[i13 >> 2] >> 2] = 0;
  if (HEAP32[i15 >> 2] | 0) HEAP32[HEAP32[i15 >> 2] >> 2] = 0;
  if (HEAP32[i14 >> 2] | 0) HEAP32[HEAP32[i14 >> 2] >> 2] = 0;
  if (!(HEAP32[i16 >> 2] | 0)) {
   STACKTOP = i24;
   return;
  }
  HEAP32[HEAP32[i16 >> 2] >> 2] = 0;
  STACKTOP = i24;
  return;
 }
}

function _stbv_draw_line(i3, i5, i7, i6, i8, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, f23 = f0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i14 = i1 + 52 | 0;
 i21 = i1 + 48 | 0;
 i20 = i1 + 44 | 0;
 i16 = i1 + 40 | 0;
 i22 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i19 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i11 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i17 = i1 + 8 | 0;
 i12 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i14 >> 2] = i3;
 HEAP32[i21 >> 2] = i5;
 HEAP32[i20 >> 2] = i7;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i22 >> 2] = i8;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i19 >> 2] = (HEAP32[i22 >> 2] | 0) - (HEAP32[i20 >> 2] | 0);
 HEAP32[i9 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i21 >> 2] | 0);
 i1 = Math_abs(HEAP32[i19 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i15 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i17 >> 2] = HEAP32[i20 >> 2];
 HEAP32[i12 >> 2] = 0;
 HEAP32[i11 >> 2] = (HEAP32[i19 >> 2] | 0) / (HEAP32[i9 >> 2] | 0) | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[i19 >> 2] | 0) < 0) HEAP32[i4 >> 2] = i1 - 1; else HEAP32[i4 >> 2] = i1 + 1;
 i22 = Math_abs(HEAP32[i11 >> 2] | 0) | 0;
 i22 = Math_imul(i22, HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - i22;
 if ((HEAP32[i16 >> 2] | 0) > (HEAP32[i13 >> 2] | 0)) HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
 if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i16 >> 2] | 0)) {
  STACKTOP = i18;
  return;
 }
 f23 = Math_fround(HEAPF32[13520 + (HEAP32[i17 >> 2] << 2) >> 2]);
 i22 = (HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) | 0;
 f23 = Math_fround(Math_fround(HEAPF32[i22 >> 2]) * f23);
 HEAPF32[i22 >> 2] = f23;
 HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
 while (1) {
  if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i16 >> 2] | 0)) break;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) {
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i4 >> 2] | 0);
  } else HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  f23 = Math_fround(HEAPF32[13520 + (HEAP32[i17 >> 2] << 2) >> 2]);
  i22 = (HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) | 0;
  f23 = Math_fround(Math_fround(HEAPF32[i22 >> 2]) * f23);
  HEAPF32[i22 >> 2] = f23;
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
 }
 STACKTOP = i18;
 return;
}

function _jar_xm_envelope_tick(i2, i4, i3, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i13 = i1;
 i10 = i1 + 22 | 0;
 i12 = i1 + 20 | 0;
 i11 = i1 + 18 | 0;
 i5 = i1 + 16 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i13 >> 2] = i6;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 48 >> 0] | 0) < 2) {
  if ((HEAPU8[i1 + 48 >> 0] | 0) != 1) {
   STACKTOP = i14;
   return;
  }
  f15 = Math_fround(Math_fround(HEAPU16[(HEAP32[i9 >> 2] | 0) + 2 >> 1] | 0) / Math_fround(64.0));
  HEAPF32[HEAP32[i13 >> 2] >> 2] = f15;
  if (!(Math_fround(HEAPF32[HEAP32[i13 >> 2] >> 2]) > Math_fround(1.0))) {
   STACKTOP = i14;
   return;
  }
  HEAPF32[HEAP32[i13 >> 2] >> 2] = Math_fround(1.0);
  STACKTOP = i14;
  return;
 }
 if (HEAP8[i1 + 54 >> 0] & 1) {
  i6 = HEAP32[i9 >> 2] | 0;
  HEAP16[i12 >> 1] = HEAP16[i6 + (HEAPU8[i6 + 50 >> 0] << 2) >> 1] | 0;
  i6 = HEAP32[i9 >> 2] | 0;
  HEAP16[i11 >> 1] = HEAP16[i6 + (HEAPU8[i6 + 51 >> 0] << 2) >> 1] | 0;
  HEAP16[i5 >> 1] = (HEAPU16[i11 >> 1] | 0) - (HEAPU16[i12 >> 1] | 0);
  if ((HEAPU16[HEAP32[i8 >> 2] >> 1] | 0) >= (HEAPU16[i11 >> 1] | 0)) {
   i12 = HEAP32[i8 >> 2] | 0;
   HEAP16[i12 >> 1] = (HEAPU16[i12 >> 1] | 0) - (HEAPU16[i5 >> 1] | 0);
  }
 }
 HEAP8[i10 >> 0] = 0;
 while (1) {
  if ((HEAPU8[i10 >> 0] | 0) >= ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 48 >> 0] | 0) - 2 | 0)) break;
  if ((HEAPU16[(HEAP32[i9 >> 2] | 0) + (HEAPU8[i10 >> 0] << 2) >> 1] | 0) <= (HEAPU16[HEAP32[i8 >> 2] >> 1] | 0)) if ((HEAPU16[(HEAP32[i9 >> 2] | 0) + ((HEAPU8[i10 >> 0] | 0) + 1 << 2) >> 1] | 0) >= (HEAPU16[HEAP32[i8 >> 2] >> 1] | 0)) break;
  HEAP8[i10 >> 0] = (HEAP8[i10 >> 0] | 0) + 1 << 24 >> 24;
 }
 i12 = (HEAP32[i9 >> 2] | 0) + (HEAPU8[i10 >> 0] << 2) | 0;
 f15 = Math_fround(Math_fround(_jar_xm_envelope_lerp(i12 | 0, i12 + 4 | 0, HEAP16[HEAP32[i8 >> 2] >> 1] | 0)) / Math_fround(64.0));
 HEAPF32[HEAP32[i13 >> 2] >> 2] = f15;
 if (HEAP8[(HEAP32[i7 >> 2] | 0) + 50 >> 0] & 1) if (HEAP8[(HEAP32[i9 >> 2] | 0) + 53 >> 0] & 1) if ((HEAPU16[HEAP32[i8 >> 2] >> 1] | 0) == (HEAPU16[(HEAP32[i9 >> 2] | 0) + (HEAPU8[(HEAP32[i9 >> 2] | 0) + 49 >> 0] << 2) >> 1] | 0)) {
  STACKTOP = i14;
  return;
 }
 i13 = HEAP32[i8 >> 2] | 0;
 HEAP16[i13 >> 1] = (HEAP16[i13 >> 1] | 0) + 1 << 16 >> 16;
 STACKTOP = i14;
 return;
}
function _stbv_convert_channels_short_interleaved(i2, i3, i6, i5, i4, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, f21 = f0;
 i20 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i9 = i1 + 44 | 0;
 i10 = i1 + 40 | 0;
 i13 = i1 + 36 | 0;
 i12 = i1 + 32 | 0;
 i11 = i1 + 28 | 0;
 i17 = i1 + 24 | 0;
 i15 = i1 + 20 | 0;
 i18 = i1 + 16 | 0;
 i16 = i1 + 12 | 0;
 i19 = i1 + 8 | 0;
 i14 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i17 >> 2] = i7;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((HEAP32[i13 >> 2] | 0) <= 6 ? ((HEAP32[i9 >> 2] | 0) <= 2 ? (HEAP32[i9 >> 2] | 0) != (HEAP32[i13 >> 2] | 0) : 0) : 0) {
  if ((i1 | 0) != 2) ___assert_fail(48067, 47181, 5168, 48078);
  HEAP32[i15 >> 2] = 0;
  while (1) {
   if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
   _stbv_compute_stereo_samples(HEAP32[i10 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i17 >> 2] | 0);
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  STACKTOP = i20;
  return;
 }
 i13 = HEAP32[i13 >> 2] | 0;
 HEAP32[i18 >> 2] = (i1 | 0) < (i13 | 0) ? HEAP32[i9 >> 2] | 0 : i13 | 0;
 HEAP32[i16 >> 2] = 0;
 while (1) {
  if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
  HEAP32[i15 >> 2] = 0;
  while (1) {
   if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break;
   f21 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) << 2) >> 2]);
   HEAPF32[i14 >> 2] = f21;
   f21 = Math_fround(Math_fround(HEAPF32[i14 >> 2]) + Math_fround(384.0));
   HEAPF32[i19 >> 2] = f21;
   HEAP32[i8 >> 2] = (HEAP32[i19 >> 2] | 0) - 1136656384;
   if (((HEAP32[i8 >> 2] | 0) + 32768 | 0) >>> 0 > 65535) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) < 0 ? -32768 : 32767;
   i7 = HEAP32[i8 >> 2] & 65535;
   i13 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i13 + 2;
   HEAP16[i13 >> 1] = i7;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  while (1) {
   if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
   i13 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i13 + 2;
   HEAP16[i13 >> 1] = 0;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 }
 STACKTOP = i20;
 return;
}

function _jar_xm_trigger_note(i4, i2, i6) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, f8 = f0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 if (!(HEAP32[i1 >> 2] & 4)) {
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = Math_fround(0.0);
  HEAP8[(HEAP32[i3 >> 2] | 0) + 36 >> 0] = 1;
 }
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) {
  if (!(HEAP32[i1 >> 2] & 1)) {
   f8 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) + 40 >> 2]);
   HEAPF32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = f8;
  }
  f8 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) + 52 >> 2]);
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] = f8;
 }
 HEAP8[(HEAP32[i3 >> 2] | 0) + 50 >> 0] = 1;
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] = Math_fround(1.0);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] = Math_fround(1.0);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 60 >> 2] = Math_fround(.5);
 HEAP16[(HEAP32[i3 >> 2] | 0) + 66 >> 1] = 0;
 HEAP16[(HEAP32[i3 >> 2] | 0) + 64 >> 1] = 0;
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 108 >> 2] = Math_fround(0.0);
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 120 >> 2] = Math_fround(0.0);
 HEAP8[(HEAP32[i3 >> 2] | 0) + 125 >> 0] = 0;
 HEAP16[(HEAP32[i3 >> 2] | 0) + 48 >> 1] = 0;
 if (HEAP8[(HEAP32[i3 >> 2] | 0) + 104 >> 0] & 1) HEAP16[(HEAP32[i3 >> 2] | 0) + 106 >> 1] = 0;
 if (HEAP8[(HEAP32[i3 >> 2] | 0) + 116 >> 0] & 1) HEAP8[(HEAP32[i3 >> 2] | 0) + 118 >> 0] = 0;
 if (!(HEAP32[i1 >> 2] & 2)) {
  f8 = Math_fround(_jar_xm_period(HEAP32[i5 >> 2] | 0, Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2])));
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = f8;
  _jar_xm_update_frequency(HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0);
 }
 i2 = (HEAP32[i5 >> 2] | 0) + 360 | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i6 = (HEAP32[i3 >> 2] | 0) + 128 | 0;
 HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i6 + 4 >> 2] = i4;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) {
  i2 = (HEAP32[i5 >> 2] | 0) + 360 | 0;
  i4 = HEAP32[i2 + 4 >> 2] | 0;
  i6 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) + 248 | 0;
  HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i6 + 4 >> 2] = i4;
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0)) {
  STACKTOP = i7;
  return;
 }
 i4 = (HEAP32[i5 >> 2] | 0) + 360 | 0;
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 i6 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) + 64 | 0;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i6 + 4 >> 2] = i5;
 STACKTOP = i7;
 return;
}

function _PollInputEvents() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, i14 = 0, i15 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 1488 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1488);
 i15 = i12 + 1440 | 0;
 i14 = i12 + 1432 | 0;
 i1 = i12 + 1484 | 0;
 i2 = i12 + 1480 | 0;
 i10 = i12 + 1476 | 0;
 i6 = i12 + 1472 | 0;
 i9 = i12 + 1468 | 0;
 i5 = i12;
 i11 = i12 + 1464 | 0;
 i7 = i12 + 1460 | 0;
 i4 = i12 + 1456 | 0;
 i8 = i12 + 1452 | 0;
 i3 = i12 + 1448 | 0;
 _UpdateGestures();
 HEAP32[44069] = 0;
 _glfwGetCursorPos(HEAP32[44037] | 0, i15 | 0, i14 | 0);
 f13 = Math_fround(+HEAPF64[i15 >> 3]);
 HEAPF32[44298] = f13;
 f13 = Math_fround(+HEAPF64[i14 >> 3]);
 HEAPF32[44299] = f13;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= 512) break;
  i15 = HEAP32[i1 >> 2] | 0;
  HEAP8[165952 + i15 >> 0] = HEAP8[165440 + i15 >> 0] | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= 3) break;
  i15 = HEAP32[i2 >> 2] | 0;
  HEAP8[177218 + i15 >> 0] = HEAP8[177215 + i15 >> 0] | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 HEAP32[44068] = 0;
 HEAP32[i10 >> 2] = 0;
 if (!(_emscripten_sample_gamepad_data() | 0)) {
  i15 = _emscripten_get_num_gamepads() | 0;
  HEAP32[i10 >> 2] = i15;
 }
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if (!((HEAP32[i6 >> 2] | 0) < (HEAP32[i10 >> 2] | 0) ? (HEAP32[i6 >> 2] | 0) < 4 : 0)) break;
  HEAP32[i9 >> 2] = 0;
  while (1) {
   i1 = HEAP32[i6 >> 2] | 0;
   if ((HEAP32[i9 >> 2] | 0) >= 32) break;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  i15 = _emscripten_get_gamepad_status(i1 | 0, i5 | 0) | 0;
  HEAP32[i11 >> 2] = i15;
  if (!(HEAP32[i11 >> 2] | 0)) {
   HEAP32[i7 >> 2] = 0;
   while (1) {
    if (!((HEAP32[i7 >> 2] | 0) < (HEAP32[i5 + 12 >> 2] | 0) ? (HEAP32[i7 >> 2] | 0) < 32 : 0)) break;
    i1 = _GetGamepadButton(HEAP32[i7 >> 2] | 0) | 0;
    HEAP32[i4 >> 2] = i1;
    i1 = 166464 + (HEAP32[i6 >> 2] << 5) + (HEAP32[i4 >> 2] | 0) | 0;
    if ((HEAP32[i5 + 1040 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) == 1) HEAP8[i1 >> 0] = 1; else HEAP8[i1 >> 0] = 0;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   }
   HEAP32[i8 >> 2] = 0;
   while (1) {
    if (!((HEAP32[i8 >> 2] | 0) < (HEAP32[i5 + 8 >> 2] | 0) ? (HEAP32[i8 >> 2] | 0) < 8 : 0)) break;
    i15 = _GetGamepadAxis(HEAP32[i8 >> 2] | 0) | 0;
    HEAP32[i3 >> 2] = i15;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 STACKTOP = i12;
 return;
}

function _MatrixOrtho(i10, d6, d8, d4, d9, d7, d5) {
 i10 = i10 | 0;
 d6 = +d6;
 d8 = +d8;
 d4 = +d4;
 d9 = +d9;
 d7 = +d7;
 d5 = +d5;
 var i1 = 0, i2 = 0, i3 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, f21 = f0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i14 = i20 + 40 | 0;
 i16 = i20 + 32 | 0;
 i11 = i20 + 24 | 0;
 i19 = i20 + 16 | 0;
 i15 = i20 + 8 | 0;
 i12 = i20;
 i1 = i20 + 64 | 0;
 i17 = i20 + 56 | 0;
 i18 = i20 + 52 | 0;
 i13 = i20 + 48 | 0;
 HEAPF64[i14 >> 3] = d6;
 HEAPF64[i16 >> 3] = d8;
 HEAPF64[i11 >> 3] = d4;
 HEAPF64[i19 >> 3] = d9;
 HEAPF64[i15 >> 3] = d7;
 HEAPF64[i12 >> 3] = d5;
 i2 = i1;
 i3 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 f21 = Math_fround(+HEAPF64[i16 >> 3] - +HEAPF64[i14 >> 3]);
 HEAPF32[i17 >> 2] = f21;
 f21 = Math_fround(+HEAPF64[i19 >> 3] - +HEAPF64[i11 >> 3]);
 HEAPF32[i18 >> 2] = f21;
 f21 = Math_fround(+HEAPF64[i12 >> 3] - +HEAPF64[i15 >> 3]);
 HEAPF32[i13 >> 2] = f21;
 f21 = Math_fround(Math_fround(2.0) / Math_fround(HEAPF32[i17 >> 2]));
 HEAPF32[i1 >> 2] = f21;
 HEAPF32[i1 + 16 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 32 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 4 >> 2] = Math_fround(0.0);
 f21 = Math_fround(Math_fround(2.0) / Math_fround(HEAPF32[i18 >> 2]));
 HEAPF32[i1 + 20 >> 2] = f21;
 HEAPF32[i1 + 36 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 8 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 24 >> 2] = Math_fround(0.0);
 f21 = Math_fround(Math_fround(-2.0) / Math_fround(HEAPF32[i13 >> 2]));
 HEAPF32[i1 + 40 >> 2] = f21;
 HEAPF32[i1 + 56 >> 2] = Math_fround(0.0);
 f21 = Math_fround(+HEAPF64[i14 >> 3]);
 f21 = Math_fround(-Math_fround(f21 + Math_fround(+HEAPF64[i16 >> 3])));
 f21 = Math_fround(f21 / Math_fround(HEAPF32[i17 >> 2]));
 HEAPF32[i1 + 12 >> 2] = f21;
 f21 = Math_fround(+HEAPF64[i19 >> 3]);
 f21 = Math_fround(-Math_fround(f21 + Math_fround(+HEAPF64[i11 >> 3])));
 f21 = Math_fround(f21 / Math_fround(HEAPF32[i18 >> 2]));
 HEAPF32[i1 + 28 >> 2] = f21;
 f21 = Math_fround(+HEAPF64[i12 >> 3]);
 f21 = Math_fround(-Math_fround(f21 + Math_fround(+HEAPF64[i15 >> 3])));
 f21 = Math_fround(f21 / Math_fround(HEAPF32[i13 >> 2]));
 HEAPF32[i1 + 44 >> 2] = f21;
 HEAPF32[i1 + 60 >> 2] = Math_fround(1.0);
 i2 = i10;
 i3 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 STACKTOP = i20;
 return;
}

function _ma_pcm_f32_to_s24__reference(i5, i6, i2, i3, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var f1 = f0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i14 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i16 = i7 + 40 | 0;
 i15 = i7 + 36 | 0;
 i8 = i7 + 8 | 0;
 i9 = i7 + 28 | 0;
 i12 = i7 + 24 | 0;
 i10 = i7;
 i11 = i7 + 20 | 0;
 i13 = i7 + 16 | 0;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 i6 = i8;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i6 + 4 >> 2] = i3;
 HEAP32[i7 + 32 >> 2] = i4;
 HEAP32[i9 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i12 >> 2] = HEAP32[i15 >> 2];
 i7 = i10;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 while (1) {
  i15 = i10;
  i6 = HEAP32[i15 + 4 >> 2] | 0;
  i16 = i8;
  i7 = HEAP32[i16 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i7 >>> 0 | ((i6 | 0) == (i7 | 0) ? (HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0 : 0))) break;
  f1 = Math_fround(HEAPF32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2]);
  HEAPF32[i13 >> 2] = f1;
  if (Math_fround(HEAPF32[i13 >> 2]) < Math_fround(-1.0)) f1 = Math_fround(-1.0); else {
   i16 = Math_fround(HEAPF32[i13 >> 2]) > Math_fround(1.0);
   f1 = Math_fround(HEAPF32[i13 >> 2]);
   f1 = i16 ? Math_fround(1.0) : f1;
  }
  HEAPF32[i13 >> 2] = f1;
  f1 = Math_fround(Math_fround(HEAPF32[i13 >> 2]) * Math_fround(8388607.0));
  HEAPF32[i13 >> 2] = f1;
  i16 = ~~Math_fround(HEAPF32[i13 >> 2]);
  HEAP32[i11 >> 2] = i16;
  i16 = (HEAP32[i11 >> 2] & 255) >> 0 & 255;
  i15 = HEAP32[i9 >> 2] | 0;
  i7 = i10;
  i7 = ___muldi3(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 3, 0) | 0;
  i7 = _i64Add(i7 | 0, getTempRet0() | 0, 0, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i15 + i7 >> 0] = i16;
  i7 = (HEAP32[i11 >> 2] & 65280) >> 8 & 255;
  i15 = HEAP32[i9 >> 2] | 0;
  i16 = i10;
  i16 = ___muldi3(HEAP32[i16 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0, 3, 0) | 0;
  i16 = _i64Add(i16 | 0, getTempRet0() | 0, 1, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i15 + i16 >> 0] = i7;
  i16 = (HEAP32[i11 >> 2] & 16711680) >> 16 & 255;
  i15 = HEAP32[i9 >> 2] | 0;
  i7 = i10;
  i7 = ___muldi3(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 3, 0) | 0;
  i7 = _i64Add(i7 | 0, getTempRet0() | 0, 2, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i15 + i7 >> 0] = i16;
  i7 = i10;
  i7 = _i64Add(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 1, 0) | 0;
  i15 = getTempRet0() | 0;
  i16 = i10;
  HEAP32[i16 >> 2] = i7;
  HEAP32[i16 + 4 >> 2] = i15;
 }
 STACKTOP = i14;
 return;
}

function _stbrp__skyline_pack_rectangle(i8, i2, i6, i3) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i9 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i4 = i1 + 28 | 0;
 i12 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i4 >> 2] = i3;
 _stbrp__skyline_find_best_pos(i12, HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 if (HEAP32[i12 + 8 >> 2] | 0) if (((HEAP32[i12 + 4 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0) <= (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) if (HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] | 0) {
  HEAP32[i11 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2];
  HEAP16[HEAP32[i11 >> 2] >> 1] = HEAP32[i12 >> 2];
  HEAP16[(HEAP32[i11 >> 2] | 0) + 2 >> 1] = (HEAP32[i12 + 4 >> 2] | 0) + (HEAP32[i4 >> 2] | 0);
  HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2];
  HEAP32[i10 >> 2] = HEAP32[HEAP32[i12 + 8 >> 2] >> 2];
  if ((HEAPU16[HEAP32[i10 >> 2] >> 1] | 0 | 0) < (HEAP32[i12 >> 2] | 0)) {
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2];
   HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
  } else HEAP32[HEAP32[i12 + 8 >> 2] >> 2] = HEAP32[i11 >> 2];
  while (1) {
   if (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) i2 = (HEAPU16[HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] >> 1] | 0 | 0) <= ((HEAP32[i12 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0); else i2 = 0;
   i1 = HEAP32[i10 >> 2] | 0;
   if (!i2) break;
   HEAP32[i7 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2];
   HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
  }
  HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] = i1;
  if ((HEAPU16[HEAP32[i10 >> 2] >> 1] | 0 | 0) < ((HEAP32[i12 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0)) HEAP16[HEAP32[i10 >> 2] >> 1] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
  HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  STACKTOP = i14;
  return;
 }
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
 STACKTOP = i14;
 return;
}

function _scanexp(i6, i4) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = 0;
 i7 = i6 + 4 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i8 = i6 + 104 | 0;
 if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
  HEAP32[i7 >> 2] = i1 + 1;
  i2 = HEAPU8[i1 >> 0] | 0;
 } else i2 = ___shgetc(i6) | 0;
 switch (i2 | 0) {
 case 43:
 case 45:
  {
   i3 = (i2 | 0) == 45 & 1;
   i1 = HEAP32[i7 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    HEAP32[i7 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i6) | 0;
   i2 = i1 + -48 | 0;
   if ((i4 | 0) != 0 & i2 >>> 0 > 9) if (!(HEAP32[i8 >> 2] | 0)) {
    i2 = -2147483648;
    i1 = 0;
   } else {
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
    i9 = 14;
   } else {
    i5 = i3;
    i9 = 12;
   }
   break;
  }
 default:
  {
   i1 = i2;
   i5 = 0;
   i2 = i2 + -48 | 0;
   i9 = 12;
  }
 }
 if ((i9 | 0) == 12) if (i2 >>> 0 > 9) i9 = 14; else {
  i3 = 0;
  while (1) {
   i3 = i1 + -48 + (i3 * 10 | 0) | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    HEAP32[i7 >> 2] = i1 + 1;
    i2 = HEAPU8[i1 >> 0] | 0;
   } else i2 = ___shgetc(i6) | 0;
   i4 = i2 + -48 | 0;
   if (!(i4 >>> 0 < 10 & (i3 | 0) < 214748364)) break; else i1 = i2;
  }
  i1 = ((i3 | 0) < 0) << 31 >> 31;
  if (i4 >>> 0 < 10) {
   do {
    i10 = ___muldi3(i3 | 0, i1 | 0, 10, 0) | 0;
    i4 = getTempRet0() | 0;
    i2 = _i64Add(i2 | 0, ((i2 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    i3 = _i64Add(i2 | 0, getTempRet0() | 0, i10 | 0, i4 | 0) | 0;
    i1 = getTempRet0() | 0;
    i2 = HEAP32[i7 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
     HEAP32[i7 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
    } else i2 = ___shgetc(i6) | 0;
    i4 = i2 + -48 | 0;
   } while (i4 >>> 0 < 10 & ((i1 | 0) < 21474836 | (i1 | 0) == 21474836 & i3 >>> 0 < 2061584302));
   if (i4 >>> 0 < 10) do {
    i2 = HEAP32[i7 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
     HEAP32[i7 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
    } else i2 = ___shgetc(i6) | 0;
   } while ((i2 + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[i8 >> 2] | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  i8 = (i5 | 0) == 0;
  i10 = _i64Subtract(0, 0, i3 | 0, i1 | 0) | 0;
  i2 = getTempRet0() | 0;
  i2 = i8 ? i1 : i2;
  i1 = i8 ? i3 : i10;
 }
 if ((i9 | 0) == 14) if (!(HEAP32[i8 >> 2] | 0)) {
  i2 = -2147483648;
  i1 = 0;
 } else {
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  i2 = -2147483648;
  i1 = 0;
 }
 setTempRet0(i2 | 0);
 return i1 | 0;
}

function _ma_rb_commit_write(i5, i6, i3) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i12 = i1 + 68 | 0;
 i13 = i1 + 64 | 0;
 i10 = i1 + 60 | 0;
 i9 = i1 + 56 | 0;
 i7 = i1 + 52 | 0;
 i14 = i1 + 48 | 0;
 i15 = i1 + 44 | 0;
 i8 = i1 + 40 | 0;
 i17 = i1 + 36 | 0;
 i18 = i1 + 32 | 0;
 i16 = i1 + 28 | 0;
 i19 = i1 + 24 | 0;
 i4 = i1 + 20 | 0;
 i20 = i1 + 16 | 0;
 i21 = i1 + 12 | 0;
 i22 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i19 >> 2] = i6;
 HEAP32[i4 >> 2] = i3;
 if (!(HEAP32[i16 >> 2] | 0)) {
  HEAP32[i18 >> 2] = -2;
  i22 = HEAP32[i18 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
 if (!(HEAP32[i17 >> 2] | 0)) ___assert_fail(36507, 36381, 32723, 36976);
 i6 = HEAP32[HEAP32[i17 >> 2] >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + 20 >> 2];
 if ((i1 | 0) != (i6 + (HEAP32[i8 >> 2] & 2147483647) | 0)) {
  HEAP32[i18 >> 2] = -2;
  i22 = HEAP32[i18 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 HEAP32[i20 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i20 >> 2];
 HEAP32[i14 >> 2] = i21;
 HEAP32[i15 >> 2] = i22;
 if (!(HEAP32[i14 >> 2] | 0)) ___assert_fail(36687, 36381, 32734, 36716);
 if (!(HEAP32[i15 >> 2] | 0)) ___assert_fail(36742, 36381, 32735, 36716);
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i9 >> 2] & 2147483647;
 HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
 HEAP32[HEAP32[i15 >> 2] >> 2] = HEAP32[i10 >> 2] & -2147483648;
 HEAP32[i11 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
 if ((HEAP32[i11 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  HEAP32[i18 >> 2] = -2;
  i22 = HEAP32[i18 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 HEAP32[i2 >> 2] = HEAP32[i22 >> 2];
 if ((HEAP32[i11 >> 2] | 0) == (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[i11 >> 2] = 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] ^ -2147483648;
 }
 i22 = (HEAP32[i16 >> 2] | 0) + 20 | 0;
 i21 = HEAP32[i11 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i13 >> 2] = i21;
 HEAP32[i22 >> 2] = HEAP32[i13 >> 2] | HEAP32[i12 >> 2];
 HEAP32[i18 >> 2] = 0;
 i22 = HEAP32[i18 >> 2] | 0;
 STACKTOP = i23;
 return i22 | 0;
}

function _ma_rb_commit_read(i5, i6, i3) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i12 = i1 + 68 | 0;
 i13 = i1 + 64 | 0;
 i10 = i1 + 60 | 0;
 i9 = i1 + 56 | 0;
 i7 = i1 + 52 | 0;
 i14 = i1 + 48 | 0;
 i15 = i1 + 44 | 0;
 i8 = i1 + 40 | 0;
 i17 = i1 + 36 | 0;
 i21 = i1 + 32 | 0;
 i16 = i1 + 28 | 0;
 i22 = i1 + 24 | 0;
 i4 = i1 + 20 | 0;
 i18 = i1 + 16 | 0;
 i19 = i1 + 12 | 0;
 i20 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i22 >> 2] = i6;
 HEAP32[i4 >> 2] = i3;
 if (!(HEAP32[i16 >> 2] | 0)) {
  HEAP32[i21 >> 2] = -2;
  i22 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
 if (!(HEAP32[i17 >> 2] | 0)) ___assert_fail(36507, 36381, 32717, 36667);
 i6 = HEAP32[HEAP32[i17 >> 2] >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2];
 if ((i1 | 0) != (i6 + (HEAP32[i8 >> 2] & 2147483647) | 0)) {
  HEAP32[i21 >> 2] = -2;
  i22 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 HEAP32[i18 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i18 >> 2];
 HEAP32[i14 >> 2] = i19;
 HEAP32[i15 >> 2] = i20;
 if (!(HEAP32[i14 >> 2] | 0)) ___assert_fail(36687, 36381, 32734, 36716);
 if (!(HEAP32[i15 >> 2] | 0)) ___assert_fail(36742, 36381, 32735, 36716);
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i9 >> 2] & 2147483647;
 HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
 HEAP32[HEAP32[i15 >> 2] >> 2] = HEAP32[i10 >> 2] & -2147483648;
 HEAP32[i11 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
 if ((HEAP32[i11 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  HEAP32[i21 >> 2] = -2;
  i22 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 HEAP32[i2 >> 2] = HEAP32[i20 >> 2];
 if ((HEAP32[i11 >> 2] | 0) == (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[i11 >> 2] = 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] ^ -2147483648;
 }
 i22 = (HEAP32[i16 >> 2] | 0) + 16 | 0;
 i20 = HEAP32[i11 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i13 >> 2] = i20;
 HEAP32[i22 >> 2] = HEAP32[i13 >> 2] | HEAP32[i12 >> 2];
 HEAP32[i21 >> 2] = 0;
 i22 = HEAP32[i21 >> 2] | 0;
 STACKTOP = i23;
 return i22 | 0;
}

function _stbv_codebook_decode(i4, i2, i9, i7) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, f16 = f0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i11 = i1 + 36 | 0;
 i15 = i1 + 32 | 0;
 i3 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i13 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i12 = i1 + 4 | 0;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i8 >> 2] = i7;
 i9 = _stbv_codebook_decode_start(HEAP32[i15 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i9;
 if ((HEAP32[i13 >> 2] | 0) < 0) {
  HEAP32[i11 >> 2] = 0;
  i15 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i14;
  return i15 | 0;
 }
 if ((HEAP32[i8 >> 2] | 0) > (HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) HEAP32[i8 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 i15 = Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i15;
 L8 : do if (HEAP8[(HEAP32[i3 >> 2] | 0) + 22 >> 0] | 0) {
  HEAPF32[i6 >> 2] = Math_fround(0.0);
  HEAP32[i5 >> 2] = 0;
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break L8;
   f16 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) << 2) >> 2]);
   f16 = Math_fround(f16 + Math_fround(HEAPF32[i6 >> 2]));
   HEAPF32[i12 >> 2] = f16;
   f16 = Math_fround(HEAPF32[i12 >> 2]);
   i15 = (HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) | 0;
   f16 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f16);
   HEAPF32[i15 >> 2] = f16;
   f16 = Math_fround(HEAPF32[i12 >> 2]);
   f16 = Math_fround(f16 + Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 12 >> 2]));
   HEAPF32[i6 >> 2] = f16;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
 } else {
  HEAPF32[i1 >> 2] = Math_fround(0.0);
  HEAP32[i5 >> 2] = 0;
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break L8;
   f16 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) << 2) >> 2]);
   f16 = Math_fround(f16 + Math_fround(HEAPF32[i1 >> 2]));
   i15 = (HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) | 0;
   f16 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) + f16);
   HEAPF32[i15 >> 2] = f16;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i11 >> 2] = 1;
 i15 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i14;
 return i15 | 0;
}

function _stbrp_pack_rects(i2, i5, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i7 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i9 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i3 = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i8 >> 2] = 1;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
  HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 12 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 _qsort(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, 16, 7);
 HEAP32[i9 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
  do if (!(HEAPU16[i1 + (HEAP32[i9 >> 2] << 4) + 4 >> 1] | 0)) i7 = 8; else if (!(HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 6 >> 1] | 0)) i7 = 8; else {
   i5 = (HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) | 0;
   _stbrp__skyline_pack_rectangle(i3, HEAP32[i6 >> 2] | 0, HEAPU16[i5 + 4 >> 1] | 0, HEAPU16[i5 + 6 >> 1] | 0);
   if (HEAP32[i3 + 8 >> 2] | 0) {
    HEAP16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 8 >> 1] = HEAP32[i3 >> 2];
    HEAP16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 10 >> 1] = HEAP32[i3 + 4 >> 2];
    break;
   } else {
    HEAP16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 10 >> 1] = -1;
    HEAP16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 8 >> 1] = -1;
    break;
   }
  } while (0);
  if ((i7 | 0) == 8) {
   i7 = 0;
   HEAP16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 10 >> 1] = 0;
   HEAP16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 8 >> 1] = 0;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 _qsort(i1, HEAP32[i10 >> 2] | 0, 16, 8);
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
  if ((HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 8 >> 1] | 0) == 65535) i1 = (HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 10 >> 1] | 0) == 65535; else i1 = 0;
  HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 12 >> 2] = (i1 ^ 1) & 1;
  if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] << 4) + 12 >> 2] | 0)) HEAP32[i8 >> 2] = 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 STACKTOP = i12;
 return HEAP32[i8 >> 2] | 0;
}

function _stbi__parse_uncompressed_block(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i5 = i1 + 20 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i4 >> 2] = i2;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 7 | 0) {
  i2 = HEAP32[i4 >> 2] | 0;
  _stbi__zreceive(i2 | 0, HEAP32[i2 + 8 >> 2] & 7) | 0;
 }
 HEAP32[i3 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) <= 0) break;
  i1 = HEAP32[i1 + 12 >> 2] & 255;
  i2 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i2 + 1;
  HEAP8[i5 + i2 >> 0] = i1;
  i2 = (HEAP32[i4 >> 2] | 0) + 12 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) >>> 8;
  i2 = (HEAP32[i4 >> 2] | 0) + 8 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - 8;
 }
 if (HEAP32[i1 + 8 >> 2] | 0) ___assert_fail(54557, 53449, 4149, 54574);
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= 4) break;
  i1 = _stbi__zget8(HEAP32[i4 >> 2] | 0) | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i2 + 1;
  HEAP8[i5 + i2 >> 0] = i1;
 }
 HEAP32[i6 >> 2] = (HEAPU8[i5 + 1 >> 0] << 8) + (HEAPU8[i5 >> 0] | 0);
 HEAP32[i7 >> 2] = (HEAPU8[i5 + 3 >> 0] << 8) + (HEAPU8[i5 + 2 >> 0] | 0);
 if ((HEAP32[i7 >> 2] | 0) != (HEAP32[i6 >> 2] ^ 65535 | 0)) {
  i7 = _stbi__err(54605) | 0;
  HEAP32[i8 >> 2] = i7;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if (((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  i7 = _stbi__err(54618) | 0;
  HEAP32[i8 >> 2] = i7;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if (((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) >>> 0) if (!(_stbi__zexpand(HEAP32[i4 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) {
  HEAP32[i8 >> 2] = 0;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 _memcpy(HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0, HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 i7 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 HEAP32[i8 >> 2] = 1;
 i8 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _InitAudioBuffer(i3, i2, i4, i1, i5) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i16 = i6 + 8 | 0;
 i13 = i6 + 164 | 0;
 i11 = i6 + 160 | 0;
 i9 = i6 + 156 | 0;
 i14 = i6 + 152 | 0;
 i8 = i6 + 148 | 0;
 i15 = i6 + 144 | 0;
 i7 = i6 + 140 | 0;
 i10 = i6 + 16 | 0;
 i12 = i6 + 12 | 0;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i15 >> 2] = i5;
 i5 = _calloc(1, 46592) | 0;
 HEAP32[i7 >> 2] = i5;
 if (!(HEAP32[i7 >> 2] | 0)) {
  _TraceLog(5, 49557, i6);
  HEAP32[i13 >> 2] = 0;
  i16 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i1 = Math_imul(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 i1 = _calloc(Math_imul(i1, _ma_get_bytes_per_sample(HEAP32[i11 >> 2] | 0) | 0) | 0, 1) | 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 46560 >> 2] = i1;
 i1 = i10;
 i2 = i1 + 124 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i10 + 44 >> 2] = 5;
 HEAP32[i10 + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i10 + 48 >> 2] = 2;
 HEAP32[i10 + 8 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i10 + 52 >> 2] = 44100;
 HEAP32[i10 + 108 >> 2] = 14;
 HEAP32[i10 + 112 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i10 + 100 >> 2] = 1;
 i14 = _ma_pcm_converter_init(i10, HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = i14;
 if (HEAP32[i12 >> 2] | 0) {
  _TraceLog(5, 49620, i16);
  _free(HEAP32[i7 >> 2] | 0);
  HEAP32[i13 >> 2] = 0;
  i16 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 } else {
  HEAPF32[(HEAP32[i7 >> 2] | 0) + 46528 >> 2] = Math_fround(1.0);
  HEAPF32[(HEAP32[i7 >> 2] | 0) + 46532 >> 2] = Math_fround(1.0);
  HEAP8[(HEAP32[i7 >> 2] | 0) + 46536 >> 0] = 0;
  HEAP8[(HEAP32[i7 >> 2] | 0) + 46537 >> 0] = 0;
  HEAP8[(HEAP32[i7 >> 2] | 0) + 46538 >> 0] = 0;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 46540 >> 2] = HEAP32[i15 >> 2];
  HEAP32[(HEAP32[i7 >> 2] | 0) + 46548 >> 2] = 0;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 46552 >> 2] = HEAP32[i8 >> 2];
  HEAP8[(HEAP32[i7 >> 2] | 0) + 46544 >> 0] = 1;
  HEAP8[(HEAP32[i7 >> 2] | 0) + 46544 + 1 >> 0] = 1;
  _TrackAudioBuffer(HEAP32[i7 >> 2] | 0);
  HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
  i16 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 return 0;
}

function _drmp3_L3_read_scalefactors(i5, i3, i7, i6, i2, i8) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i1 = 0, i4 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i20 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i19 = i1 + 44 | 0;
 i13 = i1 + 40 | 0;
 i17 = i1 + 36 | 0;
 i16 = i1 + 32 | 0;
 i9 = i1 + 28 | 0;
 i18 = i1 + 24 | 0;
 i12 = i1 + 20 | 0;
 i14 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i15 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i19 >> 2] = i5;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i17 >> 2] = i7;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i18 >> 2] = i8;
 HEAP32[i12 >> 2] = 0;
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) >= 4) {
   i1 = 14;
   break;
  }
  if (!(HEAPU8[(HEAP32[i16 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] | 0)) {
   i1 = 14;
   break;
  }
  HEAP32[i11 >> 2] = HEAPU8[(HEAP32[i16 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) >> 0];
  L5 : do if (HEAP32[i18 >> 2] & 8 | 0) _memcpy(HEAP32[i19 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0; else {
   HEAP32[i10 >> 2] = HEAPU8[(HEAP32[i17 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) >> 0];
   if (!(HEAP32[i10 >> 2] | 0)) {
    _memset(HEAP32[i19 >> 2] | 0, 0, HEAP32[i11 >> 2] | 0) | 0;
    _memset(HEAP32[i13 >> 2] | 0, 0, HEAP32[i11 >> 2] | 0) | 0;
    break;
   }
   if ((HEAP32[i18 >> 2] | 0) < 0) i1 = (1 << HEAP32[i10 >> 2]) - 1 | 0; else i1 = -1;
   HEAP32[i15 >> 2] = i1;
   HEAP32[i14 >> 2] = 0;
   while (1) {
    if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break L5;
    i8 = _drmp3_bs_get_bits(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
    HEAP32[i4 >> 2] = i8;
    i8 = HEAP32[i4 >> 2] | 0;
    HEAP8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) >> 0] = (i8 | 0) == (HEAP32[i15 >> 2] | 0) ? -1 : i8 | 0;
    HEAP8[(HEAP32[i19 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) >> 0] = HEAP32[i4 >> 2];
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] << 1;
 }
 if ((i1 | 0) == 14) {
  HEAP8[(HEAP32[i19 >> 2] | 0) + 2 >> 0] = 0;
  HEAP8[(HEAP32[i19 >> 2] | 0) + 1 >> 0] = 0;
  HEAP8[HEAP32[i19 >> 2] >> 0] = 0;
  STACKTOP = i20;
  return;
 }
}

function _stbtt__new_active(i4, i3, i5, f1, i6) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 f1 = Math_fround(f1);
 i6 = i6 | 0;
 var i2 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, i14 = 0, i15 = 0, f16 = f0;
 i12 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i2 + 28 | 0;
 i15 = i2 + 24 | 0;
 i7 = i2 + 20 | 0;
 i8 = i2 + 16 | 0;
 i10 = i2 + 12 | 0;
 i14 = i2 + 8 | 0;
 i11 = i2 + 4 | 0;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = i5;
 HEAPF32[i10 >> 2] = f1;
 HEAP32[i14 >> 2] = i6;
 i6 = _stbtt__hheap_alloc(HEAP32[i15 >> 2] | 0, 28, HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 f13 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 8 >> 2]);
 f13 = Math_fround(f13 - Math_fround(HEAPF32[HEAP32[i7 >> 2] >> 2]));
 f1 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 12 >> 2]);
 f1 = Math_fround(f13 / Math_fround(f1 - Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2])));
 HEAPF32[i2 >> 2] = f1;
 if (!(HEAP32[i11 >> 2] | 0)) ___assert_fail(53336, 52491, 2751, 53352);
 if (!(HEAP32[i11 >> 2] | 0)) {
  HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
  i15 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i12;
  return i15 | 0;
 }
 f13 = Math_fround(HEAPF32[i2 >> 2]);
 HEAPF32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] = f13;
 if (Math_fround(HEAPF32[i2 >> 2]) != Math_fround(0.0)) f1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i2 >> 2])); else f1 = Math_fround(0.0);
 HEAPF32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] = f1;
 f16 = Math_fround(HEAPF32[HEAP32[i7 >> 2] >> 2]);
 f1 = Math_fround(HEAPF32[i2 >> 2]);
 f13 = Math_fround(HEAPF32[i10 >> 2]);
 f13 = Math_fround(f16 + Math_fround(f1 * Math_fround(f13 - Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2]))));
 HEAPF32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] = f13;
 f13 = Math_fround(HEAP32[i8 >> 2] | 0);
 i15 = (HEAP32[i11 >> 2] | 0) + 4 | 0;
 f13 = Math_fround(Math_fround(HEAPF32[i15 >> 2]) - f13);
 HEAPF32[i15 >> 2] = f13;
 f13 = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0 ? Math_fround(1.0) : Math_fround(-1.0);
 HEAPF32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] = f13;
 f13 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2]);
 HEAPF32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] = f13;
 f13 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + 12 >> 2]);
 HEAPF32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] = f13;
 HEAP32[HEAP32[i11 >> 2] >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 i15 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i12;
 return i15 | 0;
}

function _ma_get_standard_channel_map_microsoft(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 switch (HEAP32[i5 >> 2] | 0) {
 case 1:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 1;
   break;
  }
 case 2:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   break;
  }
 case 3:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   break;
  }
 case 4:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 10;
   break;
  }
 case 5:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 7;
   break;
  }
 case 6:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 5;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 12;
   break;
  }
 case 7:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 5;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 10;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 12;
   break;
  }
 default:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 5;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 7 >> 0] = 12;
  }
 }
 if ((HEAP32[i5 >> 2] | 0) >>> 0 <= 8) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i1 >> 2] = 8;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 32) break;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP8[(HEAP32[i3 >> 2] | 0) + i5 >> 0] = 20 + ((i5 | 0) - 8);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i6;
 return;
}

function _ma_get_standard_channel_map_vorbis(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 switch (HEAP32[i5 >> 2] | 0) {
 case 1:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 1;
   break;
  }
 case 2:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   break;
  }
 case 3:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 3;
   break;
  }
 case 4:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   break;
  }
 case 5:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 7;
   break;
  }
 case 6:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 5;
   break;
  }
 case 7:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 12;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 10;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 5;
   break;
  }
 default:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 12;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 7 >> 0] = 5;
  }
 }
 if ((HEAP32[i5 >> 2] | 0) >>> 0 <= 8) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i1 >> 2] = 8;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 32) break;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP8[(HEAP32[i3 >> 2] | 0) + i5 >> 0] = 20 + ((i5 | 0) - 8);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i6;
 return;
}

function _ma_get_standard_channel_map_sound4(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 switch (HEAP32[i5 >> 2] | 0) {
 case 1:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 1;
   break;
  }
 case 2:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   break;
  }
 case 3:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 10;
   break;
  }
 case 4:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   break;
  }
 case 5:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   break;
  }
 case 6:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 5;
   break;
  }
 case 7:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 10;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 5;
   break;
  }
 default:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 5;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 7 >> 0] = 12;
  }
 }
 if ((HEAP32[i5 >> 2] | 0) >>> 0 <= 8) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i1 >> 2] = 8;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 32) break;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP8[(HEAP32[i3 >> 2] | 0) + i5 >> 0] = 20 + ((i5 | 0) - 8);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i6;
 return;
}

function _ma_get_standard_channel_map_flac(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 switch (HEAP32[i5 >> 2] | 0) {
 case 1:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 1;
   break;
  }
 case 2:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   break;
  }
 case 3:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   break;
  }
 case 4:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   break;
  }
 case 5:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 7;
   break;
  }
 case 6:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 5;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 7;
   break;
  }
 case 7:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 5;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 10;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 12;
   break;
  }
 default:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 5;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 7 >> 0] = 12;
  }
 }
 if ((HEAP32[i5 >> 2] | 0) >>> 0 <= 8) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i1 >> 2] = 8;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 32) break;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP8[(HEAP32[i3 >> 2] | 0) + i5 >> 0] = 20 + ((i5 | 0) - 8);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i6;
 return;
}

function _ma_get_standard_channel_map_alsa(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 switch (HEAP32[i5 >> 2] | 0) {
 case 1:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 1;
   break;
  }
 case 2:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   break;
  }
 case 3:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   break;
  }
 case 4:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   break;
  }
 case 5:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   break;
  }
 case 6:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 5;
   break;
  }
 case 7:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 5;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 10;
   break;
  }
 default:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 5;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 6 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 7 >> 0] = 12;
  }
 }
 if ((HEAP32[i5 >> 2] | 0) >>> 0 <= 8) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i1 >> 2] = 8;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 32) break;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP8[(HEAP32[i3 >> 2] | 0) + i5 >> 0] = 20 + ((i5 | 0) - 8);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i6;
 return;
}

function _ma_format_converter_init(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i6 >> 2] = -2;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 56 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i6 >> 2] = -2;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i3 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 if (0) i1 = (HEAP8[(HEAP32[i5 >> 2] | 0) + 24 >> 0] & 1 | 0) != 0 ^ 1; else i1 = 0;
 i3 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
 HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -2 | i1 & 1;
 if (0) i1 = ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 24 >> 0] | 0) >>> 1 & 1 | 0) != 0 ^ 1; else i1 = 0;
 i3 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
 HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -3 | (i1 & 1) << 1 & 255;
 if (0) i1 = ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 24 >> 0] | 0) >>> 2 & 1 | 0) != 0 ^ 1; else i1 = 0;
 i3 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
 HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -5 | (i1 & 1) << 2 & 255;
 if (0) i1 = ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 24 >> 0] | 0) >>> 3 & 1 | 0) != 0 ^ 1; else i1 = 0;
 i3 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
 HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -9 | (i1 & 1) << 3 & 255;
 _ma_format_converter_init_callbacks__default(HEAP32[i4 >> 2] | 0);
 switch (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) {
 case 1:
  {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] = 2;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] = 3;
   break;
  }
 case 2:
  {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] = 4;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] = 5;
   break;
  }
 case 3:
  {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] = 6;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] = 7;
   break;
  }
 case 4:
  {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] = 8;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] = 9;
   break;
  }
 default:
  {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] = 10;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] = 11;
  }
 }
 HEAP32[i6 >> 2] = 0;
 i6 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _ma_device_start(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i14 = i1 + 48 | 0;
 i12 = i1 + 44 | 0;
 i7 = i1 + 40 | 0;
 i4 = i1 + 36 | 0;
 i6 = i1 + 32 | 0;
 i11 = i1 + 28 | 0;
 i5 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i15 = i1 + 8 | 0;
 i13 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i13 >> 2] = i2;
 i1 = HEAP32[i13 >> 2] | 0;
 if (!(HEAP32[i13 >> 2] | 0)) {
  i14 = _ma_post_error(i1, 1, 46700, -2) | 0;
  HEAP32[i15 >> 2] = i14;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i3 >> 2] = i1;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
 i1 = HEAP32[i13 >> 2] | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  i14 = _ma_post_error(i1, 1, 46767, -201) | 0;
  HEAP32[i15 >> 2] = i14;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i5 >> 2] = i1;
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
 if ((HEAP32[i10 >> 2] | 0) == 2) {
  i14 = _ma_post_error(HEAP32[i13 >> 2] | 0, 2, 46821, -3) | 0;
  HEAP32[i15 >> 2] = i14;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i8 >> 2] = -1;
 _ma_mutex_lock((HEAP32[i13 >> 2] | 0) + 28 | 0);
 HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
 if ((HEAP32[i11 >> 2] | 0) != 1) ___assert_fail(46421, 36381, 26542, 46882);
 HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i4 >> 2] = 3;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] = HEAP32[i4 >> 2];
 i11 = (_ma_context_is_backend_asynchronous(HEAP32[HEAP32[i13 >> 2] >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if (i11) {
  i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 124 >> 2] & 31](HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = i11;
  if (!(HEAP32[i8 >> 2] | 0)) {
   HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i12 >> 2] = 2;
   HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] = HEAP32[i12 >> 2];
  }
 } else {
  _ma_event_signal(i1 + 60 | 0) | 0;
  _ma_event_wait((HEAP32[i13 >> 2] | 0) + 144 | 0) | 0;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 320 >> 2];
 }
 _ma_mutex_unlock((HEAP32[i13 >> 2] | 0) + 28 | 0);
 HEAP32[i15 >> 2] = HEAP32[i8 >> 2];
 i15 = HEAP32[i15 >> 2] | 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _GifThresholdImage(i5, i7, i10, i14, i3, i12) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i15 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i16 + 36 | 0;
 i8 = i16 + 32 | 0;
 i11 = i16 + 28 | 0;
 i18 = i16 + 24 | 0;
 i17 = i16 + 20 | 0;
 i13 = i16 + 16 | 0;
 i9 = i16 + 12 | 0;
 i4 = i16 + 8 | 0;
 i1 = i16 + 4 | 0;
 i2 = i16;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i18 >> 2] = i14;
 HEAP32[i17 >> 2] = i3;
 HEAP32[i13 >> 2] = i12;
 i14 = Math_imul(HEAP32[i18 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i14;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) break;
  if (HEAP32[i6 >> 2] | 0) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == (HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0)) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0) == (HEAPU8[(HEAP32[i8 >> 2] | 0) + 2 >> 0] | 0)) {
   HEAP8[HEAP32[i11 >> 2] >> 0] = HEAP8[HEAP32[i6 >> 2] >> 0] | 0;
   HEAP8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[(HEAP32[i11 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[i11 >> 2] | 0) + 3 >> 0] = 0;
  } else i15 = 8; else i15 = 8; else i15 = 8; else i15 = 8;
  if ((i15 | 0) == 8) {
   i15 = 0;
   HEAP32[i1 >> 2] = 1e6;
   HEAP32[i2 >> 2] = 1;
   i18 = HEAP32[i8 >> 2] | 0;
   _GifGetClosestPaletteColor(HEAP32[i13 >> 2] | 0, HEAPU8[HEAP32[i8 >> 2] >> 0] | 0, HEAPU8[i18 + 1 >> 0] | 0, HEAPU8[i18 + 2 >> 0] | 0, i2, i1, 1);
   HEAP8[HEAP32[i11 >> 2] >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + 4 + (HEAP32[i2 >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + 260 + (HEAP32[i2 >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[i11 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + 516 + (HEAP32[i2 >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[i11 >> 2] | 0) + 3 >> 0] = HEAP32[i2 >> 2];
  }
  if (HEAP32[i6 >> 2] | 0) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 4;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 4;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i16;
 return;
}

function _SaveKTX(i7, i3) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 i14 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i11 = i14;
 i4 = i14 + 104 | 0;
 i10 = i14 + 100 | 0;
 i8 = i14 + 96 | 0;
 i9 = i14 + 32 | 0;
 i12 = i14 + 28 | 0;
 i5 = i14 + 24 | 0;
 i1 = i14 + 20 | 0;
 i6 = i14 + 16 | 0;
 i2 = i14 + 12 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 i3 = _fopen(HEAP32[i4 >> 2] | 0, 54730) | 0;
 HEAP32[i8 >> 2] = i3;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
  _TraceLog(4, 58502, i11);
  i14 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 _strncpy(i9, 58543, 12) | 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 HEAP32[i9 + 20 >> 2] = 1;
 HEAP32[i9 + 24 >> 2] = 0;
 HEAP32[i9 + 28 >> 2] = 0;
 HEAP32[i9 + 32 >> 2] = 0;
 HEAP32[i9 + 36 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i9 + 40 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i9 + 44 >> 2] = 0;
 HEAP32[i9 + 48 >> 2] = 0;
 HEAP32[i9 + 52 >> 2] = 1;
 HEAP32[i9 + 56 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i9 + 60 >> 2] = 0;
 _rlGetGlTextureFormats(HEAP32[i7 + 16 >> 2] | 0, i9 + 28 | 0, i9 + 24 | 0, i9 + 16 | 0);
 HEAP32[i9 + 32 >> 2] = HEAP32[i9 + 24 >> 2];
 L5 : do if ((HEAP32[i9 + 24 >> 2] | 0) == -1) _TraceLog(4, 58555, i14 + 8 | 0); else {
  i14 = _fwrite(i9, 64, 1, HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = i14;
  HEAP32[i12 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i5 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i1 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i7 + 12 >> 2] | 0)) break L5;
   i14 = _GetPixelDataSize(HEAP32[i12 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i7 + 16 >> 2] | 0) | 0;
   HEAP32[i2 >> 2] = i14;
   i14 = _fwrite(i2, 4, 1, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i14;
   i14 = _fwrite((HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) | 0, HEAP32[i2 >> 2] | 0, 1, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i14;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) / 2 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) / 2 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + (HEAP32[i2 >> 2] | 0);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
 } while (0);
 _fclose(HEAP32[i8 >> 2] | 0) | 0;
 i14 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i13;
 return i14 | 0;
}

function _ma_device_stop(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i7 = i1 + 48 | 0;
 i4 = i1 + 44 | 0;
 i14 = i1 + 40 | 0;
 i12 = i1 + 36 | 0;
 i6 = i1 + 32 | 0;
 i11 = i1 + 28 | 0;
 i5 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i15 = i1 + 8 | 0;
 i13 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i13 >> 2] = i2;
 i1 = HEAP32[i13 >> 2] | 0;
 if (!(HEAP32[i13 >> 2] | 0)) {
  i14 = _ma_post_error(i1, 1, 46471, -2) | 0;
  HEAP32[i15 >> 2] = i14;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i3 >> 2] = i1;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
 i1 = HEAP32[i13 >> 2] | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  i14 = _ma_post_error(i1, 1, 46537, -201) | 0;
  HEAP32[i15 >> 2] = i14;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i5 >> 2] = i1;
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
 if ((HEAP32[i10 >> 2] | 0) == 1) {
  i14 = _ma_post_error(HEAP32[i13 >> 2] | 0, 2, 46590, -3) | 0;
  HEAP32[i15 >> 2] = i14;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i8 >> 2] = -1;
 _ma_mutex_lock((HEAP32[i13 >> 2] | 0) + 28 | 0);
 HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
 if ((HEAP32[i11 >> 2] | 0) != 2) ___assert_fail(46650, 36381, 26592, 46685);
 HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i4 >> 2] = 4;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] = HEAP32[i4 >> 2];
 if (HEAP32[(HEAP32[HEAP32[i13 >> 2] >> 2] | 0) + 128 >> 2] | 0) {
  i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i13 >> 2] >> 2] | 0) + 128 >> 2] & 31](HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = i11;
 } else HEAP32[i8 >> 2] = 0;
 i11 = (_ma_context_is_backend_asynchronous(HEAP32[HEAP32[i13 >> 2] >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if (i11) {
  HEAP32[i14 >> 2] = i1;
  HEAP32[i12 >> 2] = 1;
  HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] = HEAP32[i12 >> 2];
 } else {
  _ma_event_wait(i1 + 228 | 0) | 0;
  HEAP32[i8 >> 2] = 0;
 }
 _ma_mutex_unlock((HEAP32[i13 >> 2] | 0) + 28 | 0);
 HEAP32[i15 >> 2] = HEAP32[i8 >> 2];
 i15 = HEAP32[i15 >> 2] | 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _bonus_stage(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i5 = i7;
 i6 = i7 + 32 | 0;
 HEAP32[43876] = 0;
 if (HEAP32[i1 + 24 >> 2] | 0) {
  HEAP32[i5 >> 2] = HEAP32[43860];
  HEAP32[i5 + 4 >> 2] = HEAP32[43861];
  HEAP32[i5 + 8 >> 2] = HEAP32[43862];
  HEAP32[i5 + 12 >> 2] = HEAP32[43863];
  HEAP32[i5 + 16 >> 2] = HEAP32[43864];
  HEAP32[i5 + 20 >> 2] = HEAP32[43865];
  HEAP32[i5 + 24 >> 2] = HEAP32[43866];
  HEAP32[i5 + 28 >> 2] = HEAP32[43867];
  _StopMusicStream(i5);
  HEAP32[i5 >> 2] = HEAP32[43868];
  HEAP32[i5 + 4 >> 2] = HEAP32[43869];
  HEAP32[i5 + 8 >> 2] = HEAP32[43870];
  HEAP32[i5 + 12 >> 2] = HEAP32[43871];
  HEAP32[i5 + 16 >> 2] = HEAP32[43872];
  HEAP32[i5 + 20 >> 2] = HEAP32[43873];
  HEAP32[i5 + 24 >> 2] = HEAP32[43874];
  HEAP32[i5 + 28 >> 2] = HEAP32[43875];
  _PlayMusicStream(i5);
  HEAP32[i5 >> 2] = HEAP32[43868];
  HEAP32[i5 + 4 >> 2] = HEAP32[43869];
  HEAP32[i5 + 8 >> 2] = HEAP32[43870];
  HEAP32[i5 + 12 >> 2] = HEAP32[43871];
  HEAP32[i5 + 16 >> 2] = HEAP32[43872];
  HEAP32[i5 + 20 >> 2] = HEAP32[43873];
  HEAP32[i5 + 24 >> 2] = HEAP32[43874];
  HEAP32[i5 + 28 >> 2] = HEAP32[43875];
  _SetMusicVolume(i5, Math_fround(.200000003));
 }
 i2 = 163168;
 i3 = 11872;
 i4 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP32[i1 + 36 >> 2] = 0;
 _getRandomReel(i5) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 L4 : do if (!(i1 & 1)) {
  i2 = 0;
  i3 = 0;
  while (1) {
   if (!(i1 & 1)) {
    i4 = (i1 >>> 0) % 100 | 0;
    HEAP32[163168 + (i3 * 20 | 0) + 12 >> 2] = i4 >>> 0 > 5 ? i4 : 5;
    i2 = i2 + 1 | 0;
   }
   i3 = i3 + 1 | 0;
   if (!((i2 | 0) < 2 & i3 >>> 0 < 5)) break L4;
   i1 = HEAP32[i5 + (i3 << 2) >> 2] | 0;
  }
 } else {
  i1 = 0;
  i3 = 4;
  while (1) {
   i2 = HEAP32[i5 + (i3 << 2) >> 2] | 0;
   if (!(i2 & 1)) {
    i4 = (i2 >>> 0) % 100 | 0;
    HEAP32[163168 + (i3 * 20 | 0) + 12 >> 2] = i4 >>> 0 > 5 ? i4 : 5;
    i1 = i1 + 1 | 0;
   }
   if ((i1 | 0) < 2 & (i3 | 0) != 0) i3 = i3 + -1 | 0; else break;
  }
 } while (0);
 i1 = 0;
 do {
  i5 = HEAP32[163168 + (i1 * 20 | 0) + 12 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = i5;
  _printf(31962, i6) | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 5);
 STACKTOP = i7;
 return;
}

function _stbtt__cid_get_glyph_subrs(i2, i12, i9) {
 i2 = i2 | 0;
 i12 = i12 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i3 = i1 + 84 | 0;
 i4 = i1 + 72 | 0;
 i13 = i1 + 68 | 0;
 i10 = i1 + 64 | 0;
 i6 = i1 + 52 | 0;
 i14 = i1 + 48 | 0;
 i15 = i1 + 44 | 0;
 i5 = i1 + 40 | 0;
 i17 = i1 + 36 | 0;
 i8 = i1 + 32 | 0;
 i7 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i16 = i1 + 12 | 0;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i10 >> 2] = i9;
 i12 = (HEAP32[i13 >> 2] | 0) + 112 | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i7 >> 2] = -1;
 _stbtt__buf_seek(i6, 0);
 i12 = (_stbtt__buf_get8(i6) | 0) & 255;
 HEAP32[i8 >> 2] = i12;
 L1 : do if (!(HEAP32[i8 >> 2] | 0)) {
  _stbtt__buf_skip(i6, HEAP32[i10 >> 2] | 0);
  i17 = (_stbtt__buf_get8(i6) | 0) & 255;
  HEAP32[i7 >> 2] = i17;
 } else if ((HEAP32[i8 >> 2] | 0) == 3) {
  i12 = _stbtt__buf_get(i6, 2) | 0;
  HEAP32[i14 >> 2] = i12;
  i12 = _stbtt__buf_get(i6, 2) | 0;
  HEAP32[i15 >> 2] = i12;
  HEAP32[i11 >> 2] = 0;
  while (1) {
   if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) break L1;
   i12 = (_stbtt__buf_get8(i6) | 0) & 255;
   HEAP32[i17 >> 2] = i12;
   i12 = _stbtt__buf_get(i6, 2) | 0;
   HEAP32[i5 >> 2] = i12;
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) < (HEAP32[i5 >> 2] | 0)) break;
   HEAP32[i15 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  HEAP32[i7 >> 2] = HEAP32[i17 >> 2];
 } while (0);
 if ((HEAP32[i7 >> 2] | 0) == -1) _stbtt__new_buf(i16, 0, 0);
 i15 = HEAP32[i13 >> 2] | 0;
 i17 = i15 + 52 | 0;
 i15 = i15 + 100 | 0;
 i16 = HEAP32[i7 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 _stbtt__cff_index_get(i1, i3, i16);
 HEAP32[i4 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 _stbtt__get_subrs(i2, i4, i3);
 STACKTOP = i18;
 return;
}

function _stbi__hdr_convert(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = i4;
 if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] | 0)) {
  switch (HEAP32[i8 >> 2] | 0) {
  case 4:
   {
    HEAPF32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] = Math_fround(1.0);
    i1 = 11;
    break;
   }
  case 3:
   {
    i1 = 11;
    break;
   }
  case 2:
   {
    HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = Math_fround(1.0);
    i1 = 13;
    break;
   }
  case 1:
   {
    i1 = 13;
    break;
   }
  default:
   {
    STACKTOP = i9;
    return;
   }
  }
  if ((i1 | 0) == 11) {
   HEAPF32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = Math_fround(0.0);
   HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = Math_fround(0.0);
   HEAPF32[HEAP32[i7 >> 2] >> 2] = Math_fround(0.0);
   STACKTOP = i9;
   return;
  } else if ((i1 | 0) == 13) {
   HEAPF32[HEAP32[i7 >> 2] >> 2] = Math_fround(0.0);
   STACKTOP = i9;
   return;
  }
 }
 f10 = Math_fround(+_ldexp(1.0, (HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] | 0) - 136 | 0));
 HEAPF32[i5 >> 2] = f10;
 i1 = HEAPU8[HEAP32[i6 >> 2] >> 0] | 0;
 if ((HEAP32[i8 >> 2] | 0) <= 2) {
  i6 = HEAP32[i6 >> 2] | 0;
  f10 = Math_fround(i1 + (HEAPU8[i6 + 1 >> 0] | 0) + (HEAPU8[i6 + 2 >> 0] | 0) | 0);
  f10 = Math_fround(Math_fround(f10 * Math_fround(HEAPF32[i5 >> 2])) / Math_fround(3.0));
  HEAPF32[HEAP32[i7 >> 2] >> 2] = f10;
 } else {
  f10 = Math_fround(i1 | 0);
  f10 = Math_fround(f10 * Math_fround(HEAPF32[i5 >> 2]));
  HEAPF32[HEAP32[i7 >> 2] >> 2] = f10;
  f10 = Math_fround(HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0);
  f10 = Math_fround(f10 * Math_fround(HEAPF32[i5 >> 2]));
  HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = f10;
  f10 = Math_fround(HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0);
  f10 = Math_fround(f10 * Math_fround(HEAPF32[i5 >> 2]));
  HEAPF32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = f10;
 }
 if ((HEAP32[i8 >> 2] | 0) == 2) HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = Math_fround(1.0);
 if ((HEAP32[i8 >> 2] | 0) != 4) {
  STACKTOP = i9;
  return;
 }
 HEAPF32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] = Math_fround(1.0);
 STACKTOP = i9;
 return;
}

function _stbv_compute_twiddle_factors(i9, i2, i4, i6) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, f14 = f0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 28 | 0;
 i3 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i12 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i11 >> 2] = HEAP32[i10 >> 2] >> 2;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2] >> 3;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
  f14 = Math_fround(+_llvm_cos_f64(+(+(HEAP32[i8 >> 2] << 2 | 0) * 3.141592653589793 / +(HEAP32[i10 >> 2] | 0))));
  HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f14;
  f14 = Math_fround(-+_llvm_sin_f64(+(+(HEAP32[i8 >> 2] << 2 | 0) * 3.141592653589793 / +(HEAP32[i10 >> 2] | 0))));
  HEAPF32[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 1 << 2) >> 2] = f14;
  f14 = Math_fround(Math_fround(+_llvm_cos_f64(+(+((HEAP32[i1 >> 2] | 0) + 1 | 0) * 3.141592653589793 / +(HEAP32[i10 >> 2] | 0) / 2.0))) * Math_fround(.5));
  HEAPF32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f14;
  f14 = Math_fround(Math_fround(+_llvm_sin_f64(+(+((HEAP32[i1 >> 2] | 0) + 1 | 0) * 3.141592653589793 / +(HEAP32[i10 >> 2] | 0) / 2.0))) * Math_fround(.5));
  HEAPF32[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 1 << 2) >> 2] = f14;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 2;
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
  f14 = Math_fround(+_llvm_cos_f64(+(+((HEAP32[i1 >> 2] | 0) + 1 << 1 | 0) * 3.141592653589793 / +(HEAP32[i10 >> 2] | 0))));
  HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f14;
  f14 = Math_fround(-+_llvm_sin_f64(+(+((HEAP32[i1 >> 2] | 0) + 1 << 1 | 0) * 3.141592653589793 / +(HEAP32[i10 >> 2] | 0))));
  HEAPF32[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 1 << 2) >> 2] = f14;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 2;
 }
 STACKTOP = i13;
 return;
}

function _ma_device_init_ex(i4, i2, i12, i9, i14) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i9 = i9 | 0;
 i14 = i14 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i17 = i1 + 96 | 0;
 i5 = i1 + 92 | 0;
 i3 = i1 + 88 | 0;
 i13 = i1 + 84 | 0;
 i10 = i1 + 80 | 0;
 i15 = i1 + 76 | 0;
 i16 = i1 + 72 | 0;
 i11 = i1 + 68 | 0;
 i6 = i1;
 i7 = i1 + 64 | 0;
 i8 = i1 + 60 | 0;
 i1 = i1 + 56 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i15 >> 2] = i14;
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i17 >> 2] = -2;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i14 = _ma_malloc(204) | 0;
 HEAP32[i11 >> 2] = i14;
 if (!(HEAP32[i11 >> 2] | 0)) {
  HEAP32[i17 >> 2] = -4;
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) >>> 0 > 13) break;
  HEAP32[i6 + (HEAP32[i7 >> 2] << 2) >> 2] = HEAP32[i7 >> 2];
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i8 >> 2] = i6;
  HEAP32[i1 >> 2] = 14;
 }
 HEAP32[i16 >> 2] = -103;
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) >>> 0 >= (HEAP32[i1 >> 2] | 0) >>> 0) break;
  i14 = _ma_context_init((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) | 0, 1, HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[i16 >> 2] = i14;
  if (!(HEAP32[i16 >> 2] | 0)) {
   i14 = _ma_device_init(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
   HEAP32[i16 >> 2] = i14;
   if (!(HEAP32[i16 >> 2] | 0)) break;
   _ma_context_uninit(HEAP32[i11 >> 2] | 0) | 0;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 if (HEAP32[i16 >> 2] | 0) {
  _ma_free(HEAP32[i11 >> 2] | 0);
  HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 } else {
  i15 = (HEAP32[i15 >> 2] | 0) + 324 | 0;
  HEAP8[i15 >> 0] = HEAP8[i15 >> 0] & -9 | 8;
  HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
  i17 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 return 0;
}

function _rlMultMatrixf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i7 = i9 + 200 | 0;
 i5 = i9 + 136 | 0;
 i3 = i9 + 128 | 0;
 i6 = i9 + 64 | 0;
 i8 = i9;
 HEAP32[i3 >> 2] = i1;
 f10 = Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]);
 HEAPF32[i6 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 16 >> 2]);
 HEAPF32[i6 + 4 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 32 >> 2]);
 HEAPF32[i6 + 8 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 48 >> 2]);
 HEAPF32[i6 + 12 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2]);
 HEAPF32[i6 + 16 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 20 >> 2]);
 HEAPF32[i6 + 20 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 36 >> 2]);
 HEAPF32[i6 + 24 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 52 >> 2]);
 HEAPF32[i6 + 28 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 8 >> 2]);
 HEAPF32[i6 + 32 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 24 >> 2]);
 HEAPF32[i6 + 36 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 40 >> 2]);
 HEAPF32[i6 + 40 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 56 >> 2]);
 HEAPF32[i6 + 44 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 12 >> 2]);
 HEAPF32[i6 + 48 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 28 >> 2]);
 HEAPF32[i6 + 52 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 44 >> 2]);
 HEAPF32[i6 + 56 >> 2] = f10;
 f10 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 60 >> 2]);
 HEAPF32[i6 + 60 >> 2] = f10;
 i3 = HEAP32[43894] | 0;
 i1 = i3 | 0;
 i2 = i5;
 i3 = i3 | 0;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 i2 = i7;
 i3 = i6;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 _MatrixMultiply(i8, i5, i7);
 i2 = i1;
 i3 = i8;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 STACKTOP = i9;
 return;
}

function _acosf(f3) {
 f3 = Math_fround(f3);
 var i1 = 0, i2 = 0, f4 = f0, f5 = f0;
 i1 = (HEAPF32[tempDoublePtr >> 2] = f3, HEAP32[tempDoublePtr >> 2] | 0);
 i2 = i1 & 2147483647;
 if (i2 >>> 0 > 1065353215) if ((i2 | 0) == 1065353216) {
  f3 = (i1 | 0) < 0 ? Math_fround(3.1415925) : Math_fround(0.0);
  return Math_fround(f3);
 } else {
  f3 = Math_fround(Math_fround(0.0) / Math_fround(f3 - f3));
  return Math_fround(f3);
 }
 if (i2 >>> 0 < 1056964608) {
  if (i2 >>> 0 < 847249409) {
   f3 = Math_fround(1.57079625);
   return Math_fround(f3);
  }
  f4 = Math_fround(f3 * f3);
  f3 = Math_fround(Math_fround(1.57079625) - Math_fround(f3 - Math_fround(Math_fround(7.54978942e-08) - Math_fround(Math_fround(Math_fround(f4 * Math_fround(Math_fround(f4 * Math_fround(Math_fround(-.0427434221) - Math_fround(f4 * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround(f4 * Math_fround(.706629634)))) * f3))));
  return Math_fround(f3);
 }
 if ((i1 | 0) < 0) {
  f3 = Math_fround(Math_fround(f3 + Math_fround(1.0)) * Math_fround(.5));
  f4 = Math_fround(Math_sqrt(Math_fround(f3)));
  f4 = Math_fround(Math_fround(Math_fround(1.57079625) - Math_fround(f4 + Math_fround(Math_fround(Math_fround(Math_fround(f3 * Math_fround(Math_fround(f3 * Math_fround(Math_fround(-.0427434221) - Math_fround(f3 * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround(f3 * Math_fround(.706629634)))) * f4) + Math_fround(-7.54978942e-08)))) * Math_fround(2.0));
  return Math_fround(f4);
 } else {
  f5 = Math_fround(Math_fround(Math_fround(1.0) - f3) * Math_fround(.5));
  f3 = Math_fround(Math_sqrt(Math_fround(f5)));
  f4 = (HEAP32[tempDoublePtr >> 2] = (HEAPF32[tempDoublePtr >> 2] = f3, HEAP32[tempDoublePtr >> 2] | 0) & -4096, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f4 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(f5 * Math_fround(Math_fround(f5 * Math_fround(Math_fround(-.0427434221) - Math_fround(f5 * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround(f5 * Math_fround(.706629634)))) * f3) + Math_fround(Math_fround(f5 - Math_fround(f4 * f4)) / Math_fround(f3 + f4))) + f4) * Math_fround(2.0));
  return Math_fround(f4);
 }
 return f0;
}

function _stbv_get_bits(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
  HEAP32[i7 >> 2] = 0;
  i8 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 L5 : do if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 1396 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) {
  i1 = HEAP32[i5 >> 2] | 0;
  if ((HEAP32[i6 >> 2] | 0) > 24) {
   i4 = _stbv_get_bits(i1, 24) | 0;
   HEAP32[i8 >> 2] = i4;
   i6 = (_stbv_get_bits(HEAP32[i5 >> 2] | 0, (HEAP32[i6 >> 2] | 0) - 24 | 0) | 0) << 24;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i6;
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
   i8 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i9;
   return i8 | 0;
  }
  if (!(HEAP32[i1 + 1396 >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 1392 >> 2] = 0;
  while (1) {
   if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 1396 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L5;
   i3 = _stbv_get8_packet_raw(HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i3;
   if ((HEAP32[i4 >> 2] | 0) == -1) break;
   i3 = (HEAP32[i5 >> 2] | 0) + 1392 | 0;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] << HEAP32[(HEAP32[i5 >> 2] | 0) + 1396 >> 2]);
   i3 = (HEAP32[i5 >> 2] | 0) + 1396 | 0;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 8;
  }
  HEAP32[(HEAP32[i5 >> 2] | 0) + 1396 >> 2] = -1;
  HEAP32[i7 >> 2] = 0;
  i8 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 } while (0);
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
  HEAP32[i7 >> 2] = 0;
  i8 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 1392 >> 2] & (1 << HEAP32[i6 >> 2]) - 1;
  i4 = (HEAP32[i5 >> 2] | 0) + 1392 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) >>> (HEAP32[i6 >> 2] | 0);
  i5 = (HEAP32[i5 >> 2] | 0) + 1396 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  i8 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 return 0;
}

function _InitAudioDevice() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 i10 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 i7 = i10 + 80 | 0;
 i6 = i10 + 72 | 0;
 i5 = i10 + 64 | 0;
 i4 = i10 + 56 | 0;
 i3 = i10 + 48 | 0;
 i8 = i10 + 40 | 0;
 i11 = i10 + 252 | 0;
 i2 = i10 + 248 | 0;
 i1 = i10 + 88 | 0;
 _ma_context_config_init(i11);
 HEAP32[i11 >> 2] = 2;
 i11 = _ma_context_init(0, 0, i11, 176288) | 0;
 HEAP32[i2 >> 2] = i11;
 if (HEAP32[i2 >> 2] | 0) {
  _TraceLog(5, 49202, i10);
  STACKTOP = i9;
  return;
 }
 _ma_device_config_init(i1, 1);
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 44 + 4 >> 2] = 5;
 HEAP32[i1 + 44 + 8 >> 2] = 2;
 HEAP32[i1 + 92 >> 2] = 0;
 HEAP32[i1 + 92 + 4 >> 2] = 2;
 HEAP32[i1 + 92 + 8 >> 2] = 1;
 HEAP32[i1 + 4 >> 2] = 44100;
 HEAP32[i1 + 32 >> 2] = 3;
 HEAP32[i1 + 40 >> 2] = 0;
 i11 = _ma_device_init(176288, i1, 62400) | 0;
 HEAP32[i2 >> 2] = i11;
 if (HEAP32[i2 >> 2] | 0) {
  _TraceLog(5, 49237, i10 + 8 | 0);
  _ma_context_uninit(176288) | 0;
  STACKTOP = i9;
  return;
 }
 i11 = _ma_device_start(62400) | 0;
 HEAP32[i2 >> 2] = i11;
 if (HEAP32[i2 >> 2] | 0) {
  _TraceLog(5, 49280, i10 + 16 | 0);
  _ma_device_uninit(62400);
  _ma_context_uninit(176288) | 0;
  STACKTOP = i9;
  return;
 }
 if (_ma_mutex_init(176288, 176492) | 0) {
  _TraceLog(5, 49318, i10 + 24 | 0);
  _ma_device_uninit(62400);
  _ma_context_uninit(176288) | 0;
  STACKTOP = i9;
  return;
 } else {
  _TraceLog(3, 49358, i10 + 32 | 0);
  i10 = _ma_get_backend_name(HEAP32[44072] | 0) | 0;
  HEAP32[i8 >> 2] = i10;
  _TraceLog(3, 49396, i8);
  i10 = _ma_get_format_name(HEAP32[15762] | 0) | 0;
  i11 = _ma_get_format_name(HEAP32[15772] | 0) | 0;
  HEAP32[i3 >> 2] = i10;
  HEAP32[i3 + 4 >> 2] = i11;
  _TraceLog(3, 49426, i3);
  i11 = HEAP32[15773] | 0;
  HEAP32[i4 >> 2] = HEAP32[15763];
  HEAP32[i4 + 4 >> 2] = i11;
  _TraceLog(3, 49449, i4);
  i11 = HEAP32[15774] | 0;
  HEAP32[i5 >> 2] = HEAP32[15602];
  HEAP32[i5 + 4 >> 2] = i11;
  _TraceLog(3, 49474, i5);
  HEAP32[i6 >> 2] = HEAP32[15783];
  _TraceLog(3, 49502, i6);
  _InitAudioBufferPool();
  HEAP32[i7 >> 2] = 16;
  _TraceLog(3, 49524, i7);
  STACKTOP = i9;
  return;
 }
}

function _rlBegin(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i4;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 do if ((HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 4 >> 2] | 0) > 0) {
  i1 = (HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) | 0;
  do if ((HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) >> 2] | 0) == 1) {
   i2 = HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 4 >> 2] | 0;
   HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) < 4 ? i2 : (i2 | 0) % 4 | 0;
  } else {
   i2 = (HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) | 0;
   if ((HEAP32[i1 >> 2] | 0) != 4) {
    HEAP32[i2 + 8 >> 2] = 0;
    break;
   }
   if ((HEAP32[i2 + 4 >> 2] | 0) < 4) i1 = 1; else i1 = 4 - ((HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 4 >> 2] | 0) % 4 | 0) | 0;
   HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] = i1;
  } while (0);
  if (_rlCheckBufferLimit(HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] | 0) | 0) {
   _rlglDraw();
   break;
  } else {
   i2 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] | 0);
   i2 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] | 0);
   i2 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) + 4 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] | 0);
   HEAP32[43929] = (HEAP32[43929] | 0) + 1;
   break;
  }
 } while (0);
 if ((HEAP32[43929] | 0) >= 256) _rlglDraw();
 HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) >> 2] = HEAP32[i3 >> 2];
 HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 4 >> 2] = 0;
 HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 12 >> 2] = HEAP32[43931];
 STACKTOP = i4;
 return;
}

function _ma_rb_init_ex(i9, i7, i11, i2, i4) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 i14 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i14 + 28 | 0;
 i10 = i14 + 24 | 0;
 i8 = i14 + 20 | 0;
 i12 = i14 + 16 | 0;
 i3 = i14 + 12 | 0;
 i5 = i14 + 8 | 0;
 i1 = i14;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i14 + 4 >> 2] = 2147483584;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i6 >> 2] = -2;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 if ((HEAP32[i10 >> 2] | 0) == 0 | (HEAP32[i8 >> 2] | 0) == 0) {
  HEAP32[i6 >> 2] = -2;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 if ((HEAP32[i10 >> 2] | 0) >>> 0 > 2147483584) {
  HEAP32[i6 >> 2] = -2;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 i14 = HEAP32[i5 >> 2] | 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i14 + 12 >> 2] = 0;
 HEAP32[i14 + 16 >> 2] = 0;
 HEAP32[i14 + 20 >> 2] = 0;
 HEAP32[i14 + 24 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i10 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = HEAP32[i8 >> 2];
 do if (HEAP32[i3 >> 2] | 0) {
  HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = HEAP32[i12 >> 2];
  HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[i3 >> 2];
 } else {
  i14 = HEAP32[i5 >> 2] | 0;
  HEAP32[i14 + 12 >> 2] = (HEAP32[i14 + 4 >> 2] | 0) + 63 & -65;
  i14 = HEAP32[i5 >> 2] | 0;
  i14 = Math_imul(HEAP32[i14 + 8 >> 2] | 0, HEAP32[i14 + 12 >> 2] | 0) | 0;
  HEAP32[i1 >> 2] = i14;
  i14 = _ma_aligned_malloc(HEAP32[i1 >> 2] | 0, 64) | 0;
  HEAP32[HEAP32[i5 >> 2] >> 2] = i14;
  if (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) {
   _memset(HEAP32[HEAP32[i5 >> 2] >> 2] | 0, 0, HEAP32[i1 >> 2] | 0) | 0;
   i14 = (HEAP32[i5 >> 2] | 0) + 24 | 0;
   HEAP8[i14 >> 0] = HEAP8[i14 >> 0] & -2 | 1;
   break;
  }
  HEAP32[i6 >> 2] = -4;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i13;
  return i14 | 0;
 } while (0);
 HEAP32[i6 >> 2] = 0;
 i14 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i13;
 return i14 | 0;
}

function _EmscriptenTouchCallback(i4, i6, i8) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, f11 = f0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i9 = i10 + 88 | 0;
 i5 = i10 + 80 | 0;
 i7 = i10 + 76 | 0;
 i1 = i10 + 16 | 0;
 i2 = i10 + 8 | 0;
 i3 = i10;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i10 + 72 >> 2] = i8;
 do if ((HEAP32[i5 >> 2] | 0) == 22) HEAP32[i1 >> 2] = 1; else {
  if ((HEAP32[i5 >> 2] | 0) == 23) {
   HEAP32[i1 >> 2] = 0;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) == 24) HEAP32[i1 >> 2] = 2;
 } while (0);
 HEAP32[i1 + 4 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2];
 HEAP32[i1 + 8 + 4 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 + 52 >> 2];
 i8 = i1 + 24 | 0;
 f11 = Math_fround(HEAP32[(HEAP32[i7 >> 2] | 0) + 20 + 36 >> 2] | 0);
 HEAPF32[i2 >> 2] = f11;
 f11 = Math_fround(HEAP32[(HEAP32[i7 >> 2] | 0) + 20 + 40 >> 2] | 0);
 HEAPF32[i2 + 4 >> 2] = f11;
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 i8 = i1 + 24 + 8 | 0;
 i2 = i1 + 24 + 8 | 0;
 i6 = i8 | 0;
 f11 = Math_fround(HEAP32[(HEAP32[i7 >> 2] | 0) + 20 + 52 + 36 >> 2] | 0);
 HEAPF32[i3 >> 2] = f11;
 f11 = Math_fround(HEAP32[(HEAP32[i7 >> 2] | 0) + 20 + 52 + 40 >> 2] | 0);
 HEAPF32[i3 + 4 >> 2] = f11;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 f11 = Math_fround(_GetScreenWidth() | 0);
 i3 = i1 + 24 | 0;
 f11 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) / f11);
 HEAPF32[i3 >> 2] = f11;
 f11 = Math_fround(_GetScreenHeight() | 0);
 i3 = i1 + 24 + 4 | 0;
 f11 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) / f11);
 HEAPF32[i3 >> 2] = f11;
 f11 = Math_fround(_GetScreenWidth() | 0);
 i3 = i8 | 0;
 f11 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) / f11);
 HEAPF32[i3 >> 2] = f11;
 f11 = Math_fround(_GetScreenHeight() | 0);
 i3 = i2 + 4 | 0;
 f11 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) / f11);
 HEAPF32[i3 >> 2] = f11;
 i3 = i9;
 i2 = i3 + 56 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 _ProcessGestureEvent(i9);
 STACKTOP = i10;
 return 1;
}

function _LoadSoundFromWave(i1, i8) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 i10 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i7 = i10 + 36 | 0;
 i4 = i10 + 32 | 0;
 i6 = i10 + 28 | 0;
 i5 = i10 + 24 | 0;
 i2 = i10 + 20 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 if (!(HEAP32[i8 + 16 >> 2] | 0)) {
  HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
  STACKTOP = i9;
  return;
 }
 if ((HEAP32[i8 + 8 >> 2] | 0) == 8) i3 = 1; else i3 = (HEAP32[i8 + 8 >> 2] | 0) == 16 ? 2 : 5;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = ((HEAP32[i8 >> 2] | 0) >>> 0) / ((HEAP32[i8 + 12 >> 2] | 0) >>> 0) | 0;
 i3 = _ma_convert_frames(0, 5, 2, 44100, 0, HEAP32[i4 >> 2] | 0, HEAP32[i8 + 12 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0;
 getTempRet0() | 0;
 HEAP32[i5 >> 2] = i3;
 if (!(HEAP32[i5 >> 2] | 0)) _TraceLog(4, 50819, i10);
 i3 = _InitAudioBuffer(5, 2, 44100, HEAP32[i5 >> 2] | 0, 0) | 0;
 HEAP32[i2 >> 2] = i3;
 if (!(HEAP32[i2 >> 2] | 0)) _TraceLog(4, 50889, i10 + 8 | 0);
 i3 = HEAP32[i2 >> 2] | 0;
 i11 = (HEAP32[i2 >> 2] | 0) + 8 | 0;
 i8 = _ma_convert_frames(HEAP32[i3 + 46560 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i11 + 8 >> 2] | 0, HEAP32[i3 + 4352 + 42048 >> 2] | 0, HEAP32[i8 + 16 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i8 + 12 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0;
 getTempRet0() | 0;
 HEAP32[i5 >> 2] = i8;
 if (!(HEAP32[i5 >> 2] | 0)) _TraceLog(4, 50941, i10 + 16 | 0);
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2] << 1;
 HEAP32[i7 + 4 >> 2] = 44100;
 HEAP32[i7 + 4 + 4 >> 2] = 32;
 HEAP32[i7 + 4 + 8 >> 2] = 2;
 HEAP32[i7 + 4 + 12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
 STACKTOP = i9;
 return;
}

function _pop_arg(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, d6 = 0.0;
 L1 : do if (i4 >>> 0 <= 20) do switch (i4 | 0) {
 case 9:
  {
   i3 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i1 >> 2] = i3 + 4;
   HEAP32[i2 >> 2] = i4;
   break L1;
  }
 case 10:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   i4 = i2;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i4 + 4 >> 2] = ((i3 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 11:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   i4 = i2;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i4 + 4 >> 2] = 0;
   break L1;
  }
 case 12:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i3 = i4;
   i5 = HEAP32[i3 >> 2] | 0;
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 8;
   i4 = i2;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = i3;
   break L1;
  }
 case 13:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i4 = (i4 & 65535) << 16 >> 16;
   i5 = i2;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 14:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i5 = i2;
   HEAP32[i5 >> 2] = i4 & 65535;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 15:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i4 = (i4 & 255) << 24 >> 24;
   i5 = i2;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 16:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i5 = i2;
   HEAP32[i5 >> 2] = i4 & 255;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 17:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i1 >> 2] = i5 + 8;
   HEAPF64[i2 >> 3] = d6;
   break L1;
  }
 case 18:
  {
   FUNCTION_TABLE_vii[i3 & 63](i2, i1);
   break L1;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _WaveFormat(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i14 = STACKTOP;
 i15 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i15 + 44 | 0;
 i11 = i15 + 40 | 0;
 i12 = i15 + 36 | 0;
 i5 = i15 + 32 | 0;
 i7 = i15 + 28 | 0;
 i8 = i15 + 24 | 0;
 i10 = i15 + 20 | 0;
 i9 = i15 + 16 | 0;
 i6 = i15 + 12 | 0;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i5 >> 2] = i1;
 if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] | 0) == 8) i1 = 1; else i1 = (HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] | 0) == 16 ? 2 : 5;
 HEAP32[i7 >> 2] = i1;
 if ((HEAP32[i12 >> 2] | 0) == 8) i1 = 1; else i1 = (HEAP32[i12 >> 2] | 0) == 16 ? 2 : 5;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i10 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
 i4 = HEAP32[i13 >> 2] | 0;
 i4 = _ma_convert_frames(0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0, HEAP32[i7 >> 2] | 0, HEAP32[i4 + 12 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0) | 0;
 getTempRet0() | 0;
 HEAP32[i9 >> 2] = i4;
 if (!(HEAP32[i9 >> 2] | 0)) {
  _TraceLog(5, 50686, i15);
  STACKTOP = i14;
  return;
 }
 i4 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 i4 = _malloc(Math_imul(i4, (HEAP32[i12 >> 2] | 0) / 8 | 0) | 0) | 0;
 HEAP32[i6 >> 2] = i4;
 i4 = HEAP32[i13 >> 2] | 0;
 i10 = _ma_convert_frames(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i4 + 16 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i4 + 12 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0) | 0;
 getTempRet0() | 0;
 HEAP32[i9 >> 2] = i10;
 if (!(HEAP32[i9 >> 2] | 0)) {
  _TraceLog(5, 50750, i15 + 8 | 0);
  STACKTOP = i14;
  return;
 } else {
  HEAP32[HEAP32[i13 >> 2] >> 2] = HEAP32[i9 >> 2];
  HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] = HEAP32[i12 >> 2];
  HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = HEAP32[i11 >> 2];
  HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] = HEAP32[i5 >> 2];
  _free(HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] | 0);
  HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] = HEAP32[i6 >> 2];
  STACKTOP = i14;
  return;
 }
}

function _drmp3_L3_intensity_stereo(i5, i4, i2, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i13 = i1 + 48 | 0;
 i11 = i1 + 44 | 0;
 i8 = i1 + 40 | 0;
 i9 = i1 + 36 | 0;
 i14 = i1 + 24 | 0;
 i16 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i12 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 i5 = HEAP32[i8 >> 2] | 0;
 HEAP32[i16 >> 2] = (HEAPU8[i5 + 13 >> 0] | 0) + (HEAPU8[i5 + 14 >> 0] | 0);
 HEAP32[i15 >> 2] = HEAPU8[(HEAP32[i8 >> 2] | 0) + 14 >> 0] | 0 ? 3 : 1;
 _drmp3_L3_stereo_top_band((HEAP32[i13 >> 2] | 0) + 2304 | 0, HEAP32[HEAP32[i8 >> 2] >> 2] | 0, HEAP32[i16 >> 2] | 0, i14);
 if (HEAP8[(HEAP32[i8 >> 2] | 0) + 13 >> 0] | 0) {
  if ((((HEAP32[i14 >> 2] | 0) < (HEAP32[i14 + 4 >> 2] | 0) ? HEAP32[i14 + 4 >> 2] | 0 : HEAP32[i14 >> 2] | 0) | 0) < (HEAP32[i14 + 8 >> 2] | 0)) i1 = HEAP32[i14 + 8 >> 2] | 0; else {
   i5 = HEAP32[i14 + 4 >> 2] | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   i1 = (i1 | 0) < (i5 | 0) ? i5 | 0 : i1 | 0;
  }
  HEAP32[i14 + 8 >> 2] = i1;
  HEAP32[i14 + 4 >> 2] = i1;
  HEAP32[i14 >> 2] = i1;
 }
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break;
  HEAP32[i7 >> 2] = HEAPU8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] & 8 | 0 ? 3 : 0;
  HEAP32[i12 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  HEAP32[i6 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
  if ((HEAP32[i14 + (HEAP32[i10 >> 2] << 2) >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) i1 = HEAP32[i7 >> 2] | 0; else i1 = HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] = i1;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 _drmp3_L3_stereo_process(HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[HEAP32[i8 >> 2] >> 2] | 0, HEAP32[i9 >> 2] | 0, i14, HEAPU16[(HEAP32[i8 >> 2] | 0) + 28 + 8 >> 1] & 1);
 STACKTOP = i17;
 return;
}

function _qsort(i6, i2, i11, i9) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0;
 i12 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 i10 = i1;
 i8 = i1 + 192 | 0;
 i4 = Math_imul(i11, i2) | 0;
 i7 = i8;
 HEAP32[i7 >> 2] = 1;
 HEAP32[i7 + 4 >> 2] = 0;
 L1 : do if (i4 | 0) {
  i7 = 0 - i11 | 0;
  HEAP32[i10 + 4 >> 2] = i11;
  HEAP32[i10 >> 2] = i11;
  i1 = i11;
  i2 = i11;
  i3 = 2;
  while (1) {
   i1 = i1 + i11 + i2 | 0;
   HEAP32[i10 + (i3 << 2) >> 2] = i1;
   if (i1 >>> 0 < i4 >>> 0) {
    i5 = i2;
    i2 = i1;
    i3 = i3 + 1 | 0;
    i1 = i5;
   } else break;
  }
  i4 = i6 + i4 + i7 | 0;
  if (i4 >>> 0 > i6 >>> 0) {
   i5 = i4;
   i1 = 1;
   i2 = i6;
   i3 = 1;
   do {
    do if ((i1 & 3 | 0) == 3) {
     _sift(i2, i11, i9, i3, i10);
     _shr(i8, 2);
     i3 = i3 + 2 | 0;
    } else {
     i1 = i3 + -1 | 0;
     if ((HEAP32[i10 + (i1 << 2) >> 2] | 0) >>> 0 < (i5 - i2 | 0) >>> 0) _sift(i2, i11, i9, i3, i10); else _trinkle(i2, i11, i9, i8, i3, 0, i10);
     if ((i3 | 0) == 1) {
      _shl(i8, 1);
      i3 = 0;
      break;
     } else {
      _shl(i8, i1);
      i3 = 1;
      break;
     }
    } while (0);
    i1 = HEAP32[i8 >> 2] | 1;
    HEAP32[i8 >> 2] = i1;
    i2 = i2 + i11 | 0;
   } while (i2 >>> 0 < i4 >>> 0);
  } else {
   i1 = 1;
   i2 = i6;
   i3 = 1;
  }
  _trinkle(i2, i11, i9, i8, i3, 0, i10);
  i4 = i8 + 4 | 0;
  while (1) {
   if ((i3 | 0) == 1 & (i1 | 0) == 1) if (!(HEAP32[i4 >> 2] | 0)) break L1; else i12 = 19; else if ((i3 | 0) < 2) i12 = 19; else {
    _shl(i8, 2);
    i6 = i3 + -2 | 0;
    HEAP32[i8 >> 2] = HEAP32[i8 >> 2] ^ 7;
    _shr(i8, 1);
    _trinkle(i2 + (0 - (HEAP32[i10 + (i6 << 2) >> 2] | 0)) + i7 | 0, i11, i9, i8, i3 + -1 | 0, 1, i10);
    _shl(i8, 1);
    i1 = HEAP32[i8 >> 2] | 1;
    HEAP32[i8 >> 2] = i1;
    i2 = i2 + i7 | 0;
    _trinkle(i2, i11, i9, i8, i6, 1, i10);
    i3 = i6;
   }
   if ((i12 | 0) == 19) {
    i12 = 0;
    i6 = _pntz(i8) | 0;
    _shr(i8, i6);
    i1 = HEAP32[i8 >> 2] | 0;
    i2 = i2 + i7 | 0;
    i3 = i6 + i3 | 0;
   }
  }
 } while (0);
 STACKTOP = i13;
 return;
}

function _ma_rb_pointer_distance(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i7 = i1 + 68 | 0;
 i4 = i1 + 64 | 0;
 i5 = i1 + 60 | 0;
 i9 = i1 + 56 | 0;
 i11 = i1 + 52 | 0;
 i6 = i1 + 48 | 0;
 i3 = i1 + 44 | 0;
 i2 = i1 + 40 | 0;
 i8 = i1 + 36 | 0;
 i10 = i1 + 32 | 0;
 i20 = i1 + 28 | 0;
 i17 = i1 + 24 | 0;
 i13 = i1 + 20 | 0;
 i18 = i1 + 16 | 0;
 i19 = i1 + 12 | 0;
 i14 = i1 + 8 | 0;
 i15 = i1 + 4 | 0;
 i16 = i1;
 HEAP32[i17 >> 2] = i12;
 if (!(HEAP32[i17 >> 2] | 0)) {
  HEAP32[i20 >> 2] = 0;
  i20 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2];
 HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i8 >> 2] = i18;
 HEAP32[i10 >> 2] = i19;
 if (!(HEAP32[i8 >> 2] | 0)) ___assert_fail(36687, 36381, 32734, 36716);
 if (!(HEAP32[i10 >> 2] | 0)) ___assert_fail(36742, 36381, 32735, 36716);
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i3 >> 2] & 2147483647;
 HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
 HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[i6 >> 2] & -2147483648;
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + 20 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i9 >> 2] = i15;
 HEAP32[i11 >> 2] = i16;
 if (!(HEAP32[i9 >> 2] | 0)) ___assert_fail(36687, 36381, 32734, 36716);
 if (!(HEAP32[i11 >> 2] | 0)) ___assert_fail(36742, 36381, 32735, 36716);
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i4 >> 2] & 2147483647;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i7 >> 2] & -2147483648;
 i1 = HEAP32[i15 >> 2] | 0;
 if ((HEAP32[i19 >> 2] | 0) == (HEAP32[i16 >> 2] | 0)) {
  HEAP32[i20 >> 2] = i1 - (HEAP32[i18 >> 2] | 0);
  i20 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 } else {
  HEAP32[i20 >> 2] = i1 + ((HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i18 >> 2] | 0));
  i20 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 return 0;
}

function _DrawTextureEx(i4, i1, f2, f3, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i8 = i7 + 112 | 0;
 i9 = i7 + 104 | 0;
 i10 = i7 + 88 | 0;
 i11 = i7 + 72 | 0;
 i12 = i7 + 48 | 0;
 i15 = i7 + 44 | 0;
 i16 = i7 + 40 | 0;
 i14 = i7 + 24 | 0;
 i13 = i7 + 8 | 0;
 HEAPF32[i15 >> 2] = f2;
 HEAPF32[i16 >> 2] = f3;
 HEAPF32[i14 >> 2] = Math_fround(0.0);
 HEAPF32[i14 + 4 >> 2] = Math_fround(0.0);
 f3 = Math_fround(HEAP32[i4 + 4 >> 2] | 0);
 HEAPF32[i14 + 8 >> 2] = f3;
 f3 = Math_fround(HEAP32[i4 + 8 >> 2] | 0);
 HEAPF32[i14 + 12 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i1 >> 2]);
 HEAPF32[i13 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i1 + 4 >> 2]);
 HEAPF32[i13 + 4 >> 2] = f3;
 f3 = Math_fround(HEAP32[i4 + 4 >> 2] | 0);
 f3 = Math_fround(f3 * Math_fround(HEAPF32[i16 >> 2]));
 HEAPF32[i13 + 8 >> 2] = f3;
 f3 = Math_fround(HEAP32[i4 + 8 >> 2] | 0);
 f3 = Math_fround(f3 * Math_fround(HEAPF32[i16 >> 2]));
 HEAPF32[i13 + 12 >> 2] = f3;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 f3 = Math_fround(HEAPF32[i15 >> 2]);
 HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i12 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP8[i8 >> 0] = HEAP8[i5 >> 0] | 0;
 HEAP8[i8 + 1 >> 0] = HEAP8[i5 + 1 >> 0] | 0;
 HEAP8[i8 + 2 >> 0] = HEAP8[i5 + 2 >> 0] | 0;
 HEAP8[i8 + 3 >> 0] = HEAP8[i5 + 3 >> 0] | 0;
 _DrawTexturePro(i12, i11, i10, i9, f3, i8);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_f32__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i12 + 36 | 0;
 i13 = i12 + 32 | 0;
 i3 = i12 + 8 | 0;
 i6 = i12 + 24 | 0;
 i9 = i12 + 20 | 0;
 i7 = i12;
 i10 = i12 + 16 | 0;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i12 + 28 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
 i12 = i7;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 while (1) {
  i13 = i7;
  i8 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i3;
  i12 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i12 >>> 0 | ((i8 | 0) == (i12 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  i13 = HEAP32[i9 >> 2] | 0;
  i12 = i7;
  i12 = ___muldi3(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 3, 0) | 0;
  i12 = _i64Add(i12 | 0, getTempRet0() | 0, 0, 0) | 0;
  getTempRet0() | 0;
  i12 = (HEAPU8[i13 + i12 >> 0] | 0) << 8;
  i13 = HEAP32[i9 >> 2] | 0;
  i14 = i7;
  i14 = ___muldi3(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 3, 0) | 0;
  i14 = _i64Add(i14 | 0, getTempRet0() | 0, 1, 0) | 0;
  getTempRet0() | 0;
  i14 = i12 | (HEAPU8[i13 + i14 >> 0] | 0) << 16;
  i13 = HEAP32[i9 >> 2] | 0;
  i12 = i7;
  i12 = ___muldi3(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 3, 0) | 0;
  i12 = _i64Add(i12 | 0, getTempRet0() | 0, 2, 0) | 0;
  getTempRet0() | 0;
  f15 = Math_fround((i14 | (HEAPU8[i13 + i12 >> 0] | 0) << 24) >> 8 | 0);
  HEAPF32[i10 >> 2] = f15;
  f15 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) * Math_fround(1.1920929e-07));
  HEAPF32[i10 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i10 >> 2]);
  HEAPF32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] = f15;
  i12 = i7;
  i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i7;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i11;
 return;
}

function _drmp3__on_seek_64(i6, i2, i3, i4) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i7 = i1;
 i5 = i1 + 8 | 0;
 HEAP32[i8 >> 2] = i6;
 i6 = i7;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i6 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 i6 = i7;
 i4 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (i4 >>> 0 < 0 | (i4 | 0) == 0 & (HEAP32[i6 >> 2] | 0) >>> 0 <= 2147483647) {
  i8 = _drmp3__on_seek(i1, HEAP32[i7 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = i8;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 if (!(_drmp3__on_seek(i1, 2147483647, 0) | 0)) {
  HEAP32[i9 >> 2] = 0;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i4 = i7;
 i4 = _i64Subtract(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, 2147483647, 0) | 0;
 i5 = getTempRet0() | 0;
 i6 = i7;
 HEAP32[i6 >> 2] = i4;
 HEAP32[i6 + 4 >> 2] = i5;
 while (1) {
  i6 = i7;
  i5 = HEAP32[i6 + 4 >> 2] | 0;
  if (!(i5 >>> 0 > 0 | (i5 | 0) == 0 & (HEAP32[i6 >> 2] | 0) >>> 0 > 0)) {
   i1 = 15;
   break;
  }
  i6 = i7;
  i5 = HEAP32[i6 + 4 >> 2] | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if (i5 >>> 0 < 0 | (i5 | 0) == 0 & (HEAP32[i6 >> 2] | 0) >>> 0 <= 2147483647) {
   if (!(_drmp3__on_seek(i1, HEAP32[i7 >> 2] | 0, 1) | 0)) {
    i1 = 9;
    break;
   }
   i6 = i7;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
  } else {
   if (!(_drmp3__on_seek(i1, 2147483647, 1) | 0)) {
    i1 = 12;
    break;
   }
   i4 = i7;
   i4 = _i64Subtract(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, 2147483647, 0) | 0;
   i5 = getTempRet0() | 0;
   i6 = i7;
   HEAP32[i6 >> 2] = i4;
   HEAP32[i6 + 4 >> 2] = i5;
  }
 }
 if ((i1 | 0) == 9) {
  HEAP32[i9 >> 2] = 0;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 } else if ((i1 | 0) == 12) {
  HEAP32[i9 >> 2] = 0;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 } else if ((i1 | 0) == 15) {
  HEAP32[i9 >> 2] = 1;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 return 0;
}

function _rlEnableTexture(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i4;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 12 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 do if ((HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 4 >> 2] | 0) > 0) {
  i1 = (HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) | 0;
  do if ((HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) >> 2] | 0) == 1) {
   i2 = HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 4 >> 2] | 0;
   HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) < 4 ? i2 : (i2 | 0) % 4 | 0;
  } else {
   i2 = (HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) | 0;
   if ((HEAP32[i1 >> 2] | 0) != 4) {
    HEAP32[i2 + 8 >> 2] = 0;
    break;
   }
   if ((HEAP32[i2 + 4 >> 2] | 0) < 4) i1 = 1; else i1 = 4 - ((HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 4 >> 2] | 0) % 4 | 0) | 0;
   HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] = i1;
  } while (0);
  if (_rlCheckBufferLimit(HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] | 0) | 0) {
   _rlglDraw();
   break;
  } else {
   i2 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] | 0);
   i2 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] | 0);
   i2 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) + 4 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 8 >> 2] | 0);
   HEAP32[43929] = (HEAP32[43929] | 0) + 1;
   break;
  }
 } while (0);
 if ((HEAP32[43929] | 0) >= 256) _rlglDraw();
 HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 12 >> 2] = HEAP32[i3 >> 2];
 HEAP32[(HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 4 >> 2] = 0;
 STACKTOP = i4;
 return;
}

function _stbtt_Rasterize(i6, f2, i18, i5, f8, f10, f12, f14, i21, i23, i3, i16) {
 i6 = i6 | 0;
 f2 = Math_fround(f2);
 i18 = i18 | 0;
 i5 = i5 | 0;
 f8 = Math_fround(f8);
 f10 = Math_fround(f10);
 f12 = Math_fround(f12);
 f14 = Math_fround(f14);
 i21 = i21 | 0;
 i23 = i23 | 0;
 i3 = i3 | 0;
 i16 = i16 | 0;
 var i1 = 0, i4 = 0, i7 = 0, i9 = 0, i11 = 0, i13 = 0, i15 = 0, i17 = 0, i19 = 0, i20 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i25 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i7 = i1 + 60 | 0;
 i29 = i1 + 56 | 0;
 i27 = i1 + 52 | 0;
 i26 = i1 + 48 | 0;
 i9 = i1 + 44 | 0;
 i11 = i1 + 40 | 0;
 i13 = i1 + 36 | 0;
 i15 = i1 + 32 | 0;
 i22 = i1 + 28 | 0;
 i24 = i1 + 24 | 0;
 i4 = i1 + 20 | 0;
 i17 = i1 + 16 | 0;
 i28 = i1 + 12 | 0;
 i19 = i1 + 8 | 0;
 i20 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAPF32[i29 >> 2] = f2;
 HEAP32[i27 >> 2] = i18;
 HEAP32[i26 >> 2] = i5;
 HEAPF32[i9 >> 2] = f8;
 HEAPF32[i11 >> 2] = f10;
 HEAPF32[i13 >> 2] = f12;
 HEAPF32[i15 >> 2] = f14;
 HEAP32[i22 >> 2] = i21;
 HEAP32[i24 >> 2] = i23;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i17 >> 2] = i16;
 f12 = Math_fround(HEAPF32[i9 >> 2]);
 i23 = f12 > Math_fround(HEAPF32[i11 >> 2]);
 f12 = Math_fround(HEAPF32[i11 >> 2]);
 f14 = Math_fround(HEAPF32[i9 >> 2]);
 HEAPF32[i28 >> 2] = i23 ? f12 : f14;
 HEAP32[i19 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 f14 = Math_fround(HEAPF32[i29 >> 2]);
 f14 = Math_fround(f14 / Math_fround(HEAPF32[i28 >> 2]));
 i23 = _stbtt_FlattenCurves(HEAP32[i27 >> 2] | 0, HEAP32[i26 >> 2] | 0, f14, i20, i19, HEAP32[i17 >> 2] | 0) | 0;
 HEAP32[i1 >> 2] = i23;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i25;
  return;
 }
 f8 = Math_fround(HEAPF32[i9 >> 2]);
 f10 = Math_fround(HEAPF32[i11 >> 2]);
 f12 = Math_fround(HEAPF32[i13 >> 2]);
 f14 = Math_fround(HEAPF32[i15 >> 2]);
 _stbtt__rasterize(HEAP32[i7 >> 2] | 0, HEAP32[i1 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i19 >> 2] | 0, f8, f10, f12, f14, HEAP32[i22 >> 2] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i17 >> 2] | 0);
 _free(HEAP32[i20 >> 2] | 0);
 _free(HEAP32[i1 >> 2] | 0);
 STACKTOP = i25;
 return;
}

function _stbtt__sort_edges_ins_sort(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, f12 = f0, i13 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i9 = i1 + 44 | 0;
 i7 = i1 + 40 | 0;
 i4 = i1 + 36 | 0;
 i5 = i1 + 32 | 0;
 i10 = i1 + 12 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i4 >> 2] = 1;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  i8 = (HEAP32[i9 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) * 20 | 0) | 0;
  HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i10 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i10 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
  HEAP32[i2 >> 2] = i10;
  HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) <= 0) break;
   HEAP32[i3 >> 2] = (HEAP32[i9 >> 2] | 0) + (((HEAP32[i5 >> 2] | 0) - 1 | 0) * 20 | 0);
   f12 = Math_fround(HEAPF32[(HEAP32[i2 >> 2] | 0) + 4 >> 2]);
   i8 = f12 < Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2]) & 1;
   HEAP32[i1 >> 2] = i8;
   if (!(HEAP32[i1 >> 2] | 0)) break;
   i13 = HEAP32[i9 >> 2] | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   i8 = i13 + ((i6 | 0) * 20 | 0) | 0;
   i6 = i13 + ((i6 - 1 | 0) * 20 | 0) | 0;
   HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i8 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   HEAP32[i8 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
  }
  if ((HEAP32[i4 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
   i13 = (HEAP32[i9 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[i13 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i13 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
   HEAP32[i13 + 16 >> 2] = HEAP32[i10 + 16 >> 2];
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i11;
 return;
}

function _rlVertex3f(f1, f2, f3) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i8 = i12 + 56 | 0;
 i11 = i12 + 40 | 0;
 i9 = i12;
 i4 = i12 + 36 | 0;
 i5 = i12 + 32 | 0;
 i6 = i12 + 28 | 0;
 i10 = i12 + 16 | 0;
 i7 = i12 + 4 | 0;
 HEAPF32[i4 >> 2] = f1;
 HEAPF32[i5 >> 2] = f2;
 HEAPF32[i6 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i4 >> 2]);
 HEAPF32[i10 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i5 >> 2]);
 HEAPF32[i10 + 4 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i6 >> 2]);
 HEAPF32[i10 + 8 >> 2] = f3;
 if (HEAP8[177200] & 1) {
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  i4 = i8;
  i5 = 175648;
  i6 = i4 + 64 | 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   i4 = i4 + 4 | 0;
   i5 = i5 + 4 | 0;
  } while ((i4 | 0) < (i6 | 0));
  _Vector3Transform(i7, i11, i8);
  HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 }
 if ((HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] | 0) < 8192) {
  f3 = Math_fround(HEAPF32[i10 >> 2]);
  i11 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
  HEAPF32[(HEAP32[i11 + 12 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) * 3 << 2) >> 2] = f3;
  f3 = Math_fround(HEAPF32[i10 + 4 >> 2]);
  i11 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
  HEAPF32[(HEAP32[i11 + 12 >> 2] | 0) + (((HEAP32[i11 >> 2] | 0) * 3 | 0) + 1 << 2) >> 2] = f3;
  f3 = Math_fround(HEAPF32[i10 + 8 >> 2]);
  i11 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
  HEAPF32[(HEAP32[i11 + 12 >> 2] | 0) + (((HEAP32[i11 >> 2] | 0) * 3 | 0) + 2 << 2) >> 2] = f3;
  i11 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  i11 = (HEAP32[43928] | 0) + ((HEAP32[43929] | 0) - 1 << 4) + 4 | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  STACKTOP = i12;
  return;
 } else {
  _TraceLog(5, 32017, i9);
  STACKTOP = i12;
  return;
 }
}

function _KeyCallback(i16, i3, i8, i1, i5) {
 i16 = i16 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592);
 i14 = i18 + 568 | 0;
 i12 = i18 + 560 | 0;
 i11 = i18 + 552 | 0;
 i10 = i18 + 544 | 0;
 i15 = i18 + 528 | 0;
 i13 = i18 + 520 | 0;
 i9 = i18 + 512 | 0;
 i17 = i18 + 588 | 0;
 i4 = i18 + 584 | 0;
 i2 = i18 + 576 | 0;
 i6 = i18 + 572 | 0;
 i7 = i18;
 HEAP32[i17 >> 2] = i16;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i18 + 580 >> 2] = i8;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i6 >> 2] = i5;
 if ((HEAP32[i4 >> 2] | 0) == 256 & (HEAP32[i2 >> 2] | 0) == 1) {
  _glfwSetWindowShouldClose(HEAP32[i17 >> 2] | 0, 1);
  STACKTOP = i18;
  return;
 }
 if (!((HEAP32[i4 >> 2] | 0) == 301 & (HEAP32[i2 >> 2] | 0) == 1)) {
  HEAP8[165440 + (HEAP32[i4 >> 2] | 0) >> 0] = HEAP32[i2 >> 2];
  STACKTOP = i18;
  return;
 }
 if ((HEAP32[i6 >> 2] | 0) != 2) {
  HEAP32[i14 >> 2] = HEAP32[44070];
  _TakeScreenshot(_TextFormat(36032, i14) | 0);
  HEAP32[44070] = (HEAP32[44070] | 0) + 1;
  STACKTOP = i18;
  return;
 }
 if (HEAP8[177221] & 1) {
  _GifEnd() | 0;
  HEAP8[177221] = 0;
  HEAP32[i9 >> 2] = (HEAP32[44070] | 0) - 1;
  i16 = _TextFormat(35899, i9) | 0;
  HEAP32[i13 >> 2] = (HEAP32[44070] | 0) - 1;
  i17 = _TextFormat(35899, i13) | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i15 + 4 >> 2] = i17;
  _emscripten_run_script(_TextFormat(35917, i15) | 0);
  _TraceLog(3, 35952, i18 + 536 | 0);
  STACKTOP = i18;
  return;
 } else {
  HEAP8[177221] = 1;
  HEAP32[44071] = 0;
  _memset(i7 | 0, 0, 512) | 0;
  HEAP32[i10 >> 2] = HEAP32[44070];
  _strcpy(i7, _TextFormat(35979, i10) | 0) | 0;
  i16 = HEAP32[44040] | 0;
  i17 = HEAP32[44041] | 0;
  _GifBegin(i7, i16, i17, ~~Math_fround(Math_fround(_GetFrameTime()) * Math_fround(10.0)), 8, 0) | 0;
  HEAP32[44070] = (HEAP32[44070] | 0) + 1;
  HEAP32[i11 >> 2] = HEAP32[44070];
  i17 = _TextFormat(35899, i11) | 0;
  HEAP32[i12 >> 2] = i17;
  _TraceLog(3, 35999, i12);
  STACKTOP = i18;
  return;
 }
}

function _ImageResize(i4, i8, i6) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i2 = i1 + 44 | 0;
 i5 = i1 + 40 | 0;
 i9 = i1 + 36 | 0;
 i7 = i1 + 32 | 0;
 i11 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i3 = i1 + 20 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i7 >> 2] = i6;
 if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
  STACKTOP = i12;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i12;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = i12;
  return;
 }
 i8 = HEAP32[i5 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
 i8 = _GetImageData(i2) | 0;
 HEAP32[i11 >> 2] = i8;
 i8 = _malloc((Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) << 2) | 0;
 HEAP32[i10 >> 2] = i8;
 i8 = HEAP32[i5 >> 2] | 0;
 _stbir_resize_uint8(HEAP32[i11 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAP32[i8 + 8 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0, 4) | 0;
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2];
 i8 = HEAP32[i5 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
 _UnloadImage(i2);
 i8 = HEAP32[i5 >> 2] | 0;
 _LoadImageEx(i1, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i8 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 _ImageFormat(HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0);
 _free(HEAP32[i10 >> 2] | 0);
 _free(HEAP32[i11 >> 2] | 0);
 STACKTOP = i12;
 return;
}

function _stbi__parse_zlib(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 if (HEAP32[i10 >> 2] | 0) if (_stbi__parse_zlib_header(HEAP32[i6 >> 2] | 0) | 0) i5 = 4; else HEAP32[i8 >> 2] = 0; else i5 = 4;
 do if ((i5 | 0) == 4) {
  HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] = 0;
  while (1) {
   i10 = _stbi__zreceive(HEAP32[i6 >> 2] | 0, 1) | 0;
   HEAP32[i7 >> 2] = i10;
   i10 = _stbi__zreceive(HEAP32[i6 >> 2] | 0, 2) | 0;
   HEAP32[i4 >> 2] = i10;
   if (!(HEAP32[i4 >> 2] | 0)) {
    if (!(_stbi__parse_uncompressed_block(HEAP32[i6 >> 2] | 0) | 0)) {
     i5 = 7;
     break;
    }
   } else {
    if ((HEAP32[i4 >> 2] | 0) == 3) {
     i5 = 9;
     break;
    }
    i1 = HEAP32[i6 >> 2] | 0;
    if ((HEAP32[i4 >> 2] | 0) == 1) {
     if (!(_stbi__zbuild_huffman(i1 + 32 | 0, 26176, 288) | 0)) {
      i5 = 12;
      break;
     }
     if (!(_stbi__zbuild_huffman((HEAP32[i6 >> 2] | 0) + 2052 | 0, 26464, 32) | 0)) {
      i5 = 14;
      break;
     }
    } else if (!(_stbi__compute_huffman_codes(i1) | 0)) {
     i5 = 16;
     break;
    }
    if (!(_stbi__parse_huffman_block(HEAP32[i6 >> 2] | 0) | 0)) {
     i5 = 18;
     break;
    }
   }
   if (!((HEAP32[i7 >> 2] | 0) != 0 ^ 1)) {
    i5 = 20;
    break;
   }
  }
  if ((i5 | 0) == 7) {
   HEAP32[i8 >> 2] = 0;
   break;
  } else if ((i5 | 0) == 9) {
   HEAP32[i8 >> 2] = 0;
   break;
  } else if ((i5 | 0) == 12) {
   HEAP32[i8 >> 2] = 0;
   break;
  } else if ((i5 | 0) == 14) {
   HEAP32[i8 >> 2] = 0;
   break;
  } else if ((i5 | 0) == 16) {
   HEAP32[i8 >> 2] = 0;
   break;
  } else if ((i5 | 0) == 18) {
   HEAP32[i8 >> 2] = 0;
   break;
  } else if ((i5 | 0) == 20) {
   HEAP32[i8 >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = i9;
 return HEAP32[i8 >> 2] | 0;
}

function _ma_pcm_s32_to_s24__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i12 + 36 | 0;
 i13 = i12 + 32 | 0;
 i3 = i12 + 8 | 0;
 i6 = i12 + 24 | 0;
 i9 = i12 + 20 | 0;
 i7 = i12;
 i10 = i12 + 16 | 0;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i12 + 28 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
 i12 = i7;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 while (1) {
  i13 = i7;
  i8 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i3;
  i12 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i12 >>> 0 | ((i8 | 0) == (i12 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2];
  i14 = (HEAP32[i10 >> 2] & 65280) >>> 8 & 255;
  i13 = HEAP32[i6 >> 2] | 0;
  i12 = i7;
  i12 = ___muldi3(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 3, 0) | 0;
  i12 = _i64Add(i12 | 0, getTempRet0() | 0, 0, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i13 + i12 >> 0] = i14;
  i12 = (HEAP32[i10 >> 2] & 16711680) >>> 16 & 255;
  i13 = HEAP32[i6 >> 2] | 0;
  i14 = i7;
  i14 = ___muldi3(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 3, 0) | 0;
  i14 = _i64Add(i14 | 0, getTempRet0() | 0, 1, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i13 + i14 >> 0] = i12;
  i14 = (HEAP32[i10 >> 2] & -16777216) >>> 24 & 255;
  i13 = HEAP32[i6 >> 2] | 0;
  i12 = i7;
  i12 = ___muldi3(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 3, 0) | 0;
  i12 = _i64Add(i12 | 0, getTempRet0() | 0, 2, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i13 + i12 >> 0] = i14;
  i12 = i7;
  i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i7;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i11;
 return;
}

function _jar_xm_tone_portamento(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, f6 = f0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 if (Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 88 >> 2]) == Math_fround(0.0)) {
  STACKTOP = i5;
  return;
 }
 f6 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 24 >> 2]);
 if (!(f6 != Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 88 >> 2]))) {
  STACKTOP = i5;
  return;
 }
 f6 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 24 >> 2]);
 if (f6 > Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 88 >> 2])) {
  f6 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 + 52 >> 2] | 0) == 0 ? Math_fround(4.0) : Math_fround(1.0);
  f6 = Math_fround(f6 * Math_fround(HEAPU8[(HEAP32[i1 >> 2] | 0) + 84 >> 0] | 0 | 0));
  i3 = (HEAP32[i1 >> 2] | 0) + 24 | 0;
  f6 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) - f6);
  HEAPF32[i3 >> 2] = f6;
  f6 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 24 >> 2]);
  if (f6 < Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 88 >> 2])) {
   f6 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 88 >> 2]);
   HEAPF32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] = f6;
  }
 } else {
  f6 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 24 >> 2]);
  if (f6 < Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 88 >> 2])) {
   f6 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 + 52 >> 2] | 0) == 0 ? Math_fround(4.0) : Math_fround(1.0);
   f6 = Math_fround(f6 * Math_fround(HEAPU8[(HEAP32[i1 >> 2] | 0) + 84 >> 0] | 0 | 0));
   i3 = (HEAP32[i1 >> 2] | 0) + 24 | 0;
   f6 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + f6);
   HEAPF32[i3 >> 2] = f6;
   f6 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 24 >> 2]);
   if (f6 > Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 88 >> 2])) {
    f6 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 88 >> 2]);
    HEAPF32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] = f6;
   }
  }
 }
 _jar_xm_update_frequency(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _stbtt__csctx_v(i2, i8, i9, i10, i3, i5, i4, i6) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 24 | 0;
 i15 = i1 + 28 | 0;
 i16 = i1 + 20 | 0;
 i17 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i14 = i1 + 8 | 0;
 i13 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP8[i15 >> 0] = i8;
 HEAP32[i16 >> 2] = i9;
 HEAP32[i17 >> 2] = i10;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i7 >> 2] = i6;
 i1 = HEAP32[i11 >> 2] | 0;
 if (!(HEAP32[HEAP32[i11 >> 2] >> 2] | 0)) {
  _stbtt_setvertex((HEAP32[i1 + 40 >> 2] | 0) + ((HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] | 0) * 14 | 0) | 0, HEAP8[i15 >> 0] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0);
  i17 = HEAP32[i11 >> 2] | 0;
  HEAP16[(HEAP32[i17 + 40 >> 2] | 0) + ((HEAP32[i17 + 44 >> 2] | 0) * 14 | 0) + 8 >> 1] = HEAP32[i13 >> 2];
  i17 = HEAP32[i11 >> 2] | 0;
  HEAP16[(HEAP32[i17 + 40 >> 2] | 0) + ((HEAP32[i17 + 44 >> 2] | 0) * 14 | 0) + 10 >> 1] = HEAP32[i7 >> 2];
  i17 = HEAP32[i11 >> 2] | 0;
  i17 = i17 + 44 | 0;
  i16 = HEAP32[i17 >> 2] | 0;
  i16 = i16 + 1 | 0;
  HEAP32[i17 >> 2] = i16;
  STACKTOP = i18;
  return;
 }
 _stbtt__track_vertex(i1, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0);
 if ((HEAPU8[i15 >> 0] | 0) != 4) {
  i17 = HEAP32[i11 >> 2] | 0;
  i17 = i17 + 44 | 0;
  i16 = HEAP32[i17 >> 2] | 0;
  i16 = i16 + 1 | 0;
  HEAP32[i17 >> 2] = i16;
  STACKTOP = i18;
  return;
 }
 _stbtt__track_vertex(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0);
 _stbtt__track_vertex(HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 i17 = HEAP32[i11 >> 2] | 0;
 i17 = i17 + 44 | 0;
 i16 = HEAP32[i17 >> 2] | 0;
 i16 = i16 + 1 | 0;
 HEAP32[i17 >> 2] = i16;
 STACKTOP = i18;
 return;
}

function _ma_context_get_device_info__webaudio(i2, i1, i3, i5, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i7 + 20 | 0;
 i12 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i6 = i7 + 4 | 0;
 i9 = i7;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i7 + 8 >> 2] = i3;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i9 >> 2] = i4;
 if (!(HEAP32[i12 >> 2] | 0)) ___assert_fail(37253, 36381, 24951, 37698);
 if ((HEAP32[i6 >> 2] | 0) == 1) {
  HEAP32[i10 >> 2] = -102;
  i12 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 if ((HEAP32[i8 >> 2] | 0) == 2) if (!(_ma_is_capture_supported__webaudio() | 0)) {
  HEAP32[i10 >> 2] = -104;
  i12 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 i1 = HEAP32[i9 >> 2] | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 i1 = (HEAP32[i9 >> 2] | 0) + 32 | 0;
 if ((HEAP32[i8 >> 2] | 0) == 1) _ma_strncpy_s(i1, 256, 37651, -1) | 0; else _ma_strncpy_s(i1, 256, 37675, -1) | 0;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 316 >> 2] = 1;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 320 >> 2] = 32;
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 320 >> 2] | 0) >>> 0 > 32) HEAP32[(HEAP32[i9 >> 2] | 0) + 320 >> 2] = 32;
 i12 = _emscripten_asm_const_ii(1, 0) | 0;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 324 >> 2] = i12;
 i12 = HEAP32[i9 >> 2] | 0;
 HEAP32[i12 + 328 >> 2] = HEAP32[i12 + 324 >> 2];
 if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 324 >> 2] | 0)) {
  HEAP32[i10 >> 2] = -104;
  i12 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i12 | 0;
 } else {
  HEAP32[(HEAP32[i9 >> 2] | 0) + 288 >> 2] = 1;
  HEAP32[(HEAP32[i9 >> 2] | 0) + 292 >> 2] = 5;
  HEAP32[i10 >> 2] = 0;
  i12 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 return 0;
}

function _ma_pcm_rb_init_ex(i3, i2, i7, i6, i8, i4, i5) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 44 | 0;
 i12 = i1 + 40 | 0;
 i17 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i11 = i1 + 28 | 0;
 i19 = i1 + 24 | 0;
 i18 = i1 + 20 | 0;
 i20 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i16 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 i9 = i1;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i19 >> 2] = i7;
 HEAP32[i18 >> 2] = i6;
 HEAP32[i20 >> 2] = i8;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i16 >> 2] = i5;
 if (!(HEAP32[i16 >> 2] | 0)) {
  HEAP32[i17 >> 2] = -2;
  i20 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i1 = HEAP32[i16 >> 2] | 0;
 i2 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i8 = HEAP32[i11 >> 2] | 0;
 HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i12 >> 2] = i8;
 i14 = _ma_get_bytes_per_sample(HEAP32[i14 >> 2] | 0) | 0;
 i14 = Math_imul(i14, HEAP32[i12 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = i14;
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i17 >> 2] = -2;
  i20 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i19 = Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 i20 = Math_imul(HEAP32[i20 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 i20 = _ma_rb_init_ex(i19, HEAP32[i18 >> 2] | 0, i20, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i20;
 if (HEAP32[i9 >> 2] | 0) {
  HEAP32[i17 >> 2] = HEAP32[i9 >> 2];
  i20 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 } else {
  HEAP32[(HEAP32[i16 >> 2] | 0) + 28 >> 2] = HEAP32[i13 >> 2];
  HEAP32[(HEAP32[i16 >> 2] | 0) + 32 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i17 >> 2] = 0;
  i20 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 return 0;
}

function _ma_src_read_deinterleaved(i5, i2, i3, i9, i7) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 8 | 0;
 i6 = i1 + 28 | 0;
 i4 = i1;
 i10 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i1 = i1 + 16 | 0;
 HEAP32[i6 >> 2] = i5;
 i5 = i4;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i8 >> 2] = i7;
 i9 = i4;
 L1 : do if ((HEAP32[i6 >> 2] | 0) == 0 | (HEAP32[i9 >> 2] | 0) == 0 & (HEAP32[i9 + 4 >> 2] | 0) == 0 | (HEAP32[i10 >> 2] | 0) == 0) {
  i10 = i11;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
 } else {
  HEAP32[i1 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 42048 + 12 >> 2];
  switch (HEAP32[i1 >> 2] | 0) {
  case 2:
   {
    i9 = i4;
    i8 = _ma_src_read_deinterleaved__passthrough(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
    i9 = getTempRet0() | 0;
    i10 = i11;
    HEAP32[i10 >> 2] = i8;
    HEAP32[i10 + 4 >> 2] = i9;
    break L1;
   }
  case 0:
   {
    i9 = i4;
    i8 = _ma_src_read_deinterleaved__linear(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
    i9 = getTempRet0() | 0;
    i10 = i11;
    HEAP32[i10 >> 2] = i8;
    HEAP32[i10 + 4 >> 2] = i9;
    break L1;
   }
  case 1:
   {
    i9 = i4;
    i8 = _ma_src_read_deinterleaved__sinc(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
    i9 = getTempRet0() | 0;
    i10 = i11;
    HEAP32[i10 >> 2] = i8;
    HEAP32[i10 + 4 >> 2] = i9;
    break L1;
   }
  default:
   {
    i10 = i11;
    HEAP32[i10 >> 2] = 0;
    HEAP32[i10 + 4 >> 2] = 0;
    break L1;
   }
  }
 } while (0);
 i10 = i11;
 i11 = HEAP32[i10 >> 2] | 0;
 setTempRet0(HEAP32[i10 + 4 >> 2] | 0);
 STACKTOP = i12;
 return i11 | 0;
}

function _ma_device__pcm_converter__on_read_from_buffer_capture(i7, i9, i5, i11) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i4 = i1 + 36 | 0;
 i3 = i1 + 32 | 0;
 i14 = i1 + 28 | 0;
 i8 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i16 = i1 + 12 | 0;
 i13 = i1 + 8 | 0;
 i12 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i16 >> 2] = i11;
 HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
 if (!(HEAP32[i13 >> 2] | 0)) ___assert_fail(36359, 36381, 5785, 37144);
 if (!(HEAP32[(HEAP32[i13 >> 2] | 0) + 47360 + 46912 >> 2] | 0)) {
  HEAP32[i14 >> 2] = 0;
  i16 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i16 | 0;
 }
 HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
 if ((HEAP32[i12 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[i13 >> 2] | 0) + 47360 + 46912 >> 2] | 0) >>> 0) HEAP32[i12 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 47360 + 46912 >> 2];
 i16 = HEAP32[i12 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i8 >> 2] | 0) + 120 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2];
 HEAP32[i3 >> 2] = i1;
 i1 = _ma_get_bytes_per_sample(HEAP32[i4 >> 2] | 0) | 0;
 i1 = Math_imul(i16, Math_imul(i1, HEAP32[i3 >> 2] | 0) | 0) | 0;
 HEAP32[i2 >> 2] = i1;
 i1 = HEAP32[i10 >> 2] | 0;
 if (HEAP32[(HEAP32[i13 >> 2] | 0) + 47360 + 46916 >> 2] | 0) {
  _memcpy(i1 | 0, HEAP32[(HEAP32[i13 >> 2] | 0) + 47360 + 46916 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
  i16 = (HEAP32[i13 >> 2] | 0) + 47360 + 46916 | 0;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i2 >> 2] | 0);
 } else _memset(i1 | 0, 0, HEAP32[i2 >> 2] | 0) | 0;
 i16 = (HEAP32[i13 >> 2] | 0) + 47360 + 46912 | 0;
 HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
 HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
 i16 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _ma_pcm_u8_to_s24__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i12 + 32 | 0;
 i13 = i12 + 28 | 0;
 i3 = i12 + 8 | 0;
 i6 = i12 + 20 | 0;
 i9 = i12 + 16 | 0;
 i7 = i12;
 i10 = i12 + 36 | 0;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i12 + 24 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
 i12 = i7;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 while (1) {
  i13 = i7;
  i8 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i3;
  i12 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i12 >>> 0 | ((i8 | 0) == (i12 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP16[i10 >> 1] = HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0;
  HEAP16[i10 >> 1] = (HEAP16[i10 >> 1] | 0) - 128;
  i14 = HEAP32[i6 >> 2] | 0;
  i13 = i7;
  i13 = ___muldi3(HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0, 3, 0) | 0;
  i13 = _i64Add(i13 | 0, getTempRet0() | 0, 0, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i14 + i13 >> 0] = 0;
  i13 = HEAP32[i6 >> 2] | 0;
  i14 = i7;
  i14 = ___muldi3(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, 3, 0) | 0;
  i14 = _i64Add(i14 | 0, getTempRet0() | 0, 1, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i13 + i14 >> 0] = 0;
  i14 = HEAP16[i10 >> 1] & 255;
  i13 = HEAP32[i6 >> 2] | 0;
  i12 = i7;
  i12 = ___muldi3(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 3, 0) | 0;
  i12 = _i64Add(i12 | 0, getTempRet0() | 0, 2, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i13 + i12 >> 0] = i14;
  i12 = i7;
  i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i7;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i11;
 return;
}

function _GifMakePalette(i8, i10, i16, i6, i1, i3, i12) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 i16 = i16 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i9 = i17 + 44 | 0;
 i21 = i17 + 40 | 0;
 i19 = i17 + 36 | 0;
 i18 = i17 + 32 | 0;
 i2 = i17 + 28 | 0;
 i4 = i17 + 48 | 0;
 i13 = i17 + 24 | 0;
 i20 = i17 + 20 | 0;
 i5 = i17 + 16 | 0;
 i11 = i17 + 12 | 0;
 i7 = i17 + 8 | 0;
 i15 = i17 + 4 | 0;
 i14 = i17;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i21 >> 2] = i10;
 HEAP32[i19 >> 2] = i16;
 HEAP32[i18 >> 2] = i6;
 HEAP32[i2 >> 2] = i1;
 HEAP8[i4 >> 0] = i3 & 1;
 HEAP32[i13 >> 2] = i12;
 HEAP32[HEAP32[i13 >> 2] >> 2] = HEAP32[i2 >> 2];
 i16 = (Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0) << 2;
 HEAP32[i20 >> 2] = i16;
 i16 = _malloc(HEAP32[i20 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i16;
 _memcpy(HEAP32[i5 >> 2] | 0, HEAP32[i21 >> 2] | 0, HEAP32[i20 >> 2] | 0) | 0;
 i16 = Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = i16;
 if (HEAP32[i9 >> 2] | 0) {
  i21 = _GifPickChangedPixels(HEAP32[i9 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[i11 >> 2] = i21;
 }
 HEAP32[i7 >> 2] = 1 << HEAP32[i2 >> 2];
 HEAP32[i15 >> 2] = (HEAP32[i7 >> 2] | 0) / 2 | 0;
 HEAP32[i14 >> 2] = (HEAP32[i15 >> 2] | 0) / 2 | 0;
 _GifSplitPalette(HEAP32[i5 >> 2] | 0, HEAP32[i11 >> 2] | 0, 1, HEAP32[i7 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i14 >> 2] | 0, 1, HEAP8[i4 >> 0] & 1, HEAP32[i13 >> 2] | 0);
 _free(HEAP32[i5 >> 2] | 0);
 HEAP8[(HEAP32[i13 >> 2] | 0) + 1027 + (1 << (HEAP32[i2 >> 2] | 0) - 1) >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 772 + (1 << (HEAP32[i2 >> 2] | 0) - 1) >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 516 >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 260 >> 0] = 0;
 HEAP8[(HEAP32[i13 >> 2] | 0) + 4 >> 0] = 0;
 STACKTOP = i17;
 return;
}

function _ma_device__pcm_converter__on_read_from_buffer_playback(i7, i9, i5, i11) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i4 = i1 + 36 | 0;
 i3 = i1 + 32 | 0;
 i14 = i1 + 28 | 0;
 i8 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i16 = i1 + 12 | 0;
 i13 = i1 + 8 | 0;
 i12 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i16 >> 2] = i11;
 HEAP32[i13 >> 2] = HEAP32[i16 >> 2];
 if (!(HEAP32[i13 >> 2] | 0)) ___assert_fail(36359, 36381, 5817, 37198);
 if (!(HEAP32[(HEAP32[i13 >> 2] | 0) + 384 + 46912 >> 2] | 0)) {
  HEAP32[i14 >> 2] = 0;
  i16 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i15;
  return i16 | 0;
 }
 HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
 if ((HEAP32[i12 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[i13 >> 2] | 0) + 384 + 46912 >> 2] | 0) >>> 0) HEAP32[i12 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 384 + 46912 >> 2];
 i16 = HEAP32[i12 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i8 >> 2] | 0) + 120 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2];
 HEAP32[i3 >> 2] = i1;
 i1 = _ma_get_bytes_per_sample(HEAP32[i4 >> 2] | 0) | 0;
 i1 = Math_imul(i16, Math_imul(i1, HEAP32[i3 >> 2] | 0) | 0) | 0;
 HEAP32[i2 >> 2] = i1;
 i1 = HEAP32[i10 >> 2] | 0;
 if (HEAP32[(HEAP32[i13 >> 2] | 0) + 384 + 46916 >> 2] | 0) {
  _memcpy(i1 | 0, HEAP32[(HEAP32[i13 >> 2] | 0) + 384 + 46916 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
  i16 = (HEAP32[i13 >> 2] | 0) + 384 + 46916 | 0;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i2 >> 2] | 0);
 } else _memset(i1 | 0, 0, HEAP32[i2 >> 2] | 0) | 0;
 i16 = (HEAP32[i13 >> 2] | 0) + 384 + 46912 | 0;
 HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
 HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
 i16 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _EndDrawing() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i6 + 20 | 0;
 i4 = i6 + 8 | 0;
 i1 = i6 + 16 | 0;
 i2 = i6 + 12 | 0;
 i5 = i6;
 _rlglDraw();
 if (HEAP8[177221] & 1) {
  HEAP32[44071] = (HEAP32[44071] | 0) + 1;
  if (!((HEAP32[44071] | 0) % 10 | 0)) {
   i7 = _rlReadScreenPixels(HEAP32[44040] | 0, HEAP32[44041] | 0) | 0;
   HEAP32[i4 >> 2] = i7;
   _GifWriteFrame(HEAP32[i4 >> 2] | 0, HEAP32[44040] | 0, HEAP32[44041] | 0, 10, 8, 0) | 0;
   _free(HEAP32[i4 >> 2] | 0);
  }
  if ((((HEAP32[44071] | 0) / 15 | 0 | 0) % 2 | 0 | 0) == 1) {
   i7 = (HEAP32[44041] | 0) - 20 | 0;
   HEAP8[i1 >> 0] = -26;
   HEAP8[i1 + 1 >> 0] = 41;
   HEAP8[i1 + 2 >> 0] = 55;
   HEAP8[i1 + 3 >> 0] = -1;
   HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
   HEAP8[i3 + 1 >> 0] = HEAP8[i1 + 1 >> 0] | 0;
   HEAP8[i3 + 2 >> 0] = HEAP8[i1 + 2 >> 0] | 0;
   HEAP8[i3 + 3 >> 0] = HEAP8[i1 + 3 >> 0] | 0;
   _DrawCircle(30, i7, Math_fround(10.0), i3);
   i7 = (HEAP32[44041] | 0) - 25 | 0;
   HEAP8[i2 >> 0] = -66;
   HEAP8[i2 + 1 >> 0] = 33;
   HEAP8[i2 + 2 >> 0] = 55;
   HEAP8[i2 + 3 >> 0] = -1;
   HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
   HEAP8[i3 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
   HEAP8[i3 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
   HEAP8[i3 + 3 >> 0] = HEAP8[i2 + 3 >> 0] | 0;
   _DrawText(36349, 50, i7, 10, i3);
  }
  _rlglDraw();
 }
 _SwapBuffers();
 _PollInputEvents();
 d8 = +_GetTime();
 HEAPF64[21926] = d8;
 HEAPF64[21928] = +HEAPF64[21926] - +HEAPF64[21924];
 HEAPF64[21924] = +HEAPF64[21926];
 HEAPF64[21925] = +HEAPF64[21927] + +HEAPF64[21928];
 if (!(+HEAPF64[21925] < 0.0)) {
  STACKTOP = i6;
  return;
 }
 _Wait(Math_fround(Math_fround(0.0 - +HEAPF64[21925]) * Math_fround(1.0e3)));
 d8 = +_GetTime();
 HEAPF64[21926] = d8;
 HEAPF64[i5 >> 3] = +HEAPF64[21926] - +HEAPF64[21924];
 HEAPF64[21924] = +HEAPF64[21926];
 HEAPF64[21925] = +HEAPF64[21925] + +HEAPF64[i5 >> 3];
 STACKTOP = i6;
 return;
}

function _stbv_set_file_offset(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 if (HEAP8[(HEAP32[i3 >> 2] | 0) + 48 >> 0] | 0) {
  HEAP32[i5 >> 2] = 0;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 96 >> 2] = 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) {
  if (((HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) | 0) >>> 0 < (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0) >>> 0) if (((HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) | 0) >>> 0 >= (HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) >>> 0) {
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i4 + 32 >> 2] = (HEAP32[i4 + 36 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
   HEAP32[i5 >> 2] = 1;
   i5 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i6;
   return i5 | 0;
  }
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 + 32 >> 2] = HEAP32[i4 + 40 >> 2];
  HEAP32[(HEAP32[i3 >> 2] | 0) + 96 >> 2] = 1;
  HEAP32[i5 >> 2] = 0;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 2147483648 ? 1 : ((HEAP32[i1 >> 2] | 0) + (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) | 0) >>> 0 < (HEAP32[i1 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = 2147483647;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 96 >> 2] = 1;
 } else HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0);
 if (_fseek(HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0, HEAP32[i1 >> 2] | 0, 0) | 0) {
  HEAP32[(HEAP32[i3 >> 2] | 0) + 96 >> 2] = 1;
  i4 = HEAP32[i3 >> 2] | 0;
  _fseek(HEAP32[i4 + 20 >> 2] | 0, HEAP32[i4 + 24 >> 2] | 0, 2) | 0;
  HEAP32[i5 >> 2] = 0;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  HEAP32[i5 >> 2] = 1;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _stbtt__close_shape(i10, i4, i11, i7, i8, i9, i5, i6, i2, i3) {
 i10 = i10 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i20 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i19 = i1 + 32 | 0;
 i22 = i1 + 28 | 0;
 i21 = i1 + 24 | 0;
 i15 = i1 + 20 | 0;
 i17 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i13 = i1 + 8 | 0;
 i18 = i1 + 4 | 0;
 i16 = i1;
 HEAP32[i14 >> 2] = i10;
 HEAP32[i19 >> 2] = i4;
 HEAP32[i22 >> 2] = i11;
 HEAP32[i21 >> 2] = i7;
 HEAP32[i15 >> 2] = i8;
 HEAP32[i17 >> 2] = i9;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i18 >> 2] = i2;
 HEAP32[i16 >> 2] = i3;
 i4 = (HEAP32[i22 >> 2] | 0) != 0;
 if (HEAP32[i21 >> 2] | 0) {
  if (i4) {
   i10 = HEAP32[i14 >> 2] | 0;
   i11 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i11 + 1;
   i21 = HEAP32[i18 >> 2] | 0;
   i22 = HEAP32[i16 >> 2] | 0;
   _stbtt_setvertex(i10 + (i11 * 14 | 0) | 0, 3, i21 + (HEAP32[i12 >> 2] | 0) >> 1, i22 + (HEAP32[i13 >> 2] | 0) >> 1, i21 | 0, i22 | 0);
  }
  i21 = HEAP32[i14 >> 2] | 0;
  i22 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i22 + 1;
  _stbtt_setvertex(i21 + (i22 * 14 | 0) | 0, 3, HEAP32[i15 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0);
  i22 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i20;
  return i22 | 0;
 }
 i2 = HEAP32[i14 >> 2] | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 HEAP32[i19 >> 2] = i3 + 1;
 i3 = i2 + (i3 * 14 | 0) | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 if (i4) {
  _stbtt_setvertex(i3, 3, i2, i1, HEAP32[i18 >> 2] | 0, HEAP32[i16 >> 2] | 0);
  i22 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i20;
  return i22 | 0;
 } else {
  _stbtt_setvertex(i3, 2, i2, i1, 0, 0);
  i22 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i20;
  return i22 | 0;
 }
 return 0;
}

function _LoadShaderProgram(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i4 = i10 + 16 | 0;
 i9 = i10 + 8 | 0;
 i3 = i10;
 i13 = i10 + 44 | 0;
 i12 = i10 + 40 | 0;
 i7 = i10 + 36 | 0;
 i11 = i10 + 32 | 0;
 i6 = i10 + 28 | 0;
 i5 = i10 + 24 | 0;
 i8 = i10 + 20 | 0;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 i1 = _glCreateProgram() | 0;
 HEAP32[i7 >> 2] = i1;
 _glAttachShader(HEAP32[i7 >> 2] | 0, HEAP32[i13 >> 2] | 0);
 _glAttachShader(HEAP32[i7 >> 2] | 0, HEAP32[i12 >> 2] | 0);
 _glBindAttribLocation(HEAP32[i7 >> 2] | 0, 0, 34657);
 _glBindAttribLocation(HEAP32[i7 >> 2] | 0, 1, 34672);
 _glBindAttribLocation(HEAP32[i7 >> 2] | 0, 2, 34771);
 _glBindAttribLocation(HEAP32[i7 >> 2] | 0, 3, 34687);
 _glBindAttribLocation(HEAP32[i7 >> 2] | 0, 4, 34784);
 _glBindAttribLocation(HEAP32[i7 >> 2] | 0, 5, 34798);
 _glLinkProgram(HEAP32[i7 >> 2] | 0);
 _glGetProgramiv(HEAP32[i7 >> 2] | 0, 35714, i11 | 0);
 i1 = HEAP32[i7 >> 2] | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  HEAP32[i3 >> 2] = i1;
  _TraceLog(4, 34814, i3);
  HEAP32[i6 >> 2] = 0;
  _glGetProgramiv(HEAP32[i7 >> 2] | 0, 35716, i6 | 0);
  i2 = HEAP32[i6 >> 2] | 0;
  i1 = _llvm_stacksave() | 0;
  HEAP32[i8 >> 2] = i1;
  i1 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * i2 | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i2 | 0) + 15 & -16 | 0);
  _glGetProgramInfoLog(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0, i5 | 0, i1 | 0);
  HEAP32[i9 >> 2] = i1;
  _TraceLog(3, 34860, i9);
  _glDeleteProgram(HEAP32[i7 >> 2] | 0);
  HEAP32[i7 >> 2] = 0;
  _llvm_stackrestore(HEAP32[i8 >> 2] | 0);
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i10;
  return i13 | 0;
 } else {
  HEAP32[i4 >> 2] = i1;
  _TraceLog(3, 34863, i4);
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i10;
  return i13 | 0;
 }
 return 0;
}

function _stbtt__csctx_rccurve_to(i1, f2, f5, f3, f6, f4, f7) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f5 = Math_fround(f5);
 f3 = Math_fround(f3);
 f6 = Math_fround(f6);
 f4 = Math_fround(f4);
 f7 = Math_fround(f7);
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i8 = STACKTOP;
 i9 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i9 + 40 | 0;
 i19 = i9 + 36 | 0;
 i18 = i9 + 32 | 0;
 i17 = i9 + 28 | 0;
 i16 = i9 + 24 | 0;
 i12 = i9 + 20 | 0;
 i13 = i9 + 16 | 0;
 i11 = i9 + 12 | 0;
 i10 = i9 + 8 | 0;
 i15 = i9 + 4 | 0;
 HEAP32[i14 >> 2] = i1;
 HEAPF32[i19 >> 2] = f2;
 HEAPF32[i18 >> 2] = f5;
 HEAPF32[i17 >> 2] = f3;
 HEAPF32[i16 >> 2] = f6;
 HEAPF32[i12 >> 2] = f4;
 HEAPF32[i13 >> 2] = f7;
 f7 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + 16 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i19 >> 2]));
 HEAPF32[i11 >> 2] = f7;
 f7 = Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + 20 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i18 >> 2]));
 HEAPF32[i10 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i11 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i17 >> 2]));
 HEAPF32[i15 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i10 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i16 >> 2]));
 HEAPF32[i9 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i15 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i12 >> 2]));
 HEAPF32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i9 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i13 >> 2]));
 HEAPF32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = f7;
 i13 = ~~Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + 16 >> 2]);
 i12 = ~~Math_fround(HEAPF32[(HEAP32[i14 >> 2] | 0) + 20 >> 2]);
 i11 = ~~Math_fround(HEAPF32[i11 >> 2]);
 i10 = ~~Math_fround(HEAPF32[i10 >> 2]);
 i1 = ~~Math_fround(HEAPF32[i15 >> 2]);
 _stbtt__csctx_v(HEAP32[i14 >> 2] | 0, 4, i13, i12, i11, i10, i1, ~~Math_fround(HEAPF32[i9 >> 2]));
 STACKTOP = i8;
 return;
}

function _stb_vorbis_get_samples_short_interleaved(i6, i4, i2, i9) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 32 | 0;
 i5 = i1 + 28 | 0;
 i3 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i12 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i14 >> 2] = i9;
 HEAP32[i8 >> 2] = (HEAP32[i14 >> 2] | 0) / (HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
 if ((HEAP32[i11 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) HEAP32[i11 >> 2] = HEAP32[i5 >> 2];
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
   i1 = 12;
   break;
  }
  i14 = HEAP32[i7 >> 2] | 0;
  HEAP32[i1 >> 2] = (HEAP32[i14 + 1508 >> 2] | 0) - (HEAP32[i14 + 1504 >> 2] | 0);
  if (((HEAP32[i12 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) | 0) >= (HEAP32[i8 >> 2] | 0)) HEAP32[i1 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
  if (HEAP32[i1 >> 2] | 0) {
   i14 = HEAP32[i7 >> 2] | 0;
   _stbv_convert_channels_short_interleaved(HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, i14 + 800 | 0, HEAP32[i14 + 1504 >> 2] | 0, HEAP32[i1 >> 2] | 0);
  }
  i14 = Math_imul(HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (i14 << 1);
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
  i14 = (HEAP32[i7 >> 2] | 0) + 1504 | 0;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
  if ((HEAP32[i12 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) {
   i1 = 12;
   break;
  }
  if (!(_stb_vorbis_get_frame_float(HEAP32[i7 >> 2] | 0, 0, i10) | 0)) {
   i1 = 12;
   break;
  }
 }
 if ((i1 | 0) == 12) {
  STACKTOP = i13;
  return HEAP32[i12 >> 2] | 0;
 }
 return 0;
}

function _stbv_codebook_decode_start(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i8 >> 2] = -1;
 i1 = HEAP32[i6 >> 2] | 0;
 if (!(HEAPU8[(HEAP32[i5 >> 2] | 0) + 21 >> 0] | 0)) _stbv_error(i1, 21) | 0; else {
  if ((HEAP32[i1 + 1396 >> 2] | 0) < 10) _stbv_prep_huffman(HEAP32[i6 >> 2] | 0);
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 1392 >> 2] & 1023;
  HEAP32[i8 >> 2] = HEAP16[(HEAP32[i5 >> 2] | 0) + 36 + (HEAP32[i8 >> 2] << 1) >> 1];
  if ((HEAP32[i8 >> 2] | 0) >= 0) {
   HEAP32[i4 >> 2] = HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0];
   i3 = (HEAP32[i6 >> 2] | 0) + 1392 | 0;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) >>> (HEAP32[i4 >> 2] | 0);
   i3 = (HEAP32[i6 >> 2] | 0) + 1396 | 0;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0);
   if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 1396 >> 2] | 0) < 0) {
    HEAP32[(HEAP32[i6 >> 2] | 0) + 1396 >> 2] = 0;
    HEAP32[i8 >> 2] = -1;
   }
  } else {
   i4 = _stbv_codebook_decode_scalar_raw(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = i4;
  }
  do if (HEAP8[(HEAP32[i5 >> 2] | 0) + 23 >> 0] | 0) if ((HEAP32[i8 >> 2] | 0) < (HEAP32[(HEAP32[i5 >> 2] | 0) + 2092 >> 2] | 0)) break; else ___assert_fail(47464, 47181, 1740, 47486); while (0);
  if ((HEAP32[i8 >> 2] | 0) < 0) {
   if (!(HEAP8[(HEAP32[i6 >> 2] | 0) + 1376 >> 0] | 0)) if (HEAP32[(HEAP32[i6 >> 2] | 0) + 1384 >> 2] | 0) {
    HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
    i8 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i9;
    return i8 | 0;
   }
   _stbv_error(HEAP32[i6 >> 2] | 0, 21) | 0;
  }
 }
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _ma_pcm_deinterleave_s24__reference(i6, i10, i2, i3, i4) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 32 | 0;
 i13 = i1 + 28 | 0;
 i8 = i1;
 i5 = i1 + 24 | 0;
 i7 = i1 + 20 | 0;
 i11 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i1 = i1 + 8 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i10;
 i10 = i8;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i9 >> 2] = 0;
 while (1) {
  i14 = i8;
  i13 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(0 < i13 >>> 0 | (0 == (i13 | 0) ? (HEAP32[i9 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   i14 = Math_imul((HEAP32[i9 >> 2] | 0) * 3 | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP8[(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (((HEAP32[i9 >> 2] | 0) * 3 | 0) + 0) >> 0] = HEAP8[(HEAP32[i11 >> 2] | 0) + (i14 + ((HEAP32[i1 >> 2] | 0) * 3 | 0) + 0) >> 0] | 0;
   i14 = Math_imul((HEAP32[i9 >> 2] | 0) * 3 | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP8[(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (((HEAP32[i9 >> 2] | 0) * 3 | 0) + 1) >> 0] = HEAP8[(HEAP32[i11 >> 2] | 0) + (i14 + ((HEAP32[i1 >> 2] | 0) * 3 | 0) + 1) >> 0] | 0;
   i14 = Math_imul((HEAP32[i9 >> 2] | 0) * 3 | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP8[(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (((HEAP32[i9 >> 2] | 0) * 3 | 0) + 2) >> 0] = HEAP8[(HEAP32[i11 >> 2] | 0) + (i14 + ((HEAP32[i1 >> 2] | 0) * 3 | 0) + 2) >> 0] | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 STACKTOP = i12;
 return;
}

function _LoadMP3(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i7 = i4 + 24 | 0;
 i6 = i4 + 16 | 0;
 i3 = i4 + 8 | 0;
 i2 = i4 + 68 | 0;
 i8 = i4 + 48 | 0;
 i10 = i4;
 i4 = i4 + 40 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i1 = i10;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i1 = _drmp3_open_file_and_read_f32(HEAP32[i2 >> 2] | 0, i4, i10) | 0;
 HEAP32[i8 + 16 >> 2] = i1;
 HEAP32[i8 + 12 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 i4 = Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[i8 + 12 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i8 + 8 >> 2] = 32;
 if ((HEAP32[i8 + 12 >> 2] | 0) >>> 0 > 2) {
  i10 = HEAP32[i8 + 12 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + 4 >> 2] = i10;
  _TraceLog(4, 50007, i3);
 }
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(HEAP32[i8 + 16 >> 2] | 0)) {
  HEAP32[i6 >> 2] = i1;
  _TraceLog(4, 50051, i6);
  HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i5 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
  STACKTOP = i9;
  return;
 } else {
  i4 = HEAP32[i8 + 4 >> 2] | 0;
  i6 = HEAP32[i8 + 8 >> 2] | 0;
  i10 = (HEAP32[i8 + 12 >> 2] | 0) == 1 ? 50085 : 50090;
  HEAP32[i7 >> 2] = i1;
  HEAP32[i7 + 4 >> 2] = i4;
  HEAP32[i7 + 8 >> 2] = i6;
  HEAP32[i7 + 12 >> 2] = i10;
  _TraceLog(3, 50097, i7);
  HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i5 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
  STACKTOP = i9;
  return;
 }
}

function _InitAudioStream(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i10 = STACKTOP;
 i11 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i9 = i11;
 i14 = i11 + 56 | 0;
 i13 = i11 + 52 | 0;
 i12 = i11 + 48 | 0;
 i7 = i11 + 32 | 0;
 i5 = i11 + 28 | 0;
 i6 = i11 + 24 | 0;
 i8 = i11 + 20 | 0;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i12 >> 2];
 if ((HEAP32[i7 + 4 >> 2] | 0) == 8) i1 = 1; else i1 = (HEAP32[i7 + 4 >> 2] | 0) == 16 ? 2 : 5;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = ((HEAP32[15783] | 0) >>> 0) / ((HEAP32[15784] | 0) >>> 0) | 0;
 HEAP32[i8 >> 2] = 4096;
 if ((HEAP32[i8 >> 2] | 0) >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 i14 = _InitAudioBuffer(HEAP32[i5 >> 2] | 0, HEAP32[i7 + 8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] << 1, 1) | 0;
 HEAP32[i7 + 12 >> 2] = i14;
 if (HEAP32[i7 + 12 >> 2] | 0) {
  HEAP8[(HEAP32[i7 + 12 >> 2] | 0) + 46538 >> 0] = 1;
  i13 = HEAP32[i7 + 4 >> 2] | 0;
  i14 = (HEAP32[i7 + 8 >> 2] | 0) == 1 ? 50085 : 50090;
  HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i9 + 4 >> 2] = i13;
  HEAP32[i9 + 8 >> 2] = i14;
  _TraceLog(3, 51164, i9);
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  STACKTOP = i10;
  return;
 } else {
  _TraceLog(5, 51217, i11 + 16 | 0);
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  STACKTOP = i10;
  return;
 }
}

function _ma_pcm_s16_to_s24__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = STACKTOP;
 i11 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i11 + 32 | 0;
 i12 = i11 + 28 | 0;
 i3 = i11 + 8 | 0;
 i6 = i11 + 20 | 0;
 i9 = i11 + 16 | 0;
 i7 = i11;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i12 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i11 + 24 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
 i11 = i7;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 while (1) {
  i12 = i7;
  i8 = HEAP32[i12 + 4 >> 2] | 0;
  i13 = i3;
  i11 = HEAP32[i13 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i11 >>> 0 | ((i8 | 0) == (i11 | 0) ? (HEAP32[i12 >> 2] | 0) >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0 : 0))) break;
  i12 = HEAP32[i6 >> 2] | 0;
  i11 = i7;
  i11 = ___muldi3(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, 3, 0) | 0;
  i11 = _i64Add(i11 | 0, getTempRet0() | 0, 0, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i12 + i11 >> 0] = 0;
  i11 = HEAP16[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] << 1) >> 1] & 255;
  i12 = HEAP32[i6 >> 2] | 0;
  i13 = i7;
  i13 = ___muldi3(HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0, 3, 0) | 0;
  i13 = _i64Add(i13 | 0, getTempRet0() | 0, 1, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i12 + i13 >> 0] = i11;
  i13 = HEAP16[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] << 1) >> 1] >> 8 & 255;
  i12 = HEAP32[i6 >> 2] | 0;
  i11 = i7;
  i11 = ___muldi3(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, 3, 0) | 0;
  i11 = _i64Add(i11 | 0, getTempRet0() | 0, 2, 0) | 0;
  getTempRet0() | 0;
  HEAP8[i12 + i11 >> 0] = i13;
  i11 = i7;
  i11 = _i64Add(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, 1, 0) | 0;
  i12 = getTempRet0() | 0;
  i13 = i7;
  HEAP32[i13 >> 2] = i11;
  HEAP32[i13 + 4 >> 2] = i12;
 }
 STACKTOP = i10;
 return;
}

function _GifSwapPixels(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 i5 = i4;
 i10 = i4 + 19 | 0;
 i9 = i4 + 18 | 0;
 i8 = i4 + 17 | 0;
 i7 = i4 + 16 | 0;
 i15 = i4 + 15 | 0;
 i14 = i4 + 14 | 0;
 i13 = i4 + 13 | 0;
 i12 = i4 + 12 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i5 >> 2] = i3;
 HEAP8[i10 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 0] | 0;
 HEAP8[i9 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 1) >> 0] | 0;
 HEAP8[i8 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 2) >> 0] | 0;
 HEAP8[i7 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 3) >> 0] | 0;
 HEAP8[i15 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 0] | 0;
 HEAP8[i14 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 1) >> 0] | 0;
 HEAP8[i13 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 2) >> 0] | 0;
 HEAP8[i12 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 3) >> 0] | 0;
 HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 0] = HEAP8[i15 >> 0] | 0;
 HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 1) >> 0] = HEAP8[i14 >> 0] | 0;
 HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 2) >> 0] = HEAP8[i13 >> 0] | 0;
 HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i11 >> 2] << 2) + 3) >> 0] = HEAP8[i12 >> 0] | 0;
 HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 0] = HEAP8[i10 >> 0] | 0;
 HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 1) >> 0] = HEAP8[i9 >> 0] | 0;
 HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 2) >> 0] = HEAP8[i8 >> 0] | 0;
 HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i5 >> 2] << 2) + 3) >> 0] = HEAP8[i7 >> 0] | 0;
 STACKTOP = i4;
 return;
}

function _rlRotatef(f1, f2, f3, f4) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(368);
 i10 = i14 + 296 | 0;
 i12 = i14 + 232 | 0;
 i9 = i14 + 228 | 0;
 i16 = i14 + 224 | 0;
 i15 = i14 + 220 | 0;
 i5 = i14 + 216 | 0;
 i11 = i14 + 152 | 0;
 i6 = i14 + 140 | 0;
 i7 = i14 + 128 | 0;
 i8 = i14 + 64 | 0;
 i13 = i14;
 HEAPF32[i9 >> 2] = f1;
 HEAPF32[i16 >> 2] = f2;
 HEAPF32[i15 >> 2] = f3;
 HEAPF32[i5 >> 2] = f4;
 _MatrixIdentity(i11);
 f4 = Math_fround(HEAPF32[i16 >> 2]);
 HEAPF32[i6 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i15 >> 2]);
 HEAPF32[i6 + 4 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i5 >> 2]);
 HEAPF32[i6 + 8 >> 2] = f4;
 HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 _Vector3Normalize(i7, i10);
 f4 = Math_fround(Math_fround(HEAPF32[i9 >> 2]) * Math_fround(.0174532924));
 HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 _MatrixRotate(i8, i10, f4);
 i7 = i11;
 i9 = i7 + 64 | 0;
 do {
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  i7 = i7 + 4 | 0;
  i8 = i8 + 4 | 0;
 } while ((i7 | 0) < (i9 | 0));
 i6 = HEAP32[43894] | 0;
 i5 = i6 | 0;
 i6 = i6 | 0;
 i7 = i12;
 i8 = i11;
 i9 = i7 + 64 | 0;
 do {
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  i7 = i7 + 4 | 0;
  i8 = i8 + 4 | 0;
 } while ((i7 | 0) < (i9 | 0));
 i7 = i10;
 i8 = i6;
 i9 = i7 + 64 | 0;
 do {
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  i7 = i7 + 4 | 0;
  i8 = i8 + 4 | 0;
 } while ((i7 | 0) < (i9 | 0));
 _MatrixMultiply(i13, i12, i10);
 i7 = i5;
 i8 = i13;
 i9 = i7 + 64 | 0;
 do {
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  i7 = i7 + 4 | 0;
  i8 = i8 + 4 | 0;
 } while ((i7 | 0) < (i9 | 0));
 STACKTOP = i14;
 return;
}

function _ma_strncpy_s(i3, i4, i6, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i7 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i12 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i13 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i9 >> 2] = i2;
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i12 >> 2] = 22;
  i13 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i12 >> 2] = 34;
  i13 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!(HEAP32[i13 >> 2] | 0)) {
  HEAP8[HEAP32[i10 >> 2] >> 0] = 0;
  HEAP32[i12 >> 2] = 22;
  i13 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
 if ((HEAP32[i9 >> 2] | 0) == -1) i7 = 9; else if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) i7 = 9;
 if ((i7 | 0) == 9) HEAP32[i11 >> 2] = (HEAP32[i5 >> 2] | 0) - 1;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >>> 0 < (HEAP32[i11 >> 2] | 0) >>> 0) i2 = (HEAP8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0) != 0; else i2 = 0;
  i1 = HEAP8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0;
  if (!i2) break;
  HEAP8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = i1;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if (i1 << 24 >> 24 | 0) if (!((HEAP32[i9 >> 2] | 0) == -1 ? 1 : (HEAP32[i8 >> 2] | 0) == (HEAP32[i9 >> 2] | 0))) {
  HEAP8[HEAP32[i10 >> 2] >> 0] = 0;
  HEAP32[i12 >> 2] = 34;
  i13 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 HEAP8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = 0;
 HEAP32[i12 >> 2] = 0;
 i13 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _ma_pcm_rb_acquire_write(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i1 + 44 | 0;
 i11 = i1 + 40 | 0;
 i14 = i1 + 36 | 0;
 i7 = i1 + 32 | 0;
 i6 = i1 + 28 | 0;
 i8 = i1 + 24 | 0;
 i16 = i1 + 20 | 0;
 i13 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 if (!(HEAP32[i13 >> 2] | 0)) {
  HEAP32[i16 >> 2] = -2;
  i16 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i1 = HEAP32[HEAP32[i15 >> 2] >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i13 >> 2];
 if (!(HEAP32[i8 >> 2] | 0)) ___assert_fail(36507, 36381, 33164, 36649);
 i4 = HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2];
 HEAP32[i6 >> 2] = i4;
 i8 = _ma_get_bytes_per_sample(HEAP32[i7 >> 2] | 0) | 0;
 i8 = Math_imul(i1, Math_imul(i8, HEAP32[i6 >> 2] | 0) | 0) | 0;
 HEAP32[i10 >> 2] = i8;
 i9 = _ma_rb_acquire_write(HEAP32[i13 >> 2] | 0, i10, HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i9;
 if (HEAP32[i5 >> 2] | 0) {
  HEAP32[i16 >> 2] = HEAP32[i5 >> 2];
  i16 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
 if (!(HEAP32[i14 >> 2] | 0)) ___assert_fail(36507, 36381, 33164, 36649);
 i13 = HEAP32[(HEAP32[i14 >> 2] | 0) + 32 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2];
 HEAP32[i11 >> 2] = i13;
 i14 = _ma_get_bytes_per_sample(HEAP32[i12 >> 2] | 0) | 0;
 i14 = (i1 >>> 0) / ((Math_imul(i14, HEAP32[i11 >> 2] | 0) | 0) >>> 0) | 0;
 HEAP32[HEAP32[i15 >> 2] >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i16 = HEAP32[i16 >> 2] | 0;
 STACKTOP = i17;
 return i16 | 0;
}

function _LoadShaderDefault(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i8 + 8 | 0;
 i6 = i8;
 i5 = i8 + 24 | 0;
 i3 = i8 + 20 | 0;
 i2 = i8 + 16 | 0;
 i1 = i8 + 12 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 i9 = _calloc(32, 4) | 0;
 HEAP32[i5 + 4 >> 2] = i9;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= 32) break;
  HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2] = -1;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 HEAP32[i2 >> 2] = 33685;
 HEAP32[i1 >> 2] = 34168;
 i9 = _CompileShader(HEAP32[i2 >> 2] | 0, 35633) | 0;
 HEAP32[44016] = i9;
 i1 = _CompileShader(HEAP32[i1 >> 2] | 0, 35632) | 0;
 HEAP32[44017] = i1;
 i1 = _LoadShaderProgram(HEAP32[44016] | 0, HEAP32[44017] | 0) | 0;
 HEAP32[i5 >> 2] = i1;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) >>> 0 > 0) {
  HEAP32[i6 >> 2] = i1;
  _TraceLog(3, 34609, i6);
  i9 = _glGetAttribLocation(HEAP32[i5 >> 2] | 0, 34657) | 0;
  HEAP32[HEAP32[i5 + 4 >> 2] >> 2] = i9;
  i9 = _glGetAttribLocation(HEAP32[i5 >> 2] | 0, 34672) | 0;
  HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + 4 >> 2] = i9;
  i9 = _glGetAttribLocation(HEAP32[i5 >> 2] | 0, 34687) | 0;
  HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + 20 >> 2] = i9;
  i9 = _glGetUniformLocation(HEAP32[i5 >> 2] | 0, 34699) | 0;
  HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + 24 >> 2] = i9;
  i9 = _glGetUniformLocation(HEAP32[i5 >> 2] | 0, 34703) | 0;
  HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + 44 >> 2] = i9;
  i9 = _glGetUniformLocation(HEAP32[i5 >> 2] | 0, 34714) | 0;
  HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + 56 >> 2] = i9;
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  STACKTOP = i8;
  return;
 } else {
  HEAP32[i7 >> 2] = i1;
  _TraceLog(4, 34723, i7);
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  STACKTOP = i8;
  return;
 }
}

function _ma_pcm_rb_acquire_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i11 = i16 + 44 | 0;
 i10 = i16 + 40 | 0;
 i13 = i16 + 36 | 0;
 i5 = i16 + 32 | 0;
 i4 = i16 + 28 | 0;
 i6 = i16 + 24 | 0;
 i15 = i16 + 20 | 0;
 i12 = i16 + 16 | 0;
 i14 = i16 + 12 | 0;
 i7 = i16 + 8 | 0;
 i9 = i16 + 4 | 0;
 i8 = i16;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[i12 >> 2] | 0) == 0 | (HEAP32[i14 >> 2] | 0) == 0) {
  HEAP32[i15 >> 2] = -2;
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = HEAP32[HEAP32[i14 >> 2] >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 if (!(HEAP32[i6 >> 2] | 0)) ___assert_fail(36507, 36381, 33164, 36649);
 i3 = HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2];
 HEAP32[i4 >> 2] = i3;
 i6 = _ma_get_bytes_per_sample(HEAP32[i5 >> 2] | 0) | 0;
 i6 = Math_imul(i1, Math_imul(i6, HEAP32[i4 >> 2] | 0) | 0) | 0;
 HEAP32[i9 >> 2] = i6;
 i7 = _ma_rb_acquire_read(HEAP32[i12 >> 2] | 0, i9, HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i7;
 if (HEAP32[i8 >> 2] | 0) {
  HEAP32[i15 >> 2] = HEAP32[i8 >> 2];
  i15 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = HEAP32[i9 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
 if (!(HEAP32[i13 >> 2] | 0)) ___assert_fail(36507, 36381, 33164, 36649);
 i12 = HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] | 0;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2];
 HEAP32[i10 >> 2] = i12;
 i13 = _ma_get_bytes_per_sample(HEAP32[i11 >> 2] | 0) | 0;
 i13 = (i1 >>> 0) / ((Math_imul(i13, HEAP32[i10 >> 2] | 0) | 0) >>> 0) | 0;
 HEAP32[HEAP32[i14 >> 2] >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i15 = HEAP32[i15 >> 2] | 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _ma_split_buffer(i6, i4, i14, i2, i12, i10) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 40 | 0;
 i5 = i1 + 36 | 0;
 i15 = i1 + 32 | 0;
 i3 = i1 + 28 | 0;
 i13 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i9 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i17 = i1 + 8 | 0;
 i16 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i11 >> 2] = i10;
 if (HEAP32[i11 >> 2] | 0) HEAP32[HEAP32[i11 >> 2] >> 2] = 0;
 if ((HEAP32[i7 >> 2] | 0) == 0 | (HEAP32[i5 >> 2] | 0) == 0 | (HEAP32[i15 >> 2] | 0) == 0) {
  STACKTOP = i18;
  return;
 }
 if (!(HEAP32[i3 >> 2] | 0)) HEAP32[i3 >> 2] = 1;
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 i14 = (HEAP32[i3 >> 2] | 0) - 1 | 0;
 HEAP32[i8 >> 2] = (HEAP32[i9 >> 2] | 0) + i14 & ~i14;
 HEAP32[i17 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
 HEAP32[i16 >> 2] = 0;
 if ((HEAP32[i5 >> 2] | 0) >>> 0 >= (HEAP32[i17 >> 2] | 0) >>> 0) {
  HEAP32[i16 >> 2] = (((HEAP32[i5 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0) >>> 0) / ((HEAP32[i15 >> 2] | 0) >>> 0) | 0;
  HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & ~((HEAP32[i3 >> 2] | 0) - 1);
 }
 L13 : do if (HEAP32[i13 >> 2] | 0) {
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i15 >> 2] | 0) >>> 0) break L13;
   i17 = (HEAP32[i8 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
   HEAP32[(HEAP32[i13 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = i17;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
 } while (0);
 if (!(HEAP32[i11 >> 2] | 0)) {
  STACKTOP = i18;
  return;
 }
 HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i16 >> 2];
 STACKTOP = i18;
 return;
}

function _stbv_residue_decode(i4, i2, i13, i9, i7, i12) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i12 = i12 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i11 = i1 + 32 | 0;
 i5 = i1 + 28 | 0;
 i3 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i16 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i16 >> 2] = i12;
 L1 : do if (!(HEAP32[i16 >> 2] | 0)) {
  HEAP32[i1 >> 2] = (HEAP32[i8 >> 2] | 0) / (HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i1 >> 2] | 0)) break L1;
   if (!(_stbv_codebook_decode_step(HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0, (HEAP32[i14 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) + (HEAP32[i6 >> 2] << 2) | 0, (HEAP32[i8 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i1 >> 2] | 0) | 0)) break;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  HEAP32[i11 >> 2] = 0;
  i16 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i15;
  return i16 | 0;
 } else {
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break L1;
   if (!(_stbv_codebook_decode(HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0, (HEAP32[i14 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) | 0, (HEAP32[i8 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) | 0)) break;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
  }
  HEAP32[i11 >> 2] = 0;
  i16 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i15;
  return i16 | 0;
 } while (0);
 HEAP32[i11 >> 2] = 1;
 i16 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _stbv_codebook_decode_step(i4, i2, i9, i7, i12) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i12 = i12 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i11 = i1 + 36 | 0;
 i16 = i1 + 32 | 0;
 i3 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i13 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i14 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i16 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i13 >> 2] = i12;
 i12 = _stbv_codebook_decode_start(HEAP32[i16 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = i12;
 HEAPF32[i6 >> 2] = Math_fround(0.0);
 if ((HEAP32[i14 >> 2] | 0) < 0) {
  HEAP32[i11 >> 2] = 0;
  i16 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i15;
  return i16 | 0;
 }
 if ((HEAP32[i8 >> 2] | 0) > (HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) HEAP32[i8 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 i16 = Math_imul(HEAP32[i14 >> 2] | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = i16;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
  f17 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) << 2) >> 2]);
  f17 = Math_fround(f17 + Math_fround(HEAPF32[i6 >> 2]));
  HEAPF32[i1 >> 2] = f17;
  f17 = Math_fround(HEAPF32[i1 >> 2]);
  i16 = (HEAP32[i10 >> 2] | 0) + ((Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0) << 2) | 0;
  f17 = Math_fround(Math_fround(HEAPF32[i16 >> 2]) + f17);
  HEAPF32[i16 >> 2] = f17;
  if (HEAP8[(HEAP32[i3 >> 2] | 0) + 22 >> 0] | 0) {
   f17 = Math_fround(HEAPF32[i1 >> 2]);
   HEAPF32[i6 >> 2] = f17;
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 HEAP32[i11 >> 2] = 1;
 i16 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _Vector3Transform(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, f6 = f0, i7 = 0, f8 = f0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 f6 = Math_fround(HEAPF32[i3 >> 2]);
 HEAPF32[i10 >> 2] = f6;
 f6 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 HEAPF32[i9 >> 2] = f6;
 f6 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 HEAPF32[i7 >> 2] = f6;
 f6 = Math_fround(HEAPF32[i2 >> 2]);
 f6 = Math_fround(f6 * Math_fround(HEAPF32[i10 >> 2]));
 f8 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f8 = Math_fround(f6 + Math_fround(f8 * Math_fround(HEAPF32[i9 >> 2])));
 f6 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f6 = Math_fround(f8 + Math_fround(f6 * Math_fround(HEAPF32[i7 >> 2])));
 f6 = Math_fround(f6 + Math_fround(HEAPF32[i2 + 12 >> 2]));
 HEAPF32[i5 >> 2] = f6;
 f6 = Math_fround(HEAPF32[i2 + 16 >> 2]);
 f6 = Math_fround(f6 * Math_fround(HEAPF32[i10 >> 2]));
 f8 = Math_fround(HEAPF32[i2 + 20 >> 2]);
 f8 = Math_fround(f6 + Math_fround(f8 * Math_fround(HEAPF32[i9 >> 2])));
 f6 = Math_fround(HEAPF32[i2 + 24 >> 2]);
 f6 = Math_fround(f8 + Math_fround(f6 * Math_fround(HEAPF32[i7 >> 2])));
 f6 = Math_fround(f6 + Math_fround(HEAPF32[i2 + 28 >> 2]));
 HEAPF32[i5 + 4 >> 2] = f6;
 f6 = Math_fround(HEAPF32[i2 + 32 >> 2]);
 f6 = Math_fround(f6 * Math_fround(HEAPF32[i10 >> 2]));
 f8 = Math_fround(HEAPF32[i2 + 36 >> 2]);
 f8 = Math_fround(f6 + Math_fround(f8 * Math_fround(HEAPF32[i9 >> 2])));
 f6 = Math_fround(HEAPF32[i2 + 40 >> 2]);
 f6 = Math_fround(f8 + Math_fround(f6 * Math_fround(HEAPF32[i7 >> 2])));
 f6 = Math_fround(f6 + Math_fround(HEAPF32[i2 + 44 >> 2]));
 HEAPF32[i5 + 8 >> 2] = f6;
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 STACKTOP = i4;
 return;
}

function _ma_pcm_s24_to_s32__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = STACKTOP;
 i11 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i11 + 32 | 0;
 i12 = i11 + 28 | 0;
 i3 = i11 + 8 | 0;
 i6 = i11 + 20 | 0;
 i9 = i11 + 16 | 0;
 i7 = i11;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i12 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i11 + 24 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
 i11 = i7;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 while (1) {
  i12 = i7;
  i8 = HEAP32[i12 + 4 >> 2] | 0;
  i13 = i3;
  i11 = HEAP32[i13 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i11 >>> 0 | ((i8 | 0) == (i11 | 0) ? (HEAP32[i12 >> 2] | 0) >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0 : 0))) break;
  i12 = HEAP32[i9 >> 2] | 0;
  i11 = i7;
  i11 = ___muldi3(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, 3, 0) | 0;
  i11 = _i64Add(i11 | 0, getTempRet0() | 0, 0, 0) | 0;
  getTempRet0() | 0;
  i11 = (HEAPU8[i12 + i11 >> 0] | 0) << 8;
  i12 = HEAP32[i9 >> 2] | 0;
  i13 = i7;
  i13 = ___muldi3(HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0, 3, 0) | 0;
  i13 = _i64Add(i13 | 0, getTempRet0() | 0, 1, 0) | 0;
  getTempRet0() | 0;
  i13 = i11 | (HEAPU8[i12 + i13 >> 0] | 0) << 16;
  i12 = HEAP32[i9 >> 2] | 0;
  i11 = i7;
  i11 = ___muldi3(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, 3, 0) | 0;
  i11 = _i64Add(i11 | 0, getTempRet0() | 0, 2, 0) | 0;
  getTempRet0() | 0;
  HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] = i13 | (HEAPU8[i12 + i11 >> 0] | 0) << 24;
  i11 = i7;
  i11 = _i64Add(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, 1, 0) | 0;
  i12 = getTempRet0() | 0;
  i13 = i7;
  HEAP32[i13 >> 2] = i11;
  HEAP32[i13 + 4 >> 2] = i12;
 }
 STACKTOP = i10;
 return;
}

function _ExportImage(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i1 + 28 | 0;
 i10 = i1 + 8 | 0;
 i9 = i1;
 i4 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i6 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 i2 = _GetImageData(i6) | 0;
 HEAP32[i7 >> 2] = i2;
 i2 = _IsFileExtension(HEAP32[i4 >> 2] | 0, 57434) | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 do if (i2) {
  i6 = _stbi_write_png(i1, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 + 8 >> 2] | 0, 4, HEAP32[i7 >> 2] | 0, HEAP32[i5 + 4 >> 2] << 2) | 0;
  HEAP32[i8 >> 2] = i6;
 } else {
  i2 = _IsFileExtension(i1, 57485) | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i2) {
   HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   HEAP32[i6 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
   i6 = _SaveKTX(i6, i1) | 0;
   HEAP32[i8 >> 2] = i6;
   break;
  }
  if (_IsFileExtension(i1, 58436) | 0) {
   i2 = _fopen(HEAP32[i4 >> 2] | 0, 54730) | 0;
   HEAP32[i3 >> 2] = i2;
   i2 = HEAP32[i5 >> 2] | 0;
   i6 = _GetPixelDataSize(HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 + 8 >> 2] | 0, HEAP32[i5 + 16 >> 2] | 0) | 0;
   i6 = _fwrite(i2, i6, 1, HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = i6;
   _fclose(HEAP32[i3 >> 2] | 0) | 0;
  }
 } while (0);
 _free(HEAP32[i7 >> 2] | 0);
 if (HEAP32[i8 >> 2] | 0) {
  HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
  _TraceLog(3, 58441, i9);
  STACKTOP = i11;
  return;
 } else {
  _TraceLog(4, 58473, i10);
  STACKTOP = i11;
  return;
 }
}

function _stbir__calculate_sample_range_downsample(i2, f1, f7, f6, i4, i5, i3) {
 i2 = i2 | 0;
 f1 = Math_fround(f1);
 f7 = Math_fround(f7);
 f6 = Math_fround(f6);
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i8 = STACKTOP;
 i9 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i20 = i9 + 44 | 0;
 i19 = i9 + 40 | 0;
 i15 = i9 + 36 | 0;
 i14 = i9 + 32 | 0;
 i11 = i9 + 28 | 0;
 i10 = i9 + 24 | 0;
 i13 = i9 + 20 | 0;
 i16 = i9 + 16 | 0;
 i18 = i9 + 12 | 0;
 i17 = i9 + 8 | 0;
 i12 = i9 + 4 | 0;
 HEAP32[i20 >> 2] = i2;
 HEAPF32[i19 >> 2] = f1;
 HEAPF32[i15 >> 2] = f7;
 HEAPF32[i14 >> 2] = f6;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i10 >> 2] = i5;
 HEAP32[i13 >> 2] = i3;
 f7 = Math_fround(Math_fround(HEAP32[i20 >> 2] | 0) + Math_fround(.5));
 HEAPF32[i16 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i16 >> 2]);
 f7 = Math_fround(f7 - Math_fround(HEAPF32[i19 >> 2]));
 HEAPF32[i18 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i16 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i19 >> 2]));
 HEAPF32[i17 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i18 >> 2]);
 f7 = Math_fround(f7 * Math_fround(HEAPF32[i15 >> 2]));
 f7 = Math_fround(f7 - Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i12 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i17 >> 2]);
 f7 = Math_fround(f7 * Math_fround(HEAPF32[i15 >> 2]));
 f7 = Math_fround(f7 - Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i9 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i16 >> 2]);
 f7 = Math_fround(f7 * Math_fround(HEAPF32[i15 >> 2]));
 f7 = Math_fround(f7 - Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[HEAP32[i13 >> 2] >> 2] = f7;
 i5 = ~~+Math_floor(+(+Math_fround(HEAPF32[i12 >> 2]) + .5));
 HEAP32[HEAP32[i11 >> 2] >> 2] = i5;
 i9 = ~~+Math_floor(+(+Math_fround(HEAPF32[i9 >> 2]) - .5));
 HEAP32[HEAP32[i10 >> 2] >> 2] = i9;
 STACKTOP = i8;
 return;
}

function _stbtt_GetGlyphBox(i3, i2, i4, i6, i5, i7) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i16 = i1 + 20 | 0;
 i11 = i1 + 16 | 0;
 i13 = i1 + 12 | 0;
 i12 = i1 + 8 | 0;
 i14 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i14 >> 2] = i7;
 i1 = HEAP32[i9 >> 2] | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 if (HEAP32[(HEAP32[i9 >> 2] | 0) + 52 + 8 >> 2] | 0) _stbtt__GetGlyphInfoT2(i1, i2, HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0; else {
  i16 = _stbtt__GetGlyfOffset(i1, i2) | 0;
  HEAP32[i8 >> 2] = i16;
  if ((HEAP32[i8 >> 2] | 0) < 0) {
   HEAP32[i10 >> 2] = 0;
   i16 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i15;
   return i16 | 0;
  }
  if (HEAP32[i11 >> 2] | 0) {
   i16 = (_ttSHORT((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) + 2 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[i11 >> 2] >> 2] = i16;
  }
  if (HEAP32[i13 >> 2] | 0) {
   i16 = (_ttSHORT((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) + 4 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[i13 >> 2] >> 2] = i16;
  }
  if (HEAP32[i12 >> 2] | 0) {
   i16 = (_ttSHORT((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) + 6 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[i12 >> 2] >> 2] = i16;
  }
  if (HEAP32[i14 >> 2] | 0) {
   i16 = (_ttSHORT((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) + 8 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[i14 >> 2] >> 2] = i16;
  }
 }
 HEAP32[i10 >> 2] = 1;
 i16 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _stbir__calculate_sample_range_upsample(i4, f5, f7, f6, i2, i3, i1) {
 i4 = i4 | 0;
 f5 = Math_fround(f5);
 f7 = Math_fround(f7);
 f6 = Math_fround(f6);
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i8 = STACKTOP;
 i9 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i20 = i9 + 44 | 0;
 i19 = i9 + 40 | 0;
 i14 = i9 + 36 | 0;
 i15 = i9 + 32 | 0;
 i11 = i9 + 28 | 0;
 i10 = i9 + 24 | 0;
 i13 = i9 + 20 | 0;
 i16 = i9 + 16 | 0;
 i18 = i9 + 12 | 0;
 i17 = i9 + 8 | 0;
 i12 = i9 + 4 | 0;
 HEAP32[i20 >> 2] = i4;
 HEAPF32[i19 >> 2] = f5;
 HEAPF32[i14 >> 2] = f7;
 HEAPF32[i15 >> 2] = f6;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i13 >> 2] = i1;
 f7 = Math_fround(Math_fround(HEAP32[i20 >> 2] | 0) + Math_fround(.5));
 HEAPF32[i16 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i16 >> 2]);
 f7 = Math_fround(f7 - Math_fround(HEAPF32[i19 >> 2]));
 HEAPF32[i18 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i16 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i19 >> 2]));
 HEAPF32[i17 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i18 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i15 >> 2]));
 f7 = Math_fround(f7 / Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i12 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i17 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i15 >> 2]));
 f7 = Math_fround(f7 / Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i9 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i16 >> 2]);
 f7 = Math_fround(f7 + Math_fround(HEAPF32[i15 >> 2]));
 f7 = Math_fround(f7 / Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[HEAP32[i13 >> 2] >> 2] = f7;
 i4 = ~~+Math_floor(+(+Math_fround(HEAPF32[i12 >> 2]) + .5));
 HEAP32[HEAP32[i11 >> 2] >> 2] = i4;
 i9 = ~~+Math_floor(+(+Math_fround(HEAPF32[i9 >> 2]) - .5));
 HEAP32[HEAP32[i10 >> 2] >> 2] = i9;
 STACKTOP = i8;
 return;
}

function _bonus_update(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i5;
 do if (!(HEAP32[43876] | 0)) {
  i1 = _GetKeyPressed() | 0;
  i2 = i1 + -49 | 0;
  if (i2 >>> 0 < 5) {
   HEAP32[43876] = i1 + -48;
   i1 = HEAP32[163168 + (i2 * 20 | 0) + 12 >> 2] | 0;
   if (!i1) {
    if (!(HEAP32[i3 + 20 >> 2] | 0)) break;
    HEAP32[i4 >> 2] = HEAP32[40735];
    HEAP32[i4 + 4 >> 2] = HEAP32[40736];
    HEAP32[i4 + 8 >> 2] = HEAP32[40737];
    HEAP32[i4 + 12 >> 2] = HEAP32[40738];
    HEAP32[i4 + 16 >> 2] = HEAP32[40739];
    _PlaySound(i4);
    break;
   } else {
    i2 = Math_imul(Math_imul(HEAP32[i3 + 8 >> 2] | 0, i1) | 0, HEAP32[i3 + 4 >> 2] | 0) | 0;
    HEAP32[i3 >> 2] = i2 + (HEAP32[i3 >> 2] | 0);
    if (!(HEAP32[i3 + 20 >> 2] | 0)) break;
    HEAP32[i4 >> 2] = HEAP32[40730];
    HEAP32[i4 + 4 >> 2] = HEAP32[40731];
    HEAP32[i4 + 8 >> 2] = HEAP32[40732];
    HEAP32[i4 + 12 >> 2] = HEAP32[40733];
    HEAP32[i4 + 16 >> 2] = HEAP32[40734];
    _PlaySound(i4);
    break;
   }
  }
 } else if (_IsKeyPressed(32) | 0) {
  if (HEAP32[i3 + 24 >> 2] | 0) {
   HEAP32[i4 >> 2] = HEAP32[43868];
   HEAP32[i4 + 4 >> 2] = HEAP32[43869];
   HEAP32[i4 + 8 >> 2] = HEAP32[43870];
   HEAP32[i4 + 12 >> 2] = HEAP32[43871];
   HEAP32[i4 + 16 >> 2] = HEAP32[43872];
   HEAP32[i4 + 20 >> 2] = HEAP32[43873];
   HEAP32[i4 + 24 >> 2] = HEAP32[43874];
   HEAP32[i4 + 28 >> 2] = HEAP32[43875];
   _StopMusicStream(i4);
   HEAP32[i4 >> 2] = HEAP32[43860];
   HEAP32[i4 + 4 >> 2] = HEAP32[43861];
   HEAP32[i4 + 8 >> 2] = HEAP32[43862];
   HEAP32[i4 + 12 >> 2] = HEAP32[43863];
   HEAP32[i4 + 16 >> 2] = HEAP32[43864];
   HEAP32[i4 + 20 >> 2] = HEAP32[43865];
   HEAP32[i4 + 24 >> 2] = HEAP32[43866];
   HEAP32[i4 + 28 >> 2] = HEAP32[43867];
   _PlayMusicStream(i4);
  }
  HEAP32[i3 + 12 >> 2] = 1;
 } while (0);
 STACKTOP = i5;
 return;
}

function _stbir__edge_wrap_slow(i2, i5, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 20 | 0;
 i11 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i8 >> 2] = i5;
 HEAP32[i7 >> 2] = i4;
 L1 : do switch (HEAP32[i11 >> 2] | 0) {
 case 4:
  {
   HEAP32[i9 >> 2] = 0;
   break;
  }
 case 1:
  {
   if ((HEAP32[i8 >> 2] | 0) < 0) {
    HEAP32[i9 >> 2] = 0;
    break L1;
   }
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
    HEAP32[i9 >> 2] = (HEAP32[i7 >> 2] | 0) - 1;
    break L1;
   } else {
    HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
    break L1;
   }
  }
 case 2:
  {
   i1 = HEAP32[i8 >> 2] | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   if ((HEAP32[i8 >> 2] | 0) < 0) if ((i1 | 0) < (i2 | 0)) {
    HEAP32[i9 >> 2] = 0 - (HEAP32[i8 >> 2] | 0);
    break L1;
   } else {
    HEAP32[i9 >> 2] = (HEAP32[i7 >> 2] | 0) - 1;
    break L1;
   }
   if ((i1 | 0) < (i2 | 0)) {
    HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
    break L1;
   }
   HEAP32[i6 >> 2] = HEAP32[i7 >> 2] << 1;
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
    HEAP32[i9 >> 2] = 0;
    break L1;
   } else {
    HEAP32[i9 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) - 1;
    break L1;
   }
  }
 case 3:
  {
   i1 = HEAP32[i8 >> 2] | 0;
   if ((HEAP32[i8 >> 2] | 0) >= 0) {
    HEAP32[i9 >> 2] = (i1 | 0) % (HEAP32[i7 >> 2] | 0) | 0;
    break L1;
   }
   HEAP32[i3 >> 2] = (0 - i1 | 0) % (HEAP32[i7 >> 2] | 0) | 0;
   if (HEAP32[i3 >> 2] | 0) HEAP32[i3 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i3 >> 2] | 0);
   HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
   break;
  }
 default:
  ___assert_fail(56267, 54884, 994, 56294);
 } while (0);
 STACKTOP = i10;
 return HEAP32[i9 >> 2] | 0;
}

function _stbi__load_main(i5, i6, i7, i2, i3, i4, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 i8 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i8 + 32 | 0;
 i12 = i8 + 28 | 0;
 i15 = i8 + 24 | 0;
 i16 = i8 + 20 | 0;
 i9 = i8 + 16 | 0;
 i10 = i8 + 12 | 0;
 i11 = i8 + 8 | 0;
 i13 = i8;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i16 >> 2] = i7;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i8 + 4 >> 2] = i1;
 i8 = HEAP32[i11 >> 2] | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[HEAP32[i11 >> 2] >> 2] = 8;
 HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] = 0;
 i8 = (_stbi__png_test(HEAP32[i12 >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (i8) {
  i16 = _stbi__png_load(i1, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = i16;
  i16 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 if (!(_stbi__hdr_test(i1) | 0)) {
  i16 = (_stbi__err(53520) | 0) != 0;
  HEAP32[i14 >> 2] = i16 ? 0 : 0;
  i16 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i12 = _stbi__hdr_load(HEAP32[i12 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i12;
 if (HEAP32[i10 >> 2] | 0) i1 = HEAP32[i10 >> 2] | 0; else i1 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
 i16 = _stbi__hdr_to_ldr(HEAP32[i13 >> 2] | 0, HEAP32[HEAP32[i15 >> 2] >> 2] | 0, HEAP32[HEAP32[i16 >> 2] >> 2] | 0, i1) | 0;
 HEAP32[i14 >> 2] = i16;
 i16 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i17;
 return i16 | 0;
}

function _SetStereoView(i1, i2, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 i8 = i12 + 264 | 0;
 i10 = i12 + 128 | 0;
 i5 = i12 + 256 | 0;
 i7 = i12 + 192 | 0;
 i6 = i12 + 64 | 0;
 i11 = i12;
 HEAP32[i5 >> 2] = i1;
 i4 = i7;
 i3 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  i4 = i4 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 i4 = i6;
 i2 = i9;
 i3 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  i4 = i4 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 i1 = (Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[43935] | 0) | 0) / 2 | 0;
 _rlViewport(i1, 0, (HEAP32[43935] | 0) / 2 | 0, HEAP32[43936] | 0);
 i1 = 175884 + (HEAP32[i5 >> 2] << 6) | 0;
 i4 = i10;
 i2 = i9;
 i3 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  i4 = i4 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 i4 = i8;
 i2 = i1;
 i3 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  i4 = i4 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 _MatrixMultiply(i11, i10, i8);
 i4 = i6;
 i2 = i11;
 i3 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  i4 = i4 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 i4 = i7;
 i2 = 175756 + (HEAP32[i5 >> 2] << 6) | 0;
 i3 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  i4 = i4 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 i4 = i8;
 i2 = i6;
 i3 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  i4 = i4 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 _SetMatrixModelview(i8);
 i4 = i8;
 i2 = i7;
 i3 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  i4 = i4 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 _SetMatrixProjection(i8);
 STACKTOP = i12;
 return;
}

function _mbrtowc(i4, i5, i8, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i9 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1;
 i7 = (i2 | 0) == 0 ? 176692 : i2;
 i1 = HEAP32[i7 >> 2] | 0;
 L1 : do if (!i5) if (!i1) i1 = 0; else i9 = 19; else {
  i6 = (i4 | 0) == 0 ? i3 : i4;
  if (!i8) i1 = -2; else {
   if (!i1) {
    i1 = HEAP8[i5 >> 0] | 0;
    if (i1 << 24 >> 24 > -1) {
     HEAP32[i6 >> 2] = i1 & 255;
     i1 = i1 << 24 >> 24 != 0 & 1;
     break;
    }
    i4 = (___pthread_self_490() | 0) + 176 | 0;
    i1 = HEAP8[i5 >> 0] | 0;
    if (!(HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) {
     HEAP32[i6 >> 2] = i1 << 24 >> 24 & 57343;
     i1 = 1;
     break;
    }
    i1 = (i1 & 255) + -194 | 0;
    if (i1 >>> 0 > 50) {
     i9 = 19;
     break;
    }
    i1 = HEAP32[29840 + (i1 << 2) >> 2] | 0;
    i2 = i8 + -1 | 0;
    if (i2) {
     i3 = i2;
     i4 = i5 + 1 | 0;
     i9 = 11;
    }
   } else {
    i3 = i8;
    i4 = i5;
    i9 = 11;
   }
   L14 : do if ((i9 | 0) == 11) {
    i2 = HEAPU8[i4 >> 0] | 0;
    i5 = i2 >>> 3;
    if ((i5 + -16 | i5 + (i1 >> 26)) >>> 0 > 7) {
     i9 = 19;
     break L1;
    }
    i1 = i2 + -128 | i1 << 6;
    i2 = i3 + -1 | 0;
    if ((i1 | 0) < 0) do {
     i4 = i4 + 1 | 0;
     if (!i2) break L14;
     i3 = HEAP8[i4 >> 0] | 0;
     if ((i3 & -64) << 24 >> 24 != -128) {
      i9 = 19;
      break L1;
     }
     i1 = (i3 & 255) + -128 | i1 << 6;
     i2 = i2 + -1 | 0;
    } while ((i1 | 0) < 0);
    HEAP32[i7 >> 2] = 0;
    HEAP32[i6 >> 2] = i1;
    i1 = i8 - i2 | 0;
    break L1;
   } while (0);
   HEAP32[i7 >> 2] = i1;
   i1 = -2;
  }
 } while (0);
 if ((i9 | 0) == 19) {
  HEAP32[i7 >> 2] = 0;
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 25;
  i1 = -1;
 }
 STACKTOP = i10;
 return i1 | 0;
}

function _trinkle(i5, i13, i11, i4, i1, i2, i12) {
 i5 = i5 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0;
 i14 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i10 = i3 + 232 | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 HEAP32[i10 >> 2] = i7;
 i9 = HEAP32[i4 + 4 >> 2] | 0;
 i8 = i10 + 4 | 0;
 HEAP32[i8 >> 2] = i9;
 HEAP32[i3 >> 2] = i5;
 L1 : do if ((i7 | 0) != 1 | (i9 | 0) != 0) {
  i9 = 0 - i13 | 0;
  i4 = i5 + (0 - (HEAP32[i12 + (i1 << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[i11 & 15](i4, i5) | 0) < 1) {
   i4 = i5;
   i6 = 1;
   i5 = 9;
  } else {
   i6 = i5;
   i7 = 1;
   i2 = (i2 | 0) == 0;
   while (1) {
    if (i2 & (i1 | 0) > 1) {
     i5 = i6 + i9 | 0;
     i2 = HEAP32[i12 + (i1 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[i11 & 15](i5, i4) | 0) > -1) {
      i4 = i6;
      i2 = i7;
      i5 = 10;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[i11 & 15](i5 + (0 - i2) | 0, i4) | 0) > -1) {
      i4 = i6;
      i2 = i7;
      i5 = 10;
      break L1;
     }
    }
    i6 = i7 + 1 | 0;
    HEAP32[i3 + (i7 << 2) >> 2] = i4;
    i7 = _pntz(i10) | 0;
    _shr(i10, i7);
    i1 = i7 + i1 | 0;
    if (!((HEAP32[i10 >> 2] | 0) != 1 | (HEAP32[i8 >> 2] | 0) != 0)) {
     i2 = i6;
     i5 = 10;
     break L1;
    }
    i2 = i4 + (0 - (HEAP32[i12 + (i1 << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[i11 & 15](i2, HEAP32[i3 >> 2] | 0) | 0) < 1) {
     i2 = 0;
     i5 = 9;
     break;
    } else {
     i5 = i4;
     i4 = i2;
     i7 = i6;
     i2 = 1;
     i6 = i5;
    }
   }
  }
 } else {
  i4 = i5;
  i6 = 1;
  i5 = 9;
 } while (0);
 if ((i5 | 0) == 9) if (!i2) {
  i2 = i6;
  i5 = 10;
 }
 if ((i5 | 0) == 10) {
  _cycle(i13, i3, i2);
  _sift(i4, i13, i11, i1, i12);
 }
 STACKTOP = i14;
 return;
}

function _acos(d3) {
 d3 = +d3;
 var i1 = 0, i2 = 0, d4 = 0.0, d5 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = d3;
 i1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i2 = i1 & 2147483647;
 if (i2 >>> 0 > 1072693247) if (!(i2 + -1072693248 | HEAP32[tempDoublePtr >> 2])) {
  d3 = (i1 | 0) < 0 ? 3.141592653589793 : 0.0;
  return +d3;
 } else {
  d3 = 0.0 / (d3 - d3);
  return +d3;
 }
 if (i2 >>> 0 < 1071644672) {
  if (i2 >>> 0 < 1012924417) {
   d3 = 1.5707963267948966;
   return +d3;
  }
  d4 = d3 * d3;
  d3 = 1.5707963267948966 - (d3 - (6.123233995736766e-17 - d4 * (d4 * (d4 * (d4 * (d4 * (d4 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / (d4 * (d4 * (d4 * (d4 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0) * d3));
  return +d3;
 }
 if ((i1 | 0) < 0) {
  d3 = (d3 + 1.0) * .5;
  d4 = +Math_sqrt(+d3);
  d4 = (1.5707963267948966 - (d4 + (d3 * (d3 * (d3 * (d3 * (d3 * (d3 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / (d3 * (d3 * (d3 * (d3 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0) * d4 + -6.123233995736766e-17))) * 2.0;
  return +d4;
 } else {
  d5 = (1.0 - d3) * .5;
  d3 = +Math_sqrt(+d5);
  HEAPF64[tempDoublePtr >> 3] = d3;
  i2 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[tempDoublePtr >> 2] = 0;
  HEAP32[tempDoublePtr + 4 >> 2] = i2;
  d4 = +HEAPF64[tempDoublePtr >> 3];
  d4 = (d5 * (d5 * (d5 * (d5 * (d5 * (d5 * 3.479331075960212e-05 + 7.915349942898145e-04) + -.04005553450067941) + .20121253213486293) + -.3255658186224009) + .16666666666666666) / (d5 * (d5 * (d5 * (d5 * .07703815055590194 + -.6882839716054533) + 2.0209457602335057) + -2.403394911734414) + 1.0) * d3 + (d5 - d4 * d4) / (d3 + d4) + d4) * 2.0;
  return +d4;
 }
 return 0.0;
}

function _ImageCopy(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i5 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i6 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i4 + 12 >> 2] | 0)) break;
  i9 = _GetPixelDataSize(HEAP32[i7 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i4 + 16 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i9;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) / 2 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) / 2 | 0;
  if ((HEAP32[i7 >> 2] | 0) < 1) HEAP32[i7 >> 2] = 1;
  if ((HEAP32[i3 >> 2] | 0) < 1) HEAP32[i3 >> 2] = 1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 i9 = _malloc(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i9;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i2 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
  STACKTOP = i8;
  return;
 }
 _memcpy(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 STACKTOP = i8;
 return;
}

function _GifBegin(i5, i9, i6, i2, i1, i4) {
 i5 = i5 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i3 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i11 + 21 | 0;
 i12 = i11 + 16 | 0;
 i10 = i11 + 12 | 0;
 i7 = i11 + 8 | 0;
 i3 = i11 + 4 | 0;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i11 >> 2] = i1;
 HEAP8[i11 + 20 >> 0] = i4 & 1;
 i9 = _fopen(HEAP32[i12 >> 2] | 0, 54730) | 0;
 HEAP32[44038] = i9;
 if (!(HEAP32[44038] | 0)) {
  HEAP8[i8 >> 0] = 0;
  i12 = HEAP8[i8 >> 0] | 0;
  i12 = i12 & 1;
  STACKTOP = i11;
  return i12 | 0;
 }
 i12 = _malloc((Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) << 2) | 0;
 HEAP32[43877] = i12;
 _fputs(35471, HEAP32[44038] | 0) | 0;
 _fputc(HEAP32[i10 >> 2] & 255, HEAP32[44038] | 0) | 0;
 _fputc((HEAP32[i10 >> 2] | 0) >>> 8 & 255, HEAP32[44038] | 0) | 0;
 _fputc(HEAP32[i7 >> 2] & 255, HEAP32[44038] | 0) | 0;
 _fputc((HEAP32[i7 >> 2] | 0) >>> 8 & 255, HEAP32[44038] | 0) | 0;
 _fputc(240, HEAP32[44038] | 0) | 0;
 _fputc(0, HEAP32[44038] | 0) | 0;
 _fputc(0, HEAP32[44038] | 0) | 0;
 _fputc(0, HEAP32[44038] | 0) | 0;
 _fputc(0, HEAP32[44038] | 0) | 0;
 _fputc(0, HEAP32[44038] | 0) | 0;
 _fputc(0, HEAP32[44038] | 0) | 0;
 _fputc(0, HEAP32[44038] | 0) | 0;
 _fputc(0, HEAP32[44038] | 0) | 0;
 if (HEAP32[i3 >> 2] | 0) {
  _fputc(33, HEAP32[44038] | 0) | 0;
  _fputc(255, HEAP32[44038] | 0) | 0;
  _fputc(11, HEAP32[44038] | 0) | 0;
  _fputs(35478, HEAP32[44038] | 0) | 0;
  _fputc(3, HEAP32[44038] | 0) | 0;
  _fputc(1, HEAP32[44038] | 0) | 0;
  _fputc(0, HEAP32[44038] | 0) | 0;
  _fputc(0, HEAP32[44038] | 0) | 0;
  _fputc(0, HEAP32[44038] | 0) | 0;
 }
 HEAP8[i8 >> 0] = 1;
 i12 = HEAP8[i8 >> 0] | 0;
 i12 = i12 & 1;
 STACKTOP = i11;
 return i12 | 0;
}

function _LoadImageEx(i2, i6, i8, i3) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 36 | 0;
 i11 = i1 + 32 | 0;
 i10 = i1 + 28 | 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i4 + 12 >> 2] = 1;
 HEAP32[i4 + 16 >> 2] = 7;
 HEAP32[i5 >> 2] = 0;
 i8 = _malloc((Math_imul(HEAP32[i4 + 4 >> 2] | 0, HEAP32[i4 + 8 >> 2] | 0) | 0) << 2) | 0;
 HEAP32[i4 >> 2] = i8;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= ((Math_imul(HEAP32[i4 + 4 >> 2] | 0, HEAP32[i4 + 8 >> 2] | 0) | 0) << 2 | 0)) break;
  HEAP8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] = HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 0] | 0;
  HEAP8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 1) >> 0] = HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) + 1 >> 0] | 0;
  HEAP8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 2) >> 0] = HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) + 2 >> 0] | 0;
  HEAP8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 3) >> 0] = HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) + 3 >> 0] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
 }
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 STACKTOP = i9;
 return;
}

function _stb_vorbis_get_frame_float(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i6 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i12 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i10 >> 2] = i4;
 i1 = HEAP32[i7 >> 2] | 0;
 if (HEAP8[(HEAP32[i7 >> 2] | 0) + 48 >> 0] | 0) {
  i12 = _stbv_error(i1, 2) | 0;
  HEAP32[i11 >> 2] = i12;
  i12 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i4 = (_stbv_vorbis_decode_packet(i1, i9, i8, i12) | 0) != 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i4) {
  HEAP32[i1 + 1508 >> 2] = 0;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 1504 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  i12 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i12 = _stbv_vorbis_finish_frame(i1, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i12;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0)) break;
  i4 = HEAP32[i7 >> 2] | 0;
  i12 = HEAP32[i5 >> 2] << 2 | 0;
  HEAP32[i4 + 864 + i12 >> 2] = (HEAP32[i4 + 800 + i12 >> 2] | 0) + (HEAP32[i8 >> 2] << 2);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[i7 >> 2] | 0) + 1504 >> 2] = HEAP32[i8 >> 2];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 1508 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 if (HEAP32[i6 >> 2] | 0) HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
 if (HEAP32[i10 >> 2] | 0) HEAP32[HEAP32[i10 >> 2] >> 2] = (HEAP32[i7 >> 2] | 0) + 864;
 HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
 i12 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i13;
 return i12 | 0;
}

function _stbi__vertical_flip(i8, i13, i6, i4) {
 i8 = i8 | 0;
 i13 = i13 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 2096 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2096);
 i15 = i1 + 2088 | 0;
 i17 = i1 + 2084 | 0;
 i7 = i1 + 2080 | 0;
 i16 = i1 + 2076 | 0;
 i9 = i1 + 2072 | 0;
 i5 = i1 + 2068 | 0;
 i12 = i1;
 i2 = i1 + 2064 | 0;
 i10 = i1 + 2060 | 0;
 i11 = i1 + 2056 | 0;
 i3 = i1 + 2052 | 0;
 i1 = i1 + 2048 | 0;
 HEAP32[i15 >> 2] = i8;
 HEAP32[i17 >> 2] = i13;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i16 >> 2] = i4;
 i13 = Math_imul(HEAP32[i17 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i13;
 HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i7 >> 2] >> 1 | 0)) break;
  i17 = (HEAP32[i2 >> 2] | 0) + (Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) | 0;
  HEAP32[i10 >> 2] = i17;
  i17 = (HEAP32[i2 >> 2] | 0) + (Math_imul((HEAP32[i7 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) - 1 | 0, HEAP32[i5 >> 2] | 0) | 0) | 0;
  HEAP32[i11 >> 2] = i17;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break;
   i17 = HEAP32[i3 >> 2] | 0;
   HEAP32[i1 >> 2] = (i17 | 0) >>> 0 < 2048 ? i17 | 0 : 2048;
   _memcpy(i12 | 0, HEAP32[i10 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
   _memcpy(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
   _memcpy(HEAP32[i11 >> 2] | 0, i12 | 0, HEAP32[i1 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - (HEAP32[i1 >> 2] | 0);
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 STACKTOP = i14;
 return;
}

function _atanf(f2) {
 f2 = Math_fround(f2);
 var i1 = 0, f3 = f0, f4 = f0, i5 = 0, f6 = f0;
 i1 = (HEAPF32[tempDoublePtr >> 2] = f2, HEAP32[tempDoublePtr >> 2] | 0);
 i5 = i1 >>> 31;
 i1 = i1 & 2147483647;
 if (i1 >>> 0 > 1283457023) {
  f4 = (i5 | 0) == 0 ? Math_fround(1.57079625) : Math_fround(-1.57079625);
  return Math_fround(i1 >>> 0 > 2139095040 ? f2 : f4);
 }
 do if (i1 >>> 0 < 1054867456) if (i1 >>> 0 < 964689920) {
  f4 = f2;
  return Math_fround(f4);
 } else i1 = -1; else {
  f2 = Math_fround(Math_abs(Math_fround(f2)));
  if (i1 >>> 0 < 1066926080) if (i1 >>> 0 < 1060110336) {
   i1 = 0;
   f2 = Math_fround(Math_fround(Math_fround(f2 * Math_fround(2.0)) + Math_fround(-1.0)) / Math_fround(f2 + Math_fround(2.0)));
   break;
  } else {
   i1 = 1;
   f2 = Math_fround(Math_fround(f2 + Math_fround(-1.0)) / Math_fround(f2 + Math_fround(1.0)));
   break;
  } else if (i1 >>> 0 < 1075576832) {
   i1 = 2;
   f2 = Math_fround(Math_fround(f2 + Math_fround(-1.5)) / Math_fround(Math_fround(f2 * Math_fround(1.5)) + Math_fround(1.0)));
   break;
  } else {
   i1 = 3;
   f2 = Math_fround(Math_fround(-1.0) / f2);
   break;
  }
 } while (0);
 f3 = Math_fround(f2 * f2);
 f4 = Math_fround(f3 * f3);
 f3 = Math_fround(f3 * Math_fround(Math_fround(f4 * Math_fround(Math_fround(f4 * Math_fround(.0616876073)) + Math_fround(.142536357))) + Math_fround(.333333284)));
 f4 = Math_fround(f4 * Math_fround(Math_fround(-.199991584) - Math_fround(f4 * Math_fround(.106480174))));
 if ((i1 | 0) < 0) {
  f4 = Math_fround(f2 - Math_fround(f2 * Math_fround(f4 + f3)));
  return Math_fround(f4);
 } else {
  f6 = Math_fround(HEAPF32[30832 + (i1 << 2) >> 2]);
  f3 = Math_fround(f2 * Math_fround(f4 + f3));
  f3 = Math_fround(f6 - Math_fround(Math_fround(f3 - Math_fround(HEAPF32[30848 + (i1 << 2) >> 2])) - f2));
  f4 = Math_fround(-f3);
  f4 = (i5 | 0) == 0 ? f3 : f4;
  return Math_fround(f4);
 }
 return f0;
}

function _stbi__getn(i9, i3, i5) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 24 | 0;
 i10 = i1 + 20 | 0;
 i4 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i2 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = i5;
 if (HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) {
  i9 = HEAP32[i10 >> 2] | 0;
  HEAP32[i2 >> 2] = (HEAP32[i9 + 172 >> 2] | 0) - (HEAP32[i9 + 168 >> 2] | 0);
  if ((HEAP32[i2 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) {
   _memcpy(HEAP32[i4 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 168 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
   i5 = HEAP32[i10 >> 2] | 0;
   i9 = HEAP32[i2 >> 2] | 0;
   i9 = FUNCTION_TABLE_iiii[HEAP32[i5 + 16 >> 2] & 15](HEAP32[i5 + 28 >> 2] | 0, (HEAP32[i4 >> 2] | 0) + i9 | 0, (HEAP32[i6 >> 2] | 0) - i9 | 0) | 0;
   HEAP32[i1 >> 2] = i9;
   HEAP32[i7 >> 2] = (HEAP32[i1 >> 2] | 0) == ((HEAP32[i6 >> 2] | 0) - (HEAP32[i2 >> 2] | 0) | 0) & 1;
   i10 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 + 168 >> 2] = HEAP32[i10 + 172 >> 2];
   HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
   i10 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i11;
   return i10 | 0;
  }
 }
 if (((HEAP32[(HEAP32[i10 >> 2] | 0) + 168 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) >>> 0 <= (HEAP32[(HEAP32[i10 >> 2] | 0) + 172 >> 2] | 0) >>> 0) {
  _memcpy(HEAP32[i4 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 168 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
  i10 = (HEAP32[i10 >> 2] | 0) + 168 | 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
  HEAP32[i8 >> 2] = 1;
  i10 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else {
  HEAP32[i8 >> 2] = 0;
  i10 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 return 0;
}

function _LoadWave(i7, i2) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i8 = i1;
 i4 = i1 + 84 | 0;
 i9 = i1 + 64 | 0;
 i3 = i1 + 44 | 0;
 i5 = i1 + 24 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 i2 = _IsFileExtension(HEAP32[i4 >> 2] | 0, 49936) | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 do if (i2) {
  _LoadWAV(i3, i1);
  HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i9 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 } else {
  i3 = _IsFileExtension(i1, 49941) | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i3) {
   _LoadOGG(i5, i1);
   HEAP32[i9 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   HEAP32[i9 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
   break;
  }
  i5 = _IsFileExtension(i1, 49946) | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i5) {
   _LoadMP3(i6, i1);
   HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   HEAP32[i9 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
   break;
  } else {
   HEAP32[i8 >> 2] = i1;
   _TraceLog(4, 49951, i8);
   break;
  }
 } while (0);
 HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 HEAP32[i7 + 16 >> 2] = HEAP32[i9 + 16 >> 2];
 STACKTOP = i10;
 return;
}

function _SetTextureFilter(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i2 = i2 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 switch (HEAP32[i2 >> 2] | 0) {
 case 0:
  {
   i1 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i4 + 12 >> 2] | 0) > 1) {
    _rlTextureParameters(i1, 10241, 9984);
    _rlTextureParameters(HEAP32[i4 >> 2] | 0, 10240, 9728);
    STACKTOP = i5;
    return;
   } else {
    _rlTextureParameters(i1, 10241, 9728);
    _rlTextureParameters(HEAP32[i4 >> 2] | 0, 10240, 9728);
    STACKTOP = i5;
    return;
   }
  }
 case 1:
  {
   i1 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i4 + 12 >> 2] | 0) > 1) {
    _rlTextureParameters(i1, 10241, 9985);
    _rlTextureParameters(HEAP32[i4 >> 2] | 0, 10240, 9729);
    STACKTOP = i5;
    return;
   } else {
    _rlTextureParameters(i1, 10241, 9729);
    _rlTextureParameters(HEAP32[i4 >> 2] | 0, 10240, 9729);
    STACKTOP = i5;
    return;
   }
  }
 case 2:
  {
   i1 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i4 + 12 >> 2] | 0) > 1) {
    _rlTextureParameters(i1, 10241, 9987);
    _rlTextureParameters(HEAP32[i4 >> 2] | 0, 10240, 9729);
    STACKTOP = i5;
    return;
   } else {
    HEAP32[i3 >> 2] = i1;
    _TraceLog(4, 59140, i3);
    _rlTextureParameters(HEAP32[i4 >> 2] | 0, 10241, 9729);
    _rlTextureParameters(HEAP32[i4 >> 2] | 0, 10240, 9729);
    STACKTOP = i5;
    return;
   }
  }
 case 3:
  {
   _rlTextureParameters(HEAP32[i4 >> 2] | 0, 12288, 4);
   STACKTOP = i5;
   return;
  }
 case 4:
  {
   _rlTextureParameters(HEAP32[i4 >> 2] | 0, 12288, 8);
   STACKTOP = i5;
   return;
  }
 case 5:
  {
   _rlTextureParameters(HEAP32[i4 >> 2] | 0, 12288, 16);
   STACKTOP = i5;
   return;
  }
 default:
  {
   STACKTOP = i5;
   return;
  }
 }
}

function _drmp3d_synth_granule(i12, i2, i6, i8, i10, i4) {
 i12 = i12 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i11 = 0, i13 = 0, i14 = 0, f15 = f0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i13 = i1 + 24 | 0;
 i3 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i11 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  _drmp3d_DCT_II((HEAP32[i3 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) * 576 << 2) | 0, HEAP32[i7 >> 2] | 0);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 _memcpy(HEAP32[i5 >> 2] | 0, HEAP32[i13 >> 2] | 0, 3840) | 0;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  i12 = (HEAP32[i11 >> 2] | 0) + ((Math_imul(HEAP32[i9 >> 2] << 5, HEAP32[i1 >> 2] | 0) | 0) << 1) | 0;
  _drmp3d_synth((HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) | 0, i12, HEAP32[i9 >> 2] | 0, (HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] << 6 << 2) | 0);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 2;
 }
 if ((HEAP32[i9 >> 2] | 0) != 1) {
  _memcpy(HEAP32[i13 >> 2] | 0, (HEAP32[i5 >> 2] | 0) + (HEAP32[i7 >> 2] << 6 << 2) | 0, 3840) | 0;
  STACKTOP = i14;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= 960) break;
  f15 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i7 >> 2] << 6) + (HEAP32[i1 >> 2] | 0) << 2) >> 2]);
  HEAPF32[(HEAP32[i13 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f15;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 2;
 }
 STACKTOP = i14;
 return;
}

function _drmp3_src_read_frames_ex(i9, i2, i3, i7, i4) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 8 | 0;
 i10 = i1 + 28 | 0;
 i6 = i1;
 i8 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i1 = i1 + 16 | 0;
 HEAP32[i10 >> 2] = i9;
 i9 = i6;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i9 + 4 >> 2] = i3;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i5 >> 2] = i4;
 i9 = i6;
 L1 : do if ((HEAP32[i10 >> 2] | 0) == 0 | (HEAP32[i9 >> 2] | 0) == 0 & (HEAP32[i9 + 4 >> 2] | 0) == 0 | (HEAP32[i8 >> 2] | 0) == 0) {
  i10 = i11;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
 } else {
  HEAP32[i1 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2];
  if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[i1 >> 2] = 0;
  switch (HEAP32[i1 >> 2] | 0) {
  case 0:
   {
    i9 = i6;
    i8 = _drmp3_src_read_frames_passthrough(HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
    i9 = getTempRet0() | 0;
    i10 = i11;
    HEAP32[i10 >> 2] = i8;
    HEAP32[i10 + 4 >> 2] = i9;
    break L1;
   }
  case 1:
   {
    i9 = i6;
    i8 = _drmp3_src_read_frames_linear(HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
    i9 = getTempRet0() | 0;
    i10 = i11;
    HEAP32[i10 >> 2] = i8;
    HEAP32[i10 + 4 >> 2] = i9;
    break L1;
   }
  default:
   {
    i10 = i11;
    HEAP32[i10 >> 2] = 0;
    HEAP32[i10 + 4 >> 2] = 0;
    break L1;
   }
  }
 } while (0);
 i10 = i11;
 i11 = HEAP32[i10 >> 2] | 0;
 setTempRet0(HEAP32[i10 + 4 >> 2] | 0);
 STACKTOP = i12;
 return i11 | 0;
}

function _stbrp_init_target(i2, i6, i3, i4, i5) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 20 | 0;
 i12 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i12 >> 2] = i6;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 if (!((HEAP32[i12 >> 2] | 0) <= 65535 & (HEAP32[i9 >> 2] | 0) <= 65535)) ___assert_fail(51548, 51514, 257, 51584);
 HEAP32[i7 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i10 >> 2] | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i7 >> 2] | 0) >= ((HEAP32[i11 >> 2] | 0) - 1 | 0)) break;
  HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) + 4 >> 2] = i1 + (i2 + 1 << 3);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 HEAP32[i1 + (i2 << 3) + 4 >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] = 1;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = HEAP32[i10 >> 2];
 i10 = HEAP32[i8 >> 2] | 0;
 HEAP32[i10 + 24 >> 2] = (i10 | 0) + 32;
 HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i12 >> 2];
 HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = HEAP32[i11 >> 2];
 _stbrp_setup_allow_out_of_mem(HEAP32[i8 >> 2] | 0, 0);
 HEAP16[(HEAP32[i8 >> 2] | 0) + 32 >> 1] = 0;
 HEAP16[(HEAP32[i8 >> 2] | 0) + 32 + 2 >> 1] = 0;
 i11 = (HEAP32[i8 >> 2] | 0) + 32 | 0;
 HEAP32[i11 + 4 >> 2] = (i11 | 0) + 8;
 HEAP16[(HEAP32[i8 >> 2] | 0) + 32 + 8 >> 1] = HEAP32[i12 >> 2];
 HEAP16[(HEAP32[i8 >> 2] | 0) + 32 + 8 + 2 >> 1] = -1;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 32 + 8 + 4 >> 2] = 0;
 STACKTOP = i13;
 return;
}

function _drmp3_L12_read_scalefactors(i4, i5, i7, i3, i6) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, f19 = f0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i10 = i1 + 40 | 0;
 i14 = i1 + 36 | 0;
 i17 = i1 + 32 | 0;
 i9 = i1 + 28 | 0;
 i16 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i12 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i13 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i17 >> 2] = i7;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  HEAPF32[i15 >> 2] = Math_fround(0.0);
  i7 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i7 + 1;
  HEAP32[i8 >> 2] = HEAPU8[i7 >> 0];
  if (HEAP32[i8 >> 2] | 0) i1 = 4 + (19 >> (HEAPU8[(HEAP32[i17 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] | 0) & 3) | 0; else i1 = 0;
  HEAP32[i13 >> 2] = i1;
  HEAP32[i12 >> 2] = 4;
  while (1) {
   if (!(HEAP32[i12 >> 2] | 0)) break;
   if (HEAP32[i13 >> 2] & HEAP32[i12 >> 2] | 0) {
    i7 = _drmp3_bs_get_bits(HEAP32[i10 >> 2] | 0, 6) | 0;
    HEAP32[i2 >> 2] = i7;
    f19 = Math_fround(HEAPF32[15216 + (((HEAP32[i8 >> 2] | 0) * 3 | 0) - 6 + ((HEAP32[i2 >> 2] | 0) % 3 | 0) << 2) >> 2]);
    f19 = Math_fround(f19 * Math_fround(2097152 >> ((HEAP32[i2 >> 2] | 0) / 3 | 0) | 0));
    HEAPF32[i15 >> 2] = f19;
   }
   f19 = Math_fround(HEAPF32[i15 >> 2]);
   i7 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i7 + 4;
   HEAPF32[i7 >> 2] = f19;
   HEAP32[i12 >> 2] = HEAP32[i12 >> 2] >> 1;
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 STACKTOP = i18;
 return;
}

function _drmp3_init_internal(i8, i2, i4, i10, i6) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i12 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i3 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i7 >> 2] = i6;
 if (!(HEAP32[i9 >> 2] | 0)) ___assert_fail(48609, 48387, 2844, 48628);
 if (!(HEAP32[i3 >> 2] | 0)) ___assert_fail(48648, 48387, 2845, 48628);
 _drmp3dec_init(HEAP32[i9 >> 2] | 0);
 if (HEAP32[i7 >> 2] | 0) {
  i10 = HEAP32[i7 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 } else {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
 }
 HEAP32[(HEAP32[i9 >> 2] | 0) + 6688 >> 2] = HEAP32[i1 >> 2];
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 6688 >> 2] | 0) >>> 0 > 2) HEAP32[(HEAP32[i9 >> 2] | 0) + 6688 >> 2] = 2;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 6692 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 6696 >> 2] = HEAP32[i3 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 6700 >> 2] = HEAP32[i5 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 6704 >> 2] = HEAP32[i11 >> 2];
 if (HEAP32[(HEAP32[i9 >> 2] | 0) + 6688 >> 2] | 0) if (HEAP32[(HEAP32[i9 >> 2] | 0) + 6692 >> 2] | 0) _drmp3_init_src(HEAP32[i9 >> 2] | 0) | 0;
 if (_drmp3_decode_next_frame(HEAP32[i9 >> 2] | 0) | 0) {
  HEAP32[i12 >> 2] = 1;
  i12 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 } else {
  _drmp3_uninit(HEAP32[i9 >> 2] | 0);
  HEAP32[i12 >> 2] = 0;
  i12 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 return 0;
}

function _LoadTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 i8 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i4 = i8 + 68 | 0;
 i9 = i8 + 64 | 0;
 i5 = i8 + 44 | 0;
 i3 = i8 + 24 | 0;
 i6 = i8 + 4 | 0;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 _LoadImage(i3, HEAP32[i9 >> 2] | 0);
 if (HEAP32[i3 >> 2] | 0) {
  HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
  _LoadTextureFromImage(i6, i4);
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  HEAP32[i5 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
  _UnloadImage(i4);
  HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
  STACKTOP = i7;
  return;
 } else {
  _TraceLog(4, 58205, i8);
  HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
  STACKTOP = i7;
  return;
 }
}

function _stbi__compute_transparency16(i8, i6, i3) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 24 | 0;
 i7 = i1 + 20 | 0;
 i4 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i2 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = i8;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i11 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
 i8 = Math_imul(HEAP32[HEAP32[i11 >> 2] >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i8;
 HEAP32[i1 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2];
 if (!((HEAP32[i4 >> 2] | 0) == 2 | (HEAP32[i4 >> 2] | 0) == 4)) ___assert_fail(54084, 53449, 4686, 54136);
 i11 = (HEAP32[i4 >> 2] | 0) == 2;
 HEAP32[i2 >> 2] = 0;
 if (i11) {
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   HEAP16[(HEAP32[i1 >> 2] | 0) + 2 >> 1] = (HEAPU16[HEAP32[i1 >> 2] >> 1] | 0 | 0) == (HEAPU16[HEAP32[i7 >> 2] >> 1] | 0 | 0) ? 0 : 65535;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
  }
  STACKTOP = i9;
  return 1;
 }
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
  if ((HEAPU16[HEAP32[i1 >> 2] >> 1] | 0 | 0) == (HEAPU16[HEAP32[i7 >> 2] >> 1] | 0 | 0)) if ((HEAPU16[(HEAP32[i1 >> 2] | 0) + 2 >> 1] | 0 | 0) == (HEAPU16[(HEAP32[i7 >> 2] | 0) + 2 >> 1] | 0 | 0)) if ((HEAPU16[(HEAP32[i1 >> 2] | 0) + 4 >> 1] | 0 | 0) == (HEAPU16[(HEAP32[i7 >> 2] | 0) + 4 >> 1] | 0 | 0)) HEAP16[(HEAP32[i1 >> 2] | 0) + 6 >> 1] = 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 8;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 STACKTOP = i9;
 return 1;
}

function _ma_pcm_deinterleave_f32__reference(i6, i10, i2, i3, i4) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i8 = i1 + 8 | 0;
 i5 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i9 = i1;
 i1 = i1 + 16 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i10;
 i10 = i8;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 i10 = i9;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 while (1) {
  i13 = i9;
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i8;
  i10 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i10 >>> 0 | ((i6 | 0) == (i10 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   i13 = HEAP32[i11 >> 2] | 0;
   i10 = i9;
   i10 = ___muldi3(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i14 = getTempRet0() | 0;
   i14 = _i64Add(i10 | 0, i14 | 0, HEAP32[i1 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   f15 = Math_fround(HEAPF32[i13 + (i14 << 2) >> 2]);
   HEAPF32[(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] = f15;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  i10 = i9;
  i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i9;
  HEAP32[i14 >> 2] = i10;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i12;
 return;
}

function _ma_pcm_interleave_f32__reference(i6, i10, i2, i3, i4) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i8 = i1 + 8 | 0;
 i5 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i9 = i1;
 i1 = i1 + 16 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i10;
 i10 = i8;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 i10 = i9;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 while (1) {
  i13 = i9;
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i8;
  i10 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i10 >>> 0 | ((i6 | 0) == (i10 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   f15 = Math_fround(HEAPF32[(HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2]);
   i13 = HEAP32[i7 >> 2] | 0;
   i10 = i9;
   i10 = ___muldi3(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i14 = getTempRet0() | 0;
   i14 = _i64Add(i10 | 0, i14 | 0, HEAP32[i1 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAPF32[i13 + (i14 << 2) >> 2] = f15;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  i10 = i9;
  i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i9;
  HEAP32[i14 >> 2] = i10;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i12;
 return;
}

function _stbtt__GetGlyfOffset(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 52 + 8 >> 2] | 0) ___assert_fail(52966, 52491, 1557, 52982);
 if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[i8 >> 2] = -1;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] | 0) >= 2) {
  HEAP32[i8 >> 2] = -1;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i4 = HEAP32[i7 >> 2] | 0;
 i2 = HEAP32[i4 + 24 >> 2] | 0;
 i4 = (HEAP32[i4 + 4 >> 2] | 0) + (HEAP32[i4 + 16 >> 2] | 0) | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] | 0)) {
  i4 = i2 + (((_ttUSHORT(i4 + (i3 << 1) | 0) | 0) & 65535) << 1) | 0;
  HEAP32[i5 >> 2] = i4;
  i4 = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0;
  i7 = HEAP32[i7 >> 2] | 0;
  i7 = i4 + (((_ttUSHORT((HEAP32[i7 + 4 >> 2] | 0) + (HEAP32[i7 + 16 >> 2] | 0) + (HEAP32[i6 >> 2] << 1) + 2 | 0) | 0) & 65535) << 1) | 0;
  HEAP32[i1 >> 2] = i7;
 } else {
  i4 = i2 + (_ttULONG(i4 + (i3 << 2) | 0) | 0) | 0;
  HEAP32[i5 >> 2] = i4;
  i4 = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0;
  i7 = HEAP32[i7 >> 2] | 0;
  i7 = i4 + (_ttULONG((HEAP32[i7 + 4 >> 2] | 0) + (HEAP32[i7 + 16 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) + 4 | 0) | 0) | 0;
  HEAP32[i1 >> 2] = i7;
 }
 i7 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = (i7 | 0) == (HEAP32[i1 >> 2] | 0) ? -1 : i7 | 0;
 i8 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _memcpy(i3, i6, i1) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 if ((i1 | 0) >= 8192) {
  _emscripten_memcpy_big(i3 | 0, i6 | 0, i1 | 0) | 0;
  return i3 | 0;
 }
 i5 = i3 | 0;
 i4 = i3 + i1 | 0;
 if ((i3 & 3) == (i6 & 3)) {
  while (i3 & 3) {
   if (!i1) return i5 | 0;
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   i3 = i3 + 1 | 0;
   i6 = i6 + 1 | 0;
   i1 = i1 - 1 | 0;
  }
  i1 = i4 & -4 | 0;
  i2 = i1 - 64 | 0;
  while ((i3 | 0) <= (i2 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
   HEAP32[i3 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
   HEAP32[i3 + 24 >> 2] = HEAP32[i6 + 24 >> 2];
   HEAP32[i3 + 28 >> 2] = HEAP32[i6 + 28 >> 2];
   HEAP32[i3 + 32 >> 2] = HEAP32[i6 + 32 >> 2];
   HEAP32[i3 + 36 >> 2] = HEAP32[i6 + 36 >> 2];
   HEAP32[i3 + 40 >> 2] = HEAP32[i6 + 40 >> 2];
   HEAP32[i3 + 44 >> 2] = HEAP32[i6 + 44 >> 2];
   HEAP32[i3 + 48 >> 2] = HEAP32[i6 + 48 >> 2];
   HEAP32[i3 + 52 >> 2] = HEAP32[i6 + 52 >> 2];
   HEAP32[i3 + 56 >> 2] = HEAP32[i6 + 56 >> 2];
   HEAP32[i3 + 60 >> 2] = HEAP32[i6 + 60 >> 2];
   i3 = i3 + 64 | 0;
   i6 = i6 + 64 | 0;
  }
  while ((i3 | 0) < (i1 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 } else {
  i1 = i4 - 4 | 0;
  while ((i3 | 0) < (i1 | 0)) {
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   HEAP8[i3 + 1 >> 0] = HEAP8[i6 + 1 >> 0] | 0;
   HEAP8[i3 + 2 >> 0] = HEAP8[i6 + 2 >> 0] | 0;
   HEAP8[i3 + 3 >> 0] = HEAP8[i6 + 3 >> 0] | 0;
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 }
 while ((i3 | 0) < (i4 | 0)) {
  HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i6 = i6 + 1 | 0;
 }
 return i5 | 0;
}

function _stbi__compute_transparency(i8, i6, i3) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 24 | 0;
 i7 = i1 + 20 | 0;
 i4 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i2 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = i8;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i11 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
 i8 = Math_imul(HEAP32[HEAP32[i11 >> 2] >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i8;
 HEAP32[i1 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2];
 if (!((HEAP32[i4 >> 2] | 0) == 2 | (HEAP32[i4 >> 2] | 0) == 4)) ___assert_fail(54084, 53449, 4661, 54109);
 i11 = (HEAP32[i4 >> 2] | 0) == 2;
 HEAP32[i2 >> 2] = 0;
 if (i11) {
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   HEAP8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] = (HEAPU8[HEAP32[i1 >> 2] >> 0] | 0 | 0) == (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) ? 0 : 255;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 2;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
  }
  STACKTOP = i9;
  return 1;
 }
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
  if ((HEAPU8[HEAP32[i1 >> 2] >> 0] | 0 | 0) == (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 2 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0 | 0)) HEAP8[(HEAP32[i1 >> 2] | 0) + 3 >> 0] = 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 STACKTOP = i9;
 return 1;
}

function _drmp3_L12_subband_alloc_table(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i11 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] >> 6 & 3;
 if ((HEAP32[i7 >> 2] | 0) == 3) i1 = 0; else if ((HEAP32[i7 >> 2] | 0) == 1) i1 = ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] >> 4 & 3) << 2) + 4 | 0; else i1 = 32;
 HEAP32[i11 >> 2] = i1;
 do if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] & 6 | 0) == 6) {
  HEAP32[i5 >> 2] = 48347;
  HEAP32[i8 >> 2] = 32;
 } else {
  if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] & 8)) {
   HEAP32[i5 >> 2] = 48350;
   HEAP32[i8 >> 2] = 30;
   break;
  }
  HEAP32[i9 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] >> 2 & 3;
  i6 = _drmp3_hdr_bitrate_kbps(HEAP32[i6 >> 2] | 0) | 0;
  i7 = i6 >>> ((HEAP32[i7 >> 2] | 0) != 3 & 1);
  HEAP32[i3 >> 2] = i7;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 0 ? i7 : 192;
  HEAP32[i5 >> 2] = 48359;
  HEAP32[i8 >> 2] = 27;
  if ((HEAP32[i3 >> 2] | 0) >>> 0 < 56) {
   HEAP32[i5 >> 2] = 48371;
   HEAP32[i8 >> 2] = (HEAP32[i9 >> 2] | 0) == 2 ? 12 : 8;
   break;
  }
  if ((HEAP32[i3 >> 2] | 0) >>> 0 >= 96 & (HEAP32[i9 >> 2] | 0) != 1) HEAP32[i8 >> 2] = 30;
 } while (0);
 HEAP8[(HEAP32[i10 >> 2] | 0) + 768 >> 0] = HEAP32[i8 >> 2];
 i9 = HEAP32[i8 >> 2] | 0;
 i11 = HEAP32[i11 >> 2] | 0;
 HEAP8[(HEAP32[i10 >> 2] | 0) + 769 >> 0] = (i11 | 0) > (i9 | 0) ? i9 | 0 : i11 | 0;
 STACKTOP = i12;
 return HEAP32[i5 >> 2] | 0;
}

function _ma_pcm_interleave_s32__reference(i6, i10, i2, i3, i4) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i8 = i1 + 8 | 0;
 i5 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i9 = i1;
 i1 = i1 + 16 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i10;
 i10 = i8;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 i10 = i9;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 while (1) {
  i13 = i9;
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i8;
  i10 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i10 >>> 0 | ((i6 | 0) == (i10 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   i10 = HEAP32[(HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0;
   i13 = HEAP32[i7 >> 2] | 0;
   i6 = i9;
   i6 = ___muldi3(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i14 = getTempRet0() | 0;
   i14 = _i64Add(i6 | 0, i14 | 0, HEAP32[i1 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAP32[i13 + (i14 << 2) >> 2] = i10;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  i10 = i9;
  i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i9;
  HEAP32[i14 >> 2] = i10;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i12;
 return;
}

function _ma_pcm_interleave_s16__reference(i6, i10, i2, i3, i4) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i8 = i1 + 8 | 0;
 i5 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i9 = i1;
 i1 = i1 + 16 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i10;
 i10 = i8;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 i10 = i9;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 while (1) {
  i13 = i9;
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i8;
  i10 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i10 >>> 0 | ((i6 | 0) == (i10 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   i10 = HEAP16[(HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (HEAP32[i9 >> 2] << 1) >> 1] | 0;
   i13 = HEAP32[i7 >> 2] | 0;
   i6 = i9;
   i6 = ___muldi3(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i14 = getTempRet0() | 0;
   i14 = _i64Add(i6 | 0, i14 | 0, HEAP32[i1 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAP16[i13 + (i14 << 1) >> 1] = i10;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  i10 = i9;
  i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i9;
  HEAP32[i14 >> 2] = i10;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i12;
 return;
}

function _ma_get_standard_channel_map_rfc3551(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 switch (HEAP32[i5 >> 2] | 0) {
 case 1:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 1;
   break;
  }
 case 2:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   break;
  }
 case 3:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   break;
  }
 case 4:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 10;
   break;
  }
 case 5:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 7;
   break;
  }
 case 6:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 11;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 12;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 10;
   break;
  }
 default:
  {}
 }
 if ((HEAP32[i5 >> 2] | 0) >>> 0 <= 8) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i1 >> 2] = 6;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 32) break;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP8[(HEAP32[i3 >> 2] | 0) + i5 >> 0] = 20 + ((i5 | 0) - 6);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_s16__reference(i6, i10, i2, i3, i4) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i8 = i1 + 8 | 0;
 i5 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i9 = i1;
 i1 = i1 + 16 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i10;
 i10 = i8;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 i10 = i9;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 while (1) {
  i13 = i9;
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i8;
  i10 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i10 >>> 0 | ((i6 | 0) == (i10 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   i13 = HEAP32[i11 >> 2] | 0;
   i10 = i9;
   i10 = ___muldi3(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i14 = getTempRet0() | 0;
   i14 = _i64Add(i10 | 0, i14 | 0, HEAP32[i1 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAP16[(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (HEAP32[i9 >> 2] << 1) >> 1] = HEAP16[i13 + (i14 << 1) >> 1] | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  i10 = i9;
  i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i9;
  HEAP32[i14 >> 2] = i10;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i12;
 return;
}

function _ma_pcm_deinterleave_s32__reference(i6, i10, i2, i3, i4) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i8 = i1 + 8 | 0;
 i5 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i9 = i1;
 i1 = i1 + 16 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i10;
 i10 = i8;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 i10 = i9;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 while (1) {
  i13 = i9;
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i8;
  i10 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i10 >>> 0 | ((i6 | 0) == (i10 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   i13 = HEAP32[i11 >> 2] | 0;
   i10 = i9;
   i10 = ___muldi3(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i14 = getTempRet0() | 0;
   i14 = _i64Add(i10 | 0, i14 | 0, HEAP32[i1 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] = HEAP32[i13 + (i14 << 2) >> 2];
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  i10 = i9;
  i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i9;
  HEAP32[i14 >> 2] = i10;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i12;
 return;
}

function _GifPartition(i2, i3, i5, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i9 = i14 + 32 | 0;
 i15 = i14 + 28 | 0;
 i11 = i14 + 24 | 0;
 i7 = i14 + 20 | 0;
 i16 = i14 + 16 | 0;
 i10 = i14 + 12 | 0;
 i13 = i14 + 8 | 0;
 i12 = i14 + 36 | 0;
 i8 = i14 + 4 | 0;
 i6 = i14;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i15 >> 2] = i3;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i16 >> 2] = i4;
 HEAP32[i10 >> 2] = HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i16 >> 2] << 2) + (HEAP32[i7 >> 2] | 0)) >> 0];
 _GifSwapPixels(HEAP32[i9 >> 2] | 0, HEAP32[i16 >> 2] | 0, (HEAP32[i11 >> 2] | 0) - 1 | 0);
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 HEAP8[i12 >> 0] = 0;
 HEAP32[i8 >> 2] = HEAP32[i15 >> 2];
 while (1) {
  i1 = HEAP32[i9 >> 2] | 0;
  if ((HEAP32[i8 >> 2] | 0) >= ((HEAP32[i11 >> 2] | 0) - 1 | 0)) break;
  HEAP32[i6 >> 2] = HEAPU8[i1 + ((HEAP32[i8 >> 2] << 2) + (HEAP32[i7 >> 2] | 0)) >> 0];
  if ((HEAP32[i6 >> 2] | 0) < (HEAP32[i10 >> 2] | 0)) {
   _GifSwapPixels(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0);
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  } else if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) {
   if (HEAP8[i12 >> 0] & 1) {
    _GifSwapPixels(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0);
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
   HEAP8[i12 >> 0] = (HEAP8[i12 >> 0] & 1 ^ 1) & 1;
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 _GifSwapPixels(i1, HEAP32[i13 >> 2] | 0, (HEAP32[i11 >> 2] | 0) - 1 | 0);
 STACKTOP = i14;
 return HEAP32[i13 >> 2] | 0;
}

function _drmp3_src_init(i4, i2, i7, i6) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i1 >> 2] = i6;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i9 >> 2] = 0;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 _memset(HEAP32[i1 >> 2] | 0, 0, 5176) | 0;
 if ((HEAP32[i5 >> 2] | 0) == 0 | (HEAP32[i3 >> 2] | 0) == 0) {
  HEAP32[i9 >> 2] = 0;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) >>> 0 <= 2) {
  i7 = HEAP32[i1 >> 2] | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  HEAP32[i7 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
  HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] = HEAP32[i3 >> 2];
  HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] = HEAP32[i8 >> 2];
  if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0) >>> 0 > 512) i10 = 10; else if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0)) i10 = 10;
  if ((i10 | 0) == 10) HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] = 512;
  i10 = HEAP32[i1 >> 2] | 0;
  _drmp3_src_cache_init(i10 | 0, i10 + 1052 | 0);
  HEAP32[i9 >> 2] = 1;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i9 >> 2] = 0;
 i10 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _GetShapesTexture(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i4 = i1 + 72 | 0;
 i3 = i1 + 56 | 0;
 i5 = i1 + 16 | 0;
 if (HEAP32[44137] | 0) {
  HEAP32[i2 >> 2] = HEAP32[44137];
  HEAP32[i2 + 4 >> 2] = HEAP32[44138];
  HEAP32[i2 + 8 >> 2] = HEAP32[44139];
  HEAP32[i2 + 12 >> 2] = HEAP32[44140];
  HEAP32[i2 + 16 >> 2] = HEAP32[44141];
  STACKTOP = i6;
  return;
 }
 _GetFontDefault(i4);
 i4 = i4 + 8 | 0;
 HEAP32[44137] = HEAP32[i4 >> 2];
 HEAP32[44138] = HEAP32[i4 + 4 >> 2];
 HEAP32[44139] = HEAP32[i4 + 8 >> 2];
 HEAP32[44140] = HEAP32[i4 + 12 >> 2];
 HEAP32[44141] = HEAP32[i4 + 16 >> 2];
 _GetFontDefault(i5);
 i5 = (HEAP32[i5 + 28 >> 2] | 0) + 1520 | 0;
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 f7 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + Math_fround(1.0));
 HEAPF32[i1 >> 2] = f7;
 f7 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + Math_fround(1.0));
 HEAPF32[i1 + 4 >> 2] = f7;
 f7 = Math_fround(Math_fround(HEAPF32[i3 + 8 >> 2]) - Math_fround(2.0));
 HEAPF32[i1 + 8 >> 2] = f7;
 f7 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) - Math_fround(2.0));
 HEAPF32[i1 + 12 >> 2] = f7;
 HEAP32[44133] = HEAP32[i1 >> 2];
 HEAP32[44134] = HEAP32[i1 + 4 >> 2];
 HEAP32[44135] = HEAP32[i1 + 8 >> 2];
 HEAP32[44136] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 >> 2] = HEAP32[44137];
 HEAP32[i2 + 4 >> 2] = HEAP32[44138];
 HEAP32[i2 + 8 >> 2] = HEAP32[44139];
 HEAP32[i2 + 12 >> 2] = HEAP32[44140];
 HEAP32[i2 + 16 >> 2] = HEAP32[44141];
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_u8__reference(i6, i10, i2, i3, i4) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i8 = i1 + 8 | 0;
 i5 = i1 + 28 | 0;
 i7 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i9 = i1;
 i1 = i1 + 16 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i10;
 i10 = i8;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 i10 = i9;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 while (1) {
  i13 = i9;
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i8;
  i10 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i6 >>> 0 < i10 >>> 0 | ((i6 | 0) == (i10 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
   i13 = HEAP32[i11 >> 2] | 0;
   i10 = i9;
   i10 = ___muldi3(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
   i14 = getTempRet0() | 0;
   i14 = _i64Add(i10 | 0, i14 | 0, HEAP32[i1 >> 2] | 0, 0) | 0;
   getTempRet0() | 0;
   HEAP8[(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] = HEAP8[i13 + i14 >> 0] | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  i10 = i9;
  i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i9;
  HEAP32[i14 >> 2] = i10;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i12;
 return;
}

function _stbi__zexpand(i7, i9, i3) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = STACKTOP;
 i11 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i11 + 28 | 0;
 i8 = i11 + 24 | 0;
 i12 = i11 + 20 | 0;
 i4 = i11 + 16 | 0;
 i5 = i11 + 12 | 0;
 i1 = i11 + 8 | 0;
 i2 = i11 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i12 >> 2] = i9;
 HEAP32[i4 >> 2] = i3;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = HEAP32[i12 >> 2];
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] | 0)) {
  i12 = _stbi__err(54346) | 0;
  HEAP32[i6 >> 2] = i12;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i10;
  return i12 | 0;
 }
 i12 = HEAP32[i8 >> 2] | 0;
 HEAP32[i1 >> 2] = (HEAP32[i12 + 16 >> 2] | 0) - (HEAP32[i12 + 20 >> 2] | 0);
 i12 = HEAP32[i8 >> 2] | 0;
 i12 = (HEAP32[i12 + 24 >> 2] | 0) - (HEAP32[i12 + 20 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = i12;
 HEAP32[i2 >> 2] = i12;
 while (1) {
  if (((HEAP32[i1 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0) <= (HEAP32[i2 >> 2] | 0)) break;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] << 1;
 }
 i12 = _realloc(HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i12;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i12 = _stbi__err(53511) | 0;
  HEAP32[i6 >> 2] = i12;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i10;
  return i12 | 0;
 } else {
  HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = HEAP32[i5 >> 2];
  HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
  HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i2 >> 2] | 0);
  HEAP32[i6 >> 2] = 1;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i10;
  return i12 | 0;
 }
 return 0;
}

function _stbtt_GetGlyphHMetrics(i4, i3, i2, i5) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i10 = i1;
 i6 = i1 + 16 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i10 >> 2] = i5;
 i1 = HEAP32[i9 >> 2] | 0;
 i1 = _ttUSHORT((HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i1 + 28 >> 2] | 0) + 34 | 0) | 0;
 HEAP16[i6 >> 1] = i1;
 i1 = (HEAP32[i7 >> 2] | 0) != 0;
 if ((HEAP32[i8 >> 2] | 0) < (HEAPU16[i6 >> 1] | 0)) {
  if (i1) {
   i6 = HEAP32[i9 >> 2] | 0;
   i6 = (_ttSHORT((HEAP32[i6 + 4 >> 2] | 0) + (HEAP32[i6 + 32 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[i7 >> 2] >> 2] = i6;
  }
  if (!(HEAP32[i10 >> 2] | 0)) {
   STACKTOP = i11;
   return;
  }
  i9 = HEAP32[i9 >> 2] | 0;
  i9 = (_ttSHORT((HEAP32[i9 + 4 >> 2] | 0) + (HEAP32[i9 + 32 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) + 2 | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[i10 >> 2] >> 2] = i9;
  STACKTOP = i11;
  return;
 } else {
  if (i1) {
   i5 = HEAP32[i9 >> 2] | 0;
   i5 = (_ttSHORT((HEAP32[i5 + 4 >> 2] | 0) + (HEAP32[i5 + 32 >> 2] | 0) + ((HEAPU16[i6 >> 1] | 0) - 1 << 2) | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[i7 >> 2] >> 2] = i5;
  }
  if (!(HEAP32[i10 >> 2] | 0)) {
   STACKTOP = i11;
   return;
  }
  i7 = HEAP32[i9 >> 2] | 0;
  i9 = HEAPU16[i6 >> 1] | 0;
  i9 = (_ttSHORT((HEAP32[i7 + 4 >> 2] | 0) + (HEAP32[i7 + 32 >> 2] | 0) + (i9 << 2) + ((HEAP32[i8 >> 2] | 0) - i9 << 1) | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[i10 >> 2] >> 2] = i9;
  STACKTOP = i11;
  return;
 }
}

function _stbi__loadf_main(i3, i4, i5, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i14 = STACKTOP;
 i9 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i11 = i9 + 40 | 0;
 i16 = i9 + 36 | 0;
 i12 = i9 + 32 | 0;
 i13 = i9 + 28 | 0;
 i6 = i9 + 24 | 0;
 i8 = i9 + 20 | 0;
 i10 = i9 + 16 | 0;
 i7 = i9;
 HEAP32[i16 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 i15 = (_stbi__hdr_test(HEAP32[i16 >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i16 >> 2] | 0;
 i2 = HEAP32[i12 >> 2] | 0;
 i3 = HEAP32[i13 >> 2] | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 if (i15) {
  i16 = _stbi__hdr_load(i1, i2, i3, i4, i5, i9 + 4 | 0) | 0;
  HEAP32[i7 >> 2] = i16;
  if (HEAP32[i7 >> 2] | 0) _stbi__float_postprocess(HEAP32[i7 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0);
  HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
  i16 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i14;
  return i16 | 0;
 }
 i16 = _stbi__load_and_postprocess_8bit(i1, i2, i3, i4, i5) | 0;
 HEAP32[i10 >> 2] = i16;
 if (!(HEAP32[i10 >> 2] | 0)) {
  i16 = (_stbi__err(53520) | 0) != 0;
  HEAP32[i11 >> 2] = i16 ? 0 : 0;
  i16 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i14;
  return i16 | 0;
 }
 if (HEAP32[i8 >> 2] | 0) i1 = HEAP32[i8 >> 2] | 0; else i1 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0;
 i16 = _stbi__ldr_to_hdr(HEAP32[i10 >> 2] | 0, HEAP32[HEAP32[i12 >> 2] >> 2] | 0, HEAP32[HEAP32[i13 >> 2] >> 2] | 0, i1) | 0;
 HEAP32[i11 >> 2] = i16;
 i16 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i14;
 return i16 | 0;
}

function _stbv_next_segment(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i4 >> 2] = i2;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 1384 >> 2] | 0) {
  HEAP32[i5 >> 2] = 0;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 1380 >> 2] | 0) == -1) {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i2 + 1388 >> 2] = (HEAP32[i2 + 1116 >> 2] | 0) - 1;
  i2 = (_stbv_start_page(HEAP32[i4 >> 2] | 0) | 0) != 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (!i2) {
   HEAP32[i1 + 1384 >> 2] = 1;
   HEAP32[i5 >> 2] = 0;
   i5 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i6;
   return i5 | 0;
  }
  if (!(HEAPU8[i1 + 1375 >> 0] & 1)) {
   i4 = _stbv_error(HEAP32[i4 >> 2] | 0, 32) | 0;
   HEAP32[i5 >> 2] = i4;
   i5 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i6;
   return i5 | 0;
  }
 }
 i7 = HEAP32[i4 >> 2] | 0;
 i1 = i7 + 1120 | 0;
 i7 = i7 + 1380 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = i2 + 1;
 HEAP32[i3 >> 2] = HEAPU8[i1 + i2 >> 0];
 if ((HEAP32[i3 >> 2] | 0) < 255) {
  HEAP32[(HEAP32[i4 >> 2] | 0) + 1384 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  HEAP32[i7 + 1388 >> 2] = (HEAP32[i7 + 1380 >> 2] | 0) - 1;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 1380 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 1116 >> 2] | 0)) HEAP32[(HEAP32[i4 >> 2] | 0) + 1380 >> 2] = -1;
 if (HEAPU8[(HEAP32[i4 >> 2] | 0) + 1376 >> 0] | 0) ___assert_fail(47269, 47181, 1522, 47290);
 HEAP8[(HEAP32[i4 >> 2] | 0) + 1376 >> 0] = HEAP32[i3 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 i7 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function _ma_get_standard_channel_map_sndio(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 switch (HEAP32[i5 >> 2] | 0) {
 case 1:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 1;
   break;
  }
 case 2:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   break;
  }
 case 3:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 4;
   break;
  }
 case 4:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   break;
  }
 case 5:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   break;
  }
 default:
  {
   HEAP8[HEAP32[i3 >> 2] >> 0] = 2;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 3;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] = 6;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] = 7;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 4 >> 0] = 4;
   HEAP8[(HEAP32[i3 >> 2] | 0) + 5 >> 0] = 5;
  }
 }
 if ((HEAP32[i5 >> 2] | 0) >>> 0 <= 6) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i1 >> 2] = 6;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 32) break;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP8[(HEAP32[i3 >> 2] | 0) + i5 >> 0] = 20 + ((i5 | 0) - 6);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i6;
 return;
}

function _ma_copy_and_apply_volume_factor_pcm_frames(i10, i8, i6, i5, i1, f3) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 f3 = Math_fround(f3);
 var i2 = 0, i4 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i12 + 20 | 0;
 i9 = i12 + 16 | 0;
 i7 = i12 + 12 | 0;
 i13 = i12 + 8 | 0;
 i2 = i12 + 4 | 0;
 i4 = i12;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i2 >> 2] = i1;
 HEAPF32[i4 >> 2] = f3;
 switch (HEAP32[i13 >> 2] | 0) {
 case 1:
  {
   _ma_copy_and_apply_volume_factor_pcm_frames_u8(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i2 >> 2] | 0, Math_fround(HEAPF32[i4 >> 2]));
   STACKTOP = i12;
   return;
  }
 case 2:
  {
   _ma_copy_and_apply_volume_factor_pcm_frames_s16(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i2 >> 2] | 0, Math_fround(HEAPF32[i4 >> 2]));
   STACKTOP = i12;
   return;
  }
 case 3:
  {
   _ma_copy_and_apply_volume_factor_pcm_frames_s24(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i2 >> 2] | 0, Math_fround(HEAPF32[i4 >> 2]));
   STACKTOP = i12;
   return;
  }
 case 4:
  {
   _ma_copy_and_apply_volume_factor_pcm_frames_s32(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i2 >> 2] | 0, Math_fround(HEAPF32[i4 >> 2]));
   STACKTOP = i12;
   return;
  }
 case 5:
  {
   _ma_copy_and_apply_volume_factor_pcm_frames_f32(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i2 >> 2] | 0, Math_fround(HEAPF32[i4 >> 2]));
   STACKTOP = i12;
   return;
  }
 default:
  {
   STACKTOP = i12;
   return;
  }
 }
}

function _drmp3_seek_to_pcm_frame__brute_force(i4, i2, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 HEAP32[i5 >> 2] = i4;
 i4 = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = i3;
 if (!(HEAP32[i5 >> 2] | 0)) ___assert_fail(48609, 48387, 3192, 48898);
 i3 = i1;
 i4 = (HEAP32[i5 >> 2] | 0) + 15944 | 0;
 if ((HEAP32[i3 >> 2] | 0) == (HEAP32[i4 >> 2] | 0) ? (HEAP32[i3 + 4 >> 2] | 0) == (HEAP32[i4 + 4 >> 2] | 0) : 0) {
  HEAP32[i6 >> 2] = 1;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i3 = i1;
 i8 = HEAP32[i3 + 4 >> 2] | 0;
 i4 = (HEAP32[i5 >> 2] | 0) + 15944 | 0;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 if (i8 >>> 0 < i2 >>> 0 ? 1 : (i8 | 0) == (i2 | 0) ? (HEAP32[i3 >> 2] | 0) >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0 : 0) if (!(_drmp3_seek_to_start_of_stream(HEAP32[i5 >> 2] | 0) | 0)) {
  HEAP32[i6 >> 2] = 0;
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i8 | 0;
 }
 i4 = i1;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 i8 = (HEAP32[i5 >> 2] | 0) + 15944 | 0;
 i3 = HEAP32[i8 + 4 >> 2] | 0;
 if (!(i2 >>> 0 > i3 >>> 0 ? 1 : (i2 | 0) == (i3 | 0) ? (HEAP32[i4 >> 2] | 0) >>> 0 >= (HEAP32[i8 >> 2] | 0) >>> 0 : 0)) ___assert_fail(48935, 48387, 3209, 48898);
 i8 = HEAP32[i5 >> 2] | 0;
 i5 = i8 | 0;
 i4 = i1;
 i8 = i8 + 15944 | 0;
 i8 = _i64Subtract(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0) | 0;
 i8 = _drmp3_seek_forward_by_pcm_frames__brute_force(i5, i8, getTempRet0() | 0) | 0;
 HEAP32[i6 >> 2] = i8;
 i8 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i7;
 return i8 | 0;
}

function _stbtt__find_table(i2, i3, i8) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i13 = i1 + 20 | 0;
 i9 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i9 >> 2] = i8;
 i8 = (_ttUSHORT((HEAP32[i10 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) + 4 | 0) | 0) & 65535;
 HEAP32[i6 >> 2] = i8;
 HEAP32[i7 >> 2] = (HEAP32[i13 >> 2] | 0) + 12;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
   i1 = 9;
   break;
  }
  HEAP32[i5 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i4 >> 2] << 4);
  if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] | 0) == (HEAP8[HEAP32[i9 >> 2] >> 0] | 0)) if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) == (HEAP8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] | 0)) if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0) == (HEAP8[(HEAP32[i9 >> 2] | 0) + 2 >> 0] | 0)) if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) + 3 >> 0] | 0) == (HEAP8[(HEAP32[i9 >> 2] | 0) + 3 >> 0] | 0)) {
   i1 = 7;
   break;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 7) {
  i13 = _ttULONG((HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) + 8 | 0) | 0;
  HEAP32[i11 >> 2] = i13;
  i13 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i13 | 0;
 } else if ((i1 | 0) == 9) {
  HEAP32[i11 >> 2] = 0;
  i13 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 return 0;
}

function _DrawText(i10, i6, i8, i4, i15) {
 i10 = i10 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, f3 = f0, f5 = f0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i19 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i16 = i1 + 152 | 0;
 i18 = i1 + 144 | 0;
 i14 = i1 + 108 | 0;
 i11 = i1 + 104 | 0;
 i7 = i1 + 100 | 0;
 i9 = i1 + 96 | 0;
 i12 = i1 + 92 | 0;
 i20 = i1 + 56 | 0;
 i17 = i1 + 48 | 0;
 i2 = i1 + 40 | 0;
 i13 = i1 + 36 | 0;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i12 >> 2] = i4;
 _GetFontDefault(i20);
 if (!(HEAP32[i20 + 8 >> 2] | 0)) {
  STACKTOP = i19;
  return;
 }
 f5 = Math_fround(HEAP32[i7 >> 2] | 0);
 HEAPF32[i17 >> 2] = f5;
 f5 = Math_fround(HEAP32[i9 >> 2] | 0);
 HEAPF32[i17 + 4 >> 2] = f5;
 HEAP32[i2 >> 2] = 10;
 if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i2 >> 2] | 0)) HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i13 >> 2] = (HEAP32[i12 >> 2] | 0) / (HEAP32[i2 >> 2] | 0) | 0;
 _GetFontDefault(i1);
 i6 = HEAP32[i11 >> 2] | 0;
 f5 = Math_fround(HEAP32[i12 >> 2] | 0);
 f3 = Math_fround(HEAP32[i13 >> 2] | 0);
 i4 = i14;
 i2 = i4 + 36 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  i4 = i4 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i4 | 0) < (i2 | 0));
 HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
 HEAP8[i16 >> 0] = HEAP8[i15 >> 0] | 0;
 HEAP8[i16 + 1 >> 0] = HEAP8[i15 + 1 >> 0] | 0;
 HEAP8[i16 + 2 >> 0] = HEAP8[i15 + 2 >> 0] | 0;
 HEAP8[i16 + 3 >> 0] = HEAP8[i15 + 3 >> 0] | 0;
 _DrawTextEx(i14, i6, i18, f5, f3, i16);
 STACKTOP = i19;
 return;
}

function ___vfprintf_internal(i17, i12, i4, i13, i16) {
 i17 = i17 | 0;
 i12 = i12 | 0;
 i4 = i4 | 0;
 i13 = i13 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i11 = i1 + 208 | 0;
 i15 = i1 + 160 | 0;
 i14 = i1 + 80 | 0;
 i2 = i15;
 i3 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 if ((_printf_core(0, i12, i11, i14, i15, i13, i16) | 0) < 0) i1 = -1; else {
  if ((HEAP32[i17 + 76 >> 2] | 0) > -1) i10 = ___lockfile(i17) | 0; else i10 = 0;
  i2 = HEAP32[i17 >> 2] | 0;
  i9 = i2 & 32;
  if ((HEAP8[i17 + 74 >> 0] | 0) < 1) HEAP32[i17 >> 2] = i2 & -33;
  i5 = i17 + 48 | 0;
  if (!(HEAP32[i5 >> 2] | 0)) {
   i4 = i17 + 44 | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = i1;
   i6 = i17 + 28 | 0;
   HEAP32[i6 >> 2] = i1;
   i8 = i17 + 20 | 0;
   HEAP32[i8 >> 2] = i1;
   HEAP32[i5 >> 2] = 80;
   i7 = i17 + 16 | 0;
   HEAP32[i7 >> 2] = i1 + 80;
   i2 = _printf_core(i17, i12, i11, i14, i15, i13, i16) | 0;
   if (i3) {
    FUNCTION_TABLE_iiii[HEAP32[i17 + 36 >> 2] & 15](i17, 0, 0) | 0;
    i2 = (HEAP32[i8 >> 2] | 0) == 0 ? -1 : i2;
    HEAP32[i4 >> 2] = i3;
    HEAP32[i5 >> 2] = 0;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    HEAP32[i8 >> 2] = 0;
   }
  } else i2 = _printf_core(i17, i12, i11, i14, i15, i13, i16) | 0;
  i1 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i1 | i9;
  if (i10 | 0) ___unlockfile(i17);
  i1 = (i1 & 32 | 0) == 0 ? i2 : -1;
 }
 STACKTOP = i18;
 return i1 | 0;
}

function _stbi__load_and_postprocess_8bit(i4, i5, i6, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i1 + 40 | 0;
 i16 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i14 = i1 + 28 | 0;
 i8 = i1 + 24 | 0;
 i9 = i1 + 20 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[i16 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 i6 = _stbi__load_main(HEAP32[i16 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, i10, 8) | 0;
 HEAP32[i11 >> 2] = i6;
 if (!(HEAP32[i11 >> 2] | 0)) {
  HEAP32[i12 >> 2] = 0;
  i16 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i15;
  return i16 | 0;
 }
 if ((HEAP32[i10 >> 2] | 0) != 8) {
  if ((HEAP32[i10 >> 2] | 0) != 16) ___assert_fail(53423, 53449, 1129, 53479);
  if (!(HEAP32[i9 >> 2] | 0)) i1 = HEAP32[HEAP32[i8 >> 2] >> 2] | 0; else i1 = HEAP32[i9 >> 2] | 0;
  i16 = _stbi__convert_16_to_8(HEAP32[i11 >> 2] | 0, HEAP32[HEAP32[i13 >> 2] >> 2] | 0, HEAP32[HEAP32[i14 >> 2] >> 2] | 0, i1) | 0;
  HEAP32[i11 >> 2] = i16;
  HEAP32[i10 >> 2] = 8;
 }
 if (0) {
  if (HEAP32[i9 >> 2] | 0) i1 = HEAP32[i9 >> 2] | 0; else i1 = HEAP32[HEAP32[i8 >> 2] >> 2] | 0;
  HEAP32[i7 >> 2] = i1;
  _stbi__vertical_flip(HEAP32[i11 >> 2] | 0, HEAP32[HEAP32[i13 >> 2] >> 2] | 0, HEAP32[HEAP32[i14 >> 2] >> 2] | 0, HEAP32[i7 >> 2] | 0);
 }
 HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
 i16 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _ma_pcm_converter__post_format_converter_on_read_deinterleaved(i2, i1, i5, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i6 + 24 | 0;
 i8 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i3 = i6 + 4 | 0;
 i7 = i6;
 HEAP32[i6 + 20 >> 2] = i2;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i10 >> 2] = i5;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i3 >> 2] = HEAP32[i9 >> 2];
 if (!(HEAP32[i3 >> 2] | 0)) ___assert_fail(37276, 36381, 32144, 44997);
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 if (!(HEAP32[i7 >> 2] | 0)) ___assert_fail(44136, 36381, 32147, 44997);
 i2 = HEAP32[i7 >> 2] | 0;
 if (!((HEAPU8[(HEAP32[i7 >> 2] | 0) + 46464 >> 0] | 0) >>> 5 & 1)) {
  i10 = _ma_channel_router_read_deinterleaved(i2 + 120 | 0, HEAP32[i8 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  getTempRet0() | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = HEAP32[i7 >> 2] | 0;
 if ((HEAPU8[i2 + 46464 >> 0] | 0) >>> 4 & 1 | 0) {
  i10 = _ma_src_read_deinterleaved(i1 + 4352 | 0, HEAP32[i8 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  getTempRet0() | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 } else {
  i10 = _ma_channel_router_read_deinterleaved(i1 + 120 | 0, HEAP32[i8 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  getTempRet0() | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 return 0;
}

function _ma_pcm_converter__channel_router_on_read_deinterleaved(i3, i1, i5, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i6 + 24 | 0;
 i8 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i2 = i6 + 4 | 0;
 i7 = i6;
 HEAP32[i6 + 20 >> 2] = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i10 >> 2] = i5;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
 if (!(HEAP32[i2 >> 2] | 0)) ___assert_fail(37276, 36381, 32189, 44081);
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i2 >> 2] >> 2];
 if (!(HEAP32[i7 >> 2] | 0)) ___assert_fail(44136, 36381, 32192, 44081);
 i2 = HEAP32[i7 >> 2] | 0;
 if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 46464 >> 0] | 0) >>> 5 & 1 | 0) {
  i10 = _ma_format_converter_read_deinterleaved(i2 + 8 | 0, HEAP32[i8 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  getTempRet0() | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = HEAP32[i7 >> 2] | 0;
 if ((HEAPU8[i2 + 46464 >> 0] | 0) >>> 4 & 1 | 0) {
  i10 = _ma_src_read_deinterleaved(i1 + 4352 | 0, HEAP32[i8 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  getTempRet0() | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 } else {
  i10 = _ma_format_converter_read_deinterleaved(i1 + 8 | 0, HEAP32[i8 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  getTempRet0() | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 return 0;
}

function _stbv_maybe_start_packet(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i4 >> 2] = i2;
 do if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 1380 >> 2] | 0) == -1) {
  i2 = (_stbv_get8(HEAP32[i4 >> 2] | 0) | 0) & 255;
  HEAP32[i3 >> 2] = i2;
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 96 >> 2] | 0) {
   HEAP32[i5 >> 2] = 0;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if (79 != (HEAP32[i3 >> 2] | 0)) {
   i4 = _stbv_error(i1, 30) | 0;
   HEAP32[i5 >> 2] = i4;
   break;
  }
  i3 = 103 != ((_stbv_get8(i1) | 0) & 255 | 0);
  i1 = HEAP32[i4 >> 2] | 0;
  if (i3) {
   i4 = _stbv_error(i1, 30) | 0;
   HEAP32[i5 >> 2] = i4;
   break;
  }
  i3 = 103 != ((_stbv_get8(i1) | 0) & 255 | 0);
  i1 = HEAP32[i4 >> 2] | 0;
  if (i3) {
   i4 = _stbv_error(i1, 30) | 0;
   HEAP32[i5 >> 2] = i4;
   break;
  }
  i3 = 83 != ((_stbv_get8(i1) | 0) & 255 | 0);
  i1 = HEAP32[i4 >> 2] | 0;
  if (i3) {
   i4 = _stbv_error(i1, 30) | 0;
   HEAP32[i5 >> 2] = i4;
   break;
  }
  if (!(_stbv_start_page_no_capturepattern(i1) | 0)) {
   HEAP32[i5 >> 2] = 0;
   break;
  }
  if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1375 >> 0] | 0) & 1 | 0) {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 1384 >> 2] = 0;
   HEAP8[(HEAP32[i4 >> 2] | 0) + 1376 >> 0] = 0;
   i4 = _stbv_error(HEAP32[i4 >> 2] | 0, 32) | 0;
   HEAP32[i5 >> 2] = i4;
  } else i6 = 16;
 } else i6 = 16; while (0);
 if ((i6 | 0) == 16) {
  i6 = _stbv_start_packet(HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = i6;
 }
 STACKTOP = i7;
 return HEAP32[i5 >> 2] | 0;
}

function _jar_xm_autovibrato(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = i8;
  return;
 }
 if (!(HEAPU8[(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) + 241 >> 0] | 0)) {
  STACKTOP = i8;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2];
 HEAPF32[i7 >> 2] = Math_fround(1.0);
 if ((HEAPU16[(HEAP32[i3 >> 2] | 0) + 48 >> 1] | 0 | 0) < (HEAPU8[(HEAP32[i6 >> 2] | 0) + 240 >> 0] | 0 | 0)) {
  f9 = Math_fround(HEAPU16[(HEAP32[i3 >> 2] | 0) + 48 >> 1] | 0);
  f9 = Math_fround(Math_fround(Math_fround(f9 / Math_fround(HEAPU8[(HEAP32[i6 >> 2] | 0) + 240 >> 0] | 0)) * Math_fround(1.0)) + Math_fround(0.0));
  HEAPF32[i7 >> 2] = f9;
 }
 i2 = (HEAP32[i3 >> 2] | 0) + 48 | 0;
 i4 = HEAP16[i2 >> 1] | 0;
 HEAP16[i2 >> 1] = i4 + 1 << 16 >> 16;
 i4 = (Math_imul(i4 & 65535, HEAPU8[(HEAP32[i6 >> 2] | 0) + 242 >> 0] | 0) | 0) >> 2;
 HEAP32[i1 >> 2] = i4;
 f9 = Math_fround(Math_fround(_jar_xm_waveform(HEAP32[(HEAP32[i6 >> 2] | 0) + 236 >> 2] | 0, HEAP32[i1 >> 2] & 255)) * Math_fround(.25));
 f9 = Math_fround(Math_fround(f9 * Math_fround(HEAPU8[(HEAP32[i6 >> 2] | 0) + 241 >> 0] | 0)) / Math_fround(15.0));
 f9 = Math_fround(f9 * Math_fround(HEAPF32[i7 >> 2]));
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 68 >> 2] = f9;
 _jar_xm_update_frequency(HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0);
 STACKTOP = i8;
 return;
}

function _stbtt__hheap_alloc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i10 = i4 + 16 | 0;
 i5 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i6 = i4;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i4 + 12 >> 2] = i3;
 i1 = HEAP32[i8 >> 2] | 0;
 if (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[i5 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
  HEAP32[i9 >> 2] = HEAP32[i5 >> 2];
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 do if (!(HEAP32[i1 + 8 >> 2] | 0)) {
  if ((HEAP32[i10 >> 2] | 0) >>> 0 < 32) i1 = 2e3; else i1 = (HEAP32[i10 >> 2] | 0) >>> 0 < 128 ? 800 : 100;
  HEAP32[i7 >> 2] = i1;
  i5 = _malloc(4 + (Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) | 0) | 0;
  HEAP32[i6 >> 2] = i5;
  if (HEAP32[i6 >> 2] | 0) {
   HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
   HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i6 >> 2];
   HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = HEAP32[i7 >> 2];
   break;
  }
  HEAP32[i9 >> 2] = 0;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } while (0);
 i7 = (HEAP32[i8 >> 2] | 0) + 8 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 i10 = (HEAP32[HEAP32[i8 >> 2] >> 2] | 0) + 4 + (Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 i10 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _drmp3_L3_restore_reservoir(i3, i2, i5, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i10 >> 2] = i4;
 i5 = HEAP32[i7 >> 2] | 0;
 HEAP32[i8 >> 2] = ((HEAP32[i5 + 8 >> 2] | 0) - (HEAP32[i5 + 4 >> 2] | 0) | 0) / 8 | 0;
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 6144 >> 2] | 0) > (HEAP32[i10 >> 2] | 0)) i1 = HEAP32[i10 >> 2] | 0; else i1 = HEAP32[(HEAP32[i9 >> 2] | 0) + 6144 >> 2] | 0;
 HEAP32[i6 >> 2] = i1;
 if (0 < ((HEAP32[(HEAP32[i9 >> 2] | 0) + 6144 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) | 0)) i1 = (HEAP32[(HEAP32[i9 >> 2] | 0) + 6144 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) | 0; else i1 = 0;
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 6144 >> 2] | 0) > (HEAP32[i10 >> 2] | 0)) i2 = HEAP32[i10 >> 2] | 0; else i2 = HEAP32[(HEAP32[i9 >> 2] | 0) + 6144 >> 2] | 0;
 _memcpy((HEAP32[i11 >> 2] | 0) + 12 | 0, (HEAP32[i9 >> 2] | 0) + 6156 + i1 | 0, i2 | 0) | 0;
 _memcpy((HEAP32[i11 >> 2] | 0) + 12 + (HEAP32[i6 >> 2] | 0) | 0, (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) / 8 | 0) | 0, HEAP32[i8 >> 2] | 0) | 0;
 i11 = HEAP32[i11 >> 2] | 0;
 _drmp3_bs_init(i11 | 0, i11 + 12 | 0, (HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0);
 STACKTOP = i12;
 return (HEAP32[(HEAP32[i9 >> 2] | 0) + 6144 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0) | 0;
}

function _stbtt__GetGlyphInfoT2(i3, i2, i4, i6, i5, i7) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i11 = i1 + 76 | 0;
 i10 = i1 + 72 | 0;
 i12 = i1 + 68 | 0;
 i14 = i1 + 64 | 0;
 i13 = i1 + 60 | 0;
 i15 = i1 + 56 | 0;
 i9 = i1 + 8 | 0;
 i8 = i1;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i15 >> 2] = i7;
 i1 = i9;
 i2 = i1 + 48 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i9 >> 2] = 1;
 i11 = _stbtt__run_charstring(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, i9) | 0;
 HEAP32[i8 >> 2] = i11;
 if (HEAP32[i12 >> 2] | 0) HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i8 >> 2] | 0 ? HEAP32[i9 + 24 >> 2] | 0 : 0;
 if (HEAP32[i14 >> 2] | 0) HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i8 >> 2] | 0 ? HEAP32[i9 + 32 >> 2] | 0 : 0;
 if (HEAP32[i13 >> 2] | 0) HEAP32[HEAP32[i13 >> 2] >> 2] = HEAP32[i8 >> 2] | 0 ? HEAP32[i9 + 28 >> 2] | 0 : 0;
 if (!(HEAP32[i15 >> 2] | 0)) {
  i14 = HEAP32[i8 >> 2] | 0;
  i14 = (i14 | 0) != 0;
  i15 = i9 + 44 | 0;
  i15 = HEAP32[i15 >> 2] | 0;
  i15 = i14 ? i15 : 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[HEAP32[i15 >> 2] >> 2] = HEAP32[i8 >> 2] | 0 ? HEAP32[i9 + 36 >> 2] | 0 : 0;
 i14 = HEAP32[i8 >> 2] | 0;
 i14 = (i14 | 0) != 0;
 i15 = i9 + 44 | 0;
 i15 = HEAP32[i15 >> 2] | 0;
 i15 = i14 ? i15 : 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _stbv_compute_accelerated_huffman(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[i5 >> 2] | 0) >= 1024) break;
  HEAP16[i1 + 36 + (HEAP32[i5 >> 2] << 1) >> 1] = -1;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 if (HEAPU8[i1 + 23 >> 0] | 0 | 0) i1 = HEAP32[i2 + 2092 >> 2] | 0; else i1 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) > 32767 ? 32767 : i1;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  L12 : do if ((HEAPU8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] | 0 | 0) <= 10) {
   i1 = HEAP32[i4 >> 2] | 0;
   if (HEAPU8[(HEAP32[i4 >> 2] | 0) + 23 >> 0] | 0 | 0) i1 = _stbv_bit_reverse(HEAP32[(HEAP32[i1 + 2084 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] | 0) | 0; else i1 = HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] | 0;
   HEAP32[i3 >> 2] = i1;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) >>> 0 >= 1024) break L12;
    HEAP16[(HEAP32[i4 >> 2] | 0) + 36 + (HEAP32[i3 >> 2] << 1) >> 1] = HEAP32[i5 >> 2];
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (1 << (HEAPU8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] | 0));
   }
  } while (0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 STACKTOP = i7;
 return;
}

function ___stdio_write(i10, i3, i1) {
 i10 = i10 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i11 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i2;
 i7 = i2 + 16 | 0;
 i8 = i10 + 28 | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 HEAP32[i6 >> 2] = i5;
 i9 = i10 + 20 | 0;
 i5 = (HEAP32[i9 >> 2] | 0) - i5 | 0;
 HEAP32[i6 + 4 >> 2] = i5;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i6 + 12 >> 2] = i1;
 i4 = i10 + 60 | 0;
 i2 = i6;
 i6 = 2;
 i5 = i5 + i1 | 0;
 while (1) {
  if (!(___wasi_syscall_ret(___wasi_fd_write(HEAP32[i4 >> 2] | 0, i2 | 0, i6 | 0, i7 | 0) | 0) | 0)) i3 = HEAP32[i7 >> 2] | 0; else {
   HEAP32[i7 >> 2] = -1;
   i3 = -1;
  }
  if ((i5 | 0) == (i3 | 0)) {
   i3 = 6;
   break;
  }
  if ((i3 | 0) < 0) {
   i3 = 8;
   break;
  }
  i15 = HEAP32[i2 + 4 >> 2] | 0;
  i12 = i3 >>> 0 > i15 >>> 0;
  i13 = i12 ? i2 + 8 | 0 : i2;
  i15 = i3 - (i12 ? i15 : 0) | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i15;
  i14 = i13 + 4 | 0;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) - i15;
  i2 = i13;
  i6 = i6 + (i12 << 31 >> 31) | 0;
  i5 = i5 - i3 | 0;
 }
 if ((i3 | 0) == 6) {
  i15 = HEAP32[i10 + 44 >> 2] | 0;
  HEAP32[i10 + 16 >> 2] = i15 + (HEAP32[i10 + 48 >> 2] | 0);
  HEAP32[i8 >> 2] = i15;
  HEAP32[i9 >> 2] = i15;
 } else if ((i3 | 0) == 8) {
  HEAP32[i10 + 16 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 32;
  if ((i6 | 0) == 2) i1 = 0; else i1 = i1 - (HEAP32[i2 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = i11;
 return i1 | 0;
}

function ___shgetc(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = i6 + 112 | 0;
 i2 = i3;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i1 | 0) == 0 & (i2 | 0) == 0) i7 = 3; else {
  i7 = i6 + 120 | 0;
  i5 = HEAP32[i7 + 4 >> 2] | 0;
  if ((i5 | 0) < (i2 | 0) | ((i5 | 0) == (i2 | 0) ? (HEAP32[i7 >> 2] | 0) >>> 0 < i1 >>> 0 : 0)) i7 = 3; else i7 = 4;
 }
 if ((i7 | 0) == 3) {
  i1 = ___uflow(i6) | 0;
  if ((i1 | 0) < 0) i7 = 4; else {
   i2 = HEAP32[i3 >> 2] | 0;
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   i5 = HEAP32[i6 + 8 >> 2] | 0;
   if ((i2 | 0) == 0 & (i3 | 0) == 0) {
    i2 = i5;
    i7 = 9;
   } else {
    i4 = HEAP32[i6 + 4 >> 2] | 0;
    i8 = i5 - i4 | 0;
    i9 = ((i8 | 0) < 0) << 31 >> 31;
    i10 = i6 + 120 | 0;
    i3 = _i64Subtract(i2 | 0, i3 | 0, HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0) | 0;
    i10 = getTempRet0() | 0;
    i2 = i5;
    if ((i10 | 0) > (i9 | 0) | (i10 | 0) == (i9 | 0) & i3 >>> 0 > i8 >>> 0) i7 = 9; else HEAP32[i6 + 104 >> 2] = i4 + (i3 + -1);
   }
   if ((i7 | 0) == 9) HEAP32[i6 + 104 >> 2] = i5;
   i3 = i6 + 4 | 0;
   if (!i2) i2 = HEAP32[i3 >> 2] | 0; else {
    i10 = HEAP32[i3 >> 2] | 0;
    i8 = i2 + 1 - i10 | 0;
    i2 = i6 + 120 | 0;
    i9 = i2;
    i8 = _i64Add(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
    i9 = getTempRet0() | 0;
    HEAP32[i2 >> 2] = i8;
    HEAP32[i2 + 4 >> 2] = i9;
    i2 = i10;
   }
   i2 = i2 + -1 | 0;
   if ((i1 | 0) != (HEAPU8[i2 >> 0] | 0 | 0)) HEAP8[i2 >> 0] = i1;
  }
 }
 if ((i7 | 0) == 4) {
  HEAP32[i6 + 104 >> 2] = 0;
  i1 = -1;
 }
 return i1 | 0;
}

function _drmp3_L3_antialias(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0, f10 = f0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) <= 0) break;
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= 8) break;
   f9 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (18 + (HEAP32[i4 >> 2] | 0) << 2) >> 2]);
   HEAPF32[i7 >> 2] = f9;
   f9 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (17 - (HEAP32[i4 >> 2] | 0) << 2) >> 2]);
   HEAPF32[i1 >> 2] = f9;
   f9 = Math_fround(HEAPF32[i7 >> 2]);
   f9 = Math_fround(f9 * Math_fround(HEAPF32[16752 + (HEAP32[i4 >> 2] << 2) >> 2]));
   f10 = Math_fround(HEAPF32[i1 >> 2]);
   f10 = Math_fround(f9 - Math_fround(f10 * Math_fround(HEAPF32[16784 + (HEAP32[i4 >> 2] << 2) >> 2])));
   HEAPF32[(HEAP32[i3 >> 2] | 0) + (18 + (HEAP32[i4 >> 2] | 0) << 2) >> 2] = f10;
   f10 = Math_fround(HEAPF32[i7 >> 2]);
   f10 = Math_fround(f10 * Math_fround(HEAPF32[16784 + (HEAP32[i4 >> 2] << 2) >> 2]));
   f9 = Math_fround(HEAPF32[i1 >> 2]);
   f9 = Math_fround(f10 + Math_fround(f9 * Math_fround(HEAPF32[16752 + (HEAP32[i4 >> 2] << 2) >> 2])));
   HEAPF32[(HEAP32[i3 >> 2] | 0) + (17 - (HEAP32[i4 >> 2] | 0) << 2) >> 2] = f9;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 72;
 }
 STACKTOP = i8;
 return;
}

function _jar_mod_load_file(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = 0;
 if (HEAP32[(HEAP32[i6 >> 2] | 0) + 5872 >> 2] | 0) {
  _free(HEAP32[(HEAP32[i6 >> 2] | 0) + 5872 >> 2] | 0);
  HEAP32[(HEAP32[i6 >> 2] | 0) + 5872 >> 2] = 0;
 }
 i5 = _fopen(HEAP32[i3 >> 2] | 0, 53420) | 0;
 HEAP32[i1 >> 2] = i5;
 if (!(HEAP32[i1 >> 2] | 0)) {
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 _fseek(HEAP32[i1 >> 2] | 0, 0, 2) | 0;
 i5 = _ftell(HEAP32[i1 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = i5;
 _fseek(HEAP32[i1 >> 2] | 0, 0, 0) | 0;
 if (!((HEAP32[i4 >> 2] | 0) != 0 & (HEAP32[i4 >> 2] | 0) >>> 0 < 33554432)) {
  HEAP32[i4 >> 2] = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i5 = _malloc(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 5872 >> 2] = i5;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 5876 >> 2] = HEAP32[i4 >> 2];
 _memset(HEAP32[(HEAP32[i6 >> 2] | 0) + 5872 >> 2] | 0, 0, HEAP32[i4 >> 2] | 0) | 0;
 _fread(HEAP32[(HEAP32[i6 >> 2] | 0) + 5872 >> 2] | 0, HEAP32[i4 >> 2] | 0, 1, HEAP32[i1 >> 2] | 0) | 0;
 _fclose(HEAP32[i1 >> 2] | 0) | 0;
 if (_jar_mod_load(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 5872 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0) {
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i6 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _ma_pcm_u8_to_f32__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i12 + 36 | 0;
 i13 = i12 + 32 | 0;
 i3 = i12 + 8 | 0;
 i6 = i12 + 24 | 0;
 i9 = i12 + 20 | 0;
 i7 = i12;
 i10 = i12 + 16 | 0;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i12 + 28 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
 i12 = i7;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 while (1) {
  i13 = i7;
  i8 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i3;
  i12 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i12 >>> 0 | ((i8 | 0) == (i12 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  f15 = Math_fround(HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0);
  HEAPF32[i10 >> 2] = f15;
  f15 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) * Math_fround(.00784313772));
  HEAPF32[i10 >> 2] = f15;
  f15 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) - Math_fround(1.0));
  HEAPF32[i10 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i10 >> 2]);
  HEAPF32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] = f15;
  i12 = i7;
  i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i7;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i11;
 return;
}

function _fgets(i1, i2, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = 0;
 if ((HEAP32[i10 + 76 >> 2] | 0) > -1) i9 = ___lockfile(i10) | 0; else i9 = 0;
 i3 = i2 + -1 | 0;
 if ((i2 | 0) < 2) {
  i11 = i10 + 74 | 0;
  i8 = HEAP8[i11 >> 0] | 0;
  HEAP8[i11 >> 0] = i8 + 255 | i8;
  if (i9 | 0) ___unlockfile(i10);
  if (!i3) HEAP8[i1 >> 0] = 0; else i1 = 0;
 } else {
  L11 : do if (!i3) {
   i2 = i1;
   i11 = 17;
  } else {
   i8 = i10 + 4 | 0;
   i7 = i10 + 8 | 0;
   i2 = i1;
   while (1) {
    i4 = HEAP32[i8 >> 2] | 0;
    i12 = i4;
    i13 = (HEAP32[i7 >> 2] | 0) - i12 | 0;
    i6 = _memchr(i4, 10, i13) | 0;
    i5 = (i6 | 0) == 0;
    i6 = i5 ? i13 : 1 - i12 + i6 | 0;
    i6 = i6 >>> 0 < i3 >>> 0 ? i6 : i3;
    _memcpy(i2 | 0, i4 | 0, i6 | 0) | 0;
    i4 = (HEAP32[i8 >> 2] | 0) + i6 | 0;
    HEAP32[i8 >> 2] = i4;
    i2 = i2 + i6 | 0;
    i6 = i3 - i6 | 0;
    if (!(i5 & (i6 | 0) != 0)) {
     i11 = 17;
     break L11;
    }
    if (i4 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
     HEAP32[i8 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else {
     i3 = ___uflow(i10) | 0;
     if ((i3 | 0) < 0) break; else i4 = i3;
    }
    i5 = i2 + 1 | 0;
    HEAP8[i2 >> 0] = i4;
    i3 = i6 + -1 | 0;
    if ((i4 & 255 | 0) == 10 | (i3 | 0) == 0) {
     i2 = i5;
     i11 = 17;
     break L11;
    } else i2 = i5;
   }
   if ((i2 | 0) == (i1 | 0)) i1 = 0; else if (!(HEAP32[i10 >> 2] & 16)) i1 = 0; else i11 = 17;
  } while (0);
  if ((i11 | 0) == 17) if (!i1) i1 = 0; else HEAP8[i2 >> 0] = 0;
  if (i9) ___unlockfile(i10);
 }
 return i1 | 0;
}

function _drmp3_L3_reorder(i2, i6, i8) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, f12 = f0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i1 + 24 | 0;
 i7 = i1 + 20 | 0;
 i9 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  i8 = HEAPU8[HEAP32[i9 >> 2] >> 0] | 0;
  HEAP32[i5 >> 2] = i8;
  if (!i8) break;
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) break;
   f12 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + (0 << 2) >> 2]);
   i8 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = i8 + 4;
   HEAPF32[i8 >> 2] = f12;
   f12 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2]);
   i8 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = i8 + 4;
   HEAPF32[i8 >> 2] = f12;
   f12 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] << 1 << 2) >> 2]);
   i8 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = i8 + 4;
   HEAPF32[i8 >> 2] = f12;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 4;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 3;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i5 >> 2] << 1 << 2);
 }
 i10 = HEAP32[i7 >> 2] | 0;
 _memcpy(HEAP32[i3 >> 2] | 0, i10 | 0, (((HEAP32[i1 >> 2] | 0) - i10 | 0) / 4 | 0) << 2 | 0) | 0;
 STACKTOP = i11;
 return;
}

function _rlReadScreenPixels(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i9 + 20 | 0;
 i2 = i9 + 16 | 0;
 i4 = i9 + 12 | 0;
 i3 = i9 + 8 | 0;
 i8 = i9 + 4 | 0;
 i7 = i9;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i2 >> 2] = i1;
 i5 = _calloc((Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) << 2, 1) | 0;
 HEAP32[i4 >> 2] = i5;
 _glReadPixels(0, 0, HEAP32[i6 >> 2] | 0, HEAP32[i2 >> 2] | 0, 6408, 5121, HEAP32[i4 >> 2] | 0);
 i5 = _malloc((Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) << 2) | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP32[i8 >> 2] = (HEAP32[i2 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) < 0) break;
  HEAP32[i7 >> 2] = 0;
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] << 2 | 0)) break;
   i10 = (Math_imul(HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) << 2;
   i1 = (Math_imul((HEAP32[i2 >> 2] | 0) - 1 - (HEAP32[i8 >> 2] | 0) | 0, HEAP32[i6 >> 2] | 0) | 0) << 2;
   i5 = HEAP32[i7 >> 2] | 0;
   HEAP8[(HEAP32[i3 >> 2] | 0) + (i1 + i5) >> 0] = HEAP8[(HEAP32[i4 >> 2] | 0) + (i10 + i5) >> 0] | 0;
   if (!(((HEAP32[i7 >> 2] | 0) + 1 | 0) % 4 | 0)) {
    i10 = (Math_imul((HEAP32[i2 >> 2] | 0) - 1 - (HEAP32[i8 >> 2] | 0) | 0, HEAP32[i6 >> 2] | 0) | 0) << 2;
    HEAP8[(HEAP32[i3 >> 2] | 0) + (i10 + (HEAP32[i7 >> 2] | 0)) >> 0] = -1;
   }
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
 }
 _free(HEAP32[i4 >> 2] | 0);
 STACKTOP = i9;
 return HEAP32[i3 >> 2] | 0;
}

function _jar_xm_envelope_lerp(i2, i4, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0, f11 = f0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i7 = i1 + 16 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP16[i7 >> 1] = i6;
 if ((HEAPU16[i7 >> 1] | 0 | 0) <= (HEAPU16[HEAP32[i3 >> 2] >> 1] | 0 | 0)) {
  f10 = Math_fround(HEAPU16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] | 0);
  HEAPF32[i8 >> 2] = f10;
  f10 = Math_fround(HEAPF32[i8 >> 2]);
  STACKTOP = i9;
  return Math_fround(f10);
 }
 if ((HEAPU16[i7 >> 1] | 0 | 0) >= (HEAPU16[HEAP32[i5 >> 2] >> 1] | 0 | 0)) {
  f10 = Math_fround(HEAPU16[(HEAP32[i5 >> 2] | 0) + 2 >> 1] | 0);
  HEAPF32[i8 >> 2] = f10;
  f10 = Math_fround(HEAPF32[i8 >> 2]);
  STACKTOP = i9;
  return Math_fround(f10);
 } else {
  f11 = Math_fround((HEAPU16[i7 >> 1] | 0) - (HEAPU16[HEAP32[i3 >> 2] >> 1] | 0) | 0);
  f11 = Math_fround(f11 / Math_fround((HEAPU16[HEAP32[i5 >> 2] >> 1] | 0) - (HEAPU16[HEAP32[i3 >> 2] >> 1] | 0) | 0));
  HEAPF32[i1 >> 2] = f11;
  f11 = Math_fround(HEAPU16[(HEAP32[i3 >> 2] | 0) + 2 >> 1] | 0 | 0);
  f11 = Math_fround(f11 * Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[i1 >> 2])));
  f10 = Math_fround(HEAPU16[(HEAP32[i5 >> 2] | 0) + 2 >> 1] | 0 | 0);
  f10 = Math_fround(f11 + Math_fround(f10 * Math_fround(HEAPF32[i1 >> 2])));
  HEAPF32[i8 >> 2] = f10;
  f10 = Math_fround(HEAPF32[i8 >> 2]);
  STACKTOP = i9;
  return Math_fround(f10);
 }
 return f0;
}

function _MatrixToFloatV(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i1 = i5;
 i4 = i1;
 i6 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = 0;
  i4 = i4 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 f7 = Math_fround(HEAPF32[i3 >> 2]);
 HEAPF32[i1 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 16 >> 2]);
 HEAPF32[i1 + 4 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 32 >> 2]);
 HEAPF32[i1 + 8 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 48 >> 2]);
 HEAPF32[i1 + 12 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 HEAPF32[i1 + 16 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 HEAPF32[i1 + 20 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 36 >> 2]);
 HEAPF32[i1 + 24 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 52 >> 2]);
 HEAPF32[i1 + 28 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 HEAPF32[i1 + 32 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 HEAPF32[i1 + 36 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 HEAPF32[i1 + 40 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 56 >> 2]);
 HEAPF32[i1 + 44 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 HEAPF32[i1 + 48 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 28 >> 2]);
 HEAPF32[i1 + 52 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 44 >> 2]);
 HEAPF32[i1 + 56 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i3 + 60 >> 2]);
 HEAPF32[i1 + 60 >> 2] = f7;
 i4 = i2;
 i6 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  i4 = i4 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 STACKTOP = i5;
 return;
}

function _ma_calculate_frame_count_after_src(i5, i4, i1, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i6 + 36 | 0;
 i11 = i6 + 32 | 0;
 i10 = i6 + 24 | 0;
 i9 = i6 + 16 | 0;
 i7 = i6 + 8 | 0;
 i3 = i6;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i11 >> 2] = i4;
 i4 = i10;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAPF64[i9 >> 3] = +((HEAP32[i12 >> 2] | 0) >>> 0) / +((HEAP32[i11 >> 2] | 0) >>> 0);
 i4 = i10;
 HEAPF64[i7 >> 3] = (+((HEAP32[i4 >> 2] | 0) >>> 0) + 4294967296.0 * +(HEAP32[i4 + 4 >> 2] | 0)) * +HEAPF64[i9 >> 3];
 d8 = +HEAPF64[i7 >> 3];
 i4 = +Math_abs(d8) >= 1.0 ? (d8 > 0.0 ? ~~+Math_min(+Math_floor(d8 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil((d8 - +(~~d8 >>> 0)) / 4294967296.0) >>> 0) : 0;
 i5 = i3;
 HEAP32[i5 >> 2] = ~~d8 >>> 0;
 HEAP32[i5 + 4 >> 2] = i4;
 i5 = i3;
 if (!(+HEAPF64[i7 >> 3] - (+((HEAP32[i5 >> 2] | 0) >>> 0) + 4294967296.0 * +(HEAP32[i5 + 4 >> 2] | 0)) > 0.0)) {
  i11 = i3;
  i12 = i11;
  i12 = HEAP32[i12 >> 2] | 0;
  i11 = i11 + 4 | 0;
  i11 = HEAP32[i11 >> 2] | 0;
  setTempRet0(i11 | 0);
  STACKTOP = i6;
  return i12 | 0;
 }
 i10 = i3;
 i10 = _i64Add(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1, 0) | 0;
 i12 = getTempRet0() | 0;
 i11 = i3;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i11 + 4 >> 2] = i12;
 i11 = i3;
 i12 = i11;
 i12 = HEAP32[i12 >> 2] | 0;
 i11 = i11 + 4 | 0;
 i11 = HEAP32[i11 >> 2] | 0;
 setTempRet0(i11 | 0);
 STACKTOP = i6;
 return i12 | 0;
}

function _ma_calculate_channel_position_planar_weight(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, f5 = f0, i6 = 0, f7 = f0, i8 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i4 + 5 | 0;
 i6 = i4 + 4 | 0;
 HEAP8[i8 >> 0] = i1;
 HEAP8[i6 >> 0] = i2;
 f7 = Math_fround(HEAPF32[11984 + ((HEAPU8[i8 >> 0] | 0) * 24 | 0) >> 2]);
 f7 = Math_fround(f7 * Math_fround(HEAPF32[11984 + ((HEAPU8[i6 >> 0] | 0) * 24 | 0) >> 2]));
 f5 = Math_fround(HEAPF32[11984 + ((HEAPU8[i8 >> 0] | 0) * 24 | 0) + 4 >> 2]);
 f5 = Math_fround(f7 + Math_fround(f5 * Math_fround(HEAPF32[11984 + ((HEAPU8[i6 >> 0] | 0) * 24 | 0) + 4 >> 2])));
 f7 = Math_fround(HEAPF32[11984 + ((HEAPU8[i8 >> 0] | 0) * 24 | 0) + 8 >> 2]);
 f7 = Math_fround(f5 + Math_fround(f7 * Math_fround(HEAPF32[11984 + ((HEAPU8[i6 >> 0] | 0) * 24 | 0) + 8 >> 2])));
 f5 = Math_fround(HEAPF32[11984 + ((HEAPU8[i8 >> 0] | 0) * 24 | 0) + 12 >> 2]);
 f5 = Math_fround(f7 + Math_fround(f5 * Math_fround(HEAPF32[11984 + ((HEAPU8[i6 >> 0] | 0) * 24 | 0) + 12 >> 2])));
 f7 = Math_fround(HEAPF32[11984 + ((HEAPU8[i8 >> 0] | 0) * 24 | 0) + 16 >> 2]);
 f7 = Math_fround(f5 + Math_fround(f7 * Math_fround(HEAPF32[11984 + ((HEAPU8[i6 >> 0] | 0) * 24 | 0) + 16 >> 2])));
 f5 = Math_fround(HEAPF32[11984 + ((HEAPU8[i8 >> 0] | 0) * 24 | 0) + 20 >> 2]);
 f5 = Math_fround(f7 + Math_fround(f5 * Math_fround(HEAPF32[11984 + ((HEAPU8[i6 >> 0] | 0) * 24 | 0) + 20 >> 2])));
 HEAPF32[i4 >> 2] = f5;
 f5 = Math_fround(HEAPF32[i4 >> 2]);
 STACKTOP = i3;
 return Math_fround(f5);
}

function _ma_channel_router_config_init(i2, i7, i3, i9, i5, i12, i14, i16) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i16 = i16 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 4224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4224);
 i8 = i1 + 4216 | 0;
 i4 = i1 + 4212 | 0;
 i10 = i1 + 4208 | 0;
 i6 = i1 + 4204 | 0;
 i13 = i1 + 4200 | 0;
 i15 = i1 + 4196 | 0;
 i17 = i1 + 4192 | 0;
 i11 = i1 + 8 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i17 >> 2] = i16;
 _memset(i11 | 0, 0, 4184) | 0;
 HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i8 >> 2] | 0) >>> 0) break;
  i16 = HEAP32[i1 >> 2] | 0;
  HEAP8[i11 + 8 + i16 >> 0] = HEAP8[(HEAP32[i4 >> 2] | 0) + i16 >> 0] | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 HEAP32[i11 + 4 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) break;
  i16 = HEAP32[i1 >> 2] | 0;
  HEAP8[i11 + 40 + i16 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + i16 >> 0] | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 HEAP32[i11 + 72 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i11 + 4176 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i11 + 4180 >> 2] = HEAP32[i17 >> 2];
 _memcpy(i2 | 0, i11 | 0, 4184) | 0;
 STACKTOP = i18;
 return;
}

function _ma_copy_and_apply_volume_factor_s24(i8, i5, i11, f2) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 f2 = Math_fround(f2);
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 28 | 0;
 i6 = i1 + 24 | 0;
 i12 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i12 >> 2] = i11;
 HEAPF32[i3 >> 2] = f2;
 if ((HEAP32[i9 >> 2] | 0) == 0 | (HEAP32[i6 >> 2] | 0) == 0) {
  STACKTOP = i13;
  return;
 }
 HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >>> 0 >= (HEAP32[i12 >> 2] | 0) >>> 0) break;
  i9 = HEAP32[i7 >> 2] | 0;
  i11 = (HEAP32[i4 >> 2] | 0) * 3 | 0;
  HEAP32[i1 >> 2] = HEAPU8[i9 + (i11 + 0) >> 0] << 8 | HEAPU8[i9 + (i11 + 1) >> 0] << 16 | HEAPU8[i9 + (i11 + 2) >> 0] << 24;
  f2 = Math_fround(HEAP32[i1 >> 2] | 0);
  i11 = ~~Math_fround(f2 * Math_fround(HEAPF32[i3 >> 2]));
  HEAP32[i1 >> 2] = i11;
  HEAP8[(HEAP32[i10 >> 2] | 0) + (((HEAP32[i4 >> 2] | 0) * 3 | 0) + 0) >> 0] = (HEAP32[i1 >> 2] & 65280) >>> 8;
  HEAP8[(HEAP32[i10 >> 2] | 0) + (((HEAP32[i4 >> 2] | 0) * 3 | 0) + 1) >> 0] = (HEAP32[i1 >> 2] & 16711680) >>> 16;
  HEAP8[(HEAP32[i10 >> 2] | 0) + (((HEAP32[i4 >> 2] | 0) * 3 | 0) + 2) >> 0] = (HEAP32[i1 >> 2] & -16777216) >>> 24;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i13;
 return;
}

function ___fdopen(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 24 | 0;
 i4 = i1 + 8 | 0;
 i3 = i1;
 i5 = i1 + 40 | 0;
 if (!(_strchr(59306, HEAP8[i2 >> 0] | 0) | 0)) {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 28;
  i1 = 0;
 } else {
  i1 = _malloc(1176) | 0;
  if (!i1) i1 = 0; else {
   _memset(i1 | 0, 0, 144) | 0;
   i9 = (_strchr(i2, 43) | 0) == 0;
   i2 = HEAP8[i2 >> 0] | 0;
   if (i9) HEAP32[i1 >> 2] = i2 << 24 >> 24 == 114 ? 8 : 4;
   if (i2 << 24 >> 24 == 97) {
    HEAP32[i3 >> 2] = i6;
    HEAP32[i3 + 4 >> 2] = 3;
    i2 = ___syscall221(221, i3 | 0) | 0;
    if (!(i2 & 1024)) {
     HEAP32[i4 >> 2] = i6;
     HEAP32[i4 + 4 >> 2] = 4;
     HEAP32[i4 + 8 >> 2] = i2 | 1024;
     ___syscall221(221, i4 | 0) | 0;
    }
    i3 = HEAP32[i1 >> 2] | 128;
    HEAP32[i1 >> 2] = i3;
   } else i3 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 + 60 >> 2] = i6;
   HEAP32[i1 + 44 >> 2] = i1 + 152;
   HEAP32[i1 + 48 >> 2] = 1024;
   i2 = i1 + 75 | 0;
   HEAP8[i2 >> 0] = -1;
   if (!(i3 & 8)) {
    HEAP32[i7 >> 2] = i6;
    HEAP32[i7 + 4 >> 2] = 21523;
    HEAP32[i7 + 8 >> 2] = i5;
    if (!(___syscall54(54, i7 | 0) | 0)) HEAP8[i2 >> 0] = 10;
   }
   HEAP32[i1 + 32 >> 2] = 14;
   HEAP32[i1 + 36 >> 2] = 2;
   HEAP32[i1 + 40 >> 2] = 2;
   HEAP32[i1 + 12 >> 2] = 3;
   if (!(HEAP32[44155] | 0)) HEAP32[i1 + 76 >> 2] = -1;
   ___ofl_add(i1) | 0;
  }
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _check_win(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i8;
 i1 = i7 + 100 | 0;
 i2 = i1 + 60 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = _check_line(1, i7) | 0;
 i5 = i7 + 4 | 0;
 if ((HEAP32[i5 >> 2] | 0) > 1) {
  i1 = (_check_line(0, i7) | 0) + i1 | 0;
  if ((HEAP32[i5 >> 2] | 0) > 2) {
   i1 = (_check_line(2, i7) | 0) + i1 | 0;
   if ((HEAP32[i5 >> 2] | 0) > 3) {
    i1 = (_check_diag(4, i7) | 0) + i1 | 0;
    if ((HEAP32[i5 >> 2] | 0) > 4) i1 = (_check_diag(5, i7) | 0) + i1 | 0;
   }
  }
 }
 if (i1 | 0) {
  i1 = 0;
  i4 = 0;
  i2 = 0;
  do {
   i3 = 0;
   do {
    if ((HEAP32[i7 + 100 + (i4 * 20 | 0) + (i3 << 2) >> 2] | 0) > 0) {
     i9 = HEAP32[11728 + (HEAP32[i7 + 40 + (i4 * 20 | 0) + (i3 << 2) >> 2] << 2) >> 2] | 0;
     i1 = i1 + 1 | 0;
     i2 = (i2 | 0) < (i9 | 0) ? i9 : i2;
    }
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) != 5);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 3);
  i9 = i2 + ((i1 | 0) > 3 & 1) | 0;
  HEAP32[i7 + 160 >> 2] = i9;
  i9 = Math_imul(Math_imul(HEAP32[i7 + 8 >> 2] | 0, i9) | 0, HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = i9 + (HEAP32[i7 >> 2] | 0);
  if (HEAP32[i7 + 20 >> 2] | 0) {
   HEAP32[i6 >> 2] = HEAP32[40720];
   HEAP32[i6 + 4 >> 2] = HEAP32[40721];
   HEAP32[i6 + 8 >> 2] = HEAP32[40722];
   HEAP32[i6 + 12 >> 2] = HEAP32[40723];
   HEAP32[i6 + 16 >> 2] = HEAP32[40724];
   _PlaySound(i6);
  }
 }
 STACKTOP = i8;
 return;
}

function _stbir__filter_trapezoid(f7, f4) {
 f7 = Math_fround(f7);
 f4 = Math_fround(f4);
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i2 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAPF32[i8 >> 2] = f7;
 HEAPF32[i5 >> 2] = f4;
 f7 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) / Math_fround(2.0));
 HEAPF32[i2 >> 2] = f7;
 f7 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) + Math_fround(.5));
 HEAPF32[i6 >> 2] = f7;
 if (!(Math_fround(HEAPF32[i5 >> 2]) <= Math_fround(1.0))) ___assert_fail(56339, 54884, 762, 56375);
 f7 = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[i8 >> 2]))));
 HEAPF32[i8 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i8 >> 2]);
 if (f7 >= Math_fround(HEAPF32[i6 >> 2])) {
  HEAPF32[i3 >> 2] = Math_fround(0.0);
  f7 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i9;
  return Math_fround(f7);
 }
 f7 = Math_fround(Math_fround(.5) - Math_fround(HEAPF32[i2 >> 2]));
 HEAPF32[i1 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i8 >> 2]);
 if (f7 <= Math_fround(HEAPF32[i1 >> 2])) {
  HEAPF32[i3 >> 2] = Math_fround(1.0);
  f7 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i9;
  return Math_fround(f7);
 } else {
  f7 = Math_fround(HEAPF32[i6 >> 2]);
  f7 = Math_fround(f7 - Math_fround(HEAPF32[i8 >> 2]));
  f7 = Math_fround(f7 / Math_fround(HEAPF32[i5 >> 2]));
  HEAPF32[i3 >> 2] = f7;
  f7 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i9;
  return Math_fround(f7);
 }
 return f0;
}

function _drmp3_L12_apply_scf_384(i7, i5, i2) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i3 >> 2] = i2;
 i10 = HEAP32[i3 >> 2] | 0;
 i2 = (HEAPU8[(HEAP32[i8 >> 2] | 0) + 769 >> 0] | 0) * 18 << 2 | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 i7 = HEAPU8[(HEAP32[i8 >> 2] | 0) + 769 >> 0] | 0;
 _memcpy(i10 + 2304 + i2 | 0, i10 + i2 | 0, ((HEAPU8[i5 + 768 >> 0] | 0) - i7 | 0) * 18 << 2 | 0) | 0;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= (HEAPU8[(HEAP32[i8 >> 2] | 0) + 768 >> 0] | 0)) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >= 12) break;
   f11 = Math_fround(HEAPF32[HEAP32[i6 >> 2] >> 2]);
   i10 = (HEAP32[i3 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 0 << 2) | 0;
   f11 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) * f11);
   HEAPF32[i10 >> 2] = f11;
   f11 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 12 >> 2]);
   i10 = (HEAP32[i3 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 576 << 2) | 0;
   f11 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) * f11);
   HEAPF32[i10 >> 2] = f11;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 72;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 24;
 }
 STACKTOP = i9;
 return;
}

function _stbi__zhuffman_decode_slowpath(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i9 >> 2] = i4;
 i4 = _stbi__bit_reverse(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0, 16) | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP32[i8 >> 2] = 10;
 while (1) {
  i1 = HEAP32[i8 >> 2] | 0;
  if ((HEAP32[i3 >> 2] | 0) < (HEAP32[(HEAP32[i9 >> 2] | 0) + 1056 + (HEAP32[i8 >> 2] << 2) >> 2] | 0)) break;
  HEAP32[i8 >> 2] = i1 + 1;
 }
 if ((i1 | 0) == 16) {
  HEAP32[i7 >> 2] = -1;
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i2 = HEAP32[i9 >> 2] | 0;
 i4 = HEAP32[i8 >> 2] << 1 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i3 >> 2] >> 16 - (HEAP32[i8 >> 2] | 0)) - (HEAPU16[i2 + 1024 + i4 >> 1] | 0) + (HEAPU16[i2 + 1124 + i4 >> 1] | 0);
 if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 1156 + (HEAP32[i6 >> 2] | 0) >> 0] | 0) != (HEAP32[i8 >> 2] | 0)) ___assert_fail(54366, 53449, 3992, 54382);
 i4 = (HEAP32[i5 >> 2] | 0) + 12 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) >>> (HEAP32[i8 >> 2] | 0);
 i5 = (HEAP32[i5 >> 2] | 0) + 8 | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i8 >> 2] | 0);
 HEAP32[i7 >> 2] = HEAPU16[(HEAP32[i9 >> 2] | 0) + 1444 + (HEAP32[i6 >> 2] << 1) >> 1];
 i9 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i10;
 return i9 | 0;
}

function _drmp3_find_closest_seek_point(i5, i2, i3, i7) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i4 = i1;
 i8 = i1 + 12 | 0;
 i1 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = i5;
 i5 = i4;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i8 >> 2] = i7;
 if (!(HEAP32[i8 >> 2] | 0)) ___assert_fail(48971, 48387, 3217, 49001);
 HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
 i5 = i4;
 i2 = HEAP32[i5 + 4 >> 2] | 0;
 i7 = (HEAP32[(HEAP32[i6 >> 2] | 0) + 21136 >> 2] | 0) + 8 | 0;
 i3 = HEAP32[i7 + 4 >> 2] | 0;
 if (i2 >>> 0 < i3 >>> 0 | ((i2 | 0) == (i3 | 0) ? (HEAP32[i5 >> 2] | 0) >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0 : 0)) {
  HEAP32[i9 >> 2] = 0;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i6 >> 2] | 0) + 21140 >> 2] | 0) >>> 0) break;
  i5 = (HEAP32[(HEAP32[i6 >> 2] | 0) + 21136 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) * 24 | 0) + 8 | 0;
  i2 = HEAP32[i5 + 4 >> 2] | 0;
  i7 = i4;
  i3 = HEAP32[i7 + 4 >> 2] | 0;
  if (i2 >>> 0 > i3 >>> 0 | ((i2 | 0) == (i3 | 0) ? (HEAP32[i5 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0 : 0)) break;
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 HEAP32[i9 >> 2] = 1;
 i9 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i10;
 return i9 | 0;
}

function _CompileShader(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i4 = i10 + 16 | 0;
 i9 = i10 + 8 | 0;
 i3 = i10;
 i12 = i10 + 44 | 0;
 i13 = i10 + 40 | 0;
 i8 = i10 + 36 | 0;
 i11 = i10 + 32 | 0;
 i6 = i10 + 28 | 0;
 i5 = i10 + 24 | 0;
 i7 = i10 + 20 | 0;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i13 >> 2] = i2;
 i1 = _glCreateShader(HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i1;
 _glShaderSource(HEAP32[i8 >> 2] | 0, 1, i12 | 0, 0);
 HEAP32[i11 >> 2] = 0;
 _glCompileShader(HEAP32[i8 >> 2] | 0);
 _glGetShaderiv(HEAP32[i8 >> 2] | 0, 35713, i11 | 0);
 i1 = HEAP32[i8 >> 2] | 0;
 if ((HEAP32[i11 >> 2] | 0) != 1) {
  HEAP32[i3 >> 2] = i1;
  _TraceLog(4, 34911, i3);
  HEAP32[i6 >> 2] = 0;
  _glGetShaderiv(HEAP32[i8 >> 2] | 0, 35716, i6 | 0);
  i2 = HEAP32[i6 >> 2] | 0;
  i1 = _llvm_stacksave() | 0;
  HEAP32[i7 >> 2] = i1;
  i1 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * i2 | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i2 | 0) + 15 & -16 | 0);
  _glGetShaderInfoLog(HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0, i5 | 0, i1 | 0);
  HEAP32[i9 >> 2] = i1;
  _TraceLog(3, 34860, i9);
  _llvm_stackrestore(HEAP32[i7 >> 2] | 0);
  i13 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i10;
  return i13 | 0;
 } else {
  HEAP32[i4 >> 2] = i1;
  _TraceLog(3, 34952, i4);
  i13 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i10;
  return i13 | 0;
 }
 return 0;
}

function _drmp3_bs_get_bits(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i11 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] & 7;
 HEAP32[i8 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
 HEAP32[i1 >> 2] = (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] >> 3);
 i2 = (HEAP32[i10 >> 2] | 0) + 4 | 0;
 i4 = (HEAP32[i2 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = i4;
 if ((i4 | 0) > (HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i9;
  return i11 | 0;
 }
 i11 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i11 + 1;
 HEAP32[i5 >> 2] = (HEAPU8[i11 >> 0] | 0) & 255 >> HEAP32[i7 >> 2];
 while (1) {
  i11 = (HEAP32[i8 >> 2] | 0) - 8 | 0;
  HEAP32[i8 >> 2] = i11;
  if ((i11 | 0) <= 0) break;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | HEAP32[i5 >> 2] << HEAP32[i8 >> 2];
  i11 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i11 + 1;
  HEAP32[i5 >> 2] = HEAPU8[i11 >> 0];
 }
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2] | (HEAP32[i5 >> 2] | 0) >>> (0 - (HEAP32[i8 >> 2] | 0) | 0);
 i11 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i9;
 return i11 | 0;
}

function _drmp3_L3_stereo_top_band(i7, i9, i5, i3) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i4 >> 2] = i3;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = -1;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = -1;
 HEAP32[HEAP32[i4 >> 2] >> 2] = -1;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >= (HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) >> 0] | 0 | 0)) break;
   if (Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2]) != Math_fround(0.0)) {
    i11 = 7;
    break;
   }
   if (Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 1 << 2) >> 2]) != Math_fround(0.0)) {
    i11 = 7;
    break;
   }
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 2;
  }
  if ((i11 | 0) == 7) {
   i11 = 0;
   HEAP32[(HEAP32[i4 >> 2] | 0) + (((HEAP32[i2 >> 2] | 0) % 3 | 0) << 2) >> 2] = HEAP32[i2 >> 2];
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) >> 0] | 0) << 2);
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 STACKTOP = i12;
 return;
}

function _ma_pcm_s16_to_f32__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i12 + 36 | 0;
 i13 = i12 + 32 | 0;
 i3 = i12 + 8 | 0;
 i6 = i12 + 24 | 0;
 i9 = i12 + 20 | 0;
 i7 = i12;
 i10 = i12 + 16 | 0;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i12 + 28 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
 i12 = i7;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 while (1) {
  i13 = i7;
  i8 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i3;
  i12 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i12 >>> 0 | ((i8 | 0) == (i12 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  f15 = Math_fround(HEAP16[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] << 1) >> 1] | 0);
  HEAPF32[i10 >> 2] = f15;
  f15 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) * Math_fround(.0000305175781));
  HEAPF32[i10 >> 2] = f15;
  f15 = Math_fround(HEAPF32[i10 >> 2]);
  HEAPF32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] = f15;
  i12 = i7;
  i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i7;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i11;
 return;
}

function _ma_context__try_get_device_name_by_id(i6, i2, i8, i10, i4) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i1 + 44 | 0;
 i7 = i1 + 40 | 0;
 i3 = i1 + 36 | 0;
 i9 = i1 + 32 | 0;
 i11 = i1 + 28 | 0;
 i5 = i1 + 24 | 0;
 i12 = i1 + 20 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i5 >> 2] = i4;
 if (!(HEAP32[i7 >> 2] | 0)) ___assert_fail(37253, 36381, 6090, 37349);
 if (!(HEAP32[i11 >> 2] | 0)) ___assert_fail(37387, 36381, 6091, 37349);
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i13 >> 2] = -104;
  i13 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 16 >> 2] = 0;
 i11 = _ma_context_enumerate_devices(HEAP32[i7 >> 2] | 0, 3, i1) | 0;
 HEAP32[i12 >> 2] = i11;
 if (HEAP32[i12 >> 2] | 0) {
  HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
  i13 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (HEAP32[i1 + 16 >> 2] | 0) {
  HEAP32[i13 >> 2] = 0;
  i13 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 } else {
  HEAP32[i13 >> 2] = -104;
  i13 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 return 0;
}

function _stbv_neighbors(i10, i4, i8, i6) {
 i10 = i10 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i9 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i2 >> 2] = 65536;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) break;
  if ((HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] | 0 | 0) > (HEAP32[i3 >> 2] | 0)) if ((HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] | 0 | 0) < (HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i5 >> 2] << 1) >> 1] | 0 | 0)) {
   HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i1 >> 2];
   HEAP32[i3 >> 2] = HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1];
  }
  if ((HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] | 0 | 0) < (HEAP32[i2 >> 2] | 0)) if ((HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] | 0 | 0) > (HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i5 >> 2] << 1) >> 1] | 0 | 0)) {
   HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i1 >> 2];
   HEAP32[i2 >> 2] = HEAPU16[(HEAP32[i11 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1];
  }
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i12;
 return;
}

function _rlTextureParameters(i1, i3, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i8 + 8 | 0;
 i2 = i8 + 36 | 0;
 i4 = i8 + 32 | 0;
 i6 = i8 + 28 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = i5;
 _glBindTexture(3553, HEAP32[i2 >> 2] | 0);
 L1 : do switch (HEAP32[i4 >> 2] | 0) {
 case 10243:
 case 10242:
  {
   if ((HEAP32[i6 >> 2] | 0) != 34626) {
    _glTexParameteri(3553, HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0);
    break L1;
   }
   if (HEAP8[177202] & 1) {
    _glTexParameteri(3553, HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0);
    break L1;
   } else {
    _TraceLog(4, 32045, i8);
    break L1;
   }
  }
 case 10241:
 case 10240:
  {
   _glTexParameteri(3553, HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0);
   break;
  }
 case 12288:
  {
   if (Math_fround(HEAP32[i6 >> 2] | 0) <= Math_fround(HEAPF32[44011])) {
    _glTexParameterf(3553, 34046, +Math_fround(HEAP32[i6 >> 2] | 0));
    break L1;
   }
   if (Math_fround(HEAPF32[44011]) > Math_fround(0.0)) {
    d9 = +Math_fround(HEAPF32[44011]);
    HEAP32[i7 >> 2] = HEAP32[i2 >> 2];
    HEAPF64[i7 + 8 >> 3] = d9;
    _TraceLog(4, 32082, i7);
    _glTexParameterf(3553, 34046, +Math_fround(HEAP32[i6 >> 2] | 0));
    break L1;
   } else {
    _TraceLog(4, 32144, i8 + 24 | 0);
    break L1;
   }
  }
 default:
  {}
 } while (0);
 _glBindTexture(3553, 0);
 STACKTOP = i8;
 return;
}

function _GifWriteFrame(i6, i8, i5, i3, i1, i4) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 1312 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1312);
 i14 = i16 + 1309 | 0;
 i9 = i16 + 1304 | 0;
 i15 = i16 + 1300 | 0;
 i12 = i16 + 1296 | 0;
 i10 = i16 + 1292 | 0;
 i2 = i16 + 1288 | 0;
 i11 = i16 + 1308 | 0;
 i7 = i16 + 1284 | 0;
 i13 = i16;
 HEAP32[i9 >> 2] = i6;
 HEAP32[i15 >> 2] = i8;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 HEAP8[i11 >> 0] = i4 & 1;
 if (!(HEAP32[44038] | 0)) {
  HEAP8[i14 >> 0] = 0;
  i15 = HEAP8[i14 >> 0] | 0;
  i15 = i15 & 1;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i7 >> 2] = HEAP32[43877];
 i5 = HEAP8[i11 >> 0] & 1 | 0;
 _GifMakePalette(i5 | 0 ? 0 : HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i2 >> 2] | 0, i5 | 0, i13);
 i5 = HEAP32[i7 >> 2] | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i2 = HEAP32[43877] | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 i4 = HEAP32[i12 >> 2] | 0;
 if (HEAP8[i11 >> 0] & 1) _GifDitherImage(i5, i1, i2, i3, i4, i13); else _GifThresholdImage(i5, i1, i2, i3, i4, i13);
 _GifWriteLzwImage(HEAP32[44038] | 0, HEAP32[43877] | 0, 0, 0, HEAP32[i15 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i10 >> 2] | 0, i13);
 HEAP8[i14 >> 0] = 1;
 i15 = HEAP8[i14 >> 0] | 0;
 i15 = i15 & 1;
 STACKTOP = i16;
 return i15 | 0;
}

function _GifPickChangedPixels(i4, i1, i7) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i11 + 20 | 0;
 i2 = i11 + 16 | 0;
 i8 = i11 + 12 | 0;
 i6 = i11 + 8 | 0;
 i9 = i11 + 4 | 0;
 i3 = i11;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != (HEAPU8[HEAP32[i2 >> 2] >> 0] | 0 | 0)) i10 = 6; else if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0)) i10 = 6; else if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[i2 >> 2] | 0) + 2 >> 0] | 0 | 0)) i10 = 6;
  if ((i10 | 0) == 6) {
   i10 = 0;
   HEAP8[HEAP32[i9 >> 2] >> 0] = HEAP8[HEAP32[i2 >> 2] >> 0] | 0;
   HEAP8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[(HEAP32[i9 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[i2 >> 2] | 0) + 2 >> 0] | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 4;
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 4;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 4;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 STACKTOP = i11;
 return HEAP32[i6 >> 2] | 0;
}

function _drmp3d_match_frame(i4, i7, i2) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i9 = i1;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= 10) {
   i1 = 8;
   break;
  }
  i7 = _drmp3_hdr_frame_bytes((HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i3 >> 2] | 0) | 0;
  i7 = i7 + (_drmp3_hdr_padding((HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i7;
  if (((HEAP32[i6 >> 2] | 0) + 4 | 0) > (HEAP32[i8 >> 2] | 0)) {
   i1 = 4;
   break;
  }
  if (!(_drmp3_hdr_compare(HEAP32[i5 >> 2] | 0, (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0)) {
   i1 = 6;
   break;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 4) {
  HEAP32[i10 >> 2] = (HEAP32[i9 >> 2] | 0) > 0 & 1;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 6) {
  HEAP32[i10 >> 2] = 0;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 } else if ((i1 | 0) == 8) {
  HEAP32[i10 >> 2] = 1;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 return 0;
}

function _stbi_write_png(i4, i8, i9, i2, i3, i7) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i1 + 36 | 0;
 i5 = i1 + 32 | 0;
 i16 = i1 + 28 | 0;
 i15 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i18 = i1 + 16 | 0;
 i17 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i16 >> 2] = i8;
 HEAP32[i15 >> 2] = i9;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i18 >> 2] = i3;
 HEAP32[i17 >> 2] = i7;
 i9 = _stbi_write_png_to_mem(HEAP32[i18 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i14 >> 2] | 0, i11) | 0;
 HEAP32[i6 >> 2] = i9;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i12 >> 2] = 0;
  i18 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i18 | 0;
 }
 i1 = _stbiw__fopen(HEAP32[i5 >> 2] | 0, 54730) | 0;
 HEAP32[i10 >> 2] = i1;
 i1 = HEAP32[i6 >> 2] | 0;
 if (HEAP32[i10 >> 2] | 0) {
  _fwrite(i1, 1, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
  _fclose(HEAP32[i10 >> 2] | 0) | 0;
  _free(HEAP32[i6 >> 2] | 0);
  HEAP32[i12 >> 2] = 1;
  i18 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i18 | 0;
 } else {
  _free(i1);
  HEAP32[i12 >> 2] = 0;
  i18 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i18 | 0;
 }
 return 0;
}

function _stbir__filter_mitchell(f2, f1) {
 f2 = Math_fround(f2);
 f1 = Math_fround(f1);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 HEAPF32[i5 >> 2] = f2;
 HEAPF32[i3 >> 2] = f1;
 f1 = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[i5 >> 2]))));
 HEAPF32[i5 >> 2] = f1;
 i3 = Math_fround(HEAPF32[i5 >> 2]) < Math_fround(1.0);
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 if (i3) {
  f2 = Math_fround(f1 * Math_fround(HEAPF32[i5 >> 2]));
  f2 = Math_fround(Math_fround(Math_fround(f2 * Math_fround(Math_fround(Math_fround(HEAPF32[i5 >> 2]) * Math_fround(21.0)) - Math_fround(36.0))) + Math_fround(16.0)) / Math_fround(18.0));
  HEAPF32[i4 >> 2] = f2;
  f2 = Math_fround(HEAPF32[i4 >> 2]);
  STACKTOP = i6;
  return Math_fround(f2);
 }
 if (f1 < Math_fround(2.0)) {
  f1 = Math_fround(HEAPF32[i5 >> 2]);
  f2 = Math_fround(HEAPF32[i5 >> 2]);
  f2 = Math_fround(Math_fround(Math_fround(f1 * Math_fround(Math_fround(f2 * Math_fround(Math_fround(36.0) - Math_fround(Math_fround(HEAPF32[i5 >> 2]) * Math_fround(7.0)))) + Math_fround(-60.0))) + Math_fround(32.0)) / Math_fround(18.0));
  HEAPF32[i4 >> 2] = f2;
  f2 = Math_fround(HEAPF32[i4 >> 2]);
  STACKTOP = i6;
  return Math_fround(f2);
 } else {
  HEAPF32[i4 >> 2] = Math_fround(0.0);
  f2 = Math_fround(HEAPF32[i4 >> 2]);
  STACKTOP = i6;
  return Math_fround(f2);
 }
 return f0;
}

function _InitWindow(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i4;
 i6 = i4 + 12 | 0;
 i5 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = 35513;
 _TraceLog(3, 35490, i8);
 HEAP32[44039] = HEAP32[i7 >> 2];
 i3 = (_InitGraphicsDevice(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) & 1;
 HEAP8[177214] = i3;
 if (!(HEAP8[177214] & 1)) {
  STACKTOP = i4;
  return;
 }
 _InitTimer();
 _LoadFontDefault();
 _emscripten_set_fullscreenchange_callback_on_thread(0, 0, 1, 4, 2) | 0;
 _emscripten_set_keypress_callback_on_thread(35521, 0, 1, 5, 2) | 0;
 _emscripten_set_click_callback_on_thread(35521, 0, 1, 6, 2) | 0;
 _emscripten_set_touchstart_callback_on_thread(35521, 0, 1, 7, 2) | 0;
 _emscripten_set_touchend_callback_on_thread(35521, 0, 1, 7, 2) | 0;
 _emscripten_set_touchmove_callback_on_thread(35521, 0, 1, 7, 2) | 0;
 _emscripten_set_touchcancel_callback_on_thread(35521, 0, 1, 7, 2) | 0;
 _emscripten_set_gamepadconnected_callback_on_thread(0, 1, 8, 2) | 0;
 _emscripten_set_gamepaddisconnected_callback_on_thread(0, 1, 8, 2) | 0;
 f9 = Math_fround(Math_fround(HEAP32[44040] | 0) / Math_fround(2.0));
 HEAPF32[44298] = f9;
 f9 = Math_fround(Math_fround(HEAP32[44041] | 0) / Math_fround(2.0));
 HEAPF32[44299] = f9;
 STACKTOP = i4;
 return;
}

function _MixAudioFrames(i7, i5, i2, f11) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 f11 = Math_fround(f11);
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 28 | 0;
 i6 = i1 + 24 | 0;
 i3 = i1 + 20 | 0;
 i12 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i3 >> 2] = i2;
 HEAPF32[i12 >> 2] = f11;
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >>> 0 >= (HEAP32[i3 >> 2] | 0) >>> 0) break;
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAP32[15763] | 0) >>> 0) break;
   i7 = (HEAP32[i8 >> 2] | 0) + ((Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[15763] | 0) | 0) << 2) | 0;
   HEAP32[i4 >> 2] = i7;
   i7 = (HEAP32[i6 >> 2] | 0) + ((Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[15763] | 0) | 0) << 2) | 0;
   HEAP32[i1 >> 2] = i7;
   f11 = Math_fround(Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2]) * Math_fround(1.0));
   f11 = Math_fround(f11 * Math_fround(HEAPF32[i12 >> 2]));
   i7 = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) | 0;
   f11 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f11);
   HEAPF32[i7 >> 2] = f11;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 STACKTOP = i13;
 return;
}

function _ma_pcm_s32_to_f32__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i12 + 40 | 0;
 i13 = i12 + 36 | 0;
 i3 = i12 + 16 | 0;
 i6 = i12 + 28 | 0;
 i9 = i12 + 24 | 0;
 i7 = i12 + 8 | 0;
 i10 = i12;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i12 + 32 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
 i12 = i7;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 while (1) {
  i13 = i7;
  i8 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i3;
  i12 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i12 >>> 0 | ((i8 | 0) == (i12 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAPF64[i10 >> 3] = +(HEAP32[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] | 0);
  HEAPF64[i10 >> 3] = +HEAPF64[i10 >> 3] / 2147483648.0;
  f15 = Math_fround(+HEAPF64[i10 >> 3]);
  HEAPF32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] = f15;
  i12 = i7;
  i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i7;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i11;
 return;
}

function _jar_mod_init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 8 | 0;
 i5 = i1;
 i4 = i1 + 6 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i3;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP8[i6 >> 0] = 0;
  i6 = HEAP8[i6 >> 0] | 0;
  i6 = i6 & 1;
  STACKTOP = i7;
  return i6 | 0;
 }
 _memclear(HEAP32[i5 >> 2] | 0, 0, 5884);
 HEAP32[(HEAP32[i5 >> 2] | 0) + 1724 >> 2] = 48e3;
 HEAP16[(HEAP32[i5 >> 2] | 0) + 5864 >> 1] = 1;
 HEAP16[(HEAP32[i5 >> 2] | 0) + 5866 >> 1] = 1;
 HEAP16[(HEAP32[i5 >> 2] | 0) + 5868 >> 1] = 16;
 HEAP16[(HEAP32[i5 >> 2] | 0) + 5870 >> 1] = 1;
 HEAP16[i4 >> 1] = 0;
 while (1) {
  if ((HEAPU16[i4 >> 1] | 0) >= 143) break;
  HEAP16[i2 >> 1] = 0;
  while (1) {
   i1 = HEAP16[i4 >> 1] | 0;
   if ((HEAPU16[i2 >> 1] | 0) >= 8) break;
   i3 = (HEAP16[14768 + ((i1 & 65535) << 1) >> 1] | 0) - (Math_imul(((HEAP16[14768 + (HEAPU16[i4 >> 1] << 1) >> 1] | 0) - (HEAP16[14768 + ((HEAPU16[i4 >> 1] | 0) + 1 << 1) >> 1] | 0) | 0) / 8 | 0, HEAPU16[i2 >> 1] | 0) | 0) & 65535;
   HEAP16[(HEAP32[i5 >> 2] | 0) + 3554 + ((HEAPU16[i4 >> 1] << 3) + (HEAPU16[i2 >> 1] | 0) << 1) >> 1] = i3;
   HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
  }
  HEAP16[i4 >> 1] = i1 + 1 << 16 >> 16;
 }
 HEAP8[i6 >> 0] = 1;
 i6 = HEAP8[i6 >> 0] | 0;
 i6 = i6 & 1;
 STACKTOP = i7;
 return i6 | 0;
}

function _ma_pcm_u8_to_s16__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i12 + 32 | 0;
 i13 = i12 + 28 | 0;
 i3 = i12 + 8 | 0;
 i6 = i12 + 20 | 0;
 i9 = i12 + 16 | 0;
 i7 = i12;
 i10 = i12 + 36 | 0;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i12 + 24 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
 i12 = i7;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 while (1) {
  i13 = i7;
  i8 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i3;
  i12 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i12 >>> 0 | ((i8 | 0) == (i12 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP16[i10 >> 1] = HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0;
  HEAP16[i10 >> 1] = (HEAP16[i10 >> 1] | 0) - 128;
  HEAP16[i10 >> 1] = HEAP16[i10 >> 1] << 8;
  HEAP16[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] << 1) >> 1] = HEAP16[i10 >> 1] | 0;
  i12 = i7;
  i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i7;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i11;
 return;
}

function _ma_pcm_u8_to_s32__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i12 + 36 | 0;
 i13 = i12 + 32 | 0;
 i3 = i12 + 8 | 0;
 i6 = i12 + 24 | 0;
 i9 = i12 + 20 | 0;
 i7 = i12;
 i10 = i12 + 16 | 0;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i13 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i12 + 28 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
 i12 = i7;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 while (1) {
  i13 = i7;
  i8 = HEAP32[i13 + 4 >> 2] | 0;
  i14 = i3;
  i12 = HEAP32[i14 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i12 >>> 0 | ((i8 | 0) == (i12 | 0) ? (HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[i10 >> 2] = HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0];
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - 128;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] << 24;
  HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] = HEAP32[i10 >> 2];
  i12 = i7;
  i12 = _i64Add(HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0, 1, 0) | 0;
  i13 = getTempRet0() | 0;
  i14 = i7;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i14 + 4 >> 2] = i13;
 }
 STACKTOP = i11;
 return;
}

function _stbtt__cff_int(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i2;
 i2 = (_stbtt__buf_get8(HEAP32[i4 >> 2] | 0) | 0) & 255;
 HEAP32[i1 >> 2] = i2;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((HEAP32[i1 >> 2] | 0) >= 32 & (HEAP32[i1 >> 2] | 0) <= 246) {
  HEAP32[i5 >> 2] = i2 - 139;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i3 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) >= 247 & (HEAP32[i1 >> 2] | 0) <= 250) {
  i4 = (i3 - 247 << 8) + ((_stbtt__buf_get8(HEAP32[i4 >> 2] | 0) | 0) & 255) + 108 | 0;
  HEAP32[i5 >> 2] = i4;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) >= 251 & (HEAP32[i1 >> 2] | 0) <= 254) {
  i4 = (0 - (i2 - 251) << 8) - ((_stbtt__buf_get8(HEAP32[i4 >> 2] | 0) | 0) & 255) - 108 | 0;
  HEAP32[i5 >> 2] = i4;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((i2 | 0) == 28) {
  i4 = _stbtt__buf_get(HEAP32[i4 >> 2] | 0, 2) | 0;
  HEAP32[i5 >> 2] = i4;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((HEAP32[i1 >> 2] | 0) != 29) ___assert_fail(53776, 52491, 1180, 52699);
 i4 = _stbtt__buf_get(HEAP32[i4 >> 2] | 0, 4) | 0;
 HEAP32[i5 >> 2] = i4;
 i5 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _jar_xm_panning_slide(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 4 | 0;
 i6 = i1 + 8 | 0;
 i3 = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP8[i6 >> 0] = i4;
 if ((HEAPU8[i6 >> 0] | 0) & 240 | 0) if ((HEAPU8[i6 >> 0] | 0) & 15 | 0) {
  STACKTOP = i7;
  return;
 }
 i1 = HEAPU8[i6 >> 0] | 0;
 if ((HEAPU8[i6 >> 0] | 0) & 240 | 0) {
  f8 = Math_fround(Math_fround(i1 >> 4 | 0) / Math_fround(255.0));
  HEAPF32[i3 >> 2] = f8;
  f8 = Math_fround(HEAPF32[i3 >> 2]);
  i6 = (HEAP32[i5 >> 2] | 0) + 44 | 0;
  f8 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f8);
  HEAPF32[i6 >> 2] = f8;
  if (!(Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 44 >> 2]) > Math_fround(1.0))) {
   STACKTOP = i7;
   return;
  }
  HEAPF32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] = Math_fround(1.0);
  STACKTOP = i7;
  return;
 } else {
  f8 = Math_fround(Math_fround(i1 & 15 | 0) / Math_fround(255.0));
  HEAPF32[i3 >> 2] = f8;
  f8 = Math_fround(HEAPF32[i3 >> 2]);
  i6 = (HEAP32[i5 >> 2] | 0) + 44 | 0;
  f8 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) - f8);
  HEAPF32[i6 >> 2] = f8;
  if (!(Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 44 >> 2]) < Math_fround(0.0))) {
   STACKTOP = i7;
   return;
  }
  HEAPF32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] = Math_fround(0.0);
  STACKTOP = i7;
  return;
 }
}

function _jar_xm_waveform(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, f7 = f0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1 + 4 | 0;
 i6 = i1;
 i1 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = i4;
 HEAP8[i1 >> 0] = i3;
 HEAP8[i1 >> 0] = (HEAPU8[i1 >> 0] | 0 | 0) % 64 | 0;
 switch (HEAP32[i6 >> 2] | 0) {
 case 0:
  {
   f7 = Math_fround(-Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(Math_fround(HEAPU8[i1 >> 0] | 0) * Math_fround(6.28318405)) / Math_fround(64.0)))));
   HEAPF32[i2 >> 2] = f7;
   break;
  }
 case 1:
  {
   f7 = Math_fround(Math_fround(32 - (HEAPU8[i1 >> 0] | 0) | 0) / Math_fround(32.0));
   HEAPF32[i2 >> 2] = f7;
   break;
  }
 case 2:
  {
   f7 = (HEAPU8[i1 >> 0] | 0 | 0) >= 32 ? Math_fround(1.0) : Math_fround(-1.0);
   HEAPF32[i2 >> 2] = f7;
   break;
  }
 case 3:
  {
   i6 = (Math_imul(HEAP32[7872] | 0, 1103515245) | 0) + 12345 | 0;
   HEAP32[7872] = i6;
   f7 = Math_fround(Math_fround(Math_fround(((HEAP32[7872] | 0) >>> 16 & 32767) >>> 0) / Math_fround(16384.0)) - Math_fround(1.0));
   HEAPF32[i2 >> 2] = f7;
   break;
  }
 case 4:
  {
   f7 = Math_fround(Math_fround((HEAPU8[i1 >> 0] | 0) - 32 | 0) / Math_fround(32.0));
   HEAPF32[i2 >> 2] = f7;
   break;
  }
 default:
  HEAPF32[i2 >> 2] = Math_fround(0.0);
 }
 f7 = Math_fround(HEAPF32[i2 >> 2]);
 STACKTOP = i5;
 return Math_fround(f7);
}

function _jar_xm_volume_slide(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 4 | 0;
 i6 = i1 + 8 | 0;
 i3 = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP8[i6 >> 0] = i4;
 if ((HEAPU8[i6 >> 0] | 0) & 240 | 0) if ((HEAPU8[i6 >> 0] | 0) & 15 | 0) {
  STACKTOP = i7;
  return;
 }
 i1 = HEAPU8[i6 >> 0] | 0;
 if ((HEAPU8[i6 >> 0] | 0) & 240 | 0) {
  f8 = Math_fround(Math_fround(i1 >> 4 | 0) / Math_fround(64.0));
  HEAPF32[i3 >> 2] = f8;
  f8 = Math_fround(HEAPF32[i3 >> 2]);
  i6 = (HEAP32[i5 >> 2] | 0) + 40 | 0;
  f8 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) + f8);
  HEAPF32[i6 >> 2] = f8;
  if (!(Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 40 >> 2]) > Math_fround(1.0))) {
   STACKTOP = i7;
   return;
  }
  HEAPF32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] = Math_fround(1.0);
  STACKTOP = i7;
  return;
 } else {
  f8 = Math_fround(Math_fround(i1 & 15 | 0) / Math_fround(64.0));
  HEAPF32[i3 >> 2] = f8;
  f8 = Math_fround(HEAPF32[i3 >> 2]);
  i6 = (HEAP32[i5 >> 2] | 0) + 40 | 0;
  f8 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) - f8);
  HEAPF32[i6 >> 2] = f8;
  if (!(Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 40 >> 2]) < Math_fround(0.0))) {
   STACKTOP = i7;
   return;
  }
  HEAPF32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] = Math_fround(0.0);
  STACKTOP = i7;
  return;
 }
}

function _stbir__filter_cubic(f2, f1) {
 f2 = Math_fround(f2);
 f1 = Math_fround(f1);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 HEAPF32[i5 >> 2] = f2;
 HEAPF32[i3 >> 2] = f1;
 f1 = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[i5 >> 2]))));
 HEAPF32[i5 >> 2] = f1;
 i3 = Math_fround(HEAPF32[i5 >> 2]) < Math_fround(1.0);
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 if (i3) {
  f2 = Math_fround(f1 * Math_fround(HEAPF32[i5 >> 2]));
  f2 = Math_fround(Math_fround(Math_fround(f2 * Math_fround(Math_fround(Math_fround(HEAPF32[i5 >> 2]) * Math_fround(3.0)) - Math_fround(6.0))) + Math_fround(4.0)) / Math_fround(6.0));
  HEAPF32[i4 >> 2] = f2;
  f2 = Math_fround(HEAPF32[i4 >> 2]);
  STACKTOP = i6;
  return Math_fround(f2);
 }
 if (f1 < Math_fround(2.0)) {
  f1 = Math_fround(HEAPF32[i5 >> 2]);
  f2 = Math_fround(HEAPF32[i5 >> 2]);
  f2 = Math_fround(Math_fround(Math_fround(f1 * Math_fround(Math_fround(f2 * Math_fround(Math_fround(6.0) - Math_fround(HEAPF32[i5 >> 2]))) + Math_fround(-12.0))) + Math_fround(8.0)) / Math_fround(6.0));
  HEAPF32[i4 >> 2] = f2;
  f2 = Math_fround(HEAPF32[i4 >> 2]);
  STACKTOP = i6;
  return Math_fround(f2);
 } else {
  HEAPF32[i4 >> 2] = Math_fround(0.0);
  f2 = Math_fround(HEAPF32[i4 >> 2]);
  STACKTOP = i6;
  return Math_fround(f2);
 }
 return f0;
}

function _jar_mod_reset(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if (HEAP32[i1 >> 2] | 0) {
  _memclear(HEAP32[i1 >> 2] | 0, 0, 1085);
  _memclear((HEAP32[i1 >> 2] | 0) + 1088 | 0, 0, 124);
  _memclear((HEAP32[i1 >> 2] | 0) + 1212 | 0, 0, 512);
  HEAP16[(HEAP32[i1 >> 2] | 0) + 1728 >> 1] = 0;
  HEAP16[(HEAP32[i1 >> 2] | 0) + 1730 >> 1] = 0;
  HEAP16[(HEAP32[i1 >> 2] | 0) + 1732 >> 1] = 0;
  HEAP16[(HEAP32[i1 >> 2] | 0) + 1734 >> 1] = 0;
  HEAP8[(HEAP32[i1 >> 2] | 0) + 1736 >> 0] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 1740 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 1744 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 1748 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 1752 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 1756 >> 2] = 0;
  _memclear((HEAP32[i1 >> 2] | 0) + 1760 | 0, 0, 1792);
  HEAP16[(HEAP32[i1 >> 2] | 0) + 3552 >> 1] = 0;
  HEAP16[(HEAP32[i1 >> 2] | 0) + 5858 >> 1] = 0;
  HEAP16[(HEAP32[i1 >> 2] | 0) + 5860 >> 1] = 0;
  HEAP16[(HEAP32[i1 >> 2] | 0) + 5862 >> 1] = 0;
  i2 = (_jar_mod_init(HEAP32[i1 >> 2] | 0) | 0) & 1;
  HEAP8[i3 >> 0] = i2;
  i3 = HEAP8[i3 >> 0] | 0;
  i3 = i3 & 1;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  HEAP8[i3 >> 0] = 0;
  i3 = HEAP8[i3 >> 0] | 0;
  i3 = i3 & 1;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _stbtt__track_vertex(i2, i4, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i1 >> 2] = i6;
 if ((HEAP32[i5 >> 2] | 0) > (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0)) i7 = 3; else if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) i7 = 3;
 if ((i7 | 0) == 3) HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] = HEAP32[i5 >> 2];
 if ((HEAP32[i1 >> 2] | 0) > (HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0)) i7 = 6; else if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) i7 = 6;
 if ((i7 | 0) == 6) HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] = HEAP32[i1 >> 2];
 if ((HEAP32[i5 >> 2] | 0) < (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0)) i7 = 9; else if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) i7 = 9;
 if ((i7 | 0) == 9) HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = HEAP32[i5 >> 2];
 if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0)) if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) {
  i7 = HEAP32[i3 >> 2] | 0;
  i7 = i7 + 4 | 0;
  HEAP32[i7 >> 2] = 1;
  STACKTOP = i8;
  return;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = HEAP32[i1 >> 2];
 i7 = HEAP32[i3 >> 2] | 0;
 i7 = i7 + 4 | 0;
 HEAP32[i7 >> 2] = 1;
 STACKTOP = i8;
 return;
}

function _drmp3_L3_pow_43(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0, f10 = f0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i2 >> 2] = 256;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((HEAP32[i7 >> 2] | 0) < 129) {
  f9 = Math_fround(HEAPF32[21328 + (16 + i1 << 2) >> 2]);
  HEAPF32[i5 >> 2] = f9;
  f9 = Math_fround(HEAPF32[i5 >> 2]);
  STACKTOP = i8;
  return Math_fround(f9);
 }
 if ((i1 | 0) < 1024) {
  HEAP32[i2 >> 2] = 16;
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] << 3;
 }
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2] << 1 & 64;
 f10 = Math_fround((HEAP32[i7 >> 2] & 63) - (HEAP32[i6 >> 2] | 0) | 0);
 f10 = Math_fround(f10 / Math_fround((HEAP32[i7 >> 2] & -64) + (HEAP32[i6 >> 2] | 0) | 0));
 HEAPF32[i4 >> 2] = f10;
 f10 = Math_fround(HEAPF32[21328 + (16 + ((HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 6) << 2) >> 2]);
 f9 = Math_fround(HEAPF32[i4 >> 2]);
 f9 = Math_fround(f10 * Math_fround(Math_fround(f9 * Math_fround(Math_fround(Math_fround(HEAPF32[i4 >> 2]) * Math_fround(.222222224)) + Math_fround(1.33333337))) + Math_fround(1.0)));
 f9 = Math_fround(f9 * Math_fround(HEAP32[i2 >> 2] | 0));
 HEAPF32[i5 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i5 >> 2]);
 STACKTOP = i8;
 return Math_fround(f9);
}

function _check_diag(i1, i8) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i9 + 40 | 0;
 i7 = i9;
 i2 = i7;
 i3 = 11776;
 i4 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 if ((i1 | 0) == 4) {
  i2 = i7;
  i3 = 11824;
  i4 = i2 + 40 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
 }
 i5 = 0;
 i1 = 1;
 i2 = 0;
 i4 = -1;
 while (1) {
  i3 = i7 + (i5 << 3) | 0;
  i3 = HEAP32[i8 + 40 + ((HEAP32[i3 >> 2] | 0) * 20 | 0) + (HEAP32[i3 + 4 >> 2] << 2) >> 2] | 0;
  if ((i4 | 0) == (i3 | 0) | (i3 | 0) == 11) {
   i1 = i1 + 1 | 0;
   i3 = i4;
  } else if ((i1 | 0) > 2) {
   i3 = 9;
   break;
  } else {
   i1 = 1;
   i2 = i5;
  }
  i5 = i5 + 1 | 0;
  if (i5 >>> 0 >= 5) {
   i3 = 8;
   break;
  } else i4 = i3;
 }
 if ((i3 | 0) == 8) if ((i1 | 0) > 2) i3 = 9; else i1 = 0;
 if ((i3 | 0) == 9) {
  HEAP32[i6 >> 2] = i2;
  HEAP32[i6 + 4 >> 2] = i1;
  _printf(31884, i6) | 0;
  i3 = i1 + i2 | 0;
  do {
   i6 = i7 + (i2 << 3) | 0;
   HEAP32[i8 + 100 + ((HEAP32[i6 >> 2] | 0) * 20 | 0) + (HEAP32[i6 + 4 >> 2] << 2) >> 2] = 1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i3 | 0));
  _printReel(i8 + 100 | 0);
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _stbtt__dict_get(i6, i2, i3) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i5 >> 2] = i3;
 _stbtt__buf_seek(HEAP32[i7 >> 2] | 0, 0);
 while (1) {
  i2 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0)) {
   i1 = 11;
   break;
  }
  HEAP32[i9 >> 2] = HEAP32[i2 + 4 >> 2];
  while (1) {
   i3 = ((_stbtt__buf_peek8(HEAP32[i7 >> 2] | 0) | 0) & 255 | 0) >= 28;
   i1 = HEAP32[i7 >> 2] | 0;
   if (!i3) break;
   _stbtt__cff_skip_operand(i1);
  }
  HEAP32[i8 >> 2] = HEAP32[i1 + 4 >> 2];
  i3 = (_stbtt__buf_get8(HEAP32[i7 >> 2] | 0) | 0) & 255;
  HEAP32[i4 >> 2] = i3;
  if ((HEAP32[i4 >> 2] | 0) == 12) {
   i3 = (_stbtt__buf_get8(HEAP32[i7 >> 2] | 0) | 0) & 255 | 256;
   HEAP32[i4 >> 2] = i3;
  }
  if ((HEAP32[i4 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
   i1 = 9;
   break;
  }
 }
 if ((i1 | 0) == 9) {
  i9 = HEAP32[i9 >> 2] | 0;
  _stbtt__buf_range(i6, HEAP32[i7 >> 2] | 0, i9 | 0, (HEAP32[i8 >> 2] | 0) - i9 | 0);
  STACKTOP = i10;
  return;
 } else if ((i1 | 0) == 11) {
  _stbtt__buf_range(i6, i2, 0, 0);
  STACKTOP = i10;
  return;
 }
}

function _drmp3_blend_f32(i11, i7, i9, f5, i3) {
 i11 = i11 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 f5 = Math_fround(f5);
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, f16 = f0, f17 = f0;
 i15 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i1 + 32 | 0;
 i14 = i1 + 28 | 0;
 i2 = i1 + 24 | 0;
 i12 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i10 >> 2] = i9;
 HEAPF32[i6 >> 2] = f5;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i4 >> 2] | 0) >>> 0) break;
  f17 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2]);
  f5 = Math_fround(HEAPF32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2]);
  f16 = Math_fround(HEAPF32[i6 >> 2]);
  HEAPF32[i13 >> 2] = f17;
  HEAPF32[i14 >> 2] = f5;
  HEAPF32[i2 >> 2] = f16;
  f16 = Math_fround(HEAPF32[i13 >> 2]);
  f16 = Math_fround(f16 * Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[i2 >> 2])));
  f5 = Math_fround(HEAPF32[i14 >> 2]);
  f5 = Math_fround(f16 + Math_fround(f5 * Math_fround(HEAPF32[i2 >> 2])));
  HEAPF32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f5;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i15;
 return;
}

function _ma_convert_frames(i8, i6, i4, i10, i7, i5, i3, i9, i1, i2) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i22 = i12 + 100 | 0;
 i21 = i12 + 96 | 0;
 i20 = i12 + 92 | 0;
 i19 = i12 + 88 | 0;
 i17 = i12 + 84 | 0;
 i16 = i12 + 80 | 0;
 i15 = i12 + 76 | 0;
 i14 = i12 + 72 | 0;
 i23 = i12 + 64 | 0;
 i18 = i12 + 32 | 0;
 i13 = i12;
 HEAP32[i22 >> 2] = i8;
 HEAP32[i21 >> 2] = i6;
 HEAP32[i20 >> 2] = i4;
 HEAP32[i19 >> 2] = i10;
 HEAP32[i17 >> 2] = i7;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i15 >> 2] = i3;
 HEAP32[i14 >> 2] = i9;
 i12 = i23;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i12 + 4 >> 2] = i2;
 _ma_get_standard_channel_map(0, HEAP32[i20 >> 2] | 0, i18);
 _ma_get_standard_channel_map(0, HEAP32[i15 >> 2] | 0, i13);
 i12 = i23;
 i12 = _ma_convert_frames_ex(HEAP32[i22 >> 2] | 0, HEAP32[i21 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i19 >> 2] | 0, i18, HEAP32[i17 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i14 >> 2] | 0, i13, HEAP32[i12 >> 2] | 0, HEAP32[i12 + 4 >> 2] | 0) | 0;
 setTempRet0(getTempRet0() | 0);
 STACKTOP = i11;
 return i12 | 0;
}

function _IsFileExtension(i7, i2) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i11 + 36 | 0;
 i3 = i11 + 32 | 0;
 i9 = i11 + 40 | 0;
 i5 = i11 + 28 | 0;
 i4 = i11 + 24 | 0;
 i1 = i11 + 20 | 0;
 i6 = i11;
 i8 = i11 + 16 | 0;
 HEAP32[i12 >> 2] = i7;
 HEAP32[i3 >> 2] = i2;
 HEAP8[i9 >> 0] = 0;
 i7 = _GetExtension(HEAP32[i12 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i7;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i12 = HEAP8[i9 >> 0] | 0;
  i12 = i12 & 1;
  STACKTOP = i11;
  return i12 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i12 = _TextSplit(HEAP32[i3 >> 2] | 0, 59, i4) | 0;
 HEAP32[i1 >> 2] = i12;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 _strcpy(i6, _TextToLower(HEAP32[i5 >> 2] | 0) | 0) | 0;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) {
   i10 = 7;
   break;
  }
  if (_TextIsEqual(i6, _TextToLower((HEAP32[(HEAP32[i1 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) + 1 | 0) | 0) | 0) break;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i10 | 0) == 7) {
  i12 = HEAP8[i9 >> 0] | 0;
  i12 = i12 & 1;
  STACKTOP = i11;
  return i12 | 0;
 }
 HEAP8[i9 >> 0] = 1;
 i12 = HEAP8[i9 >> 0] | 0;
 i12 = i12 & 1;
 STACKTOP = i11;
 return i12 | 0;
}

function _stbir__filter_catmullrom(f2, f1) {
 f2 = Math_fround(f2);
 f1 = Math_fround(f1);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 HEAPF32[i5 >> 2] = f2;
 HEAPF32[i3 >> 2] = f1;
 f1 = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[i5 >> 2]))));
 HEAPF32[i5 >> 2] = f1;
 i3 = Math_fround(HEAPF32[i5 >> 2]) < Math_fround(1.0);
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 if (i3) {
  f2 = Math_fround(f1 * Math_fround(HEAPF32[i5 >> 2]));
  f2 = Math_fround(Math_fround(1.0) - Math_fround(f2 * Math_fround(Math_fround(2.5) - Math_fround(Math_fround(HEAPF32[i5 >> 2]) * Math_fround(1.5)))));
  HEAPF32[i4 >> 2] = f2;
  f2 = Math_fround(HEAPF32[i4 >> 2]);
  STACKTOP = i6;
  return Math_fround(f2);
 }
 if (f1 < Math_fround(2.0)) {
  f1 = Math_fround(HEAPF32[i5 >> 2]);
  f2 = Math_fround(HEAPF32[i5 >> 2]);
  f2 = Math_fround(Math_fround(2.0) - Math_fround(f1 * Math_fround(Math_fround(f2 * Math_fround(Math_fround(Math_fround(HEAPF32[i5 >> 2]) * Math_fround(.5)) - Math_fround(2.5))) + Math_fround(4.0))));
  HEAPF32[i4 >> 2] = f2;
  f2 = Math_fround(HEAPF32[i4 >> 2]);
  STACKTOP = i6;
  return Math_fround(f2);
 } else {
  HEAPF32[i4 >> 2] = Math_fround(0.0);
  f2 = Math_fround(HEAPF32[i4 >> 2]);
  STACKTOP = i6;
  return Math_fround(f2);
 }
 return f0;
}

function _jar_xm_amiga_period(f2) {
 f2 = Math_fround(f2);
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 4 | 0;
 i4 = i1;
 i9 = i1 + 13 | 0;
 i6 = i1 + 12 | 0;
 i7 = i1 + 10 | 0;
 i3 = i1 + 8 | 0;
 HEAPF32[i5 >> 2] = f2;
 i1 = ~~Math_fround(HEAPF32[i5 >> 2]) >>> 0;
 HEAP32[i4 >> 2] = i1;
 HEAP8[i9 >> 0] = ((HEAP32[i4 >> 2] | 0) >>> 0) % 12 | 0;
 i1 = ~~Math_fround(Math_fround(Math_fround(HEAPF32[i5 >> 2]) / Math_fround(12.0)) - Math_fround(2.0));
 HEAP8[i6 >> 0] = i1;
 HEAP16[i7 >> 1] = HEAP16[14736 + (HEAPU8[i9 >> 0] << 1) >> 1] | 0;
 HEAP16[i3 >> 1] = HEAP16[14736 + ((HEAPU8[i9 >> 0] | 0) + 1 << 1) >> 1] | 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if ((HEAP8[i6 >> 0] | 0) > 0) {
  HEAP16[i7 >> 1] = HEAPU16[i7 >> 1] >> i1;
  HEAP16[i3 >> 1] = HEAPU16[i3 >> 1] >> HEAP8[i6 >> 0];
 } else if ((i1 | 0) < 0) {
  HEAP16[i7 >> 1] = HEAPU16[i7 >> 1] << 0 - (HEAP8[i6 >> 0] | 0);
  HEAP16[i3 >> 1] = HEAPU16[i3 >> 1] << 0 - (HEAP8[i6 >> 0] | 0);
 }
 f10 = Math_fround(HEAPU16[i7 >> 1] | 0);
 f2 = Math_fround(HEAPF32[i5 >> 2]);
 f2 = Math_fround(f2 - Math_fround((HEAP32[i4 >> 2] | 0) >>> 0));
 f2 = Math_fround(f10 + Math_fround(f2 * Math_fround((HEAPU16[i3 >> 1] | 0) - (HEAPU16[i7 >> 1] | 0) | 0)));
 STACKTOP = i8;
 return Math_fround(f2);
}

function _drmp3_L3_imdct_short(i2, i4, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i6 = i1 + 80 | 0;
 i8 = i1 + 76 | 0;
 i7 = i1 + 72 | 0;
 i5 = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i7 >> 2] = i3;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) <= 0) break;
  i1 = i5;
  i2 = HEAP32[i6 >> 2] | 0;
  i3 = i1 + 72 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  i4 = HEAP32[i6 >> 2] | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
  HEAP32[i4 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
  _drmp3_L3_imdct12(i5, (HEAP32[i6 >> 2] | 0) + 24 | 0, (HEAP32[i8 >> 2] | 0) + 24 | 0);
  _drmp3_L3_imdct12(i5 + 4 | 0, (HEAP32[i6 >> 2] | 0) + 48 | 0, (HEAP32[i8 >> 2] | 0) + 24 | 0);
  i4 = HEAP32[i8 >> 2] | 0;
  _drmp3_L3_imdct12(i5 + 8 | 0, i4 | 0, i4 + 24 | 0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 36;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 72;
 }
 STACKTOP = i9;
 return;
}

function _stb_vorbis_open_file_section(i7, i3, i4, i2, i8) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 1552 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1552);
 i9 = i1 + 1536 | 0;
 i13 = i1 + 1532 | 0;
 i11 = i1 + 1528 | 0;
 i5 = i1 + 1524 | 0;
 i14 = i1 + 1520 | 0;
 i12 = i1 + 1516 | 0;
 i6 = i1 + 1512 | 0;
 HEAP32[i13 >> 2] = i7;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i12 >> 2] = i8;
 _stbv_vorbis_init(i1, HEAP32[i14 >> 2] | 0);
 HEAP32[i1 + 20 >> 2] = HEAP32[i13 >> 2];
 i8 = _ftell(HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i1 + 24 >> 2] = i8;
 HEAP32[i1 + 44 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i11 >> 2];
 if (_stbv_start_decoder(i1) | 0) {
  i14 = _stbv_vorbis_alloc(i1) | 0;
  HEAP32[i6 >> 2] = i14;
  if (HEAP32[i6 >> 2] | 0) {
   _memcpy(HEAP32[i6 >> 2] | 0, i1 | 0, 1512) | 0;
   _stbv_vorbis_pump_first_frame(HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
   i14 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i10;
   return i14 | 0;
  }
 }
 if (HEAP32[i5 >> 2] | 0) HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[i1 + 100 >> 2];
 _stbv_vorbis_deinit(i1);
 HEAP32[i9 >> 2] = 0;
 i14 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i10;
 return i14 | 0;
}

function _asinf(f3) {
 f3 = Math_fround(f3);
 var i1 = 0, i2 = 0, f4 = f0, d5 = 0.0;
 i1 = (HEAPF32[tempDoublePtr >> 2] = f3, HEAP32[tempDoublePtr >> 2] | 0);
 i2 = i1 & 2147483647;
 if (i2 >>> 0 > 1065353215) if ((i2 | 0) == 1065353216) {
  f3 = Math_fround(+f3 * 1.5707963267948966 + 7.52316384526264e-37);
  return Math_fround(f3);
 } else {
  f3 = Math_fround(Math_fround(0.0) / Math_fround(f3 - f3));
  return Math_fround(f3);
 }
 if (i2 >>> 0 >= 1056964608) {
  f3 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_abs(Math_fround(f3)))) * Math_fround(.5));
  d5 = +Math_sqrt(+(+f3));
  f3 = Math_fround(1.5707963267948966 - (d5 + d5 * +Math_fround(Math_fround(f3 * Math_fround(Math_fround(f3 * Math_fround(Math_fround(-.0427434221) - Math_fround(f3 * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround(f3 * Math_fround(.706629634))))) * 2.0);
  f4 = Math_fround(-f3);
  return Math_fround((i1 | 0) < 0 ? f4 : f3);
 }
 if ((i2 + -8388608 | 0) >>> 0 < 956301312) {
  f4 = f3;
  return Math_fround(f4);
 }
 f4 = Math_fround(f3 * f3);
 f4 = Math_fround(Math_fround(Math_fround(Math_fround(f4 * Math_fround(Math_fround(f4 * Math_fround(Math_fround(-.0427434221) - Math_fround(f4 * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround(f4 * Math_fround(.706629634)))) * f3) + f3);
 return Math_fround(f4);
}

function _stbi_zlib_decode_malloc_guesssize_headerflag(i3, i7, i5, i9, i11) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 4112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4112);
 i13 = i1 + 4100 | 0;
 i4 = i1 + 4096 | 0;
 i8 = i1 + 4092 | 0;
 i6 = i1 + 4088 | 0;
 i10 = i1 + 4084 | 0;
 i12 = i1 + 4080 | 0;
 i2 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i12 >> 2] = i11;
 i11 = _stbi__malloc(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i1 >> 2] = i11;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i13 >> 2] = 0;
  i13 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
 if (!(_stbi__do_zlib(i2, HEAP32[i1 >> 2] | 0, HEAP32[i6 >> 2] | 0, 1, HEAP32[i12 >> 2] | 0) | 0)) {
  _free(HEAP32[i2 + 20 >> 2] | 0);
  HEAP32[i13 >> 2] = 0;
  i13 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (HEAP32[i10 >> 2] | 0) HEAP32[HEAP32[i10 >> 2] >> 2] = (HEAP32[i2 + 16 >> 2] | 0) - (HEAP32[i2 + 20 >> 2] | 0);
 HEAP32[i13 >> 2] = HEAP32[i2 + 20 >> 2];
 i13 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _ma_copy_memory_64(i4, i7, i2, i3) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i6 = i1 + 8 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 i7 = i6;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i7 + 4 >> 2] = i3;
 while (1) {
  i7 = i6;
  i4 = HEAP32[i7 + 4 >> 2] | 0;
  if (!(i4 >>> 0 > 0 | (i4 | 0) == 0 & (HEAP32[i7 >> 2] | 0) >>> 0 > 0)) break;
  i4 = i6;
  i2 = HEAP32[i4 >> 2] | 0;
  i4 = HEAP32[i4 + 4 >> 2] | 0;
  i7 = i1;
  HEAP32[i7 >> 2] = i2;
  HEAP32[i7 + 4 >> 2] = i4;
  i7 = i1;
  i3 = HEAP32[i7 + 4 >> 2] | 0;
  i7 = i3 >>> 0 > 0 | (i3 | 0) == 0 & (HEAP32[i7 >> 2] | 0) >>> 0 > 4294967295;
  i3 = i1;
  HEAP32[i3 >> 2] = i7 ? -1 : i2;
  HEAP32[i3 + 4 >> 2] = i7 ? 0 : i4;
  _memcpy(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
  i3 = i1;
  i4 = i6;
  i3 = _i64Subtract(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0) | 0;
  i4 = getTempRet0() | 0;
  i7 = i6;
  HEAP32[i7 >> 2] = i3;
  HEAP32[i7 + 4 >> 2] = i4;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
 }
 STACKTOP = i9;
 return;
}

function _stbtt_GetCodepointBitmapSubpixel(i3, f4, f5, f6, f7, i1, i8, i2, i9, i10) {
 i3 = i3 | 0;
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 f6 = Math_fround(f6);
 f7 = Math_fround(f7);
 i1 = i1 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i17 = i12 + 36 | 0;
 i21 = i12 + 32 | 0;
 i20 = i12 + 28 | 0;
 i19 = i12 + 24 | 0;
 i18 = i12 + 20 | 0;
 i16 = i12 + 16 | 0;
 i15 = i12 + 12 | 0;
 i14 = i12 + 8 | 0;
 i13 = i12 + 4 | 0;
 HEAP32[i17 >> 2] = i3;
 HEAPF32[i21 >> 2] = f4;
 HEAPF32[i20 >> 2] = f5;
 HEAPF32[i19 >> 2] = f6;
 HEAPF32[i18 >> 2] = f7;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i15 >> 2] = i8;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i13 >> 2] = i9;
 HEAP32[i12 >> 2] = i10;
 i9 = HEAP32[i17 >> 2] | 0;
 f4 = Math_fround(HEAPF32[i21 >> 2]);
 f5 = Math_fround(HEAPF32[i20 >> 2]);
 f6 = Math_fround(HEAPF32[i19 >> 2]);
 f7 = Math_fround(HEAPF32[i18 >> 2]);
 i10 = _stbtt_FindGlyphIndex(HEAP32[i17 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
 i12 = _stbtt_GetGlyphBitmapSubpixel(i9, f4, f5, f6, f7, i10, HEAP32[i15 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
 STACKTOP = i11;
 return i12 | 0;
}

function _ma_pcm_converter__src_on_read_deinterleaved(i3, i1, i5, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i6 + 24 | 0;
 i7 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i2 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i6 + 20 >> 2] = i3;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i10 >> 2] = i5;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
 if (!(HEAP32[i2 >> 2] | 0)) ___assert_fail(37276, 36381, 32168, 44622);
 HEAP32[i8 >> 2] = HEAP32[HEAP32[i2 >> 2] >> 2];
 if (!(HEAP32[i8 >> 2] | 0)) ___assert_fail(44136, 36381, 32171, 44622);
 i1 = HEAP32[i8 >> 2] | 0;
 if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 46464 >> 0] | 0) >>> 5 & 1 | 0) {
  i10 = _ma_channel_router_read_deinterleaved(i1 + 120 | 0, HEAP32[i7 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  getTempRet0() | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 } else {
  i10 = _ma_format_converter_read_deinterleaved(i1 + 8 | 0, HEAP32[i7 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  getTempRet0() | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 return 0;
}

function _MouseButtonCallback(i6, i3, i2, i4) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i7 = i8 + 80 | 0;
 i9 = i8 + 72 | 0;
 i10 = i8 + 68 | 0;
 i1 = i8 + 8 | 0;
 i5 = i8;
 HEAP32[i8 + 76 >> 2] = i6;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i8 + 64 >> 2] = i4;
 i6 = HEAP32[i9 >> 2] | 0;
 HEAP8[177218 + i6 >> 0] = HEAP8[177215 + i6 >> 0] | 0;
 HEAP8[177215 + (HEAP32[i9 >> 2] | 0) >> 0] = HEAP32[i10 >> 2];
 if (_IsMouseButtonPressed(0) | 0) HEAP32[i1 >> 2] = 1; else if (_IsMouseButtonReleased(0) | 0) HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 1;
 i3 = i1 + 24 | 0;
 _GetMousePosition(i5);
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 f11 = Math_fround(_GetScreenWidth() | 0);
 i3 = i1 + 24 | 0;
 f11 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) / f11);
 HEAPF32[i3 >> 2] = f11;
 f11 = Math_fround(_GetScreenHeight() | 0);
 i3 = i1 + 24 + 4 | 0;
 f11 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) / f11);
 HEAPF32[i3 >> 2] = f11;
 i3 = i7;
 i2 = i3 + 56 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 _ProcessGestureEvent(i7);
 STACKTOP = i8;
 return;
}

function _stbtt__GetGlyphShapeT2(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i10 = i1 + 108 | 0;
 i8 = i1 + 104 | 0;
 i7 = i1 + 100 | 0;
 i9 = i1 + 96 | 0;
 i6 = i1 + 48 | 0;
 i5 = i1;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i9 >> 2] = i4;
 i1 = i6;
 i2 = i1 + 48 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i6 >> 2] = 1;
 i1 = i5;
 i2 = i1 + 48 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 if (_stbtt__run_charstring(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, i6) | 0) {
  i4 = _malloc((HEAP32[i6 + 44 >> 2] | 0) * 14 | 0) | 0;
  HEAP32[HEAP32[i9 >> 2] >> 2] = i4;
  HEAP32[i5 + 40 >> 2] = HEAP32[HEAP32[i9 >> 2] >> 2];
  if (_stbtt__run_charstring(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, i5) | 0) {
   if ((HEAP32[i5 + 44 >> 2] | 0) != (HEAP32[i6 + 44 >> 2] | 0)) ___assert_fail(52626, 52491, 2231, 52676);
   HEAP32[i10 >> 2] = HEAP32[i5 + 44 >> 2];
   i10 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i11;
   return i10 | 0;
  }
 }
 HEAP32[HEAP32[i9 >> 2] >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 i10 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _ma_pcm_f32_to_s32__reference(i5, i6, i2, i3, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var d1 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i13 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i15 = i7 + 36 | 0;
 i14 = i7 + 32 | 0;
 i8 = i7 + 8 | 0;
 i9 = i7 + 24 | 0;
 i11 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i12 = i7;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 i6 = i8;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i6 + 4 >> 2] = i3;
 HEAP32[i7 + 28 >> 2] = i4;
 HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i10 >> 2] = 0;
 while (1) {
  i15 = i8;
  i14 = HEAP32[i15 + 4 >> 2] | 0;
  if (!(0 < i14 >>> 0 ? 1 : 0 == (i14 | 0) ? (HEAP32[i10 >> 2] | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0 : 0)) break;
  d1 = +Math_fround(HEAPF32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2]);
  HEAPF64[i12 >> 3] = d1;
  if (+HEAPF64[i12 >> 3] < -1.0) d1 = -1.0; else {
   d1 = +(+HEAPF64[i12 >> 3]);
   d1 = +d1 > 1.0 ? 1.0 : +d1;
  }
  HEAPF64[i12 >> 3] = d1;
  HEAPF64[i12 >> 3] = +HEAPF64[i12 >> 3] * 2147483647.0;
  HEAP32[(HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] = ~~+HEAPF64[i12 >> 3];
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 STACKTOP = i13;
 return;
}

function _stbi__paeth(i2, i4, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 28 | 0;
 i3 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i12 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
 i6 = Math_abs((HEAP32[i12 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0) | 0;
 HEAP32[i8 >> 2] = i6;
 i6 = Math_abs((HEAP32[i12 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0) | 0;
 HEAP32[i9 >> 2] = i6;
 i6 = Math_abs((HEAP32[i12 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) | 0;
 HEAP32[i1 >> 2] = i6;
 if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[i1 >> 2] | 0)) {
  HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
  i12 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 if ((HEAP32[i9 >> 2] | 0) <= (HEAP32[i1 >> 2] | 0)) {
  HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
  i12 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i12 | 0;
 } else {
  HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
  i12 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 return 0;
}

function _stbv_getn(i6, i2, i4) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0) if (((HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] | 0) >>> 0) {
  HEAP32[(HEAP32[i7 >> 2] | 0) + 96 >> 2] = 1;
  HEAP32[i5 >> 2] = 0;
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 } else {
  _memcpy(HEAP32[i3 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
  i7 = (HEAP32[i7 >> 2] | 0) + 32 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
  HEAP32[i5 >> 2] = 1;
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 } else if ((_fread(HEAP32[i3 >> 2] | 0, HEAP32[i1 >> 2] | 0, 1, HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) | 0) == 1) {
  HEAP32[i5 >> 2] = 1;
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 } else {
  HEAP32[(HEAP32[i7 >> 2] | 0) + 96 >> 2] = 1;
  HEAP32[i5 >> 2] = 0;
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 return 0;
}

function _stbiw__paeth(i2, i4, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 28 | 0;
 i3 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i12 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
 i6 = Math_abs((HEAP32[i12 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0) | 0;
 HEAP32[i8 >> 2] = i6;
 i6 = Math_abs((HEAP32[i12 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0) | 0;
 HEAP32[i9 >> 2] = i6;
 i6 = Math_abs((HEAP32[i12 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) | 0;
 HEAP32[i1 >> 2] = i6;
 if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[i1 >> 2] | 0)) {
  HEAP8[i10 >> 0] = HEAP32[i3 >> 2];
  i12 = HEAP8[i10 >> 0] | 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 if ((HEAP32[i9 >> 2] | 0) <= (HEAP32[i1 >> 2] | 0)) {
  HEAP8[i10 >> 0] = HEAP32[i5 >> 2];
  i12 = HEAP8[i10 >> 0] | 0;
  STACKTOP = i11;
  return i12 | 0;
 } else {
  HEAP8[i10 >> 0] = HEAP32[i7 >> 2];
  i12 = HEAP8[i10 >> 0] | 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 return 0;
}

function _stbi__mad4sizes_valid(i2, i5, i7, i9, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i1 >> 2] = i4;
 if (!(_stbi__mul2sizes_valid(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) {
  i10 = 0;
  i10 = i10 & 1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i9 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid(i9, HEAP32[i8 >> 2] | 0) | 0)) {
  i10 = 0;
  i10 = i10 & 1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i9 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i9 = Math_imul(i9, HEAP32[i8 >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid(i9, HEAP32[i10 >> 2] | 0) | 0)) {
  i10 = 0;
  i10 = i10 & 1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i9 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i9 = Math_imul(i9, HEAP32[i8 >> 2] | 0) | 0;
 i10 = Math_imul(i9, HEAP32[i10 >> 2] | 0) | 0;
 i10 = (_stbi__addsizes_valid(i10, HEAP32[i1 >> 2] | 0) | 0) != 0;
 i10 = i10 & 1;
 STACKTOP = i11;
 return i10 | 0;
}

function _drmp3_reset(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (HEAP32[i1 >> 2] | 0) {
  HEAP32[(HEAP32[i1 >> 2] | 0) + 6716 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 6720 >> 2] = 0;
  i2 = (HEAP32[i1 >> 2] | 0) + 15944 | 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 21144 >> 2] = 0;
  i2 = (HEAP32[i1 >> 2] | 0) + 21156 | 0;
  HEAP8[i2 >> 0] = HEAP8[i2 >> 0] & -2;
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 15960 + 28 >> 2] = Math_fround(0.0);
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 15960 + 28 + 4 >> 2] = Math_fround(0.0);
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 15960 + 28 + 8 >> 2] = Math_fround(0.0);
  HEAPF32[(HEAP32[i1 >> 2] | 0) + 15960 + 28 + 12 >> 2] = Math_fround(0.0);
  HEAP32[(HEAP32[i1 >> 2] | 0) + 15960 + 1052 + 4100 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 15960 + 1052 + 4104 >> 2] = 0;
  HEAPF64[(HEAP32[i1 >> 2] | 0) + 15960 + 5160 >> 3] = 0.0;
  i2 = (HEAP32[i1 >> 2] | 0) + 15960 + 5160 + 8 | 0;
  HEAP8[i2 >> 0] = HEAP8[i2 >> 0] & -3;
  i2 = (HEAP32[i1 >> 2] | 0) + 15960 + 5160 + 8 | 0;
  HEAP8[i2 >> 0] = HEAP8[i2 >> 0] & -2;
  _drmp3dec_init(HEAP32[i1 >> 2] | 0);
  STACKTOP = i3;
  return;
 } else ___assert_fail(48609, 48387, 3085, 48802);
}

function _rlOrtho(d6, d7, d5, d8, d10, d9) {
 d6 = +d6;
 d7 = +d7;
 d5 = +d5;
 d8 = +d8;
 d10 = +d10;
 d9 = +d9;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i13 = i15 + 240 | 0;
 i11 = i15 + 176 | 0;
 i17 = i15 + 40 | 0;
 i16 = i15 + 32 | 0;
 i4 = i15 + 24 | 0;
 i2 = i15 + 16 | 0;
 i1 = i15 + 8 | 0;
 i3 = i15;
 i12 = i15 + 112 | 0;
 i14 = i15 + 48 | 0;
 HEAPF64[i17 >> 3] = d6;
 HEAPF64[i16 >> 3] = d7;
 HEAPF64[i4 >> 3] = d5;
 HEAPF64[i2 >> 3] = d8;
 HEAPF64[i1 >> 3] = d10;
 HEAPF64[i3 >> 3] = d9;
 _MatrixOrtho(i12, +HEAPF64[i17 >> 3], +HEAPF64[i16 >> 3], +HEAPF64[i4 >> 3], +HEAPF64[i2 >> 3], +HEAPF64[i1 >> 3], +HEAPF64[i3 >> 3]);
 i3 = HEAP32[43894] | 0;
 i1 = i3 | 0;
 i2 = i11;
 i3 = i3 | 0;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 i2 = i13;
 i3 = i12;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 _MatrixMultiply(i14, i11, i13);
 i2 = i1;
 i3 = i14;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 STACKTOP = i15;
 return;
}

function _drmp3_seek_to_pcm_frame(i5, i2, i3) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i4 = i1;
 HEAP32[i6 >> 2] = i5;
 i5 = i4;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i5 + 4 >> 2] = i3;
 if (HEAP32[i6 >> 2] | 0) if (HEAP32[(HEAP32[i6 >> 2] | 0) + 6700 >> 2] | 0) {
  i5 = i4;
  i1 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[i5 >> 2] | 0) == 0 & (HEAP32[i5 + 4 >> 2] | 0) == 0) {
   i6 = _drmp3_seek_to_start_of_stream(i1) | 0;
   HEAP32[i7 >> 2] = i6;
   i7 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  if (HEAP32[i1 + 21136 >> 2] | 0) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 21140 >> 2] | 0) >>> 0 > 0) {
   i5 = i4;
   i6 = _drmp3_seek_to_pcm_frame__seek_table(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i6;
   i7 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  i5 = i4;
  i6 = _drmp3_seek_to_pcm_frame__brute_force(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = i6;
  i7 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 i7 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _stbi__convert_16_to_8(i4, i6, i3, i2) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i13 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i12 >> 2] = i2;
 i6 = Math_imul(HEAP32[i14 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
 i6 = Math_imul(i6, HEAP32[i12 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i6;
 i6 = _stbi__malloc(HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i6;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i14 = (_stbi__err(53511) | 0) != 0;
  HEAP32[i10 >> 2] = i14 ? 0 : 0;
  i14 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i14 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i9 >> 2] | 0;
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
  HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] = (HEAPU16[i1 + (HEAP32[i7 >> 2] << 1) >> 1] | 0) >> 8;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 _free(i1);
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i14 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i11;
 return i14 | 0;
}

function _stbiw__sbgrowf(i2, i3, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i8 >> 2] = i5;
 if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) i1 = (HEAP32[(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + -8 >> 2] << 1) + (HEAP32[i4 >> 2] | 0) | 0; else i1 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
 HEAP32[i9 >> 2] = i1;
 if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) i1 = (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + -8 | 0; else i1 = 0;
 i8 = _realloc(i1, (Math_imul(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0) + 8 | 0) | 0;
 HEAP32[i6 >> 2] = i8;
 if (!(HEAP32[i6 >> 2] | 0)) ___assert_fail(54778, 54694, 793, 54780);
 if (!(HEAP32[i6 >> 2] | 0)) {
  i9 = HEAP32[i7 >> 2] | 0;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 if (!(HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[HEAP32[i7 >> 2] >> 2] = (HEAP32[i6 >> 2] | 0) + 8;
 HEAP32[(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + -8 >> 2] = HEAP32[i9 >> 2];
 i9 = HEAP32[i7 >> 2] | 0;
 i9 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i10;
 return i9 | 0;
}

function _jar_xm_get_remaining_samples(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 8 | 0;
 i4 = i1;
 i1 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = i4;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 i2 = _jar_xm_get_loop_count(HEAP32[i3 >> 2] | 0) | 0;
 HEAP8[i1 >> 0] = i2;
 _jar_xm_set_max_loop_count(HEAP32[i3 >> 2] | 0, 0);
 while (1) {
  i2 = (_jar_xm_get_loop_count(HEAP32[i3 >> 2] | 0) | 0) & 255;
  if ((i2 | 0) != (HEAPU8[i1 >> 0] | 0 | 0)) break;
  f7 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 352 >> 2]);
  i6 = i4;
  f7 = Math_fround(Math_fround(+((HEAP32[i6 >> 2] | 0) >>> 0) + 4294967296.0 * +((HEAP32[i6 + 4 >> 2] | 0) >>> 0)) + f7);
  i6 = +Math_abs(+f7) >= 1.0 ? (+f7 > 0.0 ? ~~+Math_min(+Math_floor(+f7 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil((+f7 - +(~~+f7 >>> 0)) / 4294967296.0) >>> 0) : 0;
  i2 = i4;
  HEAP32[i2 >> 2] = ~~+f7 >>> 0;
  HEAP32[i2 + 4 >> 2] = i6;
  HEAPF32[(HEAP32[i3 >> 2] | 0) + 352 >> 2] = Math_fround(0.0);
  _jar_xm_tick(HEAP32[i3 >> 2] | 0);
 }
 HEAP8[(HEAP32[i3 >> 2] | 0) + 380 >> 0] = HEAP8[i1 >> 0] | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 setTempRet0(HEAP32[i4 + 4 >> 2] | 0);
 STACKTOP = i5;
 return i6 | 0;
}

function _GetPixelDataSize(i6, i4, i3) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 do switch (HEAP32[i9 >> 2] | 0) {
 case 1:
  {
   HEAP32[i1 >> 2] = 8;
   break;
  }
 case 6:
 case 5:
 case 3:
 case 2:
  {
   HEAP32[i1 >> 2] = 16;
   break;
  }
 case 7:
  {
   HEAP32[i1 >> 2] = 32;
   break;
  }
 case 4:
  {
   HEAP32[i1 >> 2] = 24;
   break;
  }
 case 8:
  {
   HEAP32[i1 >> 2] = 32;
   break;
  }
 case 9:
  {
   HEAP32[i1 >> 2] = 96;
   break;
  }
 case 10:
  {
   HEAP32[i1 >> 2] = 128;
   break;
  }
 case 19:
 case 18:
 case 16:
 case 15:
 case 12:
 case 11:
  {
   HEAP32[i1 >> 2] = 4;
   break;
  }
 case 20:
 case 17:
 case 14:
 case 13:
  {
   HEAP32[i1 >> 2] = 8;
   break;
  }
 case 21:
  {
   HEAP32[i1 >> 2] = 2;
   break;
  }
 default:
  {}
 } while (0);
 i9 = Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 i9 = (Math_imul(i9, HEAP32[i1 >> 2] | 0) | 0) / 8 | 0;
 HEAP32[i2 >> 2] = i9;
 STACKTOP = i8;
 return HEAP32[i2 >> 2] | 0;
}

function _ma_device_uninit(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i3;
 if (!(_ma_device__is_initialized(HEAP32[i1 >> 2] | 0) | 0)) {
  STACKTOP = i5;
  return;
 }
 if (_ma_device_is_started(HEAP32[i1 >> 2] | 0) | 0) _ma_device_stop(HEAP32[i1 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 >> 2] = 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = HEAP32[i2 >> 2];
 if (!(_ma_context_is_backend_asynchronous(HEAP32[HEAP32[i1 >> 2] >> 2] | 0) | 0)) {
  _ma_event_signal((HEAP32[i1 >> 2] | 0) + 60 | 0) | 0;
  _ma_thread_wait((HEAP32[i1 >> 2] | 0) + 312 | 0);
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[HEAP32[i1 >> 2] >> 2] | 0) + 120 >> 2] & 31](HEAP32[i1 >> 2] | 0);
 _ma_event_uninit((HEAP32[i1 >> 2] | 0) + 228 | 0);
 _ma_event_uninit((HEAP32[i1 >> 2] | 0) + 144 | 0);
 _ma_event_uninit((HEAP32[i1 >> 2] | 0) + 60 | 0);
 _ma_mutex_uninit((HEAP32[i1 >> 2] | 0) + 28 | 0);
 if ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 324 >> 0] | 0) >>> 3 & 1 | 0) {
  _ma_context_uninit(HEAP32[HEAP32[i1 >> 2] >> 2] | 0) | 0;
  _ma_free(HEAP32[HEAP32[i1 >> 2] >> 2] | 0);
 }
 _memset(HEAP32[i1 >> 2] | 0, 0, 94400) | 0;
 STACKTOP = i5;
 return;
}

function _ma_pcm_converter__post_format_converter_on_read(i3, i1, i6, i8) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 i10 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i2 = i10 + 16 | 0;
 i7 = i10 + 12 | 0;
 i11 = i10 + 8 | 0;
 i5 = i10 + 4 | 0;
 i4 = i10;
 HEAP32[i10 + 20 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
 if (!(HEAP32[i5 >> 2] | 0)) ___assert_fail(37276, 36381, 32123, 44847);
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 if (!(HEAP32[i4 >> 2] | 0)) ___assert_fail(44136, 36381, 32126, 44847);
 if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 46464 >> 0] | 0) >>> 1 & 1 | 0) ___assert_fail(44895, 36381, 32129, 44847);
 if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 46464 >> 0] | 0) >>> 3 & 1 | 0) ___assert_fail(44936, 36381, 32130, 44847);
 if (!((HEAPU8[(HEAP32[i4 >> 2] | 0) + 46464 >> 0] | 0) >>> 4 & 1)) {
  i11 = FUNCTION_TABLE_iiiii[HEAP32[HEAP32[i4 >> 2] >> 2] & 15](HEAP32[i4 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0;
  STACKTOP = i9;
  return i11 | 0;
 } else ___assert_fail(44972, 36381, 32131, 44847);
 return 0;
}

function _stbv_ilog(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 do if ((HEAP32[i1 >> 2] | 0) < 0) HEAP32[i4 >> 2] = 0; else {
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i1 >> 2] | 0) < 16384) {
   i3 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) < 16) {
    HEAP32[i4 >> 2] = 0 + (HEAP8[14544 + i3 >> 0] | 0);
    break;
   }
   i1 = HEAP32[i1 >> 2] | 0;
   if ((i3 | 0) < 512) {
    HEAP32[i4 >> 2] = 5 + (HEAP8[14544 + (i1 >> 5) >> 0] | 0);
    break;
   } else {
    HEAP32[i4 >> 2] = 10 + (HEAP8[14544 + (i1 >> 10) >> 0] | 0);
    break;
   }
  }
  i3 = HEAP32[i1 >> 2] | 0;
  if ((i2 | 0) < 16777216) {
   i1 = HEAP32[i1 >> 2] | 0;
   if ((i3 | 0) < 524288) {
    HEAP32[i4 >> 2] = 15 + (HEAP8[14544 + (i1 >> 15) >> 0] | 0);
    break;
   } else {
    HEAP32[i4 >> 2] = 20 + (HEAP8[14544 + (i1 >> 20) >> 0] | 0);
    break;
   }
  } else {
   i1 = HEAP32[i1 >> 2] | 0;
   if ((i3 | 0) < 536870912) {
    HEAP32[i4 >> 2] = 25 + (HEAP8[14544 + (i1 >> 25) >> 0] | 0);
    break;
   } else {
    HEAP32[i4 >> 2] = 30 + (HEAP8[14544 + (i1 >> 30) >> 0] | 0);
    break;
   }
  }
 } while (0);
 STACKTOP = i5;
 return HEAP32[i4 >> 2] | 0;
}

function _MatrixTranslate(i1, f4, f5, f6) {
 i1 = i1 | 0;
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 f6 = Math_fround(f6);
 var i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i9 = i7 + 72 | 0;
 i8 = i7 + 68 | 0;
 i3 = i7 + 64 | 0;
 i2 = i7;
 HEAPF32[i9 >> 2] = f4;
 HEAPF32[i8 >> 2] = f5;
 HEAPF32[i3 >> 2] = f6;
 HEAPF32[i2 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 4 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 8 >> 2] = Math_fround(0.0);
 f6 = Math_fround(HEAPF32[i9 >> 2]);
 HEAPF32[i2 + 12 >> 2] = f6;
 HEAPF32[i2 + 16 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 20 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 24 >> 2] = Math_fround(0.0);
 f6 = Math_fround(HEAPF32[i8 >> 2]);
 HEAPF32[i2 + 28 >> 2] = f6;
 HEAPF32[i2 + 32 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 36 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 40 >> 2] = Math_fround(1.0);
 f6 = Math_fround(HEAPF32[i3 >> 2]);
 HEAPF32[i2 + 44 >> 2] = f6;
 HEAPF32[i2 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 56 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 60 >> 2] = Math_fround(1.0);
 i3 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 STACKTOP = i7;
 return;
}

function _GenImageColor(i5, i4, i2, i6) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i10 = i1 + 32 | 0;
 i7 = i1 + 28 | 0;
 i9 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i3 = i1;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i7 >> 2] = i2;
 i4 = _calloc(Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0, 4) | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  i4 = (HEAP32[i8 >> 2] | 0) < (Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0);
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i4) break;
  i4 = i1 + (HEAP32[i8 >> 2] << 2) | 0;
  HEAP8[i4 >> 0] = HEAP8[i6 >> 0] | 0;
  HEAP8[i4 + 1 >> 0] = HEAP8[i6 + 1 >> 0] | 0;
  HEAP8[i4 + 2 >> 0] = HEAP8[i6 + 2 >> 0] | 0;
  HEAP8[i4 + 3 >> 0] = HEAP8[i6 + 3 >> 0] | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 _LoadImageEx(i3, i1, HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 _free(HEAP32[i9 >> 2] | 0);
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 STACKTOP = i11;
 return;
}

function _Vector3Normalize(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, f7 = f0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i6 + 20 | 0;
 i4 = i6 + 8 | 0;
 i3 = i6 + 4 | 0;
 i2 = i6;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 f7 = Math_fround(_Vector3Length(i8));
 HEAPF32[i3 >> 2] = f7;
 if (Math_fround(HEAPF32[i3 >> 2]) == Math_fround(0.0)) HEAPF32[i3 >> 2] = Math_fround(1.0);
 f7 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[i3 >> 2]));
 HEAPF32[i2 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i2 >> 2]);
 f7 = Math_fround(Math_fround(HEAPF32[i4 >> 2]) * f7);
 HEAPF32[i4 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i2 >> 2]);
 i8 = i4 + 4 | 0;
 f7 = Math_fround(Math_fround(HEAPF32[i8 >> 2]) * f7);
 HEAPF32[i8 >> 2] = f7;
 f7 = Math_fround(HEAPF32[i2 >> 2]);
 i8 = i4 + 8 | 0;
 f7 = Math_fround(Math_fround(HEAPF32[i8 >> 2]) * f7);
 HEAPF32[i8 >> 2] = f7;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 STACKTOP = i6;
 return;
}

function _ma_channel_map_equal(i6, i2, i4) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 if ((HEAP32[i3 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
  HEAP32[i8 >> 2] = 0;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if ((HEAP32[i7 >> 2] | 0) == 0 | (HEAP32[i7 >> 2] | 0) >>> 0 > 32) {
  HEAP32[i8 >> 2] = 0;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) {
   i1 = 10;
   break;
  }
  if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0) != (HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0)) {
   i1 = 8;
   break;
  }
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 8) {
  HEAP32[i8 >> 2] = 0;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 } else if ((i1 | 0) == 10) {
  HEAP32[i8 >> 2] = 1;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 return 0;
}

function _GifPartitionByMedian(i3, i5, i10, i1, i7) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i12 + 20 | 0;
 i6 = i12 + 16 | 0;
 i11 = i12 + 12 | 0;
 i2 = i12 + 8 | 0;
 i8 = i12 + 4 | 0;
 i9 = i12;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i8 >> 2] = i7;
 if ((HEAP32[i6 >> 2] | 0) >= ((HEAP32[i11 >> 2] | 0) - 1 | 0)) {
  STACKTOP = i12;
  return;
 }
 i10 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = (i10 | 0) + (((HEAP32[i11 >> 2] | 0) - i10 | 0) / 2 | 0);
 i10 = _GifPartition(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 if ((HEAP32[i9 >> 2] | 0) > (HEAP32[i8 >> 2] | 0)) _GifPartitionByMedian(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i8 >> 2] | 0);
 if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i12;
  return;
 }
 _GifPartitionByMedian(HEAP32[i4 >> 2] | 0, (HEAP32[i9 >> 2] | 0) + 1 | 0, HEAP32[i11 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i8 >> 2] | 0);
 STACKTOP = i12;
 return;
}

function _ma_get_standard_channel_map(i5, i3, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i5;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 switch (HEAP32[i7 >> 2] | 0) {
 case 1:
  {
   _ma_get_standard_channel_map_alsa(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0);
   STACKTOP = i6;
   return;
  }
 case 2:
  {
   _ma_get_standard_channel_map_rfc3551(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0);
   STACKTOP = i6;
   return;
  }
 case 3:
  {
   _ma_get_standard_channel_map_flac(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0);
   STACKTOP = i6;
   return;
  }
 case 4:
  {
   _ma_get_standard_channel_map_vorbis(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0);
   STACKTOP = i6;
   return;
  }
 case 5:
  {
   _ma_get_standard_channel_map_sound4(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0);
   STACKTOP = i6;
   return;
  }
 case 6:
  {
   _ma_get_standard_channel_map_sndio(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0);
   STACKTOP = i6;
   return;
  }
 default:
  {
   _ma_get_standard_channel_map_microsoft(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0);
   STACKTOP = i6;
   return;
  }
 }
}

function _ma_pcm_s16_to_s32__reference(i5, i8, i1, i2, i4) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = STACKTOP;
 i11 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i11 + 32 | 0;
 i12 = i11 + 28 | 0;
 i3 = i11 + 8 | 0;
 i6 = i11 + 20 | 0;
 i9 = i11 + 16 | 0;
 i7 = i11;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i12 >> 2] = i8;
 i8 = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i11 + 24 >> 2] = i4;
 HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
 i11 = i7;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 while (1) {
  i12 = i7;
  i8 = HEAP32[i12 + 4 >> 2] | 0;
  i13 = i3;
  i11 = HEAP32[i13 + 4 >> 2] | 0;
  if (!(i8 >>> 0 < i11 >>> 0 | ((i8 | 0) == (i11 | 0) ? (HEAP32[i12 >> 2] | 0) >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0 : 0))) break;
  HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] = HEAP16[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] << 1) >> 1] << 16;
  i11 = i7;
  i11 = _i64Add(HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0, 1, 0) | 0;
  i12 = getTempRet0() | 0;
  i13 = i7;
  HEAP32[i13 >> 2] = i11;
  HEAP32[i13 + 4 >> 2] = i12;
 }
 STACKTOP = i10;
 return;
}

function _stbtt_GetCodepointSDF(i3, f7, i1, i5, i4, f6, i8, i2, i9, i10) {
 i3 = i3 | 0;
 f7 = Math_fround(f7);
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 f6 = Math_fround(f6);
 i8 = i8 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i11 = STACKTOP;
 i12 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i20 = i12 + 32 | 0;
 i21 = i12 + 28 | 0;
 i19 = i12 + 24 | 0;
 i17 = i12 + 20 | 0;
 i16 = i12 + 36 | 0;
 i18 = i12 + 16 | 0;
 i15 = i12 + 12 | 0;
 i14 = i12 + 8 | 0;
 i13 = i12 + 4 | 0;
 HEAP32[i20 >> 2] = i3;
 HEAPF32[i21 >> 2] = f7;
 HEAP32[i19 >> 2] = i1;
 HEAP32[i17 >> 2] = i5;
 HEAP8[i16 >> 0] = i4;
 HEAPF32[i18 >> 2] = f6;
 HEAP32[i15 >> 2] = i8;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i13 >> 2] = i9;
 HEAP32[i12 >> 2] = i10;
 i9 = HEAP32[i20 >> 2] | 0;
 f6 = Math_fround(HEAPF32[i21 >> 2]);
 i10 = _stbtt_FindGlyphIndex(HEAP32[i20 >> 2] | 0, HEAP32[i19 >> 2] | 0) | 0;
 f7 = Math_fround(HEAPF32[i18 >> 2]);
 i12 = _stbtt_GetGlyphSDF(i9, f6, i10, HEAP32[i17 >> 2] | 0, HEAP8[i16 >> 0] | 0, f7, HEAP32[i15 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
 STACKTOP = i11;
 return i12 | 0;
}

function _stbir__add_empty_ring_buffer_entry(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i7 >> 2] = i4;
 HEAP32[i5 >> 2] = i2;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 172 >> 2] = HEAP32[i5 >> 2];
 i1 = (HEAP32[i7 >> 2] | 0) + 176 | 0;
 do if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 176 >> 2] | 0) < 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 168 >> 2] = HEAP32[i5 >> 2];
 } else {
  i5 = HEAP32[i7 >> 2] | 0;
  HEAP32[i6 >> 2] = ((HEAP32[i1 >> 2] | 0) + ((HEAP32[i5 + 172 >> 2] | 0) - (HEAP32[i5 + 168 >> 2] | 0)) | 0) % (HEAP32[i5 + 164 >> 2] | 0) | 0;
  if ((HEAP32[i6 >> 2] | 0) != (HEAP32[(HEAP32[i7 >> 2] | 0) + 176 >> 2] | 0)) break; else ___assert_fail(55722, 54884, 1431, 55779);
 } while (0);
 i5 = HEAP32[i7 >> 2] | 0;
 i6 = _stbir__get_ring_buffer_entry(HEAP32[i5 + 180 >> 2] | 0, HEAP32[i6 >> 2] | 0, ((HEAP32[i5 + 160 >> 2] | 0) >>> 0) / 4 | 0) | 0;
 HEAP32[i3 >> 2] = i6;
 _memset(HEAP32[i3 >> 2] | 0, 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 160 >> 2] | 0) | 0;
 STACKTOP = i8;
 return HEAP32[i3 >> 2] | 0;
}

function _UnloadBuffersDefault() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i2;
 if (HEAP8[177201] & 1) FUNCTION_TABLE_vi[HEAP32[43934] & 31](0);
 _glDisableVertexAttribArray(0);
 _glDisableVertexAttribArray(1);
 _glDisableVertexAttribArray(2);
 _glDisableVertexAttribArray(3);
 _glBindBuffer(34962, 0);
 _glBindBuffer(34963, 0);
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= 1) break;
  _glDeleteBuffers(1, 165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 32 | 0);
  _glDeleteBuffers(1, 165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 32 + 4 | 0);
  _glDeleteBuffers(1, 165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 32 + 8 | 0);
  _glDeleteBuffers(1, 165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 32 + 12 | 0);
  if (HEAP8[177201] & 1) FUNCTION_TABLE_vii[HEAP32[44012] & 63](1, 165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 28 | 0);
  _free(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 12 >> 2] | 0);
  _free(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 16 >> 2] | 0);
  _free(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 20 >> 2] | 0);
  _free(HEAP32[165328 + ((HEAP32[i1 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return;
}

function _stbv_setup_malloc(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 3 & -4;
 i4 = (HEAP32[i3 >> 2] | 0) + 8 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 80 >> 2] | 0)) {
  if (HEAP32[i5 >> 2] | 0) i1 = _malloc(HEAP32[i5 >> 2] | 0) | 0; else i1 = 0;
  HEAP32[i6 >> 2] = i1;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = (HEAP32[i4 + 80 >> 2] | 0) + (HEAP32[i4 + 88 >> 2] | 0);
 if (((HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) > (HEAP32[(HEAP32[i3 >> 2] | 0) + 92 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 } else {
  i4 = (HEAP32[i3 >> 2] | 0) + 88 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
  HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function _TextSplit(i7, i5, i2) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 12 | 0;
 i6 = i1 + 16 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP8[i6 >> 0] = i5;
 HEAP32[i3 >> 2] = i2;
 _memset(171776, 0, 1024) | 0;
 HEAP32[43200] = 171776;
 HEAP32[i4 >> 2] = 0;
 L1 : do if (HEAP32[i8 >> 2] | 0) {
  HEAP32[i4 >> 2] = 1;
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >= 1024) break L1;
   i7 = HEAP32[i1 >> 2] | 0;
   HEAP8[171776 + i7 >> 0] = HEAP8[(HEAP32[i8 >> 2] | 0) + i7 >> 0] | 0;
   if (!(HEAP8[171776 + (HEAP32[i1 >> 2] | 0) >> 0] | 0)) break L1;
   if ((HEAP8[171776 + (HEAP32[i1 >> 2] | 0) >> 0] | 0) == (HEAP8[i6 >> 0] | 0)) {
    HEAP8[171776 + (HEAP32[i1 >> 2] | 0) >> 0] = 0;
    HEAP32[172800 + (HEAP32[i4 >> 2] << 2) >> 2] = 171776 + (HEAP32[i1 >> 2] | 0) + 1;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
    if ((HEAP32[i4 >> 2] | 0) == 128) break L1;
   }
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i9;
 return 172800;
}

function _UnloadFont(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i3 = i1 + 44 | 0;
 i4 = i1;
 i6 = i1 + 8 | 0;
 i1 = i1 + 4 | 0;
 i7 = HEAP32[i2 + 8 >> 2] | 0;
 _GetFontDefault(i6);
 if ((i7 | 0) == (HEAP32[i6 + 8 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i2 + 4 >> 2] | 0)) break;
  i7 = (HEAP32[i2 + 32 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) * 36 | 0) + 16 | 0;
  HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  HEAP32[i3 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
  _UnloadImage(i3);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 i7 = i2 + 8 | 0;
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
 _UnloadTexture(i3);
 _free(HEAP32[i2 + 32 >> 2] | 0);
 _free(HEAP32[i2 + 28 >> 2] | 0);
 _TraceLog(2, 52343, i4);
 STACKTOP = i5;
 return;
}

function _ma_context_enumerate_devices__webaudio(i6, i2, i8) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 688 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(688);
 i7 = i1 + 676 | 0;
 i3 = i1 + 672 | 0;
 i9 = i1 + 668 | 0;
 i4 = i1 + 664 | 0;
 i5 = i1 + 332 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i4 >> 2] = 1;
 if (!(HEAP32[i7 >> 2] | 0)) ___assert_fail(37253, 36381, 24923, 37589);
 if (!(HEAP32[i3 >> 2] | 0)) ___assert_fail(37628, 36381, 24924, 37589);
 if (HEAP32[i4 >> 2] | 0) {
  _memset(i5 | 0, 0, 332) | 0;
  _ma_strncpy_s(i5 + 32 | 0, 256, 37651, -1) | 0;
  i8 = FUNCTION_TABLE_iiiii[HEAP32[i3 >> 2] & 15](HEAP32[i7 >> 2] | 0, 1, i5, HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = i8;
 }
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i10;
  return 0;
 }
 if (!(_ma_is_capture_supported__webaudio() | 0)) {
  STACKTOP = i10;
  return 0;
 }
 _memset(i1 | 0, 0, 332) | 0;
 _ma_strncpy_s(i1 + 32 | 0, 256, 37675, -1) | 0;
 i9 = FUNCTION_TABLE_iiiii[HEAP32[i3 >> 2] & 15](HEAP32[i7 >> 2] | 0, 2, i1, HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = i9;
 STACKTOP = i10;
 return 0;
}

function _ma__is_channel_map_valid(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 L1 : do if (HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) {
  if (!(HEAP32[i5 >> 2] | 0)) {
   HEAP32[i7 >> 2] = 0;
   i7 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  HEAP32[i6 >> 2] = 0;
  L7 : while (1) {
   if ((HEAP32[i6 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break L1;
   HEAP32[i1 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   while (1) {
    if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
    if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0) == (HEAPU8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0)) break L7;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   }
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  HEAP32[i7 >> 2] = 0;
  i7 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 HEAP32[i7 >> 2] = 1;
 i7 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _stbtt__cff_index_get(i2, i3, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i6 >> 2] = i5;
 _stbtt__buf_seek(i3, 0);
 i5 = _stbtt__buf_get(i3, 2) | 0;
 HEAP32[i4 >> 2] = i5;
 i5 = (_stbtt__buf_get8(i3) | 0) & 255;
 HEAP32[i7 >> 2] = i5;
 if ((HEAP32[i6 >> 2] | 0) < 0) ___assert_fail(52902, 52491, 1234, 52922);
 if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) ___assert_fail(52902, 52491, 1234, 52922);
 if ((HEAP32[i7 >> 2] | 0) >= 1 & (HEAP32[i7 >> 2] | 0) <= 4) {
  _stbtt__buf_skip(i3, Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0);
  i6 = _stbtt__buf_get(i3, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = i6;
  i6 = _stbtt__buf_get(i3, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i1 >> 2] = i6;
  i7 = 2 + (Math_imul((HEAP32[i4 >> 2] | 0) + 1 | 0, HEAP32[i7 >> 2] | 0) | 0) | 0;
  i8 = HEAP32[i8 >> 2] | 0;
  _stbtt__buf_range(i2, i3, i7 + i8 | 0, (HEAP32[i1 >> 2] | 0) - i8 | 0);
  STACKTOP = i9;
  return;
 } else ___assert_fail(52819, 52491, 1235, 52922);
}

function _ma_zero_memory_64(i4, i2, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 16 | 0;
 i6 = i1 + 8 | 0;
 HEAP32[i5 >> 2] = i4;
 i4 = i6;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = i3;
 while (1) {
  i4 = i6;
  i3 = HEAP32[i4 + 4 >> 2] | 0;
  if (!(i3 >>> 0 > 0 | (i3 | 0) == 0 & (HEAP32[i4 >> 2] | 0) >>> 0 > 0)) break;
  i3 = i6;
  i8 = HEAP32[i3 >> 2] | 0;
  i3 = HEAP32[i3 + 4 >> 2] | 0;
  i4 = i1;
  HEAP32[i4 >> 2] = i8;
  HEAP32[i4 + 4 >> 2] = i3;
  i4 = i1;
  i2 = HEAP32[i4 + 4 >> 2] | 0;
  i4 = i2 >>> 0 > 0 | (i2 | 0) == 0 & (HEAP32[i4 >> 2] | 0) >>> 0 > 4294967295;
  i2 = i1;
  HEAP32[i2 >> 2] = i4 ? -1 : i8;
  HEAP32[i2 + 4 >> 2] = i4 ? 0 : i3;
  _memset(HEAP32[i5 >> 2] | 0, 0, HEAP32[i1 >> 2] | 0) | 0;
  i2 = i1;
  i3 = i6;
  i2 = _i64Subtract(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0) | 0;
  i3 = getTempRet0() | 0;
  i4 = i6;
  HEAP32[i4 >> 2] = i2;
  HEAP32[i4 + 4 >> 2] = i3;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
 }
 STACKTOP = i7;
 return;
}

function _jar_xm_envelopes(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, f4 = f0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP8[(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0) + 122 + 52 >> 0] & 1) {
  if (!(HEAP8[(HEAP32[i1 >> 2] | 0) + 50 >> 0] & 1)) {
   f4 = Math_fround(Math_fround(HEAPU16[(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0) + 244 >> 1] | 0) / Math_fround(65536.0));
   i2 = (HEAP32[i1 >> 2] | 0) + 52 | 0;
   f4 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) - f4);
   HEAPF32[i2 >> 2] = f4;
   if (Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 52 >> 2]) < Math_fround(0.0)) HEAPF32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] = Math_fround(0.0);
  }
  i2 = HEAP32[i1 >> 2] | 0;
  _jar_xm_envelope_tick(i2 | 0, (HEAP32[i2 + 8 >> 2] | 0) + 122 | 0, i2 + 64 | 0, i2 + 56 | 0);
 }
 if (!(HEAP8[(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0) + 178 + 52 >> 0] & 1)) {
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 _jar_xm_envelope_tick(i2 | 0, (HEAP32[i2 + 8 >> 2] | 0) + 178 | 0, i2 + 66 | 0, i2 + 60 | 0);
 STACKTOP = i3;
 return;
}

function _jar_xm_check_sanity_postload(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 i3 = i1;
 i1 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP8[i1 >> 0] = 0;
 while (1) {
  if ((HEAPU8[i1 >> 0] | 0 | 0) >= (HEAPU16[(HEAP32[i3 >> 2] | 0) + 4 + 42 >> 1] | 0 | 0)) {
   i1 = 9;
   break;
  }
  if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + 4 + 56 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0 | 0) >= (HEAPU16[(HEAP32[i3 >> 2] | 0) + 4 + 48 >> 1] | 0 | 0)) {
   if (((HEAPU8[i1 >> 0] | 0) + 1 | 0) != (HEAPU16[(HEAP32[i3 >> 2] | 0) + 4 + 42 >> 1] | 0 | 0)) {
    i1 = 7;
    break;
   }
   if ((HEAPU16[(HEAP32[i3 >> 2] | 0) + 4 + 42 >> 1] | 0 | 0) <= 1) {
    i1 = 7;
    break;
   }
   i2 = (HEAP32[i3 >> 2] | 0) + 4 + 42 | 0;
   HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + -1 << 16 >> 16;
  }
  HEAP8[i1 >> 0] = (HEAP8[i1 >> 0] | 0) + 1 << 24 >> 24;
 }
 if ((i1 | 0) == 7) {
  HEAP32[i4 >> 2] = 1;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 } else if ((i1 | 0) == 9) {
  HEAP32[i4 >> 2] = 0;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function _memcpy_pad(i3, i4, i6, i7, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i15 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i14 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i12 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i15 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 if ((HEAP32[i8 >> 2] | 0) >>> 0 >= (HEAP32[i11 >> 2] | 0) >>> 0) i1 = (HEAP32[i8 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0; else i1 = 0;
 HEAP32[i2 >> 2] = i1;
 i14 = HEAP32[i10 >> 2] | 0;
 i15 = HEAP32[i2 >> 2] | 0;
 HEAP32[i2 >> 2] = (i15 | 0) >>> 0 > (i14 | 0) >>> 0 ? i14 | 0 : i15 | 0;
 _memcpy(HEAP32[i9 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0, HEAP32[i2 >> 2] | 0) | 0;
 i15 = HEAP32[i2 >> 2] | 0;
 _memset((HEAP32[i9 >> 2] | 0) + i15 | 0, 0, (HEAP32[i10 >> 2] | 0) - i15 | 0) | 0;
 STACKTOP = i13;
 return;
}

function _memchr(i1, i5, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i5 & 255;
 i3 = (i2 | 0) != 0;
 L1 : do if (i3 & (i1 & 3 | 0) != 0) {
  i4 = i5 & 255;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) {
    i7 = 6;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i2 + -1 | 0;
   i3 = (i2 | 0) != 0;
   if (!(i3 & (i1 & 3 | 0) != 0)) {
    i7 = 5;
    break;
   }
  }
 } else i7 = 5; while (0);
 if ((i7 | 0) == 5) if (i3) i7 = 6; else i7 = 16;
 L8 : do if ((i7 | 0) == 6) {
  i4 = i5 & 255;
  if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) if (!i2) {
   i7 = 16;
   break;
  } else break;
  i3 = Math_imul(i6, 16843009) | 0;
  L13 : do if (i2 >>> 0 > 3) while (1) {
   i6 = HEAP32[i1 >> 2] ^ i3;
   if ((i6 & -2139062144 ^ -2139062144) & i6 + -16843009 | 0) break L13;
   i1 = i1 + 4 | 0;
   i2 = i2 + -4 | 0;
   if (i2 >>> 0 <= 3) {
    i7 = 11;
    break;
   }
  } else i7 = 11; while (0);
  if ((i7 | 0) == 11) if (!i2) {
   i7 = 16;
   break;
  }
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break L8;
   i2 = i2 + -1 | 0;
   if (!i2) {
    i7 = 16;
    break;
   } else i1 = i1 + 1 | 0;
  }
 } while (0);
 if ((i7 | 0) == 16) i1 = 0;
 return i1 | 0;
}

function ___stdio_read(i8, i6, i7) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i1;
 i1 = i1 + 16 | 0;
 HEAP32[i4 >> 2] = i6;
 i2 = i4 + 4 | 0;
 i5 = i8 + 48 | 0;
 i11 = HEAP32[i5 >> 2] | 0;
 HEAP32[i2 >> 2] = i7 - ((i11 | 0) != 0 & 1);
 i3 = i8 + 44 | 0;
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 12 >> 2] = i11;
 if (!(___wasi_syscall_ret(___wasi_fd_read(HEAP32[i8 + 60 >> 2] | 0, i4 | 0, 2, i1 | 0) | 0) | 0)) {
  i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) < 1) i9 = 4; else {
   i4 = HEAP32[i2 >> 2] | 0;
   if (i1 >>> 0 > i4 >>> 0) {
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = i8 + 4 | 0;
    HEAP32[i3 >> 2] = i2;
    HEAP32[i8 + 8 >> 2] = i2 + (i1 - i4);
    if (!(HEAP32[i5 >> 2] | 0)) i1 = i7; else {
     HEAP32[i3 >> 2] = i2 + 1;
     HEAP8[i6 + (i7 + -1) >> 0] = HEAP8[i2 >> 0] | 0;
     i1 = i7;
    }
   }
  }
 } else {
  HEAP32[i1 >> 2] = -1;
  i1 = -1;
  i9 = 4;
 }
 if ((i9 | 0) == 4) HEAP32[i8 >> 2] = i1 & 48 ^ 16 | HEAP32[i8 >> 2];
 STACKTOP = i10;
 return i1 | 0;
}

function _drmp3__on_seek(i5, i2, i4) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i7 >> 2] = i5;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i4;
 if ((HEAP32[i3 >> 2] | 0) < 0) ___assert_fail(48871, 48387, 2552, 48883);
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 6700 >> 2] & 15](HEAP32[(HEAP32[i7 >> 2] | 0) + 6704 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) {
  HEAP32[i8 >> 2] = 0;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i3 = HEAP32[i3 >> 2] | 0;
 i2 = ((i3 | 0) < 0) << 31 >> 31;
 i1 = (HEAP32[i7 >> 2] | 0) + 15952 | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i7 = i1;
  HEAP32[i7 >> 2] = i3;
  HEAP32[i7 + 4 >> 2] = i2;
 } else {
  i5 = i1;
  i5 = _i64Add(HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, i3 | 0, i2 | 0) | 0;
  i6 = getTempRet0() | 0;
  i7 = i1;
  HEAP32[i7 >> 2] = i5;
  HEAP32[i7 + 4 >> 2] = i6;
 }
 HEAP32[i8 >> 2] = 1;
 i8 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _stbv_lookup1_values(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, d7 = 0.0, f8 = f0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 f8 = Math_fround(+Math_log(+(+Math_fround(HEAP32[i5 >> 2] | 0))));
 i4 = ~~+Math_floor(+(+Math_exp(+(+Math_fround(f8 / Math_fround(HEAP32[i3 >> 2] | 0))))));
 HEAP32[i1 >> 2] = i4;
 d7 = +Math_fround(Math_fround(HEAP32[i1 >> 2] | 0) + Math_fround(1.0));
 i4 = ~~+Math_floor(+(+Math_pow(+d7, +(+(HEAP32[i3 >> 2] | 0)))));
 if ((i4 | 0) <= (HEAP32[i5 >> 2] | 0)) HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 d7 = +Math_fround(Math_fround(HEAP32[i1 >> 2] | 0) + Math_fround(1.0));
 d7 = +Math_pow(+d7, +(+(HEAP32[i3 >> 2] | 0)));
 if (!(d7 > +(HEAP32[i5 >> 2] | 0))) ___assert_fail(47739, 47181, 1215, 47771);
 d7 = +Math_fround(HEAP32[i1 >> 2] | 0);
 i4 = ~~+Math_floor(+(+Math_pow(+d7, +(+(HEAP32[i3 >> 2] | 0)))));
 if ((i4 | 0) <= (HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i6;
  return HEAP32[i1 >> 2] | 0;
 } else ___assert_fail(47791, 47181, 1216, 47771);
 return 0;
}

function _ma_pcm_rb_commit_write(i3, i4, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 24 | 0;
 i7 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i6 >> 2] = i4;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i11 >> 2] = -2;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i2 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 if (!(HEAP32[i10 >> 2] | 0)) ___assert_fail(36507, 36381, 33164, 36649);
 i9 = HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2];
 HEAP32[i7 >> 2] = i9;
 i10 = _ma_get_bytes_per_sample(HEAP32[i8 >> 2] | 0) | 0;
 i10 = Math_imul(i1, Math_imul(i10, HEAP32[i7 >> 2] | 0) | 0) | 0;
 i10 = _ma_rb_commit_write(i2, i10, HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = i10;
 i11 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i12;
 return i11 | 0;
}

function _drmp3_L3_idct3(f2, f3, f4, i1) {
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i6 + 20 | 0;
 i11 = i6 + 16 | 0;
 i9 = i6 + 12 | 0;
 i7 = i6 + 8 | 0;
 i8 = i6 + 4 | 0;
 HEAPF32[i10 >> 2] = f2;
 HEAPF32[i11 >> 2] = f3;
 HEAPF32[i9 >> 2] = f4;
 HEAP32[i7 >> 2] = i1;
 f4 = Math_fround(Math_fround(HEAPF32[i11 >> 2]) * Math_fround(.866025388));
 HEAPF32[i8 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i10 >> 2]);
 f4 = Math_fround(f4 - Math_fround(Math_fround(HEAPF32[i9 >> 2]) * Math_fround(.5)));
 HEAPF32[i6 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i10 >> 2]);
 f4 = Math_fround(f4 + Math_fround(HEAPF32[i9 >> 2]));
 HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i6 >> 2]);
 f4 = Math_fround(f4 + Math_fround(HEAPF32[i8 >> 2]));
 HEAPF32[HEAP32[i7 >> 2] >> 2] = f4;
 f4 = Math_fround(HEAPF32[i6 >> 2]);
 f4 = Math_fround(f4 - Math_fround(HEAPF32[i8 >> 2]));
 HEAPF32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = f4;
 STACKTOP = i5;
 return;
}

function ___stpncpy(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = 0;
 i5 = i3;
 L1 : do if (!((i5 ^ i1) & 3)) {
  i4 = (i2 | 0) != 0;
  if (i4 & (i5 & 3 | 0) != 0) do {
   i5 = HEAP8[i3 >> 0] | 0;
   HEAP8[i1 >> 0] = i5;
   if (!(i5 << 24 >> 24)) break L1;
   i2 = i2 + -1 | 0;
   i3 = i3 + 1 | 0;
   i1 = i1 + 1 | 0;
   i4 = (i2 | 0) != 0;
  } while (i4 & (i3 & 3 | 0) != 0);
  if (i4) {
   if (HEAP8[i3 >> 0] | 0) {
    L11 : do if (i2 >>> 0 > 3) {
     i4 = i3;
     while (1) {
      i3 = HEAP32[i4 >> 2] | 0;
      if ((i3 & -2139062144 ^ -2139062144) & i3 + -16843009 | 0) {
       i3 = i4;
       break L11;
      }
      HEAP32[i1 >> 2] = i3;
      i2 = i2 + -4 | 0;
      i3 = i4 + 4 | 0;
      i1 = i1 + 4 | 0;
      if (i2 >>> 0 > 3) i4 = i3; else break;
     }
    } while (0);
    i6 = 13;
   }
  } else i2 = 0;
 } else i6 = 13; while (0);
 L17 : do if ((i6 | 0) == 13) if (!i2) i2 = 0; else while (1) {
  i6 = HEAP8[i3 >> 0] | 0;
  HEAP8[i1 >> 0] = i6;
  if (!(i6 << 24 >> 24)) break L17;
  i2 = i2 + -1 | 0;
  i1 = i1 + 1 | 0;
  if (!i2) {
   i2 = 0;
   break;
  } else i3 = i3 + 1 | 0;
 } while (0);
 _memset(i1 | 0, 0, i2 | 0) | 0;
 return i1 | 0;
}

function _TakeScreenshot(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(576);
 i7 = i2 + 552 | 0;
 i3 = i2 + 520 | 0;
 i5 = i2 + 512 | 0;
 i9 = i2 + 548 | 0;
 i6 = i2 + 544 | 0;
 i8 = i2 + 524 | 0;
 i4 = i2;
 HEAP32[i9 >> 2] = i1;
 i1 = _rlReadScreenPixels(HEAP32[44062] | 0, HEAP32[44063] | 0) | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[44062];
 HEAP32[i8 + 8 >> 2] = HEAP32[44063];
 HEAP32[i8 + 12 >> 2] = 1;
 HEAP32[i8 + 16 >> 2] = 7;
 _memset(i4 | 0, 0, 512) | 0;
 _strcpy(i4, HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i7 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
 _ExportImage(i7, i4);
 _free(HEAP32[i6 >> 2] | 0);
 i6 = _GetFileName(i4) | 0;
 i1 = _GetFileName(i4) | 0;
 HEAP32[i5 >> 2] = i6;
 HEAP32[i5 + 4 >> 2] = i1;
 _emscripten_run_script(_TextFormat(35917, i5) | 0);
 HEAP32[i3 >> 2] = i4;
 _TraceLog(3, 36051, i3);
 STACKTOP = i2;
 return;
}

function _rlTranslatef(f1, f2, f3) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i9 = i12 + 208 | 0;
 i10 = i12 + 144 | 0;
 i6 = i12 + 136 | 0;
 i4 = i12 + 132 | 0;
 i5 = i12 + 128 | 0;
 i7 = i12 + 64 | 0;
 i11 = i12;
 HEAPF32[i6 >> 2] = f1;
 HEAPF32[i4 >> 2] = f2;
 HEAPF32[i5 >> 2] = f3;
 f2 = Math_fround(HEAPF32[i6 >> 2]);
 f3 = Math_fround(HEAPF32[i4 >> 2]);
 _MatrixTranslate(i7, f2, f3, Math_fround(HEAPF32[i5 >> 2]));
 i5 = HEAP32[43894] | 0;
 i4 = i5 | 0;
 i5 = i5 | 0;
 i6 = i10;
 i8 = i6 + 64 | 0;
 do {
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  i6 = i6 + 4 | 0;
  i7 = i7 + 4 | 0;
 } while ((i6 | 0) < (i8 | 0));
 i6 = i9;
 i7 = i5;
 i8 = i6 + 64 | 0;
 do {
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  i6 = i6 + 4 | 0;
  i7 = i7 + 4 | 0;
 } while ((i6 | 0) < (i8 | 0));
 _MatrixMultiply(i11, i10, i9);
 i6 = i4;
 i7 = i11;
 i8 = i6 + 64 | 0;
 do {
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  i6 = i6 + 4 | 0;
  i7 = i7 + 4 | 0;
 } while ((i6 | 0) < (i8 | 0));
 STACKTOP = i12;
 return;
}

function _ma_context_init__webaudio(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i7 + 12 | 0;
 i3 = i7 + 4 | 0;
 i4 = i7;
 HEAP32[i7 + 8 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 if (!(HEAP32[i3 >> 2] | 0)) ___assert_fail(37253, 36381, 25388, 42871);
 i7 = _emscripten_asm_const_ii(7, 0) | 0;
 HEAP32[i4 >> 2] = i7;
 if ((HEAP32[i4 >> 2] | 0) != 1) {
  HEAP32[i5 >> 2] = -302;
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i7 | 0;
 } else {
  i7 = (HEAP32[i3 >> 2] | 0) + 96 | 0;
  HEAP8[i7 >> 0] = HEAP8[i7 >> 0] & -2 | 1;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 100 >> 2] = 4;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 104 >> 2] = 9;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 108 >> 2] = 10;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 112 >> 2] = 1;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 116 >> 2] = 11;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 120 >> 2] = 1;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 124 >> 2] = 5;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 128 >> 2] = 6;
  HEAP32[i5 >> 2] = 0;
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i7 | 0;
 }
 return 0;
}

function _drmp3_L3_midside_stereo(i4, i6) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i8 >> 2] = (HEAP32[i5 >> 2] | 0) + 2304;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  f10 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2]);
  HEAPF32[i2 >> 2] = f10;
  f10 = Math_fround(HEAPF32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2]);
  HEAPF32[i1 >> 2] = f10;
  f10 = Math_fround(HEAPF32[i2 >> 2]);
  f10 = Math_fround(f10 + Math_fround(HEAPF32[i1 >> 2]));
  HEAPF32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2] = f10;
  f10 = Math_fround(HEAPF32[i2 >> 2]);
  f10 = Math_fround(f10 - Math_fround(HEAPF32[i1 >> 2]));
  HEAPF32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2] = f10;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 STACKTOP = i9;
 return;
}

function _MouseCursorPosCallback(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i6 = i7 + 88 | 0;
 i10 = i7 + 8 | 0;
 i9 = i7;
 i4 = i7 + 24 | 0;
 i5 = i7 + 16 | 0;
 HEAP32[i7 + 80 >> 2] = i1;
 HEAPF64[i10 >> 3] = d2;
 HEAPF64[i9 >> 3] = d3;
 HEAP32[i4 >> 2] = 2;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 1;
 i1 = i4 + 24 | 0;
 f8 = Math_fround(+HEAPF64[i10 >> 3]);
 HEAPF32[i5 >> 2] = f8;
 f8 = Math_fround(+HEAPF64[i9 >> 3]);
 HEAPF32[i5 + 4 >> 2] = f8;
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 f8 = Math_fround(_GetScreenWidth() | 0);
 i1 = i4 + 24 | 0;
 f8 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) / f8);
 HEAPF32[i1 >> 2] = f8;
 f8 = Math_fround(_GetScreenHeight() | 0);
 i1 = i4 + 24 + 4 | 0;
 f8 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) / f8);
 HEAPF32[i1 >> 2] = f8;
 i1 = i6;
 i5 = i1 + 56 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  i1 = i1 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i1 | 0) < (i5 | 0));
 _ProcessGestureEvent(i6);
 STACKTOP = i7;
 return;
}

function _stbir__get_filter_pixel_width(i3, f2) {
 i3 = i3 | 0;
 f2 = Math_fround(f2);
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i4 >> 2] = i3;
 HEAPF32[i5 >> 2] = f2;
 if (!(HEAP32[i4 >> 2] | 0)) ___assert_fail(57228, 54884, 884, 57240);
 if ((HEAP32[i4 >> 2] | 0) >>> 0 >= 6) ___assert_fail(57270, 54884, 885, 57240);
 i3 = (_stbir__use_upsampling(Math_fround(HEAPF32[i5 >> 2])) | 0) != 0;
 i1 = HEAP32[28352 + (HEAP32[i4 >> 2] << 3) + 4 >> 2] | 0;
 f2 = Math_fround(HEAPF32[i5 >> 2]);
 if (i3) {
  f2 = Math_fround(Math_fround(1.0) / f2);
  i5 = ~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[i1 & 7](f2)) * Math_fround(2.0))));
  HEAP32[i6 >> 2] = i5;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 } else {
  f2 = Math_fround(Math_fround(FUNCTION_TABLE_ff[i1 & 7](f2)) * Math_fround(2.0));
  i5 = ~~+Math_ceil(+(+Math_fround(f2 / Math_fround(HEAPF32[i5 >> 2]))));
  HEAP32[i6 >> 2] = i5;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function _GetGamepadButton(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 i1 = i3;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i1 >> 2] = 0;
 do switch (HEAP32[i4 >> 2] | 0) {
 case 0:
  {
   HEAP32[i1 >> 2] = 7;
   break;
  }
 case 1:
  {
   HEAP32[i1 >> 2] = 6;
   break;
  }
 case 2:
  {
   HEAP32[i1 >> 2] = 8;
   break;
  }
 case 3:
  {
   HEAP32[i1 >> 2] = 5;
   break;
  }
 case 4:
  {
   HEAP32[i1 >> 2] = 9;
   break;
  }
 case 5:
  {
   HEAP32[i1 >> 2] = 11;
   break;
  }
 case 6:
  {
   HEAP32[i1 >> 2] = 10;
   break;
  }
 case 7:
  {
   HEAP32[i1 >> 2] = 12;
   break;
  }
 case 8:
  {
   HEAP32[i1 >> 2] = 13;
   break;
  }
 case 9:
  {
   HEAP32[i1 >> 2] = 15;
   break;
  }
 case 10:
  {
   HEAP32[i1 >> 2] = 16;
   break;
  }
 case 11:
  {
   HEAP32[i1 >> 2] = 17;
   break;
  }
 case 12:
  {
   HEAP32[i1 >> 2] = 1;
   break;
  }
 case 13:
  {
   HEAP32[i1 >> 2] = 3;
   break;
  }
 case 14:
  {
   HEAP32[i1 >> 2] = 4;
   break;
  }
 case 15:
  {
   HEAP32[i1 >> 2] = 2;
   break;
  }
 default:
  {}
 } while (0);
 STACKTOP = i3;
 return HEAP32[i1 >> 2] | 0;
}

function _ma_channel_router__is_spatial_channel_position(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i3 = i1 + 12 | 0;
 HEAP32[i7 >> 2] = i4;
 HEAP8[i3 >> 0] = i2;
 if (!(HEAP32[i7 >> 2] | 0)) ___assert_fail(43955, 36381, 30429, 44034);
 if (HEAPU8[i3 >> 0] | 0 | 0) if ((HEAPU8[i3 >> 0] | 0 | 0) != 1) if ((HEAPU8[i3 >> 0] | 0 | 0) != 5) {
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >= 6) {
    i1 = 12;
    break;
   }
   if (Math_fround(HEAPF32[11984 + ((HEAPU8[i3 >> 0] | 0) * 24 | 0) + (HEAP32[i1 >> 2] << 2) >> 2]) != Math_fround(0.0)) {
    i1 = 10;
    break;
   }
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  if ((i1 | 0) == 10) {
   HEAP32[i5 >> 2] = 1;
   i7 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i6;
   return i7 | 0;
  } else if ((i1 | 0) == 12) {
   HEAP32[i5 >> 2] = 0;
   i7 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i6;
   return i7 | 0;
  }
 }
 HEAP32[i5 >> 2] = 0;
 i7 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function _stbir_resize_uint8(i2, i4, i1, i3, i7, i9, i6, i8, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i10 = STACKTOP;
 i11 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i19 = i11 + 32 | 0;
 i18 = i11 + 28 | 0;
 i17 = i11 + 24 | 0;
 i16 = i11 + 20 | 0;
 i15 = i11 + 16 | 0;
 i14 = i11 + 12 | 0;
 i13 = i11 + 8 | 0;
 i12 = i11 + 4 | 0;
 HEAP32[i19 >> 2] = i2;
 HEAP32[i18 >> 2] = i4;
 HEAP32[i17 >> 2] = i1;
 HEAP32[i16 >> 2] = i3;
 HEAP32[i15 >> 2] = i7;
 HEAP32[i14 >> 2] = i9;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i12 >> 2] = i8;
 HEAP32[i11 >> 2] = i5;
 i11 = _stbir__resize_arbitrary(0, HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0), Math_fround(1.0), 0, HEAP32[i11 >> 2] | 0, -1, 0, 0, 0, 0, 1, 1, 0) | 0;
 STACKTOP = i10;
 return i11 | 0;
}

function _LoadTextureFromImage(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i1;
 i1 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 if (HEAP32[i3 >> 2] | 0) if (HEAP32[i3 + 4 >> 2] | 0) if (HEAP32[i3 + 8 >> 2] | 0) {
  i4 = _rlLoadTexture(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0, HEAP32[i3 + 16 >> 2] | 0, HEAP32[i3 + 12 >> 2] | 0) | 0;
  HEAP32[i1 >> 2] = i4;
 } else i5 = 5; else i5 = 5; else i5 = 5;
 if ((i5 | 0) == 5) _TraceLog(4, 58234, i4);
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 STACKTOP = i6;
 return;
}

function _stbv_get8(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) {
  i1 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[i2 + 32 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) >>> 0) {
   HEAP32[i1 + 96 >> 2] = 1;
   HEAP8[i3 >> 0] = 0;
   i4 = HEAP8[i3 >> 0] | 0;
   STACKTOP = i5;
   return i4 | 0;
  } else {
   i2 = i1 + 32 | 0;
   i4 = HEAP32[i2 >> 2] | 0;
   HEAP32[i2 >> 2] = i4 + 1;
   HEAP8[i3 >> 0] = HEAP8[i4 >> 0] | 0;
   i4 = HEAP8[i3 >> 0] | 0;
   STACKTOP = i5;
   return i4 | 0;
  }
 } else {
  i2 = _fgetc(HEAP32[i2 + 20 >> 2] | 0) | 0;
  HEAP32[i1 >> 2] = i2;
  if ((HEAP32[i1 >> 2] | 0) == -1) {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 96 >> 2] = 1;
   HEAP8[i3 >> 0] = 0;
   i4 = HEAP8[i3 >> 0] | 0;
   STACKTOP = i5;
   return i4 | 0;
  } else {
   HEAP8[i3 >> 0] = HEAP32[i1 >> 2];
   i4 = HEAP8[i3 >> 0] | 0;
   STACKTOP = i5;
   return i4 | 0;
  }
 }
 return 0;
}

function _stbi__zhuffman_decode(i2, i6) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) < 16) _stbi__fill_bits(HEAP32[i3 >> 2] | 0);
 HEAP32[i4 >> 2] = HEAPU16[(HEAP32[i7 >> 2] | 0) + ((HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 511) << 1) >> 1];
 if (HEAP32[i4 >> 2] | 0) {
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2] >> 9;
  i7 = (HEAP32[i3 >> 2] | 0) + 12 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) >>> (HEAP32[i1 >> 2] | 0);
  i7 = (HEAP32[i3 >> 2] | 0) + 8 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i1 >> 2] | 0);
  HEAP32[i5 >> 2] = HEAP32[i4 >> 2] & 511;
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 } else {
  i7 = _stbi__zhuffman_decode_slowpath(HEAP32[i3 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = i7;
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 return 0;
}

function _stbi__hdr_gettoken(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 i1 = i1 + 12 | 0;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = 0;
 HEAP8[i1 >> 0] = 0;
 i5 = _stbi__get8(HEAP32[i6 >> 2] | 0) | 0;
 HEAP8[i1 >> 0] = i5;
 while (1) {
  if (_stbi__at_eof(HEAP32[i6 >> 2] | 0) | 0) break;
  if ((HEAP8[i1 >> 0] | 0) == 10) break;
  i9 = HEAP8[i1 >> 0] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i5 + 1;
  HEAP8[i2 + i5 >> 0] = i9;
  if ((HEAP32[i4 >> 2] | 0) == 1023) {
   i7 = 5;
   break;
  }
  i9 = _stbi__get8(HEAP32[i6 >> 2] | 0) | 0;
  HEAP8[i1 >> 0] = i9;
 }
 L6 : do if ((i7 | 0) == 5) while (1) {
  if (_stbi__at_eof(HEAP32[i6 >> 2] | 0) | 0) break L6;
  if (((_stbi__get8(HEAP32[i6 >> 2] | 0) | 0) & 255 | 0) == 10) break L6;
 } while (0);
 HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] = 0;
 STACKTOP = i8;
 return HEAP32[i3 >> 2] | 0;
}

function _stbv_vorbis_decode_packet(i2, i5, i8, i10) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i12 = i1 + 28 | 0;
 i3 = i1 + 24 | 0;
 i6 = i1 + 20 | 0;
 i9 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i11 >> 2] = i10;
 if (_stbv_vorbis_decode_initial(HEAP32[i3 >> 2] | 0, HEAP32[i9 >> 2] | 0, i4, HEAP32[i11 >> 2] | 0, i1, i7) | 0) {
  i10 = HEAP32[i3 >> 2] | 0;
  i11 = _stbv_vorbis_decode_packet_rest(i10 | 0, HEAP32[i6 >> 2] | 0, i10 + 412 + ((HEAP32[i7 >> 2] | 0) * 6 | 0) | 0, HEAP32[HEAP32[i9 >> 2] >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[HEAP32[i11 >> 2] >> 2] | 0, HEAP32[i1 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[i12 >> 2] = i11;
  i12 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 } else {
  HEAP32[i12 >> 2] = 0;
  i12 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 return 0;
}

function _rect_height_compare(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
 if ((HEAPU16[(HEAP32[i4 >> 2] | 0) + 6 >> 1] | 0 | 0) > (HEAPU16[(HEAP32[i1 >> 2] | 0) + 6 >> 1] | 0 | 0)) {
  HEAP32[i5 >> 2] = -1;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i8 | 0;
 }
 if ((HEAPU16[(HEAP32[i4 >> 2] | 0) + 6 >> 1] | 0 | 0) < (HEAPU16[(HEAP32[i1 >> 2] | 0) + 6 >> 1] | 0 | 0)) {
  HEAP32[i5 >> 2] = 1;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i8 | 0;
 }
 if ((HEAPU16[(HEAP32[i4 >> 2] | 0) + 4 >> 1] | 0 | 0) > (HEAPU16[(HEAP32[i1 >> 2] | 0) + 4 >> 1] | 0 | 0)) i1 = -1; else i1 = (HEAPU16[(HEAP32[i4 >> 2] | 0) + 4 >> 1] | 0 | 0) < (HEAPU16[(HEAP32[i1 >> 2] | 0) + 4 >> 1] | 0 | 0) & 1;
 HEAP32[i5 >> 2] = i1;
 i8 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i6;
 return i8 | 0;
}

function _ma_get_backend_name(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 do switch (HEAP32[i4 >> 2] | 0) {
 case 0:
  {
   HEAP32[i2 >> 2] = 36997;
   break;
  }
 case 1:
  {
   HEAP32[i2 >> 2] = 37004;
   break;
  }
 case 2:
  {
   HEAP32[i2 >> 2] = 37016;
   break;
  }
 case 3:
  {
   HEAP32[i2 >> 2] = 37022;
   break;
  }
 case 4:
  {
   HEAP32[i2 >> 2] = 37033;
   break;
  }
 case 5:
  {
   HEAP32[i2 >> 2] = 37039;
   break;
  }
 case 6:
  {
   HEAP32[i2 >> 2] = 37048;
   break;
  }
 case 7:
  {
   HEAP32[i2 >> 2] = 37052;
   break;
  }
 case 8:
  {
   HEAP32[i2 >> 2] = 37063;
   break;
  }
 case 9:
  {
   HEAP32[i2 >> 2] = 37068;
   break;
  }
 case 10:
  {
   HEAP32[i2 >> 2] = 37073;
   break;
  }
 case 11:
  {
   HEAP32[i2 >> 2] = 37080;
   break;
  }
 case 12:
  {
   HEAP32[i2 >> 2] = 37090;
   break;
  }
 case 13:
  {
   HEAP32[i2 >> 2] = 37100;
   break;
  }
 default:
  HEAP32[i2 >> 2] = 37105;
 } while (0);
 STACKTOP = i3;
 return HEAP32[i2 >> 2] | 0;
}

function ___fwritex(i8, i7, i4) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i3 = 0;
 i2 = i4 + 16 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) if (!(___towrite(i4) | 0)) {
  i1 = HEAP32[i2 >> 2] | 0;
  i3 = 5;
 } else i1 = 0; else i3 = 5;
 L5 : do if ((i3 | 0) == 5) {
  i6 = i4 + 20 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  i2 = i5;
  if ((i1 - i5 | 0) >>> 0 < i7 >>> 0) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i4 + 36 >> 2] & 15](i4, i8, i7) | 0;
   break;
  }
  L10 : do if ((HEAP8[i4 + 75 >> 0] | 0) < 0 | (i7 | 0) == 0) {
   i3 = i2;
   i4 = 0;
   i2 = i7;
   i1 = i8;
  } else {
   i5 = i7;
   while (1) {
    i1 = i5 + -1 | 0;
    if ((HEAP8[i8 + i1 >> 0] | 0) == 10) break;
    if (!i1) {
     i3 = i2;
     i4 = 0;
     i2 = i7;
     i1 = i8;
     break L10;
    } else i5 = i1;
   }
   i1 = FUNCTION_TABLE_iiii[HEAP32[i4 + 36 >> 2] & 15](i4, i8, i5) | 0;
   if (i1 >>> 0 < i5 >>> 0) break L5;
   i3 = HEAP32[i6 >> 2] | 0;
   i4 = i5;
   i2 = i7 - i5 | 0;
   i1 = i8 + i5 | 0;
  } while (0);
  _memcpy(i3 | 0, i1 | 0, i2 | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i2;
  i1 = i4 + i2 | 0;
 } while (0);
 return i1 | 0;
}

function _DrawTexture(i3, i1, i2, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0, i11 = 0, i12 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i7 = i6 + 48 | 0;
 i8 = i6 + 40 | 0;
 i9 = i6 + 16 | 0;
 i12 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 f10 = Math_fround(HEAP32[i12 >> 2] | 0);
 HEAPF32[i6 >> 2] = f10;
 f10 = Math_fround(HEAP32[i11 >> 2] | 0);
 HEAPF32[i6 + 4 >> 2] = f10;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i9 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP8[i7 >> 0] = HEAP8[i4 >> 0] | 0;
 HEAP8[i7 + 1 >> 0] = HEAP8[i4 + 1 >> 0] | 0;
 HEAP8[i7 + 2 >> 0] = HEAP8[i4 + 2 >> 0] | 0;
 HEAP8[i7 + 3 >> 0] = HEAP8[i4 + 3 >> 0] | 0;
 _DrawTextureEx(i9, i8, Math_fround(0.0), Math_fround(1.0), i7);
 STACKTOP = i5;
 return;
}

function _rlClearColor(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, f7 = f0, f8 = f0, f9 = f0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i16 = i5 + 19 | 0;
 i15 = i5 + 18 | 0;
 i14 = i5 + 17 | 0;
 i13 = i5 + 16 | 0;
 i12 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i6 = i5;
 HEAP8[i16 >> 0] = i4;
 HEAP8[i15 >> 0] = i3;
 HEAP8[i14 >> 0] = i2;
 HEAP8[i13 >> 0] = i1;
 f9 = Math_fround(Math_fround(HEAPU8[i16 >> 0] | 0) / Math_fround(255.0));
 HEAPF32[i12 >> 2] = f9;
 f9 = Math_fround(Math_fround(HEAPU8[i15 >> 0] | 0) / Math_fround(255.0));
 HEAPF32[i11 >> 2] = f9;
 f9 = Math_fround(Math_fround(HEAPU8[i14 >> 0] | 0) / Math_fround(255.0));
 HEAPF32[i10 >> 2] = f9;
 f9 = Math_fround(Math_fround(HEAPU8[i13 >> 0] | 0) / Math_fround(255.0));
 HEAPF32[i6 >> 2] = f9;
 f9 = Math_fround(HEAPF32[i12 >> 2]);
 f8 = Math_fround(HEAPF32[i11 >> 2]);
 f7 = Math_fround(HEAPF32[i10 >> 2]);
 _glClearColor(+f9, +f8, +f7, +Math_fround(HEAPF32[i6 >> 2]));
 STACKTOP = i5;
 return;
}

function _ma_pcm_rb_commit_read(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i11 + 24 | 0;
 i5 = i11 + 20 | 0;
 i9 = i11 + 16 | 0;
 i10 = i11 + 12 | 0;
 i8 = i11 + 8 | 0;
 i4 = i11 + 4 | 0;
 i7 = i11;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i7 >> 2] = i1;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i10 >> 2] = -2;
  i10 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i2 = HEAP32[i8 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 if (!(HEAP32[i9 >> 2] | 0)) ___assert_fail(36507, 36381, 33164, 36649);
 i8 = HEAP32[(HEAP32[i9 >> 2] | 0) + 32 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2];
 HEAP32[i5 >> 2] = i8;
 i9 = _ma_get_bytes_per_sample(HEAP32[i6 >> 2] | 0) | 0;
 i9 = Math_imul(i1, Math_imul(i9, HEAP32[i5 >> 2] | 0) | 0) | 0;
 i9 = _ma_rb_commit_read(i2, i9, HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = i9;
 i10 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _stbi__parse_zlib_header(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 i2 = (_stbi__zget8(HEAP32[i7 >> 2] | 0) | 0) & 255;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2] & 15;
 i2 = (_stbi__zget8(HEAP32[i7 >> 2] | 0) | 0) & 255;
 HEAP32[i1 >> 2] = i2;
 if (((HEAP32[i6 >> 2] << 8) + (HEAP32[i1 >> 2] | 0) | 0) % 31 | 0 | 0) {
  i7 = _stbi__err(54635) | 0;
  HEAP32[i4 >> 2] = i7;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 if (HEAP32[i1 >> 2] & 32 | 0) {
  i7 = _stbi__err(54651) | 0;
  HEAP32[i4 >> 2] = i7;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 if ((HEAP32[i3 >> 2] | 0) != 8) {
  i7 = _stbi__err(54666) | 0;
  HEAP32[i4 >> 2] = i7;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i7 | 0;
 } else {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 return 0;
}

function _stbir__linear_to_srgb_uchar(f3) {
 f3 = Math_fround(f3);
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i1 + 20 | 0;
 i7 = i1 + 16 | 0;
 i2 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAPF32[i4 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i4 >> 2]);
 if (!(f3 > Math_fround(HEAPF32[7881]))) {
  f3 = Math_fround(HEAPF32[7881]);
  HEAPF32[i4 >> 2] = f3;
 }
 f3 = Math_fround(HEAPF32[i4 >> 2]);
 if (f3 > Math_fround(HEAPF32[7882])) {
  f3 = Math_fround(HEAPF32[7882]);
  HEAPF32[i4 >> 2] = f3;
 }
 f3 = Math_fround(HEAPF32[i4 >> 2]);
 HEAPF32[i1 >> 2] = f3;
 HEAP32[i7 >> 2] = HEAP32[29424 + (((HEAP32[i1 >> 2] | 0) - (HEAP32[7881] | 0) | 0) >>> 20 << 2) >> 2];
 HEAP32[i2 >> 2] = (HEAP32[i7 >> 2] | 0) >>> 16 << 9;
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2] & 65535;
 HEAP32[i6 >> 2] = (HEAP32[i1 >> 2] | 0) >>> 12 & 255;
 i7 = ((HEAP32[i2 >> 2] | 0) + (Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0) >>> 16 & 255;
 STACKTOP = i8;
 return i7 | 0;
}

function _stbv_start_packet(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 1380 >> 2] | 0) != -1) {
   i3 = 8;
   break;
  }
  if (!(_stbv_start_page(i2) | 0)) {
   i3 = 4;
   break;
  }
  if ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 1375 >> 0] | 0) & 1 | 0) {
   i3 = 6;
   break;
  }
 }
 if ((i3 | 0) == 4) {
  HEAP32[i4 >> 2] = 0;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 } else if ((i3 | 0) == 6) {
  i3 = _stbv_error(HEAP32[i1 >> 2] | 0, 32) | 0;
  HEAP32[i4 >> 2] = i3;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 } else if ((i3 | 0) == 8) {
  HEAP32[i2 + 1384 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 1396 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 1400 >> 2] = 0;
  HEAP8[(HEAP32[i1 >> 2] | 0) + 1376 >> 0] = 0;
  HEAP32[i4 >> 2] = 1;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function _TraceLog(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i7 = i1 + 148 | 0;
 i8 = i1 + 144 | 0;
 i6 = i1 + 128 | 0;
 i5 = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if ((HEAP32[i7 >> 2] | 0) < 3) {
  STACKTOP = i9;
  return;
 }
 HEAP32[i6 >> 2] = i4;
 i1 = i5;
 i2 = i1 + 128 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 switch (HEAP32[i7 >> 2] | 0) {
 case 1:
  {
   _strcpy(i5, 59205) | 0;
   break;
  }
 case 2:
  {
   _strcpy(i5, 59213) | 0;
   break;
  }
 case 3:
  {
   _strcpy(i5, 59221) | 0;
   break;
  }
 case 4:
  {
   _strcpy(i5, 59228) | 0;
   break;
  }
 case 5:
  {
   _strcpy(i5, 59238) | 0;
   break;
  }
 case 6:
  {
   _strcpy(i5, 59246) | 0;
   break;
  }
 default:
  {}
 }
 _strcat(i5, HEAP32[i8 >> 2] | 0) | 0;
 _strcat(i5, 59254) | 0;
 _vprintf(i5, i6) | 0;
 if ((HEAP32[i7 >> 2] | 0) >= 5) _exit(1); else {
  STACKTOP = i9;
  return;
 }
}

function _stbv_prep_huffman(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 1396 >> 2] | 0) > 24) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 1396 >> 2] | 0)) HEAP32[(HEAP32[i3 >> 2] | 0) + 1392 >> 2] = 0;
 while (1) {
  if (HEAP32[(HEAP32[i3 >> 2] | 0) + 1384 >> 2] | 0) if (!(HEAP8[(HEAP32[i3 >> 2] | 0) + 1376 >> 0] | 0)) {
   i1 = 9;
   break;
  }
  i2 = _stbv_get8_packet_raw(HEAP32[i3 >> 2] | 0) | 0;
  HEAP32[i1 >> 2] = i2;
  if ((HEAP32[i1 >> 2] | 0) == -1) {
   i1 = 9;
   break;
  }
  i2 = (HEAP32[i3 >> 2] | 0) + 1392 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i1 >> 2] << HEAP32[(HEAP32[i3 >> 2] | 0) + 1396 >> 2]);
  i2 = (HEAP32[i3 >> 2] | 0) + 1396 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 8;
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 1396 >> 2] | 0) > 24) {
   i1 = 9;
   break;
  }
 }
 if ((i1 | 0) == 9) {
  STACKTOP = i4;
  return;
 }
}

function _stbv_predict_point(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i13 = i7 + 32 | 0;
 i12 = i7 + 28 | 0;
 i14 = i7 + 24 | 0;
 i9 = i7 + 20 | 0;
 i15 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 HEAP32[i13 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i14 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i8 >> 2] = (HEAP32[i15 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
 HEAP32[i10 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
 i5 = Math_abs(HEAP32[i8 >> 2] | 0) | 0;
 i5 = Math_imul(i5, (HEAP32[i13 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0) | 0;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i7 >> 2] = (HEAP32[i11 >> 2] | 0) / (HEAP32[i10 >> 2] | 0) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i7 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return ((HEAP32[i8 >> 2] | 0) < 0 ? i5 - i7 | 0 : i5 + i7 | 0) | 0;
}

function _ma_context__try_get_device_name_by_id__enum_callback(i4, i2, i6, i8) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i10 >> 2] = i8;
 HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
 if (!(HEAP32[i1 >> 2] | 0)) ___assert_fail(37276, 36381, 6068, 37296);
 if ((HEAP32[HEAP32[i1 >> 2] >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 104 >> 2] & 15](HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) {
  i10 = HEAP32[i1 >> 2] | 0;
  _ma_strncpy_s(HEAP32[i10 + 8 >> 2] | 0, HEAP32[i10 + 12 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 32 | 0, -1) | 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] = 1;
 }
 STACKTOP = i9;
 return ((HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0) != 0 ^ 1) & 1 | 0;
}

function _stbtt__buf_range(i2, i3, i5, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i8 >> 2] = i7;
 _stbtt__new_buf(i1, 0, 0);
 if (!((HEAP32[i6 >> 2] | 0) < 0 | (HEAP32[i8 >> 2] | 0) < 0)) if ((HEAP32[i6 >> 2] | 0) <= (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0)) if ((HEAP32[i8 >> 2] | 0) <= ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0)) {
  HEAP32[i1 >> 2] = (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
  HEAP32[i1 + 8 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  STACKTOP = i9;
  return;
 };
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 STACKTOP = i9;
 return;
}

function _drmp3_L3_save_reservoir(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i4 >> 2] = (((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) + 7 | 0) >>> 0) / 8 | 0;
 HEAP32[i1 >> 2] = (((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) >>> 0) / 8 | 0) - (HEAP32[i4 >> 2] | 0);
 if ((HEAP32[i1 >> 2] | 0) > 511) {
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) - 511);
  HEAP32[i1 >> 2] = 511;
 }
 if ((HEAP32[i1 >> 2] | 0) <= 0) {
  i5 = HEAP32[i1 >> 2] | 0;
  i6 = HEAP32[i3 >> 2] | 0;
  i6 = i6 + 6144 | 0;
  HEAP32[i6 >> 2] = i5;
  STACKTOP = i7;
  return;
 }
 _memmove((HEAP32[i3 >> 2] | 0) + 6156 | 0, (HEAP32[i6 >> 2] | 0) + 12 + (HEAP32[i4 >> 2] | 0) | 0, HEAP32[i1 >> 2] | 0) | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i6 = i6 + 6144 | 0;
 HEAP32[i6 >> 2] = i5;
 STACKTOP = i7;
 return;
}

function _fread(i2, i9, i1, i7) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0;
 i10 = 0;
 i8 = Math_imul(i1, i9) | 0;
 i1 = (i9 | 0) == 0 ? 0 : i1;
 if ((HEAP32[i7 + 76 >> 2] | 0) > -1) i6 = ___lockfile(i7) | 0; else i6 = 0;
 i4 = i7 + 74 | 0;
 i3 = HEAP8[i4 >> 0] | 0;
 HEAP8[i4 >> 0] = i3 + 255 | i3;
 i4 = i7 + 4 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i5 = (HEAP32[i7 + 8 >> 2] | 0) - i3 | 0;
 if ((i5 | 0) > 0) {
  i5 = i5 >>> 0 < i8 >>> 0 ? i5 : i8;
  _memcpy(i2 | 0, i3 | 0, i5 | 0) | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i5;
  i2 = i2 + i5 | 0;
  i3 = i8 - i5 | 0;
 } else i3 = i8;
 L7 : do if (!i3) i10 = 13; else {
  i5 = i7 + 32 | 0;
  while (1) {
   if (___toread(i7) | 0) break;
   i4 = FUNCTION_TABLE_iiii[HEAP32[i5 >> 2] & 15](i7, i2, i3) | 0;
   if ((i4 + 1 | 0) >>> 0 < 2) break;
   i3 = i3 - i4 | 0;
   if (!i3) {
    i10 = 13;
    break L7;
   } else i2 = i2 + i4 | 0;
  }
  if (i6 | 0) ___unlockfile(i7);
  i1 = ((i8 - i3 | 0) >>> 0) / (i9 >>> 0) | 0;
 } while (0);
 if ((i10 | 0) == 13) if (i6) ___unlockfile(i7);
 return i1 | 0;
}

function _wcrtomb(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 do if (!i1) i1 = 1; else {
  if (i3 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i3;
   i1 = 1;
   break;
  }
  i2 = (___pthread_self_487() | 0) + 176 | 0;
  if (!(HEAP32[HEAP32[i2 >> 2] >> 2] | 0)) if ((i3 & -128 | 0) == 57216) {
   HEAP8[i1 >> 0] = i3;
   i1 = 1;
   break;
  } else {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = 25;
   i1 = -1;
   break;
  }
  if (i3 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i3 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i3 & 63 | 128;
   i1 = 2;
   break;
  }
  if (i3 >>> 0 < 55296 | (i3 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i3 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 & 63 | 128;
   i1 = 3;
   break;
  }
  if ((i3 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i3 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i3 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i3 & 63 | 128;
   i1 = 4;
   break;
  } else {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = 25;
   i1 = -1;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _rlColor4ub(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i5 + 3 | 0;
 i8 = i5 + 2 | 0;
 i7 = i5 + 1 | 0;
 i6 = i5;
 HEAP8[i9 >> 0] = i2;
 HEAP8[i8 >> 0] = i3;
 HEAP8[i7 >> 0] = i4;
 HEAP8[i6 >> 0] = i1;
 i4 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[i4 + 20 >> 2] | 0) + (HEAP32[i4 + 8 >> 2] << 2) >> 0] = HEAP8[i9 >> 0] | 0;
 i4 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[i4 + 20 >> 2] | 0) + ((HEAP32[i4 + 8 >> 2] << 2) + 1) >> 0] = HEAP8[i8 >> 0] | 0;
 i4 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[i4 + 20 >> 2] | 0) + ((HEAP32[i4 + 8 >> 2] << 2) + 2) >> 0] = HEAP8[i7 >> 0] | 0;
 i4 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[i4 + 20 >> 2] | 0) + ((HEAP32[i4 + 8 >> 2] << 2) + 3) >> 0] = HEAP8[i6 >> 0] | 0;
 i4 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) + 8 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 STACKTOP = i5;
 return;
}

function _stbi__malloc_mad4(i2, i5, i7, i9, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i1 >> 2] = i4;
 if (_stbi__mad4sizes_valid(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) {
  i9 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
  i9 = Math_imul(i9, HEAP32[i8 >> 2] | 0) | 0;
  i10 = Math_imul(i9, HEAP32[i10 >> 2] | 0) | 0;
  i10 = _stbi__malloc(i10 + (HEAP32[i1 >> 2] | 0) | 0) | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 } else {
  HEAP32[i11 >> 2] = 0;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 return 0;
}

function _drmp3_src_read_frames_passthrough(i7, i1, i2, i5, i3) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 i10 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i10 + 16 | 0;
 i4 = i10;
 i6 = i10 + 12 | 0;
 HEAP32[i8 >> 2] = i7;
 i7 = i4;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i7 + 4 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i10 + 8 >> 2] = i3;
 if (!(HEAP32[i8 >> 2] | 0)) ___assert_fail(44155, 48387, 2448, 48575);
 i10 = i4;
 i7 = HEAP32[i10 + 4 >> 2] | 0;
 if (!(i7 >>> 0 > 0 | (i7 | 0) == 0 & (HEAP32[i10 >> 2] | 0) >>> 0 > 0)) ___assert_fail(36454, 48387, 2449, 48575);
 if (HEAP32[i6 >> 2] | 0) {
  i7 = i4;
  i10 = HEAP32[i8 >> 2] | 0;
  i10 = FUNCTION_TABLE_iiiiii[HEAP32[i10 + 20 >> 2] & 3](i10 | 0, HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i10 + 24 >> 2] | 0) | 0;
  setTempRet0(getTempRet0() | 0);
  STACKTOP = i9;
  return i10 | 0;
 } else ___assert_fail(36560, 48387, 2450, 48575);
 return 0;
}

function _jar_xm_generate_samples_16bit(i2, i6, i4) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 i6 = _malloc(HEAP32[i5 >> 2] << 1 << 2) | 0;
 HEAP32[i3 >> 2] = i6;
 _jar_xm_generate_samples(HEAP32[i9 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 if (!(HEAP32[i7 >> 2] | 0)) {
  i9 = HEAP32[i3 >> 2] | 0;
  _free(i9);
  STACKTOP = i8;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= HEAP32[i5 >> 2] << 1 >>> 0) break;
  i9 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2]) * Math_fround(32767.0));
  HEAP16[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] = i9;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 i9 = HEAP32[i3 >> 2] | 0;
 _free(i9);
 STACKTOP = i8;
 return;
}

function _stbtt__cff_get_index(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 i3 = _stbtt__buf_get(HEAP32[i4 >> 2] | 0, 2) | 0;
 HEAP32[i5 >> 2] = i3;
 do if (HEAP32[i5 >> 2] | 0) {
  i3 = (_stbtt__buf_get8(HEAP32[i4 >> 2] | 0) | 0) & 255;
  HEAP32[i1 >> 2] = i3;
  if ((HEAP32[i1 >> 2] | 0) >= 1 & (HEAP32[i1 >> 2] | 0) <= 4) {
   _stbtt__buf_skip(HEAP32[i4 >> 2] | 0, Math_imul(HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0);
   i5 = HEAP32[i4 >> 2] | 0;
   _stbtt__buf_skip(i5, (_stbtt__buf_get(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) - 1 | 0);
   break;
  } else ___assert_fail(52819, 52491, 1165, 52848);
 } while (0);
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 _stbtt__buf_range(i2, i5 | 0, i6 | 0, (HEAP32[i5 + 4 >> 2] | 0) - i6 | 0);
 STACKTOP = i7;
 return;
}

function _GifWritePalette(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i9 + 20 | 0;
 i3 = i9 + 16 | 0;
 i5 = i9 + 12 | 0;
 i8 = i9 + 8 | 0;
 i4 = i9 + 4 | 0;
 i1 = i9;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = i2;
 _fputc(0, HEAP32[i3 >> 2] | 0) | 0;
 _fputc(0, HEAP32[i3 >> 2] | 0) | 0;
 _fputc(0, HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = 1;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (1 << HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) break;
  HEAP32[i8 >> 2] = HEAPU8[(HEAP32[i7 >> 2] | 0) + 4 + (HEAP32[i5 >> 2] | 0) >> 0];
  HEAP32[i4 >> 2] = HEAPU8[(HEAP32[i7 >> 2] | 0) + 260 + (HEAP32[i5 >> 2] | 0) >> 0];
  HEAP32[i1 >> 2] = HEAPU8[(HEAP32[i7 >> 2] | 0) + 516 + (HEAP32[i5 >> 2] | 0) >> 0];
  _fputc(HEAP32[i8 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
  _fputc(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
  _fputc(HEAP32[i1 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 STACKTOP = i9;
 return;
}

function _stbtt_GetCodepointBitmap(i3, f4, f5, i1, i6, i2, i7, i8) {
 i3 = i3 | 0;
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i9 = STACKTOP;
 i10 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i15 = i10 + 28 | 0;
 i17 = i10 + 24 | 0;
 i16 = i10 + 20 | 0;
 i14 = i10 + 16 | 0;
 i13 = i10 + 12 | 0;
 i12 = i10 + 8 | 0;
 i11 = i10 + 4 | 0;
 HEAP32[i15 >> 2] = i3;
 HEAPF32[i17 >> 2] = f4;
 HEAPF32[i16 >> 2] = f5;
 HEAP32[i14 >> 2] = i1;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i11 >> 2] = i7;
 HEAP32[i10 >> 2] = i8;
 f4 = Math_fround(HEAPF32[i17 >> 2]);
 f5 = Math_fround(HEAPF32[i16 >> 2]);
 i10 = _stbtt_GetCodepointBitmapSubpixel(HEAP32[i15 >> 2] | 0, f4, f5, Math_fround(0.0), Math_fround(0.0), HEAP32[i14 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 STACKTOP = i9;
 return i10 | 0;
}

function _stbiw__zlib_flushf(i5, i2, i3) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i7 >> 2] = i5;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 while (1) {
  i1 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) < 8) break;
  if (!i1) i8 = 5; else if (((HEAP32[(HEAP32[i7 >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + -8 >> 2] | 0)) i8 = 5;
  if ((i8 | 0) == 5) {
   i8 = 0;
   _stbiw__sbgrowf(i7, 1, 1) | 0;
  }
  i2 = HEAP32[HEAP32[i6 >> 2] >> 2] & 255;
  i1 = HEAP32[i7 >> 2] | 0;
  i3 = i1 | 0;
  i1 = i1 + -8 + 4 | 0;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i5 + 1;
  HEAP8[i3 + i5 >> 0] = i2;
  i5 = HEAP32[i6 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) >>> 8;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - 8;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _stbi__skip(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i6 >> 2] = i4;
 HEAP32[i5 >> 2] = i3;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) < 0) {
  HEAP32[(HEAP32[i6 >> 2] | 0) + 168 >> 2] = HEAP32[i1 + 172 >> 2];
  STACKTOP = i7;
  return;
 }
 if (HEAP32[i1 + 16 >> 2] | 0) {
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i2 >> 2] = (HEAP32[i4 + 172 >> 2] | 0) - (HEAP32[i4 + 168 >> 2] | 0);
  if ((HEAP32[i2 >> 2] | 0) < (HEAP32[i5 >> 2] | 0)) {
   i4 = HEAP32[i6 >> 2] | 0;
   HEAP32[i4 + 168 >> 2] = HEAP32[i4 + 172 >> 2];
   i6 = HEAP32[i6 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i6 + 16 + 4 >> 2] & 63](HEAP32[i6 + 28 >> 2] | 0, (HEAP32[i5 >> 2] | 0) - (HEAP32[i2 >> 2] | 0) | 0);
   STACKTOP = i7;
   return;
  }
 }
 i6 = (HEAP32[i6 >> 2] | 0) + 168 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
 STACKTOP = i7;
 return;
}

function _ma_strcmp(i3, i5) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i5;
 if ((HEAP32[i4 >> 2] | 0) == (HEAP32[i1 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 0;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i2 >> 2] = -1;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 1;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 while (1) {
  if (!(HEAP8[HEAP32[i4 >> 2] >> 0] | 0)) break;
  if ((HEAP8[HEAP32[i4 >> 2] >> 0] | 0) != (HEAP8[HEAP32[i1 >> 2] >> 0] | 0)) break;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 HEAP32[i2 >> 2] = (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) - (HEAPU8[HEAP32[i1 >> 2] >> 0] | 0);
 i5 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _drmp3_L3_intensity_stereo_band(i6, i8, f2, f4) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 f2 = Math_fround(f2);
 f4 = Math_fround(f4);
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i9 >> 2] = i8;
 HEAPF32[i3 >> 2] = f2;
 HEAPF32[i5 >> 2] = f4;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  f4 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2]);
  f4 = Math_fround(f4 * Math_fround(HEAPF32[i5 >> 2]));
  HEAPF32[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 576 << 2) >> 2] = f4;
  f4 = Math_fround(HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2]);
  f4 = Math_fround(f4 * Math_fround(HEAPF32[i3 >> 2]));
  HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f4;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i10;
 return;
}

function _spin(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i4;
 _getRandomReel(i3) | 0;
 i2 = 0;
 do {
  i5 = i3 + (i2 << 2) | 0;
  HEAP32[i5 >> 2] = ((HEAP32[i5 >> 2] | 0) >>> 0) % 12 | 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 5);
 i5 = i1 + 80 | 0;
 i2 = i1 + 60 | 0;
 HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 i5 = i1 + 40 | 0;
 HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 STACKTOP = i4;
 return;
}

function _stbv_add_entry(i2, i4, i6, i3, i5, i7) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 20 | 0;
 i14 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i12 >> 2] = i6;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i8 >> 2] = i7;
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i9 >> 2] | 0) + 32 >> 2] | 0;
 if (HEAP8[(HEAP32[i9 >> 2] | 0) + 23 >> 0] | 0) {
  HEAP32[i2 + (HEAP32[i10 >> 2] << 2) >> 2] = i1;
  HEAP8[(HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] = HEAP32[i11 >> 2];
  HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] = HEAP32[i12 >> 2];
  STACKTOP = i13;
  return;
 } else {
  HEAP32[i2 + (HEAP32[i12 >> 2] << 2) >> 2] = i1;
  STACKTOP = i13;
  return;
 }
}

function _ma_src__build_sinc_table__hann(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0, d10 = 0.0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i1 + 36 | 0;
 i3 = i1 + 32 | 0;
 i7 = i1 + 24 | 0;
 i2 = i1 + 16 | 0;
 i4 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = i5;
 _ma_src__build_sinc_table__sinc(HEAP32[i6 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >>> 0 >= 256) break;
  d10 = +Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 40972 + (HEAP32[i3 >> 2] << 2) >> 2]);
  HEAPF64[i7 >> 3] = d10;
  HEAPF64[i2 >> 3] = 64.0;
  HEAPF64[i4 >> 3] = +((HEAP32[i3 >> 2] | 0) >>> 0) / 8.0 + 32.0;
  d10 = (1.0 - +_llvm_cos_f64(+(+HEAPF64[i4 >> 3] * 6.283185307179586 / +HEAPF64[i2 >> 3]))) * .5;
  HEAPF64[i1 >> 3] = d10;
  f9 = Math_fround(+HEAPF64[i7 >> 3] * +HEAPF64[i1 >> 3]);
  HEAPF32[(HEAP32[i6 >> 2] | 0) + 40972 + (HEAP32[i3 >> 2] << 2) >> 2] = f9;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 STACKTOP = i8;
 return;
}

function _stbv_setup_temp_malloc(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i5;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 3 & -4;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 80 >> 2] | 0)) {
  i5 = _malloc(HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = i5;
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (((HEAP32[(HEAP32[i3 >> 2] | 0) + 92 >> 2] | 0) - (HEAP32[i1 >> 2] | 0) | 0) < (HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  i5 = (HEAP32[i3 >> 2] | 0) + 92 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i1 >> 2] | 0);
  i5 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i5 + 80 >> 2] | 0) + (HEAP32[i5 + 92 >> 2] | 0);
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _LoadSound(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i5 = i4 + 44 | 0;
 i7 = i4 + 40 | 0;
 i6 = i4 + 20 | 0;
 HEAP32[i7 >> 2] = i2;
 _LoadWave(i6, HEAP32[i7 >> 2] | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 _LoadSoundFromWave(i4, i5);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 _UnloadWave(i5);
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 STACKTOP = i3;
 return;
}

function _ma_channel_map_valid(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 if (!(HEAP32[i3 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 L9 : do if ((HEAP32[i5 >> 2] | 0) >>> 0 > 1) {
  HEAP32[i1 >> 2] = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break L9;
   if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0) == 1) break;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  HEAP32[i6 >> 2] = 0;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 } while (0);
 HEAP32[i6 >> 2] = 1;
 i6 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _stbtt_GetFontVMetrics(i6, i2, i4, i8) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i1 >> 2] = i8;
 if (HEAP32[i3 >> 2] | 0) {
  i8 = HEAP32[i7 >> 2] | 0;
  i8 = (_ttSHORT((HEAP32[i8 + 4 >> 2] | 0) + (HEAP32[i8 + 28 >> 2] | 0) + 4 | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[i3 >> 2] >> 2] = i8;
 }
 if (HEAP32[i5 >> 2] | 0) {
  i8 = HEAP32[i7 >> 2] | 0;
  i8 = (_ttSHORT((HEAP32[i8 + 4 >> 2] | 0) + (HEAP32[i8 + 28 >> 2] | 0) + 6 | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[i5 >> 2] >> 2] = i8;
 }
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i9;
  return;
 }
 i8 = HEAP32[i7 >> 2] | 0;
 i8 = (_ttSHORT((HEAP32[i8 + 4 >> 2] | 0) + (HEAP32[i8 + 28 >> 2] | 0) + 8 | 0) | 0) << 16 >> 16;
 HEAP32[HEAP32[i1 >> 2] >> 2] = i8;
 STACKTOP = i9;
 return;
}

function _drmp3_L3_imdct_gr(i3, i6, i2, i5) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i8 >> 2] = i6;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i7 >> 2] = i5;
 if (HEAP32[i7 >> 2] | 0) {
  _drmp3_L3_imdct36(HEAP32[i4 >> 2] | 0, HEAP32[i8 >> 2] | 0, 16496, HEAP32[i7 >> 2] | 0);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) * 18 << 2);
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) * 9 << 2);
 }
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((HEAP32[i9 >> 2] | 0) == 2) {
  _drmp3_L3_imdct_short(i2, i1, 32 - (HEAP32[i7 >> 2] | 0) | 0);
  STACKTOP = i10;
  return;
 } else {
  _drmp3_L3_imdct36(i2, i1, 16496 + (((HEAP32[i9 >> 2] | 0) == 3 & 1) * 72 | 0) | 0, 32 - (HEAP32[i7 >> 2] | 0) | 0);
  STACKTOP = i10;
  return;
 }
}

function _jar_xm_pitch_slide(i4, i2, f6) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 f6 = Math_fround(f6);
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAPF32[i1 >> 2] = f6;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 + 52 >> 2] | 0)) {
  f6 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) * Math_fround(4.0));
  HEAPF32[i1 >> 2] = f6;
 }
 f6 = Math_fround(HEAPF32[i1 >> 2]);
 i4 = (HEAP32[i3 >> 2] | 0) + 24 | 0;
 f6 = Math_fround(Math_fround(HEAPF32[i4 >> 2]) + f6);
 HEAPF32[i4 >> 2] = f6;
 if (!(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 24 >> 2]) < Math_fround(0.0))) {
  i4 = HEAP32[i5 >> 2] | 0;
  i5 = HEAP32[i3 >> 2] | 0;
  _jar_xm_update_frequency(i4, i5);
  STACKTOP = i7;
  return;
 }
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = Math_fround(0.0);
 i4 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 _jar_xm_update_frequency(i4, i5);
 STACKTOP = i7;
 return;
}

function _ma_clip_samples_f32(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i8 + 16 | 0;
 i7 = i8 + 12 | 0;
 i3 = i8 + 8 | 0;
 i6 = i8 + 4 | 0;
 i1 = i8;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) break;
  f9 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2]);
  HEAPF32[i7 >> 2] = f9;
  do if (Math_fround(HEAPF32[i7 >> 2]) < Math_fround(-1.0)) HEAPF32[i4 >> 2] = Math_fround(-1.0); else if (Math_fround(HEAPF32[i7 >> 2]) > Math_fround(1.0)) {
   HEAPF32[i4 >> 2] = Math_fround(1.0);
   break;
  } else {
   f9 = Math_fround(HEAPF32[i7 >> 2]);
   HEAPF32[i4 >> 2] = f9;
   break;
  } while (0);
  f9 = Math_fround(HEAPF32[i4 >> 2]);
  HEAPF32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f9;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i8;
 return;
}

function _ma_aligned_malloc(i7, i2) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i3 >> 2] = i2;
 if (!(HEAP32[i3 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[i4 >> 2] = (HEAP32[i3 >> 2] | 0) - 1 + 4;
 i8 = _ma_malloc((HEAP32[i8 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0) | 0;
 HEAP32[i5 >> 2] = i8;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 } else {
  HEAP32[i1 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) & ~((HEAP32[i3 >> 2] | 0) - 1);
  HEAP32[(HEAP32[i1 >> 2] | 0) + -4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 return 0;
}

function _stbtt__csctx_rmove_to(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAPF32[i7 >> 2] = f2;
 HEAPF32[i5 >> 2] = f3;
 _stbtt__csctx_close_shape(HEAP32[i6 >> 2] | 0);
 f3 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 16 >> 2]);
 f3 = Math_fround(f3 + Math_fround(HEAPF32[i7 >> 2]));
 HEAPF32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = f3;
 HEAPF32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = f3;
 f3 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 20 >> 2]);
 f3 = Math_fround(f3 + Math_fround(HEAPF32[i5 >> 2]));
 HEAPF32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = f3;
 HEAPF32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] = f3;
 i1 = ~~Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 16 >> 2]);
 i5 = HEAP32[i6 >> 2] | 0;
 _stbtt__csctx_v(i5 | 0, 1, i1, ~~Math_fround(HEAPF32[i5 + 20 >> 2]), 0, 0, 0, 0);
 STACKTOP = i4;
 return;
}

function _strcspn(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i1;
 i1 = HEAP8[i2 >> 0] | 0;
 L1 : do if (!(i1 << 24 >> 24)) i5 = 3; else if (!(HEAP8[i2 + 1 >> 0] | 0)) i5 = 3; else {
  _memset(i3 | 0, 0, 32) | 0;
  i1 = HEAP8[i2 >> 0] | 0;
  if (i1 << 24 >> 24) do {
   i8 = i1 & 255;
   i7 = i3 + (i8 >>> 5 << 2) | 0;
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 1 << (i8 & 31);
   i2 = i2 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
  } while (i1 << 24 >> 24 != 0);
  i1 = HEAP8[i4 >> 0] | 0;
  if (!(i1 << 24 >> 24)) i1 = i4; else {
   i2 = i1;
   i1 = i4;
   do {
    i8 = i2 & 255;
    if (HEAP32[i3 + (i8 >>> 5 << 2) >> 2] & 1 << (i8 & 31) | 0) break L1;
    i1 = i1 + 1 | 0;
    i2 = HEAP8[i1 >> 0] | 0;
   } while (i2 << 24 >> 24 != 0);
  }
 } while (0);
 if ((i5 | 0) == 3) i1 = ___strchrnul(i4, i1 << 24 >> 24) | 0;
 STACKTOP = i6;
 return i1 - i4 | 0;
}

function _stbi_load_from_file(i3, i7, i8, i2, i5) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 i4 = i1 + 204 | 0;
 i13 = i1 + 200 | 0;
 i12 = i1 + 196 | 0;
 i11 = i1 + 192 | 0;
 i10 = i1 + 188 | 0;
 i6 = i1 + 184 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i13 >> 2] = i7;
 HEAP32[i12 >> 2] = i8;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i10 >> 2] = i5;
 _stbi__start_file(i1, HEAP32[i4 >> 2] | 0);
 i8 = _stbi__load_and_postprocess_8bit(i1, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i8;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i9;
  return i13 | 0;
 }
 _fseek(HEAP32[i4 >> 2] | 0, 0 - ((HEAP32[i1 + 172 >> 2] | 0) - (HEAP32[i1 + 168 >> 2] | 0)) | 0, 1) | 0;
 i13 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i9;
 return i13 | 0;
}

function _stbv_vorbis_init(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 _memset(HEAP32[i3 >> 2] | 0, 0, 1512) | 0;
 if (HEAP32[i1 >> 2] | 0) {
  i4 = (HEAP32[i3 >> 2] | 0) + 80 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  i4 = (HEAP32[i3 >> 2] | 0) + 80 + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 3 & -4;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 + 92 >> 2] = HEAP32[i4 + 80 + 4 >> 2];
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 96 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 100 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 124 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 1420 >> 2] = -1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = 0;
 STACKTOP = i5;
 return;
}

function _sift(i2, i12, i10, i3, i11) {
 i2 = i2 | 0;
 i12 = i12 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i9 = i1;
 HEAP32[i9 >> 2] = i2;
 L1 : do if ((i3 | 0) > 1) {
  i8 = 0 - i12 | 0;
  i7 = i2;
  i4 = i2;
  i1 = 1;
  while (1) {
   i4 = i4 + i8 | 0;
   i6 = i3 + -2 | 0;
   i5 = i4 + (0 - (HEAP32[i11 + (i6 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[i10 & 15](i7, i5) | 0) > -1) if ((FUNCTION_TABLE_iii[i10 & 15](i7, i4) | 0) > -1) break L1;
   i2 = i9 + (i1 << 2) | 0;
   if ((FUNCTION_TABLE_iii[i10 & 15](i5, i4) | 0) > -1) {
    HEAP32[i2 >> 2] = i5;
    i4 = i5;
    i3 = i3 + -1 | 0;
   } else {
    HEAP32[i2 >> 2] = i4;
    i3 = i6;
   }
   i1 = i1 + 1 | 0;
   if ((i3 | 0) <= 1) break L1;
   i7 = HEAP32[i9 >> 2] | 0;
  }
 } else i1 = 1; while (0);
 _cycle(i12, i9, i1);
 STACKTOP = i13;
 return;
}

function _jar_mod_seek_start(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 i1 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = i2;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 5872 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 5872 >> 2];
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 5876 >> 2];
 HEAP16[i1 >> 1] = HEAP16[(HEAP32[i3 >> 2] | 0) + 5880 >> 1] | 0;
 if (!(_jar_mod_reset(HEAP32[i3 >> 2] | 0) | 0)) {
  STACKTOP = i6;
  return;
 }
 _jar_mod_load(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 5872 >> 2] = HEAP32[i4 >> 2];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 5876 >> 2] = HEAP32[i5 >> 2];
 HEAP16[(HEAP32[i3 >> 2] | 0) + 5880 >> 1] = HEAP16[i1 >> 1] | 0;
 STACKTOP = i6;
 return;
}

function _ma_device_stop__webaudio(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 if (!(HEAP32[i3 >> 2] | 0)) ___assert_fail(36359, 36381, 25351, 42719);
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) == 2) i4 = 5; else if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) == 3) i4 = 5;
 if ((i4 | 0) == 5) _emscripten_asm_const_ii(6, HEAP32[(HEAP32[i3 >> 2] | 0) + 94336 + 4 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) == 1) i4 = 8; else if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) == 3) i4 = 8;
 if ((i4 | 0) == 8) _emscripten_asm_const_ii(6, HEAP32[(HEAP32[i3 >> 2] | 0) + 94336 >> 2] | 0) | 0;
 HEAP32[i1 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2];
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i5;
  return 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i1 >> 2] & 31](HEAP32[i3 >> 2] | 0);
 STACKTOP = i5;
 return 0;
}

function _stbv_get8_packet_raw(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP8[(HEAP32[i1 >> 2] | 0) + 1376 >> 0] | 0)) {
  if (HEAP32[(HEAP32[i1 >> 2] | 0) + 1384 >> 2] | 0) {
   HEAP32[i3 >> 2] = -1;
   i3 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i4;
   return i3 | 0;
  }
  if (!(_stbv_next_segment(HEAP32[i1 >> 2] | 0) | 0)) {
   HEAP32[i3 >> 2] = -1;
   i3 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i4;
   return i3 | 0;
  }
 }
 if ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 1376 >> 0] | 0) <= 0) ___assert_fail(47228, 47181, 1536, 47248);
 i2 = (HEAP32[i1 >> 2] | 0) + 1376 | 0;
 HEAP8[i2 >> 0] = (HEAP8[i2 >> 0] | 0) + -1 << 24 >> 24;
 i2 = (HEAP32[i1 >> 2] | 0) + 1400 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 i2 = (_stbv_get8(HEAP32[i1 >> 2] | 0) | 0) & 255;
 HEAP32[i3 >> 2] = i2;
 i3 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _ma_device_uninit__webaudio(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) ___assert_fail(36359, 36381, 25043, 38568);
 if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 2) i3 = 5; else if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 3) i3 = 5;
 if ((i3 | 0) == 5) {
  i2 = HEAP32[i1 >> 2] | 0;
  _ma_device_uninit_by_index__webaudio(i2 | 0, 2, HEAP32[i2 + 94336 + 4 >> 2] | 0);
 }
 if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 1) i3 = 8; else if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 3) i3 = 8;
 if ((i3 | 0) == 8) {
  i3 = HEAP32[i1 >> 2] | 0;
  _ma_device_uninit_by_index__webaudio(i3 | 0, 1, HEAP32[i3 + 94336 >> 2] | 0);
 }
 if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) != 3) {
  STACKTOP = i4;
  return;
 }
 _ma_pcm_rb_uninit((HEAP32[i1 >> 2] | 0) + 94336 + 8 | 0);
 STACKTOP = i4;
 return;
}

function _jar_xm_generate_samples(i2, i6, i4) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 if (!((HEAP32[i3 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) != 0)) {
  STACKTOP = i8;
  return;
 }
 i6 = (HEAP32[i3 >> 2] | 0) + 360 | 0;
 i2 = i6;
 i2 = _i64Add(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
 i4 = getTempRet0() | 0;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i6 + 4 >> 2] = i4;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
  i4 = HEAP32[i7 >> 2] | 0;
  i6 = HEAP32[i1 >> 2] << 1 | 0;
  _jar_xm_sample(HEAP32[i3 >> 2] | 0, i4 + (i6 << 2) | 0, i4 + (i6 + 1 << 2) | 0);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i8;
 return;
}
function _stbtt__get_subrs(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 32 | 0;
 i6 = i1 + 24 | 0;
 i5 = i1 + 12 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 _stbtt__dict_get_ints(i4, 18, 2, i6);
 if (HEAP32[i6 + 4 >> 2] | 0) if (HEAP32[i6 >> 2] | 0) {
  _stbtt__buf_range(i1, i3, HEAP32[i6 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  _stbtt__dict_get_ints(i5, 19, 1, i7);
  if (HEAP32[i7 >> 2] | 0) {
   _stbtt__buf_seek(i3, (HEAP32[i6 + 4 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0);
   _stbtt__cff_get_index(i2, i3);
   STACKTOP = i8;
   return;
  } else {
   _stbtt__new_buf(i2, 0, 0);
   STACKTOP = i8;
   return;
  }
 }
 _stbtt__new_buf(i2, 0, 0);
 STACKTOP = i8;
 return;
}

function _stbtt__cff_skip_operand(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i4 >> 2] = i2;
 i2 = (_stbtt__buf_peek8(HEAP32[i4 >> 2] | 0) | 0) & 255;
 HEAP32[i3 >> 2] = i2;
 if ((HEAP32[i3 >> 2] | 0) < 28) ___assert_fail(52869, 52491, 1186, 52878);
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) != 30) {
  _stbtt__cff_int(i1) | 0;
  STACKTOP = i6;
  return;
 }
 _stbtt__buf_skip(i1, 1);
 while (1) {
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0)) {
   i1 = 10;
   break;
  }
  i3 = (_stbtt__buf_get8(HEAP32[i4 >> 2] | 0) | 0) & 255;
  HEAP32[i5 >> 2] = i3;
  if ((HEAP32[i5 >> 2] & 15 | 0) == 15) {
   i1 = 10;
   break;
  }
  if ((HEAP32[i5 >> 2] >> 4 | 0) == 15) {
   i1 = 10;
   break;
  }
 }
 if ((i1 | 0) == 10) {
  STACKTOP = i6;
  return;
 }
}

function _memset(i5, i6, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i3 = i5 + i4 | 0;
 i6 = i6 & 255;
 if ((i4 | 0) >= 67) {
  while (i5 & 3) {
   HEAP8[i5 >> 0] = i6;
   i5 = i5 + 1 | 0;
  }
  i1 = i3 & -4 | 0;
  i7 = i6 | i6 << 8 | i6 << 16 | i6 << 24;
  i2 = i1 - 64 | 0;
  while ((i5 | 0) <= (i2 | 0)) {
   HEAP32[i5 >> 2] = i7;
   HEAP32[i5 + 4 >> 2] = i7;
   HEAP32[i5 + 8 >> 2] = i7;
   HEAP32[i5 + 12 >> 2] = i7;
   HEAP32[i5 + 16 >> 2] = i7;
   HEAP32[i5 + 20 >> 2] = i7;
   HEAP32[i5 + 24 >> 2] = i7;
   HEAP32[i5 + 28 >> 2] = i7;
   HEAP32[i5 + 32 >> 2] = i7;
   HEAP32[i5 + 36 >> 2] = i7;
   HEAP32[i5 + 40 >> 2] = i7;
   HEAP32[i5 + 44 >> 2] = i7;
   HEAP32[i5 + 48 >> 2] = i7;
   HEAP32[i5 + 52 >> 2] = i7;
   HEAP32[i5 + 56 >> 2] = i7;
   HEAP32[i5 + 60 >> 2] = i7;
   i5 = i5 + 64 | 0;
  }
  while ((i5 | 0) < (i1 | 0)) {
   HEAP32[i5 >> 2] = i7;
   i5 = i5 + 4 | 0;
  }
 }
 while ((i5 | 0) < (i3 | 0)) {
  HEAP8[i5 >> 0] = i6;
  i5 = i5 + 1 | 0;
 }
 return i3 - i4 | 0;
}

function _jar_xm_arpeggio(i3, i1, i5, i7) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 i9 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i9 + 4 | 0;
 i2 = i9;
 i6 = i9 + 10 | 0;
 i9 = i9 + 8 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 HEAP8[i6 >> 0] = i5;
 HEAP16[i9 >> 1] = i7;
 switch ((HEAPU16[i9 >> 1] | 0 | 0) % 3 | 0 | 0) {
 case 0:
  {
   HEAP8[(HEAP32[i2 >> 2] | 0) + 72 >> 0] = 0;
   HEAP8[(HEAP32[i2 >> 2] | 0) + 73 >> 0] = 0;
   break;
  }
 case 2:
  {
   HEAP8[(HEAP32[i2 >> 2] | 0) + 72 >> 0] = 1;
   HEAP8[(HEAP32[i2 >> 2] | 0) + 73 >> 0] = (HEAPU8[i6 >> 0] | 0) >> 4;
   break;
  }
 case 1:
  {
   HEAP8[(HEAP32[i2 >> 2] | 0) + 72 >> 0] = 1;
   HEAP8[(HEAP32[i2 >> 2] | 0) + 73 >> 0] = (HEAPU8[i6 >> 0] | 0) & 15;
   break;
  }
 default:
  {}
 }
 _jar_xm_update_frequency(HEAP32[i4 >> 2] | 0, HEAP32[i2 >> 2] | 0);
 STACKTOP = i8;
 return;
}

function ___stpcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = 0;
 i3 = i2;
 L1 : do if (!((i3 ^ i1) & 3)) {
  if (!(i3 & 3)) i3 = i2; else while (1) {
   i3 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i3;
   if (!(i3 << 24 >> 24)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
   if (!(i2 & 3)) {
    i3 = i2;
    break;
   }
  }
  i2 = HEAP32[i3 >> 2] | 0;
  if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) {
   i4 = i1;
   i1 = i3;
   while (1) {
    i3 = i1 + 4 | 0;
    i1 = i4 + 4 | 0;
    HEAP32[i4 >> 2] = i2;
    i2 = HEAP32[i3 >> 2] | 0;
    if ((i2 & -2139062144 ^ -2139062144) & i2 + -16843009 | 0) {
     i2 = i3;
     break;
    } else {
     i4 = i1;
     i1 = i3;
    }
   }
  } else i2 = i3;
  i4 = 10;
 } else i4 = 10; while (0);
 if ((i4 | 0) == 10) {
  i4 = HEAP8[i2 >> 0] | 0;
  HEAP8[i1 >> 0] = i4;
  if (i4 << 24 >> 24) do {
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
   i4 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i4;
  } while (i4 << 24 >> 24 != 0);
 }
 return i1 | 0;
}

function _jar_xm_update_frequency(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, f2 = f0, f3 = f0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i7 >> 2] = i5;
 HEAP32[i6 >> 2] = i4;
 f3 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 24 >> 2]);
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 73 >> 0] | 0 | 0) > 0) f2 = Math_fround(HEAPU8[i1 + 73 >> 0] | 0 | 0); else {
  f2 = Math_fround(HEAPF32[i1 + 108 >> 2]);
  f2 = Math_fround(f2 + Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 68 >> 2]));
 }
 f3 = Math_fround(_jar_xm_frequency(HEAP32[i7 >> 2] | 0, f3, f2));
 HEAPF32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = f3;
 f3 = Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 28 >> 2]);
 f3 = Math_fround(f3 / Math_fround((HEAP32[(HEAP32[i7 >> 2] | 0) + 324 >> 2] | 0) >>> 0));
 HEAPF32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] = f3;
 STACKTOP = i8;
 return;
}

function _ma_format_converter_config_init(i1, i4, i5, i3, i6, i7) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i8 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i13 = i2 + 56 | 0;
 i12 = i2 + 52 | 0;
 i11 = i2 + 48 | 0;
 i10 = i2 + 44 | 0;
 i9 = i2 + 40 | 0;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i6;
 HEAP32[i9 >> 2] = i7;
 _ma_format_converter_config_init_new(i2);
 HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i2 + 32 >> 2] = 0;
 HEAP32[i2 + 36 >> 2] = HEAP32[i9 >> 2];
 i3 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 STACKTOP = i8;
 return;
}

function _memcompare(i2, i4, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) {
   i1 = 6;
   break;
  }
  if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0) != (HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0)) {
   i1 = 4;
   break;
  }
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 4) {
  HEAP32[i8 >> 2] = 0;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 } else if ((i1 | 0) == 6) {
  HEAP32[i8 >> 2] = 1;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 return 0;
}

function _ma_context_enumerate_devices(i4, i2, i6) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 if (HEAP32[i5 >> 2] | 0) if (!((HEAP32[i3 >> 2] | 0) == 0 ? 1 : (HEAP32[(HEAP32[i5 >> 2] | 0) + 108 >> 2] | 0) == 0)) {
  _ma_mutex_lock((HEAP32[i5 >> 2] | 0) + 16 | 0);
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = FUNCTION_TABLE_iiii[HEAP32[i6 + 108 >> 2] & 15](i6 | 0, HEAP32[i3 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i1 >> 2] = i7;
  _ma_mutex_unlock((HEAP32[i5 >> 2] | 0) + 16 | 0);
  HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[i8 >> 2] = -2;
 i8 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _vsnprintf(i4, i3, i8, i7) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i9 = 0;
 i6 = 0;
 i9 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i1 = i2 + 144 | 0;
 i5 = i2;
 _memcpy(i5 | 0, 31152, 144) | 0;
 if ((i3 + -1 | 0) >>> 0 > 2147483646) if (!i3) {
  i3 = 1;
  i6 = 4;
 } else {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 61;
  i1 = -1;
 } else {
  i1 = i4;
  i6 = 4;
 }
 if ((i6 | 0) == 4) {
  i6 = -2 - i1 | 0;
  i6 = i3 >>> 0 > i6 >>> 0 ? i6 : i3;
  HEAP32[i5 + 48 >> 2] = i6;
  i3 = i5 + 20 | 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i5 + 44 >> 2] = i1;
  i1 = i1 + i6 | 0;
  i2 = i5 + 16 | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i5 + 28 >> 2] = i1;
  i1 = _vfprintf(i5, i8, i7) | 0;
  if (i6) {
   i8 = HEAP32[i3 >> 2] | 0;
   HEAP8[i8 + (((i8 | 0) == (HEAP32[i2 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
  }
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _ma_pcm_rb_get_subbuffer_size(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = i2;
 if (!(HEAP32[i3 >> 2] | 0)) {
  HEAP32[i7 >> 2] = 0;
  i7 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = _ma_rb_get_subbuffer_size(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 if (!(HEAP32[i6 >> 2] | 0)) ___assert_fail(36507, 36381, 33164, 36649);
 i3 = HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2];
 HEAP32[i4 >> 2] = i3;
 i6 = _ma_get_bytes_per_sample(HEAP32[i5 >> 2] | 0) | 0;
 i6 = (i1 >>> 0) / ((Math_imul(i6, HEAP32[i4 >> 2] | 0) | 0) >>> 0) | 0;
 HEAP32[i7 >> 2] = i6;
 i7 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _UpdateBuffersDefault() {
 var i1 = 0;
 if ((HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] | 0) <= 0) return;
 if (HEAP8[177201] & 1) FUNCTION_TABLE_vi[HEAP32[43934] & 31](HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 28 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 32 >> 2] | 0);
 i1 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
 _glBufferSubData(34962, 0, (HEAP32[i1 >> 2] | 0) * 12 | 0, HEAP32[i1 + 12 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 32 + 4 >> 2] | 0);
 i1 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
 _glBufferSubData(34962, 0, HEAP32[i1 >> 2] << 3 | 0, HEAP32[i1 + 16 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) + 32 + 8 >> 2] | 0);
 i1 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
 _glBufferSubData(34962, 0, HEAP32[i1 >> 2] << 2 | 0, HEAP32[i1 + 20 >> 2] | 0);
 if (!(HEAP8[177201] & 1)) return;
 FUNCTION_TABLE_vi[HEAP32[43934] & 31](0);
 return;
}

function _stbi__mad3sizes_valid(i2, i5, i7, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i1 >> 2] = i4;
 if (!(_stbi__mul2sizes_valid(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) {
  i8 = 0;
  i8 = i8 & 1;
  STACKTOP = i9;
  return i8 | 0;
 }
 i7 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid(i7, HEAP32[i8 >> 2] | 0) | 0)) {
  i8 = 0;
  i8 = i8 & 1;
  STACKTOP = i9;
  return i8 | 0;
 }
 i7 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i8 = Math_imul(i7, HEAP32[i8 >> 2] | 0) | 0;
 i8 = (_stbi__addsizes_valid(i8, HEAP32[i1 >> 2] | 0) | 0) != 0;
 i8 = i8 & 1;
 STACKTOP = i9;
 return i8 | 0;
}

function _ma_copy_and_apply_volume_factor_u8(i6, i4, i8, f2) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 f2 = Math_fround(f2);
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i9 >> 2] = i8;
 HEAPF32[i3 >> 2] = f2;
 if ((HEAP32[i7 >> 2] | 0) == 0 | (HEAP32[i5 >> 2] | 0) == 0) {
  STACKTOP = i10;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) break;
  f2 = Math_fround(HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0);
  i8 = ~~Math_fround(f2 * Math_fround(HEAPF32[i3 >> 2])) & 255;
  HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] = i8;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i10;
 return;
}

function _ma_channel_map_contains_channel_position(i6, i2, i4) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i5 = i1 + 16 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i3 >> 2] = i2;
 HEAP8[i5 >> 0] = i4;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) {
   i1 = 6;
   break;
  }
  if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0) == (HEAPU8[i5 >> 0] | 0 | 0)) {
   i1 = 4;
   break;
  }
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 4) {
  HEAP32[i8 >> 2] = 1;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 } else if ((i1 | 0) == 6) {
  HEAP32[i8 >> 2] = 0;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 return 0;
}

function _ma_pcm_converter__pre_format_converter_on_read(i3, i1, i6, i8) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 i10 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i2 = i10 + 16 | 0;
 i7 = i10 + 12 | 0;
 i11 = i10 + 8 | 0;
 i5 = i10 + 4 | 0;
 i4 = i10;
 HEAP32[i10 + 20 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
 if (!(HEAP32[i5 >> 2] | 0)) ___assert_fail(37276, 36381, 32107, 45128);
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 if (HEAP32[i4 >> 2] | 0) {
  i11 = FUNCTION_TABLE_iiiii[HEAP32[HEAP32[i4 >> 2] >> 2] & 15](HEAP32[i4 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0;
  STACKTOP = i9;
  return i11 | 0;
 } else ___assert_fail(44136, 36381, 32110, 45128);
 return 0;
}

function _drmp3_init(i7, i2, i4, i9, i6) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 20 | 0;
 i8 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i1 >> 2] = i6;
 if ((HEAP32[i8 >> 2] | 0) == 0 | (HEAP32[i3 >> 2] | 0) == 0) {
  HEAP32[i11 >> 2] = 0;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 } else {
  _memset(HEAP32[i8 >> 2] | 0, 0, 21176) | 0;
  i10 = _drmp3_init_internal(HEAP32[i8 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i11 >> 2] = i10;
  i11 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 return 0;
}

function _stbtt__get_subr(i2, i4, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 i6 = _stbtt__cff_index_count(i4) | 0;
 HEAP32[i3 >> 2] = i6;
 HEAP32[i1 >> 2] = 107;
 if ((HEAP32[i3 >> 2] | 0) >= 33900) HEAP32[i1 >> 2] = 32768; else if ((HEAP32[i3 >> 2] | 0) >= 1240) HEAP32[i1 >> 2] = 1131;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
 if ((HEAP32[i7 >> 2] | 0) >= 0) if ((HEAP32[i7 >> 2] | 0) < (HEAP32[i3 >> 2] | 0)) {
  i7 = HEAP32[i7 >> 2] | 0;
  HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  _stbtt__cff_index_get(i2, i5, i7);
  STACKTOP = i8;
  return;
 }
 _stbtt__new_buf(i2, 0, 0);
 STACKTOP = i8;
 return;
}

function _stbir__get_coefficient_width(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i7 >> 2] = i1;
 HEAPF32[i6 >> 2] = f2;
 i3 = (_stbir__use_upsampling(Math_fround(HEAPF32[i6 >> 2])) | 0) != 0;
 i1 = HEAP32[28352 + (HEAP32[i7 >> 2] << 3) + 4 >> 2] | 0;
 f2 = Math_fround(HEAPF32[i6 >> 2]);
 if (i3) {
  f2 = Math_fround(Math_fround(1.0) / f2);
  i7 = ~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[i1 & 7](f2)) * Math_fround(2.0))));
  HEAP32[i4 >> 2] = i7;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i7 | 0;
 } else {
  i7 = ~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[i1 & 7](f2)) * Math_fround(2.0))));
  HEAP32[i4 >> 2] = i7;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 return 0;
}

function _ma_thread_create__posix(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i11 = i7 + 16 | 0;
 i10 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i8 = i7 + 4 | 0;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i7 >> 2] = 0;
 i7 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 140 + 4 >> 2] & 15]((HEAP32[i11 >> 2] | 0) + 4 | 0, HEAP32[i7 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i7;
 if (HEAP32[i8 >> 2] | 0) {
  HEAP32[i5 >> 2] = -313;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i12 | 0;
 } else {
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i12 | 0;
 }
 return 0;
}

function _ma_copy_and_apply_volume_factor_s32(i6, i4, i8, f2) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 f2 = Math_fround(f2);
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i9 >> 2] = i8;
 HEAPF32[i3 >> 2] = f2;
 if ((HEAP32[i7 >> 2] | 0) == 0 | (HEAP32[i5 >> 2] | 0) == 0) {
  STACKTOP = i10;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) break;
  f2 = Math_fround(HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] | 0);
  i8 = ~~Math_fround(f2 * Math_fround(HEAPF32[i3 >> 2]));
  HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = i8;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i10;
 return;
}

function _ma_copy_and_apply_volume_factor_s16(i6, i4, i8, f2) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 f2 = Math_fround(f2);
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i9 >> 2] = i8;
 HEAPF32[i3 >> 2] = f2;
 if ((HEAP32[i7 >> 2] | 0) == 0 | (HEAP32[i5 >> 2] | 0) == 0) {
  STACKTOP = i10;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) break;
  f2 = Math_fround(HEAP16[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] | 0);
  i8 = ~~Math_fround(f2 * Math_fround(HEAPF32[i3 >> 2]));
  HEAP16[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 1) >> 1] = i8;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i10;
 return;
}

function _ma_copy_and_apply_volume_factor_f32(i6, i4, i8, f2) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 f2 = Math_fround(f2);
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i9 >> 2] = i8;
 HEAPF32[i3 >> 2] = f2;
 if ((HEAP32[i7 >> 2] | 0) == 0 | (HEAP32[i5 >> 2] | 0) == 0) {
  STACKTOP = i10;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) break;
  f2 = Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2]);
  f2 = Math_fround(f2 * Math_fround(HEAPF32[i3 >> 2]));
  HEAPF32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f2;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i10;
 return;
}

function _stbtt__dict_get_ints(i2, i4, i7, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i1 + 28 | 0;
 i10 = i1 + 24 | 0;
 i8 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i6 >> 2] = i5;
 _stbtt__dict_get(i1, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
   i1 = 5;
   break;
  }
  if ((HEAP32[i1 + 4 >> 2] | 0) >= (HEAP32[i1 + 8 >> 2] | 0)) {
   i1 = 5;
   break;
  }
  i11 = _stbtt__cff_int(i1) | 0;
  HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i3 >> 2] << 2) >> 2] = i11;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 5) {
  STACKTOP = i9;
  return;
 }
}

function _stbi__get8(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = i2;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 168 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[i3 >> 2] | 0) + 172 >> 2] | 0) >>> 0) {
  i2 = i1 + 168 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i3 + 1;
  HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
  i4 = HEAP8[i4 >> 0] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 if (HEAP32[i1 + 32 >> 2] | 0) {
  _stbi__refill_buffer(HEAP32[i3 >> 2] | 0);
  i2 = (HEAP32[i3 >> 2] | 0) + 168 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i3 + 1;
  HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
  i4 = HEAP8[i4 >> 0] | 0;
  STACKTOP = i5;
  return i4 | 0;
 } else {
  HEAP8[i4 >> 0] = 0;
  i4 = HEAP8[i4 >> 0] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function _UnloadFontDefault() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i2 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[44143] | 0)) break;
  i4 = (HEAP32[44150] | 0) + ((HEAP32[i1 >> 2] | 0) * 36 | 0) + 16 | 0;
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i2 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
  _UnloadImage(i2);
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 HEAP32[i2 >> 2] = HEAP32[44144];
 HEAP32[i2 + 4 >> 2] = HEAP32[44145];
 HEAP32[i2 + 8 >> 2] = HEAP32[44146];
 HEAP32[i2 + 12 >> 2] = HEAP32[44147];
 HEAP32[i2 + 16 >> 2] = HEAP32[44148];
 _UnloadTexture(i2);
 _free(HEAP32[44150] | 0);
 _free(HEAP32[44149] | 0);
 STACKTOP = i3;
 return;
}

function _drmp3_seek_forward_by_pcm_frames__brute_force(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i6 + 20 | 0;
 i8 = i6 + 16 | 0;
 i7 = i6 + 8 | 0;
 HEAP32[i8 >> 2] = i3;
 i3 = i7;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 i1 = i7;
 i1 = _drmp3_read_pcm_frames_f32(HEAP32[i8 >> 2] | 0, HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, 0) | 0;
 i2 = getTempRet0() | 0;
 i3 = i6;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 i3 = i6;
 i6 = i7;
 if ((HEAP32[i3 >> 2] | 0) != (HEAP32[i6 >> 2] | 0) ? 1 : (HEAP32[i3 + 4 >> 2] | 0) != (HEAP32[i6 + 4 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i8 | 0;
 } else {
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i8 | 0;
 }
 return 0;
}

function _stbi__hdr_test_core(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  i2 = HEAP32[i4 >> 2] | 0;
  if (!(HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0)) {
   i1 = 6;
   break;
  }
  i3 = (_stbi__get8(i2) | 0) & 255;
  if ((i3 | 0) != (HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0)) {
   i1 = 4;
   break;
  }
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 4) {
  HEAP32[i6 >> 2] = 0;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 } else if ((i1 | 0) == 6) {
  _stbi__rewind(i2);
  HEAP32[i6 >> 2] = 1;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function __webgl1_match_ext_proc_address_without_suffix(i1) {
 i1 = i1 | 0;
 if (!(_strcmp(i1, 59356) | 0)) i1 = 35; else if (!(_strcmp(i1, 59369) | 0)) i1 = 36; else if (!(_strcmp(i1, 59385) | 0)) i1 = 25; else if (!(_strcmp(i1, 59395) | 0)) i1 = 37; else if (!(_strcmp(i1, 59408) | 0)) i1 = 22; else if (!(_strcmp(i1, 59419) | 0)) i1 = 38; else if (!(_strcmp(i1, 59434) | 0)) i1 = 30; else if (!(_strcmp(i1, 59447) | 0)) i1 = 31; else if (!(_strcmp(i1, 59466) | 0)) i1 = 32; else if (!(_strcmp(i1, 59486) | 0)) i1 = 33; else if (!(_strcmp(i1, 59507) | 0)) i1 = 34; else if (!(_strcmp(i1, 59529) | 0)) i1 = 23; else if (!(_strcmp(i1, 59547) | 0)) i1 = 39; else if (!(_strcmp(i1, 59568) | 0)) i1 = 40; else if (!(_strcmp(i1, 59586) | 0)) i1 = 26; else if (!(_strcmp(i1, 59602) | 0)) i1 = 41; else if (!(_strcmp(i1, 59616) | 0)) i1 = 26; else if (!(_strcmp(i1, 59638) | 0)) i1 = 40; else {
  i1 = (_strcmp(i1, 59662) | 0) == 0;
  return (i1 ? 7 : 0) | 0;
 }
 return i1 | 0;
}

function _drmp3_hdr_compare(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 if (!(_drmp3_hdr_valid(HEAP32[i1 >> 2] | 0) | 0)) {
  i4 = 0;
  i4 = i4 & 1;
  STACKTOP = i5;
  return i4 | 0;
 }
 if (((HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] | 0) ^ (HEAPU8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] | 0)) & 254 | 0) {
  i4 = 0;
  i4 = i4 & 1;
  STACKTOP = i5;
  return i4 | 0;
 }
 if (((HEAPU8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] | 0) ^ (HEAPU8[(HEAP32[i1 >> 2] | 0) + 2 >> 0] | 0)) & 12 | 0) {
  i4 = 0;
  i4 = i4 & 1;
  STACKTOP = i5;
  return i4 | 0;
 }
 i4 = (((HEAPU8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] | 0) & 240 | 0) == 0 ^ ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 2 >> 0] | 0) & 240 | 0) == 0 | 0) != 0 ^ 1;
 i4 = i4 & 1;
 STACKTOP = i5;
 return i4 | 0;
}

function _DrawCircle(i1, i2, f4, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f4 = Math_fround(f4);
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i6 + 32 | 0;
 i8 = i6 + 24 | 0;
 i11 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAPF32[i9 >> 2] = f4;
 f4 = Math_fround(HEAP32[i11 >> 2] | 0);
 HEAPF32[i6 >> 2] = f4;
 f4 = Math_fround(HEAP32[i10 >> 2] | 0);
 HEAPF32[i6 + 4 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i9 >> 2]);
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP8[i7 >> 0] = HEAP8[i3 >> 0] | 0;
 HEAP8[i7 + 1 >> 0] = HEAP8[i3 + 1 >> 0] | 0;
 HEAP8[i7 + 2 >> 0] = HEAP8[i3 + 2 >> 0] | 0;
 HEAP8[i7 + 3 >> 0] = HEAP8[i3 + 3 >> 0] | 0;
 _DrawCircleV(i8, f4, i7);
 STACKTOP = i5;
 return;
}

function _stbi__refill_buffer(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i4 >> 2] = i3;
 i1 = HEAP32[i4 >> 2] | 0;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i1 + 16 >> 2] & 15](HEAP32[i1 + 28 >> 2] | 0, i1 + 40 | 0, HEAP32[i1 + 36 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  HEAP32[i1 + 32 >> 2] = 0;
  i3 = HEAP32[i4 >> 2] | 0;
  HEAP32[i3 + 168 >> 2] = (i3 | 0) + 40;
  i3 = HEAP32[i4 >> 2] | 0;
  HEAP32[i3 + 172 >> 2] = (i3 | 0) + 40 + 1;
  HEAP8[HEAP32[(HEAP32[i4 >> 2] | 0) + 168 >> 2] >> 0] = 0;
  STACKTOP = i5;
  return;
 } else {
  HEAP32[(HEAP32[i4 >> 2] | 0) + 168 >> 2] = i1 + 40;
  i4 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 + 172 >> 2] = (i4 | 0) + 40 + (HEAP32[i2 >> 2] | 0);
  STACKTOP = i5;
  return;
 }
}

function _jar_xm_vibrato(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i6 + 8 | 0;
 i7 = i6 + 4 | 0;
 i10 = i6 + 14 | 0;
 i11 = i6 + 12 | 0;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i7 >> 2] = i1;
 HEAP8[i10 >> 0] = i3;
 HEAP16[i11 >> 1] = i4;
 i4 = Math_imul(HEAPU16[i11 >> 1] | 0, (HEAPU8[i10 >> 0] | 0) >> 4) | 0;
 HEAP32[i6 >> 2] = i4;
 f9 = Math_fround(Math_fround(_jar_xm_waveform(HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i6 >> 2] & 255)) * Math_fround(2.0));
 f9 = Math_fround(Math_fround(f9 * Math_fround((HEAPU8[i10 >> 0] | 0) & 15 | 0)) / Math_fround(15.0));
 HEAPF32[(HEAP32[i7 >> 2] | 0) + 108 >> 2] = f9;
 _jar_xm_update_frequency(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _ma_src_config_init(i1, i6, i7, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i8 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i13 = i2 + 52 | 0;
 i12 = i2 + 48 | 0;
 i11 = i2 + 44 | 0;
 i10 = i2 + 40 | 0;
 i9 = i2 + 36 | 0;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i12 >> 2] = i7;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i5;
 _ma_src_config_init_new(i2);
 HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i9 >> 2];
 i3 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 STACKTOP = i8;
 return;
}

function _stbi__malloc_mad3(i2, i5, i7, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i1 >> 2] = i4;
 if (_stbi__mad3sizes_valid(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) {
  i7 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
  i8 = Math_imul(i7, HEAP32[i8 >> 2] | 0) | 0;
  i8 = _stbi__malloc(i8 + (HEAP32[i1 >> 2] | 0) | 0) | 0;
  HEAP32[i9 >> 2] = i8;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 } else {
  HEAP32[i9 >> 2] = 0;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 return 0;
}

function _ma_pcm_rb_pointer_disance(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i7 + 16 | 0;
 i2 = i7 + 12 | 0;
 i5 = i7 + 8 | 0;
 i6 = i7 + 4 | 0;
 i4 = i7;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _ma_rb_pointer_distance(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 if (!(HEAP32[i5 >> 2] | 0)) ___assert_fail(36507, 36381, 33164, 36649);
 i4 = HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2];
 HEAP32[i2 >> 2] = i4;
 i5 = _ma_get_bytes_per_sample(HEAP32[i3 >> 2] | 0) | 0;
 i5 = (i1 >>> 0) / ((Math_imul(i5, HEAP32[i2 >> 2] | 0) | 0) >>> 0) | 0;
 HEAP32[i6 >> 2] = i5;
 i6 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _MatrixScale(i7, f2, f3, f4) {
 i7 = i7 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 var i1 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i8 = i11 + 72 | 0;
 i9 = i11 + 68 | 0;
 i10 = i11 + 64 | 0;
 i1 = i11;
 HEAPF32[i8 >> 2] = f2;
 HEAPF32[i9 >> 2] = f3;
 HEAPF32[i10 >> 2] = f4;
 i5 = i1;
 i6 = i5 + 64 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i6 | 0));
 f4 = Math_fround(HEAPF32[i8 >> 2]);
 HEAPF32[i1 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i9 >> 2]);
 HEAPF32[i1 + 20 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i10 >> 2]);
 HEAPF32[i1 + 40 >> 2] = f4;
 HEAPF32[i1 + 60 >> 2] = Math_fround(1.0);
 i5 = i7;
 i6 = i5 + 64 | 0;
 do {
  HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
  i5 = i5 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i5 | 0) < (i6 | 0));
 STACKTOP = i11;
 return;
}

function _getnote(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 16 | 0;
 i5 = i4;
 HEAP32[i6 >> 2] = i2;
 HEAP16[i7 >> 1] = i3;
 HEAP32[i4 + 4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 1152) {
   i1 = 6;
   break;
  }
  i2 = HEAP32[i5 >> 2] | 0;
  if ((HEAPU16[i7 >> 1] | 0 | 0) >= (HEAPU16[(HEAP32[i6 >> 2] | 0) + 3554 + (HEAP32[i5 >> 2] << 1) >> 1] | 0 | 0)) {
   i1 = 4;
   break;
  }
  HEAP32[i5 >> 2] = i2 + 1;
 }
 if ((i1 | 0) == 4) {
  HEAP32[i8 >> 2] = i2;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 } else if ((i1 | 0) == 6) {
  HEAP32[i8 >> 2] = 144;
  i8 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 return 0;
}

function _stb_vorbis_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 24 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
 HEAP32[i4 + 20 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 116 >> 2] >> 1;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i4 + 20 >> 2];
 STACKTOP = i3;
 return;
}

function _ImageFromImage(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i5 + 20 | 0;
 HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i6 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 _ImageCopy(i5, i6);
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 _ImageCrop(i5, i6);
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 STACKTOP = i4;
 return;
}

function _EmscriptenFullscreenChangeCallback(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i7 + 16 | 0;
 i5 = i7;
 i8 = i7 + 36 | 0;
 HEAP32[i7 + 40 >> 2] = i2;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i7 + 32 >> 2] = i3;
 i4 = HEAP32[i8 >> 2] | 0;
 i1 = HEAP32[i4 + 264 >> 2] | 0;
 i2 = HEAP32[i4 + 268 >> 2] | 0;
 i3 = HEAP32[i4 + 272 >> 2] | 0;
 i4 = HEAP32[i4 + 276 >> 2] | 0;
 if (HEAP32[HEAP32[i8 >> 2] >> 2] | 0) {
  HEAP32[i5 >> 2] = i1;
  HEAP32[i5 + 4 >> 2] = i2;
  HEAP32[i5 + 8 >> 2] = i3;
  HEAP32[i5 + 12 >> 2] = i4;
  _TraceLog(3, 35536, i5);
  STACKTOP = i7;
  return 0;
 } else {
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = i2;
  HEAP32[i6 + 8 >> 2] = i3;
  HEAP32[i6 + 12 >> 2] = i4;
  _TraceLog(3, 35605, i6);
  STACKTOP = i7;
  return 0;
 }
 return 0;
}

function _stb_vorbis_open_file(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i9 = i6 + 12 | 0;
 i8 = i6 + 8 | 0;
 i7 = i6 + 4 | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i8 >> 2] = i1;
 i4 = _ftell(HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i4;
 _fseek(HEAP32[i11 >> 2] | 0, 0, 2) | 0;
 i4 = _ftell(HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = i4 - (HEAP32[i6 >> 2] | 0);
 _fseek(HEAP32[i11 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0;
 i6 = _stb_vorbis_open_file_section(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i5;
 return i6 | 0;
}

function _stbi__float_postprocess(i7, i8, i9, i3, i5) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 20 | 0;
 i11 = i1 + 16 | 0;
 i12 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i10 >> 2] = i7;
 HEAP32[i11 >> 2] = i8;
 HEAP32[i12 >> 2] = i9;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = i5;
 if (!(0 != 0 & (HEAP32[i10 >> 2] | 0) != 0)) {
  STACKTOP = i13;
  return;
 }
 if (HEAP32[i6 >> 2] | 0) i1 = HEAP32[i6 >> 2] | 0; else i1 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
 HEAP32[i2 >> 2] = i1;
 _stbi__vertical_flip(HEAP32[i10 >> 2] | 0, HEAP32[HEAP32[i11 >> 2] >> 2] | 0, HEAP32[HEAP32[i12 >> 2] >> 2] | 0, HEAP32[i2 >> 2] << 2);
 STACKTOP = i13;
 return;
}

function _stbi__start_callbacks(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i5 >> 2] = i3;
 i3 = (HEAP32[i6 >> 2] | 0) + 16 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = HEAP32[i5 >> 2];
 HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] = 128;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] = 1;
 i5 = HEAP32[i6 >> 2] | 0;
 HEAP32[i5 + 176 >> 2] = (i5 | 0) + 40;
 _stbi__refill_buffer(HEAP32[i6 >> 2] | 0);
 i5 = HEAP32[i6 >> 2] | 0;
 HEAP32[i5 + 180 >> 2] = HEAP32[i5 + 172 >> 2];
 STACKTOP = i4;
 return;
}

function _ma_thread_create(i4, i7, i2, i6) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 if ((HEAP32[i5 >> 2] | 0) == 0 | (HEAP32[i8 >> 2] | 0) == 0 | (HEAP32[i3 >> 2] | 0) == 0) {
  HEAP32[i9 >> 2] = 0;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 } else {
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i5 >> 2];
  i8 = _ma_thread_create__posix(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = i8;
  i9 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 return 0;
}

function _stbv_skip(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0)) {
  i4 = _ftell(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0) | 0;
  HEAP32[i1 >> 2] = i4;
  _fseek(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0, (HEAP32[i1 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) | 0, 0) | 0;
  STACKTOP = i6;
  return;
 }
 i4 = (HEAP32[i5 >> 2] | 0) + 32 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i3 >> 2] | 0);
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) >>> 0) {
  STACKTOP = i6;
  return;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 96 >> 2] = 1;
 STACKTOP = i6;
 return;
}

function _drmp3_init_src(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i5 + 24 | 0;
 i2 = i5 + 20 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 >> 2] = 44100;
 HEAP32[i5 + 4 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 6692 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 6688 >> 2];
 HEAP32[i5 + 12 >> 2] = 1;
 if (_drmp3_src_init(i5, 2, HEAP32[i2 >> 2] | 0, (HEAP32[i2 >> 2] | 0) + 15960 | 0) | 0) {
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i5 | 0;
 } else {
  _drmp3_uninit(HEAP32[i2 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 return 0;
}

function ___fseeko_unlocked(i5, i1, i2, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i7 = 0;
 i7 = 0;
 if ((i6 | 0) == 1) {
  i4 = (HEAP32[i5 + 8 >> 2] | 0) - (HEAP32[i5 + 4 >> 2] | 0) | 0;
  i1 = _i64Subtract(i1 | 0, i2 | 0, i4 | 0, ((i4 | 0) < 0) << 31 >> 31 | 0) | 0;
  i2 = getTempRet0() | 0;
 }
 i4 = i5 + 20 | 0;
 i3 = i5 + 28 | 0;
 if ((HEAP32[i4 >> 2] | 0) >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i5 + 36 >> 2] & 15](i5, 0, 0) | 0;
  if (!(HEAP32[i4 >> 2] | 0)) i1 = -1; else i7 = 5;
 } else i7 = 5;
 if ((i7 | 0) == 5) {
  HEAP32[i5 + 16 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  FUNCTION_TABLE_iiiii[HEAP32[i5 + 40 >> 2] & 15](i5, i1, i2, i6) | 0;
  if ((getTempRet0() | 0) < 0) i1 = -1; else {
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -17;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _GifWriteBit(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i4 + 4 | 0;
 i5 = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & 1;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] << HEAPU8[HEAP32[i3 >> 2] >> 0];
 i2 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] | HEAP32[i5 >> 2];
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP8[i2 >> 0] = (HEAP8[i2 >> 0] | 0) + 1 << 24 >> 24;
 if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0) <= 7) {
  STACKTOP = i4;
  return;
 }
 i6 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP8[i6 + 1 >> 0] | 0;
 i2 = i6 + 8 | 0;
 i6 = i6 + 4 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = i5 + 1;
 HEAP8[i2 + i5 >> 0] = i1;
 HEAP8[HEAP32[i3 >> 2] >> 0] = 0;
 HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] = 0;
 STACKTOP = i4;
 return;
}

function ___strchrnul(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = i4 & 255;
 L1 : do if (!i3) i1 = i1 + (_strlen(i1) | 0) | 0; else {
  if (i1 & 3) {
   i2 = i4 & 255;
   do {
    i5 = HEAP8[i1 >> 0] | 0;
    if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break L1;
    i1 = i1 + 1 | 0;
   } while ((i1 & 3 | 0) != 0);
  }
  i3 = Math_imul(i3, 16843009) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L10 : do if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) do {
   i5 = i2 ^ i3;
   if ((i5 & -2139062144 ^ -2139062144) & i5 + -16843009 | 0) break L10;
   i1 = i1 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009 | 0)); while (0);
  i2 = i4 & 255;
  while (1) {
   i5 = HEAP8[i1 >> 0] | 0;
   if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break; else i1 = i1 + 1 | 0;
  }
 } while (0);
 return i1 | 0;
}

function _ma_event_init__posix(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 if (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 12 >> 2] & 15]((HEAP32[i1 >> 2] | 0) + 4 | 0, 0) | 0) {
  HEAP32[i5 >> 2] = -311;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 28 >> 2] & 15]((HEAP32[i1 >> 2] | 0) + 4 + 28 | 0, 0) | 0) {
  HEAP32[i5 >> 2] = -312;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  HEAP32[(HEAP32[i1 >> 2] | 0) + 4 + 76 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _StopMusicStream(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 16 | 0;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 _StopAudioStream(i3);
 switch (HEAP32[i1 >> 2] | 0) {
 case 1:
  {
   _stb_vorbis_seek_start(HEAP32[i1 + 4 >> 2] | 0) | 0;
   STACKTOP = i2;
   return;
  }
 case 3:
  {
   _drmp3_seek_to_pcm_frame(HEAP32[i1 + 4 >> 2] | 0, 0, 0) | 0;
   STACKTOP = i2;
   return;
  }
 case 4:
  {
   _jar_xm_reset(HEAP32[i1 + 4 >> 2] | 0);
   STACKTOP = i2;
   return;
  }
 case 5:
  {
   _jar_mod_seek_start(HEAP32[i1 + 4 >> 2] | 0);
   STACKTOP = i2;
   return;
  }
 default:
  {
   STACKTOP = i2;
   return;
  }
 }
}

function _stbir__setup(i2, i4, i3, i6, i5, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 i8 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i8 + 20 | 0;
 i13 = i8 + 16 | 0;
 i12 = i8 + 12 | 0;
 i11 = i8 + 8 | 0;
 i10 = i8 + 4 | 0;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i10 >> 2] = i5;
 HEAP32[i8 >> 2] = i1;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = HEAP32[i13 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = HEAP32[i12 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = HEAP32[i11 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] = HEAP32[i10 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 64 >> 2] = HEAP32[i8 >> 2];
 STACKTOP = i7;
 return;
}

function _ma_context_init_backend_apis__nix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 4 >> 2] = 12;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 8 >> 2] = 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 12 >> 2] = 2;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 16 >> 2] = 7;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 20 >> 2] = 8;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 24 >> 2] = 9;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 28 >> 2] = 3;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 32 >> 2] = 10;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 36 >> 2] = 4;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 40 >> 2] = 11;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 44 >> 2] = 12;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 140 + 48 >> 2] = 13;
 STACKTOP = i2;
 return 0;
}

function _stbir__get_contributors(f8, i2, i4, i6) {
 f8 = Math_fround(f8);
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAPF32[i9 >> 2] = f8;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i1 >> 2] = i6;
 if (_stbir__use_upsampling(Math_fround(HEAPF32[i9 >> 2])) | 0) {
  HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 } else {
  i6 = HEAP32[i5 >> 2] | 0;
  i9 = i6 + ((_stbir__get_filter_pixel_margin(HEAP32[i3 >> 2] | 0, Math_fround(HEAPF32[i9 >> 2])) | 0) << 1) | 0;
  HEAP32[i7 >> 2] = i9;
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 return 0;
}

function _stbv_make_block_array(i5, i2, i7) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i8 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = i5;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i1 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i3 >> 2] << 2);
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i3 >> 2] | 0)) break;
  HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i9;
 return HEAP32[i6 >> 2] | 0;
}

function _stbtt_setvertex(i4, i3, i5, i6, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 i8 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i8 + 16 | 0;
 i13 = i8 + 20 | 0;
 i12 = i8 + 12 | 0;
 i11 = i8 + 8 | 0;
 i10 = i8 + 4 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP8[i13 >> 0] = i3;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP8[(HEAP32[i9 >> 2] | 0) + 12 >> 0] = HEAP8[i13 >> 0] | 0;
 HEAP16[HEAP32[i9 >> 2] >> 1] = HEAP32[i12 >> 2];
 HEAP16[(HEAP32[i9 >> 2] | 0) + 2 >> 1] = HEAP32[i11 >> 2];
 HEAP16[(HEAP32[i9 >> 2] | 0) + 4 >> 1] = HEAP32[i10 >> 2];
 HEAP16[(HEAP32[i9 >> 2] | 0) + 6 >> 1] = HEAP32[i8 >> 2];
 STACKTOP = i7;
 return;
}

function _stbtt__csctx_rline_to(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAPF32[i7 >> 2] = f2;
 HEAPF32[i5 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i7 >> 2]);
 i1 = (HEAP32[i6 >> 2] | 0) + 16 | 0;
 f3 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) + f3);
 HEAPF32[i1 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i5 >> 2]);
 i1 = (HEAP32[i6 >> 2] | 0) + 20 | 0;
 f3 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) + f3);
 HEAPF32[i1 >> 2] = f3;
 i1 = ~~Math_fround(HEAPF32[(HEAP32[i6 >> 2] | 0) + 16 >> 2]);
 i5 = HEAP32[i6 >> 2] | 0;
 _stbtt__csctx_v(i5 | 0, 2, i1, ~~Math_fround(HEAPF32[i5 + 20 >> 2]), 0, 0, 0, 0);
 STACKTOP = i4;
 return;
}

function _stbir__get_ring_buffer_scanline(i3, i4, i1, i2, i6, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i7 = STACKTOP;
 i8 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i13 = i8 + 24 | 0;
 i10 = i8 + 20 | 0;
 i14 = i8 + 16 | 0;
 i12 = i8 + 12 | 0;
 i11 = i8 + 8 | 0;
 i9 = i8 + 4 | 0;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i14 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i5;
 HEAP32[i8 >> 2] = ((HEAP32[i14 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) - (HEAP32[i12 >> 2] | 0)) | 0) % (HEAP32[i11 >> 2] | 0) | 0;
 i8 = _stbir__get_ring_buffer_entry(HEAP32[i10 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 STACKTOP = i7;
 return i8 | 0;
}

function _fputc(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = 0;
 if ((HEAP32[i7 + 76 >> 2] | 0) < 0) i5 = 3; else if (!(___lockfile(i7) | 0)) i5 = 3; else {
  i3 = i6 & 255;
  i1 = i6 & 255;
  if ((i1 | 0) == (HEAP8[i7 + 75 >> 0] | 0)) i5 = 10; else {
   i4 = i7 + 20 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i7 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i3;
   } else i5 = 10;
  }
  if ((i5 | 0) == 10) i1 = ___overflow(i7, i6) | 0;
  ___unlockfile(i7);
 }
 do if ((i5 | 0) == 3) {
  i3 = i6 & 255;
  i1 = i6 & 255;
  if ((i1 | 0) != (HEAP8[i7 + 75 >> 0] | 0)) {
   i4 = i7 + 20 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i7 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i3;
    break;
   }
  }
  i1 = ___overflow(i7, i6) | 0;
 } while (0);
 return i1 | 0;
}

function _drmp3d_scale_pcm(f3) {
 f3 = Math_fround(f3);
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1 + 6 | 0;
 i4 = i1;
 i1 = i1 + 4 | 0;
 HEAPF32[i4 >> 2] = f3;
 if (+Math_fround(HEAPF32[i4 >> 2]) >= 32766.5) {
  HEAP16[i2 >> 1] = 32767;
  i4 = HEAP16[i2 >> 1] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 if (+Math_fround(HEAPF32[i4 >> 2]) <= -32767.5) {
  HEAP16[i2 >> 1] = -32768;
  i4 = HEAP16[i2 >> 1] | 0;
  STACKTOP = i5;
  return i4 | 0;
 } else {
  i4 = ~~Math_fround(Math_fround(HEAPF32[i4 >> 2]) + Math_fround(.5));
  HEAP16[i1 >> 1] = i4;
  i4 = HEAP16[i1 >> 1] | 0;
  HEAP16[i1 >> 1] = (i4 | 0) - ((i4 | 0) < 0 & 1);
  HEAP16[i2 >> 1] = HEAP16[i1 >> 1] | 0;
  i4 = HEAP16[i2 >> 1] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function _stbi__do_zlib(i1, i3, i4, i2, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i7 + 16 | 0;
 i11 = i7 + 12 | 0;
 i10 = i7 + 8 | 0;
 i9 = i7 + 4 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i7 >> 2] = i5;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = HEAP32[i11 >> 2];
 HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = HEAP32[i11 >> 2];
 HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
 HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = HEAP32[i9 >> 2];
 i7 = _stbi__parse_zlib(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function _jar_xm_tremolo(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, f8 = f0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6 + 4 | 0;
 i9 = i6 + 14 | 0;
 i11 = i6 + 12 | 0;
 i10 = i6;
 HEAP32[i6 + 8 >> 2] = i2;
 HEAP32[i7 >> 2] = i1;
 HEAP8[i9 >> 0] = i3;
 HEAP16[i11 >> 1] = i4;
 i6 = Math_imul(HEAPU16[i11 >> 1] | 0, (HEAPU8[i9 >> 0] | 0) >> 4) | 0;
 HEAP32[i10 >> 2] = i6;
 f8 = Math_fround(Math_fround(_jar_xm_waveform(HEAP32[(HEAP32[i7 >> 2] | 0) + 112 >> 2] | 0, HEAP32[i10 >> 2] & 255)) * Math_fround(-1.0));
 f8 = Math_fround(Math_fround(f8 * Math_fround((HEAPU8[i9 >> 0] | 0) & 15 | 0)) / Math_fround(15.0));
 HEAPF32[(HEAP32[i7 >> 2] | 0) + 120 >> 2] = f8;
 STACKTOP = i5;
 return;
}

function _stbiw__wpcrc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[i6 >> 2] | 0;
 i2 = _stbiw__crc32((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + (0 - i2) + -4 | 0, i2 + 4 | 0) | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP8[HEAP32[HEAP32[i5 >> 2] >> 2] >> 0] = (HEAP32[i4 >> 2] | 0) >>> 24;
 HEAP8[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 1 >> 0] = (HEAP32[i4 >> 2] | 0) >>> 16;
 HEAP8[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 2 >> 0] = (HEAP32[i4 >> 2] | 0) >>> 8;
 HEAP8[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 3 >> 0] = HEAP32[i4 >> 2];
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 4;
 STACKTOP = i3;
 return;
}

function _stbiw__zlib_countm(i2, i4, i7) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if (!((HEAP32[i6 >> 2] | 0) < (HEAP32[i8 >> 2] | 0) ? (HEAP32[i6 >> 2] | 0) < 258 : 0)) {
   i1 = 5;
   break;
  }
  if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0) != (HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0)) {
   i1 = 5;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 5) {
  STACKTOP = i9;
  return HEAP32[i6 >> 2] | 0;
 }
 return 0;
}

function _stb_vorbis_seek_start(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = i2;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP8[(HEAP32[i3 >> 2] | 0) + 48 >> 0] | 0) {
  i3 = _stbv_error(i1, 2) | 0;
  HEAP32[i4 >> 2] = i3;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 } else {
  _stbv_set_file_offset(i1, HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 992 >> 2] = 0;
  HEAP8[(HEAP32[i3 >> 2] | 0) + 1377 >> 0] = 1;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 1380 >> 2] = -1;
  i3 = _stbv_vorbis_pump_first_frame(HEAP32[i3 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = i3;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function _ma_channel_map_blank(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
   i1 = 6;
   break;
  }
  if (HEAPU8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0) {
   i1 = 4;
   break;
  }
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 4) {
  HEAP32[i6 >> 2] = 0;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 } else if ((i1 | 0) == 6) {
  HEAP32[i6 >> 2] = 1;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function ___overflow(i7, i4) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0;
 i3 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1;
 i6 = i4 & 255;
 HEAP8[i5 >> 0] = i6;
 i2 = i7 + 16 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) if (!(___towrite(i7) | 0)) {
  i1 = HEAP32[i2 >> 2] | 0;
  i3 = 4;
 } else i1 = -1; else i3 = 4;
 do if ((i3 | 0) == 4) {
  i3 = i7 + 20 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (i2 >>> 0 < i1 >>> 0) {
   i1 = i4 & 255;
   if ((i1 | 0) != (HEAP8[i7 + 75 >> 0] | 0)) {
    HEAP32[i3 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i6;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i7 + 36 >> 2] & 15](i7, i5, 1) | 0) == 1) i1 = HEAPU8[i5 >> 0] | 0; else i1 = -1;
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _stb_vorbis_get_file_offset(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = i2;
 if (HEAP8[(HEAP32[i3 >> 2] | 0) + 48 >> 0] | 0) {
  HEAP32[i4 >> 2] = 0;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) {
  HEAP32[i4 >> 2] = (HEAP32[i1 + 32 >> 2] | 0) - (HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0);
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 } else {
  i2 = _ftell(HEAP32[i1 + 20 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = i2 - (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0);
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function _WindowDropCallback(i6, i1, i4) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i7 + 8 | 0;
 i5 = i7 + 4 | 0;
 i3 = i7;
 HEAP32[i7 + 12 >> 2] = i6;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i5 >> 2] = i4;
 _ClearDroppedFiles();
 i6 = _malloc(HEAP32[i2 >> 2] << 2) | 0;
 HEAP32[44066] = i6;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i2 >> 2] | 0)) break;
  i6 = _malloc(512) | 0;
  HEAP32[(HEAP32[44066] | 0) + (HEAP32[i3 >> 2] << 2) >> 2] = i6;
  i6 = HEAP32[i3 >> 2] << 2 | 0;
  _strcpy(HEAP32[(HEAP32[44066] | 0) + i6 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + i6 >> 2] | 0) | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 HEAP32[44067] = HEAP32[i2 >> 2];
 STACKTOP = i7;
 return;
}

function _stbi__at_eof(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i3;
 if (HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0) {
  if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 + 8 >> 2] & 31](HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] | 0) | 0)) {
   HEAP32[i2 >> 2] = 0;
   i3 = HEAP32[i2 >> 2] | 0;
   STACKTOP = i4;
   return i3 | 0;
  }
  if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] | 0)) {
   HEAP32[i2 >> 2] = 1;
   i3 = HEAP32[i2 >> 2] | 0;
   STACKTOP = i4;
   return i3 | 0;
  }
 }
 i3 = HEAP32[i1 >> 2] | 0;
 HEAP32[i2 >> 2] = (HEAP32[i3 + 168 >> 2] | 0) >>> 0 >= (HEAP32[i3 + 172 >> 2] | 0) >>> 0 & 1;
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _ma_src__build_sinc_table__sinc(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, f6 = f0, d7 = 0.0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 12 | 0;
 i2 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = i3;
 if (!(HEAP32[i4 >> 2] | 0)) ___assert_fail(44155, 36381, 31010, 44591);
 HEAPF32[(HEAP32[i4 >> 2] | 0) + 40972 >> 2] = Math_fround(1.0);
 HEAP32[i2 >> 2] = 1;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >>> 0 >= 256) break;
  HEAPF64[i1 >> 3] = +((HEAP32[i2 >> 2] | 0) >>> 0) * 3.141592653589793 / 8.0;
  d7 = +_llvm_sin_f64(+(+HEAPF64[i1 >> 3]));
  f6 = Math_fround(d7 / +HEAPF64[i1 >> 3]);
  HEAPF32[(HEAP32[i4 >> 2] | 0) + 40972 + (HEAP32[i2 >> 2] << 2) >> 2] = f6;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 STACKTOP = i5;
 return;
}

function _stbi__fill_bits(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 while (1) {
  if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0) >>> 0 >= 1 << HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] >>> 0) {
   i1 = 3;
   break;
  }
  i4 = (_stbi__zget8(HEAP32[i1 >> 2] | 0) | 0) & 255;
  i2 = (HEAP32[i1 >> 2] | 0) + 12 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | i4 << HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2];
  i2 = (HEAP32[i1 >> 2] | 0) + 8 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 8;
  if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0) > 24) {
   i1 = 5;
   break;
  }
 }
 if ((i1 | 0) == 3) ___assert_fail(54442, 53449, 3964, 54479); else if ((i1 | 0) == 5) {
  STACKTOP = i3;
  return;
 }
}

function _stbv_compute_window(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2] >> 1;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i3 >> 2] | 0)) break;
  f8 = Math_fround(+_llvm_sin_f64(+(+Math_fround(_stbv_square(Math_fround(+_llvm_sin_f64(+((+((HEAP32[i1 >> 2] | 0) - 0 | 0) + .5) / +(HEAP32[i3 >> 2] | 0) * .5 * 3.141592653589793))))) * 1.5707963267948966)));
  HEAPF32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f8;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i6;
 return;
}

function _stbir__decode_and_resample_downsample(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i3 >> 2] = i1;
 _stbir__decode_scanline(HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0);
 i3 = HEAP32[i5 >> 2] | 0;
 _memset(HEAP32[i3 + 124 >> 2] | 0, 0, (Math_imul(HEAP32[i3 + 20 >> 2] | 0, HEAP32[i3 + 64 >> 2] | 0) | 0) << 2 | 0) | 0;
 i3 = (_stbir__use_width_upsampling(HEAP32[i5 >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = i1 | 0;
 i1 = HEAP32[i1 + 124 >> 2] | 0;
 if (i3) {
  _stbir__resample_horizontal_upsample(i2, i1);
  STACKTOP = i4;
  return;
 } else {
  _stbir__resample_horizontal_downsample(i2, i1);
  STACKTOP = i4;
  return;
 }
}

function _stb_vorbis_open_filename(i6, i4, i2) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i9 >> 2] = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 i6 = _fopen(HEAP32[i9 >> 2] | 0, 53420) | 0;
 HEAP32[i1 >> 2] = i6;
 if (HEAP32[i1 >> 2] | 0) {
  i9 = _stb_vorbis_open_file(HEAP32[i1 >> 2] | 0, 1, HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = i9;
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 if (HEAP32[i5 >> 2] | 0) HEAP32[HEAP32[i5 >> 2] >> 2] = 6;
 HEAP32[i7 >> 2] = 0;
 i9 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i8;
 return i9 | 0;
}

function _stbi__check_png_header(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= 8) {
   i1 = 6;
   break;
  }
  i2 = (_stbi__get8(HEAP32[i3 >> 2] | 0) | 0) & 255;
  if ((i2 | 0) != (HEAPU8[54795 + (HEAP32[i1 >> 2] | 0) >> 0] | 0 | 0)) {
   i1 = 4;
   break;
  }
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 4) {
  i3 = _stbi__err(54682) | 0;
  HEAP32[i4 >> 2] = i3;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 } else if ((i1 | 0) == 6) {
  HEAP32[i4 >> 2] = 1;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function _stbiw__zhash(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i3 >> 2] = (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) + (HEAPU8[i1 + 1 >> 0] << 8) + (HEAPU8[i1 + 2 >> 0] << 16);
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] ^ HEAP32[i3 >> 2] << 3;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = (i1 | 0) + ((i1 | 0) >>> 5);
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] ^ HEAP32[i3 >> 2] << 4;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = (i1 | 0) + ((i1 | 0) >>> 17);
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] ^ HEAP32[i3 >> 2] << 25;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = (i1 | 0) + ((i1 | 0) >>> 6);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _drmp3_L3_change_sign(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, f6 = f0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 72;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= 32) break;
  HEAP32[i1 >> 2] = 1;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) >= 18) break;
   f6 = Math_fround(-Math_fround(HEAPF32[(HEAP32[i4 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2]));
   HEAPF32[(HEAP32[i4 >> 2] | 0) + (HEAP32[i1 >> 2] << 2) >> 2] = f6;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 2;
  }
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 2;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 144;
 }
 STACKTOP = i5;
 return;
}

function _GifWriteCode(i3, i8, i1, i6) {
 i3 = i3 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i10 + 16 | 0;
 i9 = i10 + 12 | 0;
 i2 = i10 + 8 | 0;
 i7 = i10 + 4 | 0;
 i5 = i10;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) break;
  _GifWriteBit(HEAP32[i9 >> 2] | 0, HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) >>> 1;
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) == 255) _GifWriteChunk(HEAP32[i4 >> 2] | 0, HEAP32[i9 >> 2] | 0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 STACKTOP = i10;
 return;
}

function _stbtt__buf_seek(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 if ((HEAP32[i1 >> 2] | 0) < 0 ? 1 : (HEAP32[i1 >> 2] | 0) > (HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(52779, 52491, 1117, 52803);
 if ((HEAP32[i1 >> 2] | 0) < 0 ? 1 : (HEAP32[i1 >> 2] | 0) > (HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0)) {
  i4 = HEAP32[i3 >> 2] | 0;
  i3 = HEAP32[i4 + 8 >> 2] | 0;
  i4 = i4 | 0;
  i4 = i4 + 4 | 0;
  HEAP32[i4 >> 2] = i3;
  STACKTOP = i5;
  return;
 } else {
  i2 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i4 = i4 + 4 | 0;
  HEAP32[i4 >> 2] = i2;
  STACKTOP = i5;
  return;
 }
}

function _stbir__choose_filter(i4, i2, i6) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 if (!(HEAP32[i3 >> 2] | 0)) {
  i6 = (_stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 56 >> 2])) | 0) != 0;
  HEAP32[i3 >> 2] = i6 ? 4 : 5;
 }
 if (!(HEAP32[i1 >> 2] | 0)) {
  i6 = (_stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[i5 >> 2] | 0) + 60 >> 2])) | 0) != 0;
  HEAP32[i1 >> 2] = i6 ? 4 : 5;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 80 >> 2] = HEAP32[i3 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 84 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i7;
 return;
}

function _stbv_compute_bitreverse(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i6 >> 2] = i5;
 i5 = (_stbv_ilog(HEAP32[i8 >> 2] | 0) | 0) - 1 | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2] >> 3;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i1 >> 2] | 0)) break;
  i8 = _stbv_bit_reverse(HEAP32[i2 >> 2] | 0) | 0;
  HEAP16[(HEAP32[i6 >> 2] | 0) + (HEAP32[i2 >> 2] << 1) >> 1] = i8 >>> (32 - (HEAP32[i3 >> 2] | 0) + 3 | 0) << 2;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 STACKTOP = i7;
 return;
}

function _drmp3_L3_ldexp_q2(f4, i2) {
 f4 = Math_fround(f4);
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAPF32[i5 >> 2] = f4;
 HEAP32[i3 >> 2] = i2;
 do {
  i2 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = 120 > (i2 | 0) ? i2 | 0 : 120;
  f4 = Math_fround(HEAPF32[16880 + ((HEAP32[i1 >> 2] & 3) << 2) >> 2]);
  f4 = Math_fround(f4 * Math_fround(1073741824 >> (HEAP32[i1 >> 2] >> 2) | 0));
  f4 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) * f4);
  HEAPF32[i5 >> 2] = f4;
  i2 = (HEAP32[i3 >> 2] | 0) - (HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i3 >> 2] = i2;
 } while ((i2 | 0) > 0);
 f4 = Math_fround(HEAPF32[i5 >> 2]);
 STACKTOP = i6;
 return Math_fround(f4);
}

function _ma_rand_range_f32(f2, f1) {
 f2 = Math_fround(f2);
 f1 = Math_fround(f1);
 var i3 = 0, i4 = 0, i5 = 0, f6 = f0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i8 = i4 + 16 | 0;
 i5 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 HEAPF32[i9 >> 2] = f2;
 HEAPF32[i4 >> 2] = f1;
 f2 = Math_fround(_ma_rand_f32());
 f1 = Math_fround(HEAPF32[i9 >> 2]);
 f6 = Math_fround(HEAPF32[i4 >> 2]);
 HEAPF32[i8 >> 2] = f2;
 HEAPF32[i5 >> 2] = f1;
 HEAPF32[i7 >> 2] = f6;
 f6 = Math_fround(HEAPF32[i5 >> 2]);
 f1 = Math_fround(HEAPF32[i8 >> 2]);
 f2 = Math_fround(HEAPF32[i7 >> 2]);
 f2 = Math_fround(f6 + Math_fround(f1 * Math_fround(f2 - Math_fround(HEAPF32[i5 >> 2]))));
 STACKTOP = i3;
 return Math_fround(f2);
}

function _ma_log(i6, i8, i2, i4) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 if (!((HEAP32[i7 >> 2] | 0) != 0 & (HEAP32[i3 >> 2] | 0) >>> 0 <= 1)) {
  STACKTOP = i10;
  return;
 }
 HEAP32[i1 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i10;
  return;
 }
 FUNCTION_TABLE_viiii[HEAP32[i1 >> 2] & 31](HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 STACKTOP = i10;
 return;
}

function _drmp3__on_read(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i7 >> 2] = i1;
 i3 = HEAP32[i6 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiii[HEAP32[i3 + 6696 >> 2] & 15](HEAP32[i3 + 6704 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i3;
 i3 = (HEAP32[i6 >> 2] | 0) + 15952 | 0;
 i1 = i3;
 i1 = _i64Add(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
 i2 = getTempRet0() | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 STACKTOP = i4;
 return HEAP32[i5 >> 2] | 0;
}

function _stbir__srgb_to_linear(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 4 | 0;
 i5 = i2;
 HEAPF32[i5 >> 2] = f1;
 i2 = Math_fround(HEAPF32[i5 >> 2]) <= Math_fround(.0404499993);
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 if (i2) {
  f1 = Math_fround(f1 / Math_fround(12.9200001));
  HEAPF32[i3 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i4;
  return Math_fround(f1);
 } else {
  f1 = Math_fround(+Math_pow(+(+Math_fround(Math_fround(f1 + Math_fround(.0549999997)) / Math_fround(1.05499995))), 2.4000000953674316));
  HEAPF32[i3 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i4;
  return Math_fround(f1);
 }
 return f0;
}

function _stbir__linear_to_srgb(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 4 | 0;
 i5 = i2;
 HEAPF32[i5 >> 2] = f1;
 i2 = Math_fround(HEAPF32[i5 >> 2]) <= Math_fround(.00313080009);
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 if (i2) {
  f1 = Math_fround(f1 * Math_fround(12.9200001));
  HEAPF32[i3 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i4;
  return Math_fround(f1);
 } else {
  f1 = Math_fround(Math_fround(Math_fround(+Math_pow(+(+f1), .4166666567325592)) * Math_fround(1.05499995)) - Math_fround(.0549999997));
  HEAPF32[i3 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i4;
  return Math_fround(f1);
 }
 return f0;
}

function _jar_xm_check_sanity_preload(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i6 + 8 | 0;
 i2 = i6 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i6 >> 2] = i3;
 do if ((HEAP32[i6 >> 2] | 0) >>> 0 < 60) HEAP32[i4 >> 2] = 4; else {
  if (_memcmp(48118, HEAP32[i2 >> 2] | 0, 17) | 0) {
   HEAP32[i4 >> 2] = 1;
   break;
  }
  if ((HEAP8[(HEAP32[i2 >> 2] | 0) + 37 >> 0] | 0) != 26) {
   HEAP32[i4 >> 2] = 2;
   break;
  }
  if ((HEAP8[(HEAP32[i2 >> 2] | 0) + 59 >> 0] | 0) == 1) if ((HEAP8[(HEAP32[i2 >> 2] | 0) + 58 >> 0] | 0) == 4) {
   HEAP32[i4 >> 2] = 0;
   break;
  }
  HEAP32[i4 >> 2] = 3;
 } while (0);
 STACKTOP = i5;
 return HEAP32[i4 >> 2] | 0;
}

function _stbtt_GetGlyphShape(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i4 >> 2] = i3;
 i1 = HEAP32[i7 >> 2] | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 52 + 8 >> 2] | 0) {
  i8 = _stbtt__GetGlyphShapeT2(i1, i2, i3) | 0;
  HEAP32[i5 >> 2] = i8;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i8 | 0;
 } else {
  i8 = _stbtt__GetGlyphShapeTT(i1, i2, i3) | 0;
  HEAP32[i5 >> 2] = i8;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i8 | 0;
 }
 return 0;
}

function _GetGlyphIndex(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i6 >> 2] = 63;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i5 + 4 >> 2] | 0)) {
   i7 = 6;
   break;
  }
  i1 = HEAP32[i3 >> 2] | 0;
  if ((HEAP32[(HEAP32[i5 + 32 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) * 36 | 0) >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i3 >> 2] = i1 + 1;
 }
 if ((i7 | 0) == 6) {
  i7 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[i6 >> 2] = i1;
 i7 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _stbir__get_coefficient(i2, i3, f5, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 f5 = Math_fround(f5);
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 20 | 0;
 i12 = i7 + 16 | 0;
 i11 = i7 + 12 | 0;
 i10 = i7 + 8 | 0;
 i8 = i7 + 4 | 0;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAPF32[i11 >> 2] = f5;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i8 >> 2] = i1;
 i4 = _stbir__get_coefficient_width(HEAP32[i12 >> 2] | 0, Math_fround(HEAPF32[i11 >> 2])) | 0;
 HEAP32[i7 >> 2] = i4;
 i7 = Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 STACKTOP = i6;
 return (HEAP32[i9 >> 2] | 0) + (i7 + (HEAP32[i8 >> 2] | 0) << 2) | 0;
}

function _ma_device_start__webaudio(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) ___assert_fail(36359, 36381, 25332, 42636);
 if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 2) i3 = 5; else if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) == 3) i3 = 5;
 if ((i3 | 0) == 5) _emscripten_asm_const_ii(5, HEAP32[(HEAP32[i1 >> 2] | 0) + 94336 + 4 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) != 1) if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) != 3) {
  STACKTOP = i4;
  return 0;
 }
 _emscripten_asm_const_ii(5, HEAP32[(HEAP32[i1 >> 2] | 0) + 94336 >> 2] | 0) | 0;
 STACKTOP = i4;
 return 0;
}

function _stbv_get_window(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] << 1;
 if ((HEAP32[i1 >> 2] | 0) == (HEAP32[(HEAP32[i3 >> 2] | 0) + 112 >> 2] | 0)) {
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 1092 >> 2];
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((HEAP32[i1 >> 2] | 0) != (HEAP32[(HEAP32[i3 >> 2] | 0) + 116 >> 2] | 0)) ___assert_fail(53776, 47181, 3061, 47212);
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 1092 + 4 >> 2];
 i5 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _stbir__filter_triangle(f3, f2) {
 f3 = Math_fround(f3);
 f2 = Math_fround(f2);
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i6 + 8 | 0;
 i4 = i6 + 4 | 0;
 HEAPF32[i4 >> 2] = f3;
 HEAPF32[i6 >> 2] = f2;
 f3 = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[i4 >> 2]))));
 HEAPF32[i4 >> 2] = f3;
 if (Math_fround(HEAPF32[i4 >> 2]) <= Math_fround(1.0)) {
  f3 = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[i4 >> 2]));
  HEAPF32[i1 >> 2] = f3;
  f3 = Math_fround(HEAPF32[i1 >> 2]);
  STACKTOP = i5;
  return Math_fround(f3);
 } else {
  HEAPF32[i1 >> 2] = Math_fround(0.0);
  f3 = Math_fround(HEAPF32[i1 >> 2]);
  STACKTOP = i5;
  return Math_fround(f3);
 }
 return f0;
}

function _stbi__png_load(i4, i5, i6, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i7 = STACKTOP;
 i8 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i8 + 40 | 0;
 i13 = i8 + 36 | 0;
 i12 = i8 + 32 | 0;
 i11 = i8 + 28 | 0;
 i10 = i8 + 24 | 0;
 i9 = i8 + 20 | 0;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i12 >> 2] = i6;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i8 >> 2] = HEAP32[i14 >> 2];
 i8 = _stbi__do_png(i8, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 STACKTOP = i7;
 return i8 | 0;
}

function _memcopy(i3, i7, i5) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i1 + 20 | 0;
 i9 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i9 >> 2] = i7;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) break;
  i10 = HEAP32[i4 >> 2] | 0;
  HEAP8[(HEAP32[i2 >> 2] | 0) + i10 >> 0] = HEAP8[(HEAP32[i1 >> 2] | 0) + i10 >> 0] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i8;
 return;
}

function _drmp3_open_file_and_read_f32(i2, i3, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 21200 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(21200);
 i7 = i1 + 21188 | 0;
 i9 = i1 + 21184 | 0;
 i4 = i1 + 21180 | 0;
 i6 = i1 + 21176 | 0;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = i5;
 if (_drmp3_init_file(i1, HEAP32[i9 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0) {
  i9 = _drmp3__full_read_and_close_f32(i1, HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = i9;
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i9 | 0;
 } else {
  HEAP32[i7 >> 2] = 0;
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 return 0;
}

function _Vector2Angle(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, f5 = f0, f6 = f0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i4;
 f6 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f6 = Math_fround(f6 - Math_fround(HEAPF32[i2 + 4 >> 2]));
 f5 = Math_fround(HEAPF32[i3 >> 2]);
 f5 = Math_fround(Math_fround(_atan2f(f6, Math_fround(f5 - Math_fround(HEAPF32[i2 >> 2])))) * Math_fround(57.2957763));
 HEAPF32[i1 >> 2] = f5;
 if (!(Math_fround(HEAPF32[i1 >> 2]) < Math_fround(0.0))) {
  f6 = Math_fround(HEAPF32[i1 >> 2]);
  STACKTOP = i4;
  return Math_fround(f6);
 }
 f6 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) + Math_fround(360.0));
 HEAPF32[i1 >> 2] = f6;
 f6 = Math_fround(HEAPF32[i1 >> 2]);
 STACKTOP = i4;
 return Math_fround(f6);
}

function _stbi__malloc_mad2(i2, i5, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i1 >> 2] = i4;
 if (_stbi__mad2sizes_valid(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) {
  i6 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
  i6 = _stbi__malloc(i6 + (HEAP32[i1 >> 2] | 0) | 0) | 0;
  HEAP32[i7 >> 2] = i6;
  i7 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 } else {
  HEAP32[i7 >> 2] = 0;
  i7 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 return 0;
}

function _drmp3_init_file(i5, i2, i3) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i9 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 i5 = _fopen(HEAP32[i9 >> 2] | 0, 53420) | 0;
 HEAP32[i1 >> 2] = i5;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i7 >> 2] = 0;
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i9 | 0;
 } else {
  i9 = _drmp3_init(HEAP32[i6 >> 2] | 0, 12, 13, HEAP32[i1 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = i9;
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 return 0;
}

function _rlPopMatrix() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i1 = i3;
 if ((HEAP32[43911] | 0) > 0) {
  i2 = i1;
  i4 = 163280 + ((HEAP32[43911] | 0) - 1 << 6) | 0;
  i5 = i2 + 64 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   i2 = i2 + 4 | 0;
   i4 = i4 + 4 | 0;
  } while ((i2 | 0) < (i5 | 0));
  i2 = HEAP32[43894] | 0;
  i4 = i1;
  i5 = i2 + 64 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   i2 = i2 + 4 | 0;
   i4 = i4 + 4 | 0;
  } while ((i2 | 0) < (i5 | 0));
  HEAP32[43911] = (HEAP32[43911] | 0) + -1;
 }
 if (!((HEAP32[43911] | 0) == 0 & (HEAP32[7868] | 0) == 5888)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[43894] = 175580;
 HEAP8[177200] = 0;
 STACKTOP = i3;
 return;
}

function _cycle(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 L1 : do if ((i6 | 0) >= 2) {
  i4 = i5 + (i6 << 2) | 0;
  HEAP32[i4 >> 2] = i1;
  if (i2 | 0) while (1) {
   i3 = i2 >>> 0 < 256 ? i2 : 256;
   _memcpy(i1 | 0, HEAP32[i5 >> 2] | 0, i3 | 0) | 0;
   i1 = 0;
   do {
    i8 = i5 + (i1 << 2) | 0;
    i1 = i1 + 1 | 0;
    _memcpy(HEAP32[i8 >> 2] | 0, HEAP32[i5 + (i1 << 2) >> 2] | 0, i3 | 0) | 0;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i3;
   } while ((i1 | 0) != (i6 | 0));
   i2 = i2 - i3 | 0;
   if (!i2) break L1;
   i1 = HEAP32[i4 >> 2] | 0;
  }
 } while (0);
 STACKTOP = i7;
 return;
}

function _PlayMusicStream(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i6 + 16 | 0;
 i1 = i6 + 8 | 0;
 i2 = i6 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 + 16 + 12 >> 2];
 if (HEAP32[i1 >> 2] | 0) {
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[i1 >> 2] | 0) + 46548 >> 2];
  i6 = i3 + 16 | 0;
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  _PlayAudioStream(i4);
  HEAP32[(HEAP32[i1 >> 2] | 0) + 46548 >> 2] = HEAP32[i2 >> 2];
  STACKTOP = i5;
  return;
 } else {
  _TraceLog(5, 51267, i6);
  STACKTOP = i5;
  return;
 }
}

function _stbtt__buf_get(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i4;
 HEAP32[i7 >> 2] = 0;
 if (!((HEAP32[i6 >> 2] | 0) >= 1 & (HEAP32[i6 >> 2] | 0) <= 4)) ___assert_fail(52714, 52491, 1130, 52731);
 HEAP32[i3 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  i4 = i1 << 8 | (_stbtt__buf_get8(HEAP32[i5 >> 2] | 0) | 0) & 255;
  HEAP32[i7 >> 2] = i4;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _ma_event_wait__posix(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1;
 HEAP32[i3 >> 2] = i2;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 20 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 | 0) | 0;
 while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 + 76 >> 2] | 0) break;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 140 + 36 >> 2] & 15](i2 + 28 | 0, i2 | 0) | 0;
 }
 HEAP32[i1 + 4 + 76 >> 2] = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 24 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 | 0) | 0;
 STACKTOP = i4;
 return 1;
}

function _ma_context_uninit(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i3 >> 2] = -2;
  i3 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i2 = HEAP32[i1 >> 2] | 0;
  FUNCTION_TABLE_ii[HEAP32[i2 + 100 >> 2] & 31](i2 | 0) | 0;
  _ma_mutex_uninit((HEAP32[i1 >> 2] | 0) + 16 | 0);
  _ma_mutex_uninit((HEAP32[i1 >> 2] | 0) + 48 | 0);
  _ma_free(HEAP32[(HEAP32[i1 >> 2] | 0) + 92 >> 2] | 0);
  _ma_context_uninit_backend_apis(HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i3 >> 2] = 0;
  i3 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _Vector2Distance(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, f4 = f0, i5 = 0, f6 = f0, f7 = f0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i3;
 f6 = Math_fround(HEAPF32[i1 >> 2]);
 f6 = Math_fround(f6 - Math_fround(HEAPF32[i2 >> 2]));
 f7 = Math_fround(HEAPF32[i1 >> 2]);
 f7 = Math_fround(f6 * Math_fround(f7 - Math_fround(HEAPF32[i2 >> 2])));
 f6 = Math_fround(HEAPF32[i1 + 4 >> 2]);
 f6 = Math_fround(f6 - Math_fround(HEAPF32[i2 + 4 >> 2]));
 f4 = Math_fround(HEAPF32[i1 + 4 >> 2]);
 f4 = Math_fround(Math_sqrt(Math_fround(f7 + Math_fround(f6 * Math_fround(f4 - Math_fround(HEAPF32[i2 + 4 >> 2]))))));
 HEAPF32[i5 >> 2] = f4;
 f4 = Math_fround(HEAPF32[i5 >> 2]);
 STACKTOP = i3;
 return Math_fround(f4);
}

function _TextToLower(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= 1024) {
   i4 = 6;
   break;
  }
  if (!(HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0)) break;
  i2 = (_tolower(HEAP8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) >> 0] | 0) | 0) & 255;
  HEAP8[173312 + (HEAP32[i1 >> 2] | 0) >> 0] = i2;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 6) {
  STACKTOP = i5;
  return 173312;
 }
 HEAP8[173312 + (HEAP32[i1 >> 2] | 0) >> 0] = 0;
 STACKTOP = i5;
 return 173312;
}

function _stbi__zreceive(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) < (HEAP32[i3 >> 2] | 0)) _stbi__fill_bits(HEAP32[i5 >> 2] | 0);
 HEAP32[i1 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & (1 << HEAP32[i3 >> 2]) - 1;
 i4 = (HEAP32[i5 >> 2] | 0) + 12 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) >>> (HEAP32[i3 >> 2] | 0);
 i5 = (HEAP32[i5 >> 2] | 0) + 8 | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i3 >> 2] | 0);
 STACKTOP = i6;
 return HEAP32[i1 >> 2] | 0;
}

function _stbv_include_in_sort(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 4 | 0;
 i7 = i1;
 i4 = i1 + 8 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP8[i4 >> 0] = i3;
 i1 = HEAPU8[i4 >> 0] | 0;
 do if (HEAP8[(HEAP32[i7 >> 2] | 0) + 23 >> 0] | 0) if ((i1 | 0) != 255) {
  HEAP32[i5 >> 2] = 1;
  break;
 } else ___assert_fail(47917, 47181, 1140, 47932); else {
  if ((i1 | 0) == 255) {
   HEAP32[i5 >> 2] = 0;
   break;
  }
  if ((HEAPU8[i4 >> 0] | 0) > 10) {
   HEAP32[i5 >> 2] = 1;
   break;
  } else {
   HEAP32[i5 >> 2] = 0;
   break;
  }
 } while (0);
 STACKTOP = i6;
 return HEAP32[i5 >> 2] | 0;
}

function _drmp3_hdr_frame_bytes(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i6 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 i4 = _drmp3_hdr_frame_samples(HEAP32[i6 >> 2] | 0) | 0;
 i4 = (Math_imul(i4, _drmp3_hdr_bitrate_kbps(HEAP32[i6 >> 2] | 0) | 0) | 0) * 125 | 0;
 i4 = (i4 >>> 0) / ((_drmp3_hdr_sample_rate_hz(HEAP32[i6 >> 2] | 0) | 0) >>> 0) | 0;
 HEAP32[i1 >> 2] = i4;
 if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] & 6 | 0) == 6) HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -4;
 STACKTOP = i5;
 i6 = HEAP32[i1 >> 2] | 0;
 return (i6 | 0 ? i6 | 0 : HEAP32[i3 >> 2] | 0) | 0;
}

function _jar_xm_period(i2, f3) {
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i6 >> 2] = i2;
 HEAPF32[i1 >> 2] = f3;
 switch (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + 52 >> 2] | 0) {
 case 0:
  {
   f3 = Math_fround(_jar_xm_linear_period(Math_fround(HEAPF32[i1 >> 2])));
   HEAPF32[i4 >> 2] = f3;
   break;
  }
 case 1:
  {
   f3 = Math_fround(_jar_xm_amiga_period(Math_fround(HEAPF32[i1 >> 2])));
   HEAPF32[i4 >> 2] = f3;
   break;
  }
 default:
  HEAPF32[i4 >> 2] = Math_fround(0.0);
 }
 f3 = Math_fround(HEAPF32[i4 >> 2]);
 STACKTOP = i5;
 return Math_fround(f3);
}

function _ma_zero_pcm_frames(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i5 + 20 | 0;
 i6 = i5 + 16 | 0;
 i11 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i1;
 i2 = HEAP32[i11 >> 2] | 0;
 i3 = HEAP32[i10 >> 2] | 0;
 i4 = HEAP32[i9 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i6 >> 2] = i4;
 i4 = _ma_get_bytes_per_sample(HEAP32[i7 >> 2] | 0) | 0;
 _memset(i2 | 0, 0, Math_imul(i3, Math_imul(i4, HEAP32[i6 >> 2] | 0) | 0) | 0) | 0;
 STACKTOP = i5;
 return;
}

function ___fflush_unlocked(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i7 = i5 + 20 | 0;
 i6 = i5 + 28 | 0;
 if ((HEAP32[i7 >> 2] | 0) >>> 0 > (HEAP32[i6 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i5 + 36 >> 2] & 15](i5, 0, 0) | 0;
  if (!(HEAP32[i7 >> 2] | 0)) i1 = -1; else i2 = 3;
 } else i2 = 3;
 if ((i2 | 0) == 3) {
  i4 = i5 + 4 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i3 = i5 + 8 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (i1 >>> 0 < i2 >>> 0) {
   i2 = i1 - i2 | 0;
   FUNCTION_TABLE_iiiii[HEAP32[i5 + 40 >> 2] & 15](i5, i2, ((i2 | 0) < 0) << 31 >> 31, 1) | 0;
   getTempRet0() | 0;
  }
  HEAP32[i5 + 16 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i1 = 0;
 }
 return i1 | 0;
}

function _stbtt_ScaleForPixelHeight(i2, f1) {
 i2 = i2 | 0;
 f1 = Math_fround(f1);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i4 + 8 | 0;
 i5 = i4 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAPF32[i5 >> 2] = f1;
 i6 = HEAP32[i7 >> 2] | 0;
 i6 = (_ttSHORT((HEAP32[i6 + 4 >> 2] | 0) + (HEAP32[i6 + 28 >> 2] | 0) + 4 | 0) | 0) << 16 >> 16;
 i2 = HEAP32[i7 >> 2] | 0;
 i2 = i6 - ((_ttSHORT((HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i2 + 28 >> 2] | 0) + 6 | 0) | 0) << 16 >> 16) | 0;
 HEAP32[i4 >> 2] = i2;
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 f1 = Math_fround(f1 / Math_fround(HEAP32[i4 >> 2] | 0));
 STACKTOP = i3;
 return Math_fround(f1);
}

function _ma_rand_range_s32(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) {
  HEAP32[i6 >> 2] = i1;
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 } else {
  i4 = _ma_rand_u32() | 0;
  HEAP32[i6 >> 2] = i1 + ((i4 >>> 0) / (((4294967295 / (((HEAP32[i3 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) + 1 | 0) >>> 0) | 0) + 1 | 0) >>> 0) | 0);
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function _stbv_capture_pattern(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 do if (79 != ((_stbv_get8(HEAP32[i1 >> 2] | 0) | 0) & 255 | 0)) HEAP32[i3 >> 2] = 0; else {
  if (103 != ((_stbv_get8(HEAP32[i1 >> 2] | 0) | 0) & 255 | 0)) {
   HEAP32[i3 >> 2] = 0;
   break;
  }
  if (103 != ((_stbv_get8(HEAP32[i1 >> 2] | 0) | 0) & 255 | 0)) {
   HEAP32[i3 >> 2] = 0;
   break;
  }
  if (83 != ((_stbv_get8(HEAP32[i1 >> 2] | 0) | 0) & 255 | 0)) {
   HEAP32[i3 >> 2] = 0;
   break;
  } else {
   HEAP32[i3 >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = i4;
 return HEAP32[i3 >> 2] | 0;
}

function _stbtt__cuberoot(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 4 | 0;
 i5 = i2;
 HEAPF32[i5 >> 2] = f1;
 i2 = Math_fround(HEAPF32[i5 >> 2]) < Math_fround(0.0);
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 if (i2) {
  f1 = Math_fround(-Math_fround(+Math_pow(+(+Math_fround(-f1)), .3333333432674408)));
  HEAPF32[i3 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i4;
  return Math_fround(f1);
 } else {
  f1 = Math_fround(+Math_pow(+(+f1), .3333333432674408));
  HEAPF32[i3 >> 2] = f1;
  f1 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i4;
  return Math_fround(f1);
 }
 return f0;
}

function _jar_xm_reset(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1;
 i3 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP16[i3 >> 1] = 0;
 while (1) {
  i2 = HEAPU16[i3 >> 1] | 0;
  i2 = (i2 | 0) < ((_jar_xm_get_number_of_channels(HEAP32[i4 >> 2] | 0) | 0) & 65535 | 0);
  i1 = HEAP32[i4 >> 2] | 0;
  if (!i2) break;
  _jar_xm_cut_note((HEAP32[i1 + 384 >> 2] | 0) + ((HEAPU16[i3 >> 1] | 0) * 288 | 0) | 0);
  HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
 }
 HEAP8[i1 + 349 >> 0] = 0;
 HEAP8[(HEAP32[i4 >> 2] | 0) + 348 >> 0] = 0;
 HEAP16[(HEAP32[i4 >> 2] | 0) + 350 >> 1] = 0;
 STACKTOP = i5;
 return;
}

function _stbir__decode_and_resample_upsample(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i5 >> 2] = i1;
 _stbir__decode_scanline(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 i3 = (_stbir__use_width_upsampling(HEAP32[i6 >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i2 = _stbir__add_empty_ring_buffer_entry(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 if (i3) {
  _stbir__resample_horizontal_upsample(i1, i2);
  STACKTOP = i4;
  return;
 } else {
  _stbir__resample_horizontal_downsample(i1, i2);
  STACKTOP = i4;
  return;
 }
}

function _ma_context_post_error(i6, i8, i2, i4, i10) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i1 + 16 | 0;
 i9 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i1 >> 2] = i10;
 if ((HEAP32[i7 >> 2] | 0) == 0 & (HEAP32[i9 >> 2] | 0) != 0) HEAP32[i7 >> 2] = HEAP32[HEAP32[i9 >> 2] >> 2];
 _ma_log(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 STACKTOP = i11;
 return HEAP32[i1 >> 2] | 0;
}

function _stbir__edge_wrap(i2, i5, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i1 >> 2] = i4;
 if ((HEAP32[i6 >> 2] | 0) >= 0) if ((HEAP32[i6 >> 2] | 0) < (HEAP32[i1 >> 2] | 0)) {
  HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  i7 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i6 = _stbir__edge_wrap_slow(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = i6;
 i7 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _rlTexCoord2f(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i3 + 4 | 0;
 i4 = i3;
 HEAPF32[i5 >> 2] = f1;
 HEAPF32[i4 >> 2] = f2;
 f2 = Math_fround(HEAPF32[i5 >> 2]);
 i5 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
 HEAPF32[(HEAP32[i5 + 16 >> 2] | 0) + (HEAP32[i5 + 4 >> 2] << 1 << 2) >> 2] = f2;
 f2 = Math_fround(HEAPF32[i4 >> 2]);
 i4 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) | 0;
 HEAPF32[(HEAP32[i4 + 16 >> 2] | 0) + ((HEAP32[i4 + 4 >> 2] << 1) + 1 << 2) >> 2] = f2;
 i4 = 165328 + ((HEAP32[43930] | 0) * 48 | 0) + 4 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 STACKTOP = i3;
 return;
}

function _stbtt__csctx_close_shape(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, f4 = f0, i5 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 f4 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 8 >> 2]);
 if (!(f4 != Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 16 >> 2]))) {
  f4 = Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 12 >> 2]);
  if (!(f4 != Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 20 >> 2]))) {
   STACKTOP = i3;
   return;
  }
 }
 i5 = ~~Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 8 >> 2]);
 i2 = HEAP32[i1 >> 2] | 0;
 _stbtt__csctx_v(i2 | 0, 2, i5, ~~Math_fround(HEAPF32[i2 + 12 >> 2]), 0, 0, 0, 0);
 STACKTOP = i3;
 return;
}

function _stbtt__add_point(i4, i2, f6, f8) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 f6 = Math_fround(f6);
 f8 = Math_fround(f8);
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 HEAPF32[i7 >> 2] = f6;
 HEAPF32[i1 >> 2] = f8;
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i9;
  return;
 }
 f8 = Math_fround(HEAPF32[i7 >> 2]);
 HEAPF32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] << 3) >> 2] = f8;
 f8 = Math_fround(HEAPF32[i1 >> 2]);
 HEAPF32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] << 3) + 4 >> 2] = f8;
 STACKTOP = i9;
 return;
}

function _ma_copy_and_apply_volume_factor_pcm_frames_s32(i5, i4, i3, i1, f2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i11 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 HEAP32[i9 >> 2] = i5;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i1;
 HEAPF32[i7 >> 2] = f2;
 i5 = Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 _ma_copy_and_apply_volume_factor_s32(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, i5, Math_fround(HEAPF32[i7 >> 2]));
 STACKTOP = i6;
 return;
}

function _ma_copy_and_apply_volume_factor_pcm_frames_s24(i5, i4, i3, i1, f2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i11 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 HEAP32[i9 >> 2] = i5;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i1;
 HEAPF32[i7 >> 2] = f2;
 i5 = Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 _ma_copy_and_apply_volume_factor_s24(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, i5, Math_fround(HEAPF32[i7 >> 2]));
 STACKTOP = i6;
 return;
}

function _ma_copy_and_apply_volume_factor_pcm_frames_s16(i5, i4, i3, i1, f2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i11 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 HEAP32[i9 >> 2] = i5;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i1;
 HEAPF32[i7 >> 2] = f2;
 i5 = Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 _ma_copy_and_apply_volume_factor_s16(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, i5, Math_fround(HEAPF32[i7 >> 2]));
 STACKTOP = i6;
 return;
}

function _ma_copy_and_apply_volume_factor_pcm_frames_f32(i5, i4, i3, i1, f2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i11 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 HEAP32[i9 >> 2] = i5;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i1;
 HEAPF32[i7 >> 2] = f2;
 i5 = Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 _ma_copy_and_apply_volume_factor_f32(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, i5, Math_fround(HEAPF32[i7 >> 2]));
 STACKTOP = i6;
 return;
}

function _Wait(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i3 + 16 | 0;
 i2 = i3 + 8 | 0;
 i5 = i3;
 HEAPF32[i4 >> 2] = f1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 i6 = ~~Math_fround(Math_fround(HEAPF32[i4 >> 2]) / Math_fround(1.0e3));
 HEAP32[i5 >> 2] = i6;
 f1 = Math_fround((HEAP32[i5 >> 2] | 0) * 1e3 | 0);
 f1 = Math_fround(Math_fround(HEAPF32[i4 >> 2]) - f1);
 HEAPF32[i4 >> 2] = f1;
 HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
 i4 = ~~Math_fround(Math_fround(HEAPF32[i4 >> 2]) * Math_fround(1.0e6));
 HEAP32[i2 + 4 >> 2] = i4;
 do {} while ((_nanosleep(i2 | 0, i2 | 0) | 0) == -1);
 STACKTOP = i3;
 return;
}

function _stbv_crc32_init() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= 256) break;
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2] << 24;
  HEAP32[i4 >> 2] = 0;
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP32[i4 >> 2] | 0) >= 8) break;
   HEAP32[i1 >> 2] = i2 << 1 ^ ((HEAP32[i1 >> 2] | 0) >>> 0 >= 2147483648 ? 79764919 : 0);
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  HEAP32[166592 + (HEAP32[i3 >> 2] << 2) >> 2] = i2;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 STACKTOP = i5;
 return;
}

function _ma_copy_and_apply_volume_factor_pcm_frames_u8(i5, i4, i3, i1, f2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i11 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 HEAP32[i9 >> 2] = i5;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i1;
 HEAPF32[i7 >> 2] = f2;
 i5 = Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 _ma_copy_and_apply_volume_factor_u8(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, i5, Math_fround(HEAPF32[i7 >> 2]));
 STACKTOP = i6;
 return;
}

function _StopAudioBuffer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 if (!(HEAP32[i2 >> 2] | 0)) {
  _TraceLog(5, 49742, i4);
  STACKTOP = i3;
  return;
 }
 if (!(_IsAudioBufferPlaying(HEAP32[i2 >> 2] | 0) | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP8[(HEAP32[i2 >> 2] | 0) + 46536 >> 0] = 0;
 HEAP8[(HEAP32[i2 >> 2] | 0) + 46537 >> 0] = 0;
 HEAP32[(HEAP32[i2 >> 2] | 0) + 46548 >> 2] = 0;
 HEAP32[(HEAP32[i2 >> 2] | 0) + 46556 >> 2] = 0;
 HEAP8[(HEAP32[i2 >> 2] | 0) + 46544 >> 0] = 1;
 HEAP8[(HEAP32[i2 >> 2] | 0) + 46544 + 1 >> 0] = 1;
 STACKTOP = i3;
 return;
}

function _GetKeyPressed() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3 + 4 | 0;
 i1 = i3;
 HEAP32[i2 >> 2] = 0;
 if ((HEAP32[44069] | 0) <= 0) {
  i2 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 HEAP32[i2 >> 2] = HEAP32[41344];
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= ((HEAP32[44069] | 0) - 1 | 0)) break;
  HEAP32[165376 + (HEAP32[i1 >> 2] << 2) >> 2] = HEAP32[165376 + ((HEAP32[i1 >> 2] | 0) + 1 << 2) >> 2];
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 HEAP32[165376 + (HEAP32[44069] << 2) >> 2] = 0;
 HEAP32[44069] = (HEAP32[44069] | 0) + -1;
 i2 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _stbv_float32_unpack(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, f4 = f0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2] & 2097151;
 HEAP32[i7 >> 2] = HEAP32[i9 >> 2] & -2147483648;
 HEAP32[i5 >> 2] = (HEAP32[i9 >> 2] & 2145386496) >>> 21;
 d6 = +((HEAP32[i8 >> 2] | 0) >>> 0);
 HEAPF64[i3 >> 3] = HEAP32[i7 >> 2] | 0 ? -d6 : d6;
 d6 = +Math_fround(+HEAPF64[i3 >> 3]);
 f4 = Math_fround(+_ldexp(d6, (HEAP32[i5 >> 2] | 0) - 788 | 0));
 STACKTOP = i2;
 return Math_fround(f4);
}

function _fflush(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 do if (!i2) {
  if (!(HEAP32[7884] | 0)) i1 = 0; else i1 = _fflush(HEAP32[7884] | 0) | 0;
  i2 = ___ofl_lock() | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  if (i2) do {
   if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
   if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0) i1 = ___fflush_unlocked(i2) | 0 | i1;
   if (i3 | 0) ___unlockfile(i2);
   i2 = HEAP32[i2 + 56 >> 2] | 0;
  } while ((i2 | 0) != 0);
  ___ofl_unlock();
 } else {
  if ((HEAP32[i2 + 76 >> 2] | 0) <= -1) {
   i1 = ___fflush_unlocked(i2) | 0;
   break;
  }
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___fflush_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } while (0);
 return i1 | 0;
}

function _stbi_loadf_from_file(i2, i4, i5, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 i12 = i7 + 200 | 0;
 i11 = i7 + 196 | 0;
 i10 = i7 + 192 | 0;
 i9 = i7 + 188 | 0;
 i8 = i7 + 184 | 0;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i10 >> 2] = i5;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i8 >> 2] = i3;
 _stbi__start_file(i7, HEAP32[i12 >> 2] | 0);
 i7 = _stbi__loadf_main(i7, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function _stbiw__crc32(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = i4;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  i1 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  HEAP32[i6 >> 2] = i1 >>> 8 ^ HEAP32[27264 + (((HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] | 0) ^ HEAP32[i6 >> 2] & 255) << 2) >> 2];
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 STACKTOP = i8;
 return ~i1 | 0;
}

function _drmp3_hdr_valid(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 do if ((HEAPU8[HEAP32[i1 >> 2] >> 0] | 0 | 0) == 255) {
  if (((HEAPU8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] | 0) & 240 | 0) != 240) if (((HEAPU8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] | 0) & 254 | 0) != 226) {
   i1 = 0;
   break;
  }
  if ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] | 0) >> 1 & 3 | 0) if (((HEAPU8[(HEAP32[i1 >> 2] | 0) + 2 >> 0] | 0) >> 4 | 0) != 15) i1 = ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 2 >> 0] | 0) >> 2 & 3 | 0) != 3; else i1 = 0; else i1 = 0;
 } else i1 = 0; while (0);
 STACKTOP = i3;
 return i1 & 1 | 0;
}

function _strtox(i8, i7, i4, i2, i3) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 HEAP32[i1 >> 2] = 0;
 i6 = i1 + 4 | 0;
 HEAP32[i6 >> 2] = i8;
 HEAP32[i1 + 44 >> 2] = i8;
 i5 = i1 + 8 | 0;
 HEAP32[i5 >> 2] = (i8 | 0) < 0 ? -1 : i8 + 2147483647 | 0;
 HEAP32[i1 + 76 >> 2] = -1;
 ___shlim(i1, 0, 0);
 i2 = ___intscan(i1, i4, 1, i2, i3) | 0;
 i3 = getTempRet0() | 0;
 if (i7 | 0) HEAP32[i7 >> 2] = i8 + ((HEAP32[i6 >> 2] | 0) + (HEAP32[i1 + 120 >> 2] | 0) - (HEAP32[i5 >> 2] | 0));
 setTempRet0(i3 | 0);
 STACKTOP = i9;
 return i2 | 0;
}

function _fclose(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 if ((HEAP32[i5 + 76 >> 2] | 0) > -1) i4 = ___lockfile(i5) | 0; else i4 = 0;
 ___unlist_locked_file(i5);
 i6 = (HEAP32[i5 >> 2] & 1 | 0) != 0;
 if (!i6) {
  i3 = ___ofl_lock() | 0;
  i2 = HEAP32[i5 + 52 >> 2] | 0;
  i1 = i5 + 56 | 0;
  if (i2 | 0) HEAP32[i2 + 56 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) HEAP32[i1 + 52 >> 2] = i2;
  if ((HEAP32[i3 >> 2] | 0) == (i5 | 0)) HEAP32[i3 >> 2] = i1;
  ___ofl_unlock();
 }
 i2 = _fflush(i5) | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[i5 + 12 >> 2] & 31](i5) | 0 | i2;
 i1 = HEAP32[i5 + 96 >> 2] | 0;
 if (i1 | 0) _free(i1);
 if (i6) {
  if (i4 | 0) ___unlockfile(i5);
 } else _free(i5);
 return i2 | 0;
}

function _EmscriptenMouseCallback(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i6 = i5 + 268 | 0;
 i3 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 + 264 >> 2] = i2;
 HEAP32[i5 + 260 >> 2] = i4;
 if ((HEAP32[i6 >> 2] | 0) != 4) {
  STACKTOP = i5;
  return 0;
 }
 if (!0) {
  STACKTOP = i5;
  return 0;
 }
 _emscripten_get_pointerlock_status(i3 | 0) | 0;
 if (HEAP32[i3 >> 2] | 0) {
  _emscripten_exit_pointerlock() | 0;
  _emscripten_get_pointerlock_status(i3 | 0) | 0;
  STACKTOP = i5;
  return 0;
 } else {
  _emscripten_request_pointerlock(0, 1) | 0;
  STACKTOP = i5;
  return 0;
 }
 return 0;
}

function _ma_context_is_device_id_equal__webaudio(i2, i3, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i5;
 if (!(HEAP32[i7 >> 2] | 0)) ___assert_fail(37253, 36381, 24911, 37511);
 if (!(HEAP32[i4 >> 2] | 0)) ___assert_fail(37551, 36381, 24912, 37511);
 if (HEAP32[i1 >> 2] | 0) {
  i7 = (_ma_strcmp(HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) == 0 & 1;
  STACKTOP = i6;
  return i7 | 0;
 } else ___assert_fail(37570, 36381, 24913, 37511);
 return 0;
}

function _drmp3_seek_to_start_of_stream(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) ___assert_fail(48609, 48387, 3106, 48814);
 if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 6700 >> 2] | 0)) ___assert_fail(48844, 48387, 3107, 48814);
 if (_drmp3__on_seek(HEAP32[i1 >> 2] | 0, 0, 0) | 0) {
  _drmp3_reset(HEAP32[i1 >> 2] | 0);
  HEAP32[i3 >> 2] = 1;
  i3 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  HEAP32[i3 >> 2] = 0;
  i3 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _strstr(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = HEAP8[i3 >> 0] | 0;
 do if (i2 << 24 >> 24) {
  i1 = _strchr(i1, i2 << 24 >> 24) | 0;
  if (!i1) i1 = 0; else if (HEAP8[i3 + 1 >> 0] | 0) if (!(HEAP8[i1 + 1 >> 0] | 0)) i1 = 0; else {
   if (!(HEAP8[i3 + 2 >> 0] | 0)) {
    i1 = _twobyte_strstr(i1, i3) | 0;
    break;
   }
   if (!(HEAP8[i1 + 2 >> 0] | 0)) i1 = 0; else {
    if (!(HEAP8[i3 + 3 >> 0] | 0)) {
     i1 = _threebyte_strstr(i1, i3) | 0;
     break;
    }
    if (!(HEAP8[i1 + 3 >> 0] | 0)) i1 = 0; else if (!(HEAP8[i3 + 4 >> 0] | 0)) {
     i1 = _fourbyte_strstr(i1, i3) | 0;
     break;
    } else {
     i1 = _twoway_strstr(i1, i3) | 0;
     break;
    }
   }
  }
 } while (0);
 return i1 | 0;
}

function _ma_mutex_init__posix(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i6 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 140 + 12 >> 2] & 15]((HEAP32[i6 >> 2] | 0) + 4 | 0, 0) | 0;
 HEAP32[i5 >> 2] = i2;
 if (HEAP32[i5 >> 2] | 0) {
  HEAP32[i3 >> 2] = -311;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i7 | 0;
 } else {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i7 | 0;
 }
 return 0;
}

function _ma_apply_volume_factor_pcm_frames(i5, i4, i3, i1, f2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i8 = i6 + 4 | 0;
 i7 = i6;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i8 >> 2] = i1;
 HEAPF32[i7 >> 2] = f2;
 i5 = HEAP32[i11 >> 2] | 0;
 _ma_copy_and_apply_volume_factor_pcm_frames(i5 | 0, i5 | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, Math_fround(HEAPF32[i7 >> 2]));
 STACKTOP = i6;
 return;
}

function _stbv_vorbis_pump_first_frame(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = _stbv_vorbis_decode_packet(HEAP32[i3 >> 2] | 0, i5, i4, i6) | 0;
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  i6 = HEAP32[i1 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 _stbv_vorbis_finish_frame(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _scalbn(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 if ((i1 | 0) > 1023) {
  d2 = d2 * 8988465674311579538646525.0e283;
  i3 = (i1 | 0) > 2046;
  i4 = i1 + -2046 | 0;
  i1 = i3 ? ((i4 | 0) < 1023 ? i4 : 1023) : i1 + -1023 | 0;
  d2 = i3 ? d2 * 8988465674311579538646525.0e283 : d2;
 } else if ((i1 | 0) < -1022) {
  d2 = d2 * 2.2250738585072014e-308;
  i4 = (i1 | 0) < -2044;
  i3 = i1 + 2044 | 0;
  i1 = i4 ? ((i3 | 0) > -1022 ? i3 : -1022) : i1 + 1022 | 0;
  d2 = i4 ? d2 * 2.2250738585072014e-308 : d2;
 }
 i3 = _bitshift64Shl(i1 + 1023 | 0, 0, 52) | 0;
 i4 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = i3;
 HEAP32[tempDoublePtr + 4 >> 2] = i4;
 return +(d2 * +HEAPF64[tempDoublePtr >> 3]);
}

function _rect_original_order(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) < (HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0)) {
  i7 = -1;
  STACKTOP = i5;
  return i7 | 0;
 }
 i7 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) > (HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0) & 1;
 STACKTOP = i5;
 return i7 | 0;
}

function _stbtt__buf_get8(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP8[i3 >> 0] = 0;
  i3 = HEAP8[i3 >> 0] | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i5 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  i1 = (HEAP32[i1 >> 2] | 0) + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i2 + 1;
  HEAP8[i3 >> 0] = HEAP8[i5 + i2 >> 0] | 0;
  i3 = HEAP8[i3 >> 0] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _memclear(i2, i6, i4) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i1 + 12 | 0;
 i7 = i1 + 16 | 0;
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i9 >> 2] = i2;
 HEAP8[i7 >> 0] = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i1 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) break;
  HEAP8[(HEAP32[i1 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] = HEAP8[i7 >> 0] | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 STACKTOP = i8;
 return;
}

function _ma_mutex_init(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 if ((HEAP32[i3 >> 2] | 0) == 0 | (HEAP32[i1 >> 2] | 0) == 0) {
  HEAP32[i5 >> 2] = -2;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  HEAP32[HEAP32[i1 >> 2] >> 2] = HEAP32[i3 >> 2];
  i4 = _ma_mutex_init__posix(HEAP32[i3 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = i4;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _ma_get_format_name(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 switch (HEAP32[i4 >> 2] | 0) {
 case 0:
  {
   HEAP32[i2 >> 2] = 37105;
   break;
  }
 case 1:
  {
   HEAP32[i2 >> 2] = 47040;
   break;
  }
 case 2:
  {
   HEAP32[i2 >> 2] = 47063;
   break;
  }
 case 3:
  {
   HEAP32[i2 >> 2] = 47085;
   break;
  }
 case 4:
  {
   HEAP32[i2 >> 2] = 47124;
   break;
  }
 case 5:
  {
   HEAP32[i2 >> 2] = 47146;
   break;
  }
 default:
  HEAP32[i2 >> 2] = 47173;
 }
 STACKTOP = i3;
 return HEAP32[i2 >> 2] | 0;
}

function _ma_event_init(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 if ((HEAP32[i3 >> 2] | 0) == 0 | (HEAP32[i1 >> 2] | 0) == 0) {
  HEAP32[i5 >> 2] = 0;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  HEAP32[HEAP32[i1 >> 2] >> 2] = HEAP32[i3 >> 2];
  i4 = _ma_event_init__posix(HEAP32[i3 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = i4;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _jar_mod_max_samples(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i4 = i1 + 12 | 0;
 i6 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i3 >> 2] = HEAPU16[(HEAP32[i5 >> 2] | 0) + 5880 >> 1];
 while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  if ((HEAPU16[(HEAP32[i5 >> 2] | 0) + 5880 >> 1] | 0) >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) break;
  _jar_mod_fillbuffer(i1, i4, 1, 0);
 }
 HEAP32[i6 >> 2] = HEAP32[i1 + 1756 >> 2];
 _jar_mod_seek_start(HEAP32[i5 >> 2] | 0);
 STACKTOP = i7;
 return HEAP32[i6 >> 2] | 0;
}

function _ma_pcm_s32_to_s32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i7 + 16 | 0;
 i9 = i7 + 12 | 0;
 i8 = i7;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i5;
 i4 = i8;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i7 + 8 >> 2] = i3;
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i7 = i8;
 i7 = ___muldi3(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 4, 0) | 0;
 _ma_copy_memory_64(i4, i5, i7, getTempRet0() | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_s24(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i7 + 16 | 0;
 i9 = i7 + 12 | 0;
 i8 = i7;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i5;
 i4 = i8;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i7 + 8 >> 2] = i3;
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i7 = i8;
 i7 = ___muldi3(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 3, 0) | 0;
 _ma_copy_memory_64(i4, i5, i7, getTempRet0() | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s16_to_s16(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i7 + 16 | 0;
 i9 = i7 + 12 | 0;
 i8 = i7;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i5;
 i4 = i8;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i7 + 8 >> 2] = i3;
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i7 = i8;
 i7 = ___muldi3(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 2, 0) | 0;
 _ma_copy_memory_64(i4, i5, i7, getTempRet0() | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_f32_to_f32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i7 + 16 | 0;
 i9 = i7 + 12 | 0;
 i8 = i7;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i5;
 i4 = i8;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i7 + 8 >> 2] = i3;
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i7 = i8;
 i7 = ___muldi3(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 4, 0) | 0;
 _ma_copy_memory_64(i4, i5, i7, getTempRet0() | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_s32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_s32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_s24__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_s24__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_s16__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_s16__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_f32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_f32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_u8_to_u8(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i7 + 16 | 0;
 i9 = i7 + 12 | 0;
 i8 = i7;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i5;
 i4 = i8;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i7 + 8 >> 2] = i3;
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i7 = i8;
 i7 = ___muldi3(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, 1, 0) | 0;
 _ma_copy_memory_64(i4, i5, i7, getTempRet0() | 0);
 STACKTOP = i6;
 return;
}

function _stbtt__new_buf(i2, i3, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i6 >> 2] = i5;
 if ((HEAP32[i6 >> 2] | 0) >>> 0 < 1073741824) {
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  STACKTOP = i7;
  return;
 } else ___assert_fail(52746, 52491, 1139, 52764);
}

function _ma_pcm_deinterleave_u8__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_u8__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_interleave_s32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_interleave_s32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_interleave_s24__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_interleave_s24__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_interleave_s16__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_interleave_s16__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_interleave_f32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_interleave_f32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function ___ftello_unlocked(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 if (!(HEAP32[i3 >> 2] & 128)) i1 = 1; else i1 = (HEAP32[i3 + 20 >> 2] | 0) >>> 0 > (HEAP32[i3 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 40 >> 2] & 15](i3, 0, 0, i1) | 0;
 i2 = getTempRet0() | 0;
 if ((i2 | 0) >= 0) {
  i4 = (HEAP32[i3 + 8 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) | 0;
  i4 = _i64Subtract(i1 | 0, i2 | 0, i4 | 0, ((i4 | 0) < 0) << 31 >> 31 | 0) | 0;
  i2 = getTempRet0() | 0;
  i1 = (HEAP32[i3 + 20 >> 2] | 0) - (HEAP32[i3 + 28 >> 2] | 0) | 0;
  i1 = _i64Add(i4 | 0, i2 | 0, i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0) | 0;
  i2 = getTempRet0() | 0;
 }
 setTempRet0(i2 | 0);
 return i1 | 0;
}

function _GetMousePosition(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, f5 = f0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 8 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 f5 = Math_fround(Math_fround(Math_fround(HEAPF32[44298]) + Math_fround(0.0)) * Math_fround(1.0));
 HEAPF32[i4 >> 2] = f5;
 f5 = Math_fround(Math_fround(Math_fround(HEAPF32[44299]) + Math_fround(0.0)) * Math_fround(1.0));
 HEAPF32[i4 + 4 >> 2] = f5;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 STACKTOP = i2;
 return;
}

function _frexp(d1, i5) {
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i4 = _bitshift64Lshr(i2 | 0, i3 | 0, 52) | 0;
 getTempRet0() | 0;
 switch (i4 & 2047) {
 case 0:
  {
   if (d1 != 0.0) {
    d1 = +_frexp(d1 * 18446744073709551616.0, i5);
    i2 = (HEAP32[i5 >> 2] | 0) + -64 | 0;
   } else i2 = 0;
   HEAP32[i5 >> 2] = i2;
   break;
  }
 case 2047:
  break;
 default:
  {
   HEAP32[i5 >> 2] = (i4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = i2;
   HEAP32[tempDoublePtr + 4 >> 2] = i3 & -2146435073 | 1071644672;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d1;
}

function _check_line(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = 0;
 i1 = 1;
 i2 = 0;
 i4 = -1;
 while (1) {
  i3 = HEAP32[i6 + 40 + (i7 * 20 | 0) + (i5 << 2) >> 2] | 0;
  if ((i4 | 0) == (i3 | 0) | (i3 | 0) == 11) {
   i1 = i1 + 1 | 0;
   i3 = i4;
  } else if ((i1 | 0) > 2) {
   i3 = 7;
   break;
  } else {
   i1 = 1;
   i2 = i5;
  }
  i5 = i5 + 1 | 0;
  if (i5 >>> 0 >= 5) {
   i3 = 6;
   break;
  } else i4 = i3;
 }
 if ((i3 | 0) == 6) if ((i1 | 0) > 2) i3 = 7; else i1 = 0;
 if ((i3 | 0) == 7) {
  i3 = i1 + i2 | 0;
  do {
   HEAP32[i6 + 100 + (i7 * 20 | 0) + (i2 << 2) >> 2] = 1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i3 | 0));
 }
 return i1 | 0;
}

function _GetGamepadAxis(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 i2 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i2 >> 2] = 0;
 switch (HEAP32[i5 >> 2] | 0) {
 case 0:
  {
   HEAP32[i2 >> 2] = 1;
   i3 = 3;
   break;
  }
 case 1:
  {
   i3 = 3;
   break;
  }
 case 2:
  {
   i3 = 4;
   break;
  }
 case 3:
  {
   i3 = 5;
   break;
  }
 default:
  {}
 }
 if ((i3 | 0) == 3) {
  HEAP32[i2 >> 2] = 2;
  i3 = 4;
 }
 if ((i3 | 0) == 4) {
  HEAP32[i2 >> 2] = 3;
  i3 = 5;
 }
 if ((i3 | 0) == 5) HEAP32[i2 >> 2] = 3;
 STACKTOP = i4;
 return HEAP32[i2 >> 2] | 0;
}

function _fopen(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_strchr(59306, HEAP8[i3 >> 0] | 0) | 0)) {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 28;
  i1 = 0;
 } else {
  i5 = ___fmodeflags(i3) | 0 | 32768;
  HEAP32[i1 >> 2] = i2;
  HEAP32[i1 + 4 >> 2] = i5;
  HEAP32[i1 + 8 >> 2] = 438;
  i2 = ___syscall_ret(___syscall5(5, i1 | 0) | 0) | 0;
  if ((i2 | 0) < 0) i1 = 0; else {
   i1 = ___fdopen(i2, i3) | 0;
   if (!i1) {
    ___wasi_fd_close(i2 | 0) | 0;
    i1 = 0;
   }
  }
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _ma_pcm_deinterleave_s32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_s32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_s24(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_s24__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_s16(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_s16__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_f32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_f32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s32_to_s24__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s32_to_s24__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s32_to_s16__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s32_to_s16__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s32_to_f32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s32_to_f32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_s32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s24_to_s32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_s16__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s24_to_s16__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_f32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s24_to_f32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s16_to_s32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s16_to_s32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s16_to_s24__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s16_to_s24__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s16_to_f32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s16_to_f32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_f32_to_s32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_f32_to_s32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_f32_to_s24__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_f32_to_s24__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_deinterleave_u8(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_deinterleave_u8__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _jar_xm_amiga_frequency(f2) {
 f2 = Math_fround(f2);
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAPF32[i1 >> 2] = f2;
 if (Math_fround(HEAPF32[i1 >> 2]) == Math_fround(0.0)) {
  HEAPF32[i3 >> 2] = Math_fround(0.0);
  f2 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i4;
  return Math_fround(f2);
 } else {
  f2 = Math_fround(Math_fround(7093789.0) / Math_fround(Math_fround(HEAPF32[i1 >> 2]) * Math_fround(2.0)));
  HEAPF32[i3 >> 2] = f2;
  f2 = Math_fround(HEAPF32[i3 >> 2]);
  STACKTOP = i4;
  return Math_fround(f2);
 }
 return f0;
}

function _stbv_bit_reverse(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] & -1431655766) >>> 1 | (HEAP32[i3 >> 2] & 1431655765) << 1;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] & -858993460) >>> 2 | (HEAP32[i3 >> 2] & 858993459) << 2;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] & -252645136) >>> 4 | (HEAP32[i3 >> 2] & 252645135) << 4;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] & -16711936) >>> 8 | (HEAP32[i3 >> 2] & 16711935) << 8;
 STACKTOP = i2;
 return (HEAP32[i3 >> 2] | 0) >>> 16 | HEAP32[i3 >> 2] << 16 | 0;
}

function _ma_pcm_u8_to_s32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_u8_to_s32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_u8_to_s24__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_u8_to_s24__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_u8_to_s16__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_u8_to_s16__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_u8_to_f32__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_u8_to_f32__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s32_to_u8__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s32_to_u8__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_u8__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s24_to_u8__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s16_to_u8__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s16_to_u8__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_f32_to_u8__optimized(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_f32_to_u8__reference(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _stbv_point_compare(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i6 >> 2] = i4;
 HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
 if ((HEAPU16[HEAP32[i2 >> 2] >> 1] | 0 | 0) < (HEAPU16[HEAP32[i1 >> 2] >> 1] | 0 | 0)) {
  i7 = -1;
  STACKTOP = i5;
  return i7 | 0;
 }
 i7 = (HEAPU16[HEAP32[i2 >> 2] >> 1] | 0 | 0) > (HEAPU16[HEAP32[i1 >> 2] >> 1] | 0 | 0) & 1;
 STACKTOP = i5;
 return i7 | 0;
}

function _ma_pcm_interleave_s32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_interleave_s32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_interleave_s24(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_interleave_s24__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_interleave_s16(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_interleave_s16__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_interleave_f32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_interleave_f32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _stbv_get32(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = (_stbv_get8(HEAP32[i4 >> 2] | 0) | 0) & 255;
 HEAP32[i3 >> 2] = i1;
 i1 = ((_stbv_get8(HEAP32[i4 >> 2] | 0) | 0) & 255) << 8;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i1;
 i1 = ((_stbv_get8(HEAP32[i4 >> 2] | 0) | 0) & 255) << 16;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i1;
 i1 = ((_stbv_get8(HEAP32[i4 >> 2] | 0) | 0) & 255) << 24;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i1;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _DrawCircleV(i1, f3, i2) {
 i1 = i1 | 0;
 f3 = Math_fround(f3);
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i5 + 16 | 0;
 i7 = i5 + 8 | 0;
 HEAPF32[i5 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i5 >> 2]);
 HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP8[i6 >> 0] = HEAP8[i2 >> 0] | 0;
 HEAP8[i6 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
 HEAP8[i6 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
 HEAP8[i6 + 3 >> 0] = HEAP8[i2 + 3 >> 0] | 0;
 _DrawCircleSector(i7, f3, 0, 360, 36, i6);
 STACKTOP = i4;
 return;
}

function _stbi__mad2sizes_valid(i2, i5, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i1 >> 2] = i4;
 if (!(_stbi__mul2sizes_valid(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) {
  i6 = 0;
  i6 = i6 & 1;
  STACKTOP = i7;
  return i6 | 0;
 }
 i6 = Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i6 = (_stbi__addsizes_valid(i6, HEAP32[i1 >> 2] | 0) | 0) != 0;
 i6 = i6 & 1;
 STACKTOP = i7;
 return i6 | 0;
}

function _ma_pcm_interleave_u8(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_interleave_u8__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s32_to_s24(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s32_to_s24__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s32_to_s16(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s32_to_s16__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s32_to_f32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s32_to_f32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_s32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s24_to_s32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_s16(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s24_to_s16__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_f32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s24_to_f32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s16_to_s32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s16_to_s32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s16_to_s24(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s16_to_s24__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s16_to_f32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s16_to_f32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_rb_init(i3, i2, i1, i4, i5) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i7 + 16 | 0;
 i10 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i8 = i7 + 4 | 0;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i7 >> 2] = i5;
 i7 = _ma_pcm_rb_init_ex(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, 1, 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function _ma_pcm_f32_to_s32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_f32_to_s32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_f32_to_s24(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_f32_to_s24__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_f32_to_s16(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_f32_to_s16__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_event_signal__posix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 20 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 | 0) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 + 76 >> 2] = 1;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 40 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 + 28 | 0) | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 24 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 | 0) | 0;
 STACKTOP = i2;
 return 1;
}

function _SetupViewport(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i3 + 4 | 0;
 i4 = i3;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[44062] = HEAP32[i5 >> 2];
 HEAP32[44063] = HEAP32[i4 >> 2];
 i1 = HEAP32[44064] | 0;
 i2 = HEAP32[44065] | 0;
 _rlViewport((i1 | 0) / 2 | 0, (i2 | 0) / 2 | 0, (HEAP32[44062] | 0) - i1 | 0, (HEAP32[44063] | 0) - i2 | 0);
 _rlMatrixMode(5889);
 _rlLoadIdentity();
 _rlOrtho(0.0, +(HEAP32[44062] | 0), +(HEAP32[44063] | 0), 0.0, 0.0, 1.0);
 _rlMatrixMode(5888);
 _rlLoadIdentity();
 STACKTOP = i3;
 return;
}

function _ma_pcm_u8_to_s32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_u8_to_s32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_u8_to_s24(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_u8_to_s24__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_u8_to_s16(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_u8_to_s16__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_u8_to_f32(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_u8_to_f32__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s32_to_u8(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s32_to_u8__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s24_to_u8(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s24_to_u8__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_s16_to_u8(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_s16_to_u8__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_pcm_f32_to_u8(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 i7 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i7 + 16 | 0;
 i8 = i7 + 12 | 0;
 i10 = i7;
 i7 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i8 >> 2] = i5;
 i5 = i10;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i5 = i10;
 _ma_pcm_f32_to_u8__optimized(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _ma_channel_router__calculate_input_channel_planar_weight(i5, i2, i4) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, f8 = f0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1;
 i3 = i1 + 5 | 0;
 i1 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i5;
 HEAP8[i3 >> 0] = i2;
 HEAP8[i1 >> 0] = i4;
 if (HEAP32[i7 >> 2] | 0) {
  f8 = Math_fround(_ma_calculate_channel_position_planar_weight(HEAP8[i3 >> 0] | 0, HEAP8[i1 >> 0] | 0));
  STACKTOP = i6;
  return Math_fround(f8);
 } else ___assert_fail(43955, 36381, 30419, 43977);
 return Math_fround(0.0);
}

function _ma_device__is_initialized(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
  HEAP32[i4 >> 2] = (HEAP32[i5 >> 2] | 0) != 0 & 1;
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _stbv_uint32_compare(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 HEAP32[i1 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
 if ((HEAP32[i4 >> 2] | 0) >>> 0 < (HEAP32[i1 >> 2] | 0) >>> 0) {
  i7 = -1;
  STACKTOP = i5;
  return i7 | 0;
 }
 i7 = (HEAP32[i4 >> 2] | 0) >>> 0 > (HEAP32[i1 >> 2] | 0) >>> 0 & 1;
 STACKTOP = i5;
 return i7 | 0;
}

function _IsAudioBufferPlaying(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3 + 4 | 0;
 i4 = i3 + 8 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP8[i4 >> 0] = 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  _TraceLog(4, 49778, i3);
  i4 = HEAP8[i4 >> 0] | 0;
  i4 = i4 & 1;
  STACKTOP = i5;
  return i4 | 0;
 }
 if (HEAP8[(HEAP32[i2 >> 2] | 0) + 46536 >> 0] & 1) i1 = HEAP8[(HEAP32[i2 >> 2] | 0) + 46537 >> 0] & 1 ^ 1; else i1 = 0;
 HEAP8[i4 >> 0] = i1 & 1;
 i4 = HEAP8[i4 >> 0] | 0;
 i4 = i4 & 1;
 STACKTOP = i5;
 return i4 | 0;
}

function _GetFileName(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i5 + 8 | 0;
 i3 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = 0;
 if (HEAP32[i3 >> 2] | 0) {
  i2 = _strprbrk(HEAP32[i3 >> 2] | 0, 36072) | 0;
  HEAP32[i1 >> 2] = i2;
 }
 if (HEAP32[i1 >> 2] | 0) if ((HEAP32[i1 >> 2] | 0) != (HEAP32[i3 >> 2] | 0)) {
  HEAP32[i4 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _fmt_u(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (i3 >>> 0 > 0 | (i3 | 0) == 0 & i2 >>> 0 > 4294967295) do {
  i4 = i2;
  i2 = ___udivdi3(i2 | 0, i3 | 0, 10, 0) | 0;
  i5 = i3;
  i3 = getTempRet0() | 0;
  i6 = ___muldi3(i2 | 0, i3 | 0, 10, 0) | 0;
  i6 = _i64Subtract(i4 | 0, i5 | 0, i6 | 0, getTempRet0() | 0) | 0;
  getTempRet0() | 0;
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i6 & 255 | 48;
 } while (i5 >>> 0 > 9 | (i5 | 0) == 9 & i4 >>> 0 > 4294967295);
 if (i2) do {
  i6 = i2;
  i2 = (i2 >>> 0) / 10 | 0;
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i6 - (i2 * 10 | 0) | 48;
 } while (i6 >>> 0 >= 10);
 return i1 | 0;
}

function _fourbyte_strstr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
 i3 = i2 + 3 | 0;
 i1 = HEAP8[i3 >> 0] | 0;
 i4 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | i1 & 255;
 i1 = i1 << 24 >> 24 == 0;
 if ((i4 | 0) == (i5 | 0) | i1) i2 = i3; else {
  i2 = i3;
  i3 = i4;
  do {
   i2 = i2 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   i3 = i3 << 8 | i1 & 255;
   i1 = i1 << 24 >> 24 == 0;
  } while (!((i3 | 0) == (i5 | 0) | i1));
 }
 return (i1 ? 0 : i2 + -3 | 0) | 0;
}

function _stbi__mul2sizes_valid(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 do if ((HEAP32[i3 >> 2] | 0) < 0 | (HEAP32[i1 >> 2] | 0) < 0) HEAP32[i5 >> 2] = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 1;
  break;
 } else {
  HEAP32[i5 >> 2] = (HEAP32[i3 >> 2] | 0) <= (2147483647 / (HEAP32[i1 >> 2] | 0) | 0 | 0) & 1;
  break;
 } while (0);
 STACKTOP = i6;
 return HEAP32[i5 >> 2] | 0;
}

function _stbv_start_page(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i5 >> 2] = i1;
 i2 = (_stbv_capture_pattern(HEAP32[i5 >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i2) {
  i5 = _stbv_start_page_no_capturepattern(i1) | 0;
  HEAP32[i3 >> 2] = i5;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i5 | 0;
 } else {
  i5 = _stbv_error(i1, 30) | 0;
  HEAP32[i3 >> 2] = i5;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 return 0;
}

function _Vector3Length(i1) {
 i1 = i1 | 0;
 var i2 = 0, f3 = f0, i4 = 0, f5 = f0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i2;
 f3 = Math_fround(HEAPF32[i1 >> 2]);
 f3 = Math_fround(f3 * Math_fround(HEAPF32[i1 >> 2]));
 f5 = Math_fround(HEAPF32[i1 + 4 >> 2]);
 f5 = Math_fround(f3 + Math_fround(f5 * Math_fround(HEAPF32[i1 + 4 >> 2])));
 f3 = Math_fround(HEAPF32[i1 + 8 >> 2]);
 f3 = Math_fround(Math_sqrt(Math_fround(f5 + Math_fround(f3 * Math_fround(HEAPF32[i1 + 8 >> 2])))));
 HEAPF32[i4 >> 2] = f3;
 f3 = Math_fround(HEAPF32[i4 >> 2]);
 STACKTOP = i2;
 return Math_fround(f3);
}

function _drmp3_get_pcm_frame_count(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i1 + 8 | 0;
 i5 = i1 + 16 | 0;
 HEAP32[i5 >> 2] = i2;
 if (_drmp3_get_mp3_and_pcm_frame_count(HEAP32[i5 >> 2] | 0, 0, i1) | 0) {
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  i5 = i3;
  HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i5 + 4 >> 2] = i2;
 } else {
  i5 = i3;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
 }
 i5 = HEAP32[i3 >> 2] | 0;
 setTempRet0(HEAP32[i3 + 4 >> 2] | 0);
 STACKTOP = i4;
 return i5 | 0;
}

function _stbi__hdr_test(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = _stbi__hdr_test_core(HEAP32[i3 >> 2] | 0, 53689) | 0;
 HEAP32[i1 >> 2] = i2;
 _stbi__rewind(HEAP32[i3 >> 2] | 0);
 if (HEAP32[i1 >> 2] | 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i2 = _stbi__hdr_test_core(HEAP32[i3 >> 2] | 0, 53701) | 0;
 HEAP32[i1 >> 2] = i2;
 _stbi__rewind(HEAP32[i3 >> 2] | 0);
 i3 = HEAP32[i1 >> 2] | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _stbtt_GetCodepointHMetrics(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i6 + 12 | 0;
 i8 = i6 + 8 | 0;
 i7 = i6 + 4 | 0;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i6 >> 2] = i4;
 i3 = HEAP32[i9 >> 2] | 0;
 i4 = _stbtt_FindGlyphIndex(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 _stbtt_GetGlyphHMetrics(i3, i4, HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _stbi__zget8(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i3;
 if ((HEAP32[HEAP32[i1 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  HEAP8[i2 >> 0] = 0;
  i3 = HEAP8[i2 >> 0] | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i1 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i3 + 1;
  HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
  i3 = HEAP8[i2 >> 0] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _stbtt__buf_peek8(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP8[i3 >> 0] = 0;
  i3 = HEAP8[i3 >> 0] | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  HEAP8[i3 >> 0] = HEAP8[(HEAP32[HEAP32[i1 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) >> 0] | 0;
  i3 = HEAP8[i3 >> 0] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _stbir__saturate(f3) {
 f3 = Math_fround(f3);
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1 + 4 | 0;
 HEAPF32[i1 >> 2] = f3;
 do if (Math_fround(HEAPF32[i1 >> 2]) < Math_fround(0.0)) HEAPF32[i2 >> 2] = Math_fround(0.0); else if (Math_fround(HEAPF32[i1 >> 2]) > Math_fround(1.0)) {
  HEAPF32[i2 >> 2] = Math_fround(1.0);
  break;
 } else {
  f3 = Math_fround(HEAPF32[i1 >> 2]);
  HEAPF32[i2 >> 2] = f3;
  break;
 } while (0);
 f3 = Math_fround(HEAPF32[i2 >> 2]);
 STACKTOP = i4;
 return Math_fround(f3);
}

function _equal(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, f6 = f0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 f6 = Math_fround(HEAPF32[HEAP32[i3 >> 2] >> 2]);
 if (!(f6 == Math_fround(HEAPF32[HEAP32[i1 >> 2] >> 2]))) {
  i4 = 0;
  i4 = i4 & 1;
  STACKTOP = i5;
  return i4 | 0;
 }
 f6 = Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 4 >> 2]);
 i4 = f6 == Math_fround(HEAPF32[(HEAP32[i1 >> 2] | 0) + 4 >> 2]);
 i4 = i4 & 1;
 STACKTOP = i5;
 return i4 | 0;
}

function _ma_device_is_started(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i6 + 12 | 0;
 i5 = i6 + 8 | 0;
 i4 = i6 + 4 | 0;
 i2 = i6;
 HEAP32[i2 >> 2] = i1;
 if (!(HEAP32[i2 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
  HEAP32[i4 >> 2] = (HEAP32[i5 >> 2] | 0) == 2 & 1;
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _MatrixIdentity(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i1 = i4;
 i3 = i1;
 i5 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i5 | 0));
 HEAPF32[i1 >> 2] = Math_fround(1.0);
 HEAPF32[i1 + 20 >> 2] = Math_fround(1.0);
 HEAPF32[i1 + 40 >> 2] = Math_fround(1.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(1.0);
 i3 = i2;
 i5 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i5 | 0));
 STACKTOP = i4;
 return;
}

function _stbv_setup_temp_free(i2, i4, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i1 >> 2] = i6;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 80 >> 2] | 0) {
  i6 = (HEAP32[i3 >> 2] | 0) + 92 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + 3 & -4);
  STACKTOP = i7;
  return;
 } else {
  _free(HEAP32[i5 >> 2] | 0);
  STACKTOP = i7;
  return;
 }
}

function _pad(i7, i3, i5, i4, i2) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i6 = i1;
 if ((i5 | 0) > (i4 | 0) & (i2 & 73728 | 0) == 0) {
  i1 = i5 - i4 | 0;
  _memset(i6 | 0, i3 << 24 >> 24 | 0, (i1 >>> 0 < 256 ? i1 : 256) | 0) | 0;
  if (i1 >>> 0 > 255) {
   i2 = i5 - i4 | 0;
   do {
    _out(i7, i6, 256);
    i1 = i1 + -256 | 0;
   } while (i1 >>> 0 > 255);
   i1 = i2 & 255;
  }
  _out(i7, i6, i1);
 }
 STACKTOP = i8;
 return;
}

function _IsAudioStreamProcessed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 4 | 0;
 if (!(HEAP32[i1 + 12 >> 2] | 0)) {
  _TraceLog(5, 51471, i2);
  HEAP8[i3 >> 0] = 0;
  i3 = HEAP8[i3 >> 0] | 0;
  i3 = i3 & 1;
  STACKTOP = i4;
  return i3 | 0;
 }
 if (HEAP8[(HEAP32[i1 + 12 >> 2] | 0) + 46544 >> 0] & 1) i1 = 1; else i1 = HEAP8[(HEAP32[i1 + 12 >> 2] | 0) + 46544 + 1 >> 0] & 1;
 HEAP8[i3 >> 0] = i1 & 1;
 i3 = HEAP8[i3 >> 0] | 0;
 i3 = i3 & 1;
 STACKTOP = i4;
 return i3 | 0;
}

function _drmp3_src_cache_init(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i4 >> 2] | 0)) ___assert_fail(44155, 48387, 2291, 48414);
 if (HEAP32[i1 >> 2] | 0) {
  HEAP32[HEAP32[i1 >> 2] >> 2] = HEAP32[i4 >> 2];
  HEAP32[(HEAP32[i1 >> 2] | 0) + 4100 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 4104 >> 2] = 0;
  STACKTOP = i5;
  return;
 } else ___assert_fail(48435, 48387, 2292, 48414);
}

function _realloc(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 if (!i3) {
  i3 = _malloc(i2) | 0;
  return i3 | 0;
 }
 if (i2 >>> 0 > 4294967231) {
  i3 = ___errno_location() | 0;
  HEAP32[i3 >> 2] = 48;
  i3 = 0;
  return i3 | 0;
 }
 i1 = _try_realloc_chunk(i3 + -8 | 0, i2 >>> 0 < 11 ? 16 : i2 + 11 & -8) | 0;
 if (i1 | 0) {
  i3 = i1 + 8 | 0;
  return i3 | 0;
 }
 i1 = _malloc(i2) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i4 = HEAP32[i3 + -4 >> 2] | 0;
 i4 = (i4 & -8) - ((i4 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i1 | 0, i3 | 0, (i4 >>> 0 < i2 >>> 0 ? i4 : i2) | 0) | 0;
 _free(i3);
 i3 = i1;
 return i3 | 0;
}

function ___toread(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = i3 + 74 | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = i1 + 255 | i1;
 i2 = i3 + 20 | 0;
 i1 = i3 + 28 | 0;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 > (HEAP32[i1 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 15](i3, 0, 0) | 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(i1 & 4)) {
  i2 = (HEAP32[i3 + 44 >> 2] | 0) + (HEAP32[i3 + 48 >> 2] | 0) | 0;
  HEAP32[i3 + 8 >> 2] = i2;
  HEAP32[i3 + 4 >> 2] = i2;
  i1 = i1 << 27 >> 31;
 } else {
  HEAP32[i3 >> 2] = i1 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function _stbi__addsizes_valid(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i4;
 if ((HEAP32[i1 >> 2] | 0) < 0) {
  HEAP32[i5 >> 2] = 0;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  HEAP32[i5 >> 2] = (HEAP32[i3 >> 2] | 0) <= (2147483647 - (HEAP32[i1 >> 2] | 0) | 0) & 1;
  i5 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _fgetc(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) < 0) i4 = 3; else if (!(___lockfile(i3) | 0)) i4 = 3; else {
  i2 = i3 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 < (HEAP32[i3 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i2 >> 2] = i1 + 1;
   i1 = HEAPU8[i1 >> 0] | 0;
  } else i1 = ___uflow(i3) | 0;
 }
 do if ((i4 | 0) == 3) {
  i2 = i3 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 < (HEAP32[i3 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i2 >> 2] = i1 + 1;
   i1 = HEAPU8[i1 >> 0] | 0;
   break;
  } else {
   i1 = ___uflow(i3) | 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _jar_mod_unload(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[(HEAP32[i1 >> 2] | 0) + 5872 >> 2] | 0) {
  _free(HEAP32[(HEAP32[i1 >> 2] | 0) + 5872 >> 2] | 0);
  HEAP32[(HEAP32[i1 >> 2] | 0) + 5872 >> 2] = 0;
  HEAP32[(HEAP32[i1 >> 2] | 0) + 5876 >> 2] = 0;
  HEAP16[(HEAP32[i1 >> 2] | 0) + 5880 >> 1] = 0;
 }
 _jar_mod_reset(HEAP32[i1 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _stbrp_setup_allow_out_of_mem(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[i3 >> 2] | 0) {
  HEAP32[i1 + 8 >> 2] = 1;
  STACKTOP = i5;
  return;
 } else {
  i3 = HEAP32[i4 >> 2] | 0;
  i4 = HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0;
  HEAP32[i3 + 8 >> 2] = ((HEAP32[i1 >> 2] | 0) + i4 - 1 | 0) / (i4 | 0) | 0;
  STACKTOP = i5;
  return;
 }
}

function _stbi__bitreverse16(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] & 43690) >> 1 | (HEAP32[i3 >> 2] & 21845) << 1;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] & 52428) >> 2 | (HEAP32[i3 >> 2] & 13107) << 2;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] & 61680) >> 4 | (HEAP32[i3 >> 2] & 3855) << 4;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] & 65280) >> 8 | (HEAP32[i3 >> 2] & 255) << 8;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _threebyte_strstr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8;
 i3 = i2 + 2 | 0;
 i1 = HEAP8[i3 >> 0] | 0;
 i4 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (i1 & 255) << 8;
 i1 = i1 << 24 >> 24 == 0;
 if ((i4 | 0) == (i5 | 0) | i1) i2 = i3; else {
  i2 = i3;
  i3 = i4;
  do {
   i2 = i2 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   i3 = (i3 | i1 & 255) << 8;
   i1 = i1 << 24 >> 24 == 0;
  } while (!((i3 | 0) == (i5 | 0) | i1));
 }
 return (i1 ? 0 : i2 + -2 | 0) | 0;
}

function _stbiw__zlib_bitrev(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  i3 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i3 + -1;
  i1 = HEAP32[i4 >> 2] | 0;
  if (!i3) break;
  HEAP32[i4 >> 2] = i1 << 1 | HEAP32[i5 >> 2] & 1;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] >> 1;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _drmp3_src_set_input_sample_rate(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 >> 2] = i5;
 do if (!(HEAP32[i3 >> 2] | 0)) HEAP32[i4 >> 2] = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  break;
 } else {
  HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[i1 >> 2];
  HEAP32[i4 >> 2] = 1;
  break;
 } while (0);
 STACKTOP = i6;
 return HEAP32[i4 >> 2] | 0;
}

function _IsKeyPressed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 i3 = i4 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP8[i3 >> 0] = 0;
 if ((HEAP8[165440 + (HEAP32[i2 >> 2] | 0) >> 0] | 0) != (HEAP8[165952 + (HEAP32[i2 >> 2] | 0) >> 0] | 0)) if ((HEAP8[165440 + (HEAP32[i2 >> 2] | 0) >> 0] | 0) == 1) {
  HEAP8[i3 >> 0] = 1;
  i3 = HEAP8[i3 >> 0] | 0;
  i3 = i3 & 1;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP8[i3 >> 0] = 0;
 i3 = HEAP8[i3 >> 0] | 0;
 i3 = i3 & 1;
 STACKTOP = i4;
 return i3 | 0;
}

function _ma_channel_map_copy(i5, i3, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 if (!((HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[i4 >> 2] | 0) != 0 & (HEAP32[i1 >> 2] | 0) >>> 0 > 0)) {
  STACKTOP = i7;
  return;
 }
 _memcpy(HEAP32[i6 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
 STACKTOP = i7;
 return;
}

function _BeginDrawing() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i1 = i4 + 64 | 0;
 i2 = i4;
 d7 = +_GetTime();
 HEAPF64[21926] = d7;
 HEAPF64[21927] = +HEAPF64[21926] - +HEAPF64[21924];
 HEAPF64[21924] = +HEAPF64[21926];
 _rlLoadIdentity();
 i3 = i1;
 i5 = 176168;
 i6 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i3 = i3 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i3 | 0) < (i6 | 0));
 _MatrixToFloatV(i2, i1);
 _rlMultMatrixf(i2);
 STACKTOP = i4;
 return;
}

function _stbtt__hheap_cleanup(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6 + 12 | 0;
 i1 = i6 + 4 | 0;
 i3 = i6;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i6 + 8 >> 2] = i4;
 HEAP32[i1 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 while (1) {
  if (!(HEAP32[i1 >> 2] | 0)) break;
  HEAP32[i3 >> 2] = HEAP32[HEAP32[i1 >> 2] >> 2];
  _free(HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 }
 STACKTOP = i5;
 return;
}

function _GifWriteChunk(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i3 + 4 | 0;
 i4 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 _fputc(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 _fwrite(i2 + 8 | 0, 1, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 HEAP8[HEAP32[i4 >> 2] >> 0] = 0;
 HEAP8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] = 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = i3;
 return;
}

function _emscripten_GetProcAddress(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _malloc((_strlen(i1) | 0) + 1 | 0) | 0;
 _strcpy(i2, i1) | 0;
 i1 = _strstr(i2, 59332) | 0;
 if (i1 | 0) HEAP8[i1 >> 0] = 0;
 i1 = _strstr(i2, 59336) | 0;
 if (i1 | 0) HEAP8[i1 >> 0] = 0;
 i1 = _strstr(i2, 59340) | 0;
 if (i1 | 0) HEAP8[i1 >> 0] = 0;
 i1 = _strstr(i2, 59344) | 0;
 if (i1 | 0) HEAP8[i1 >> 0] = 0;
 i1 = _strstr(i2, 59350) | 0;
 if (i1 | 0) HEAP8[i1 >> 0] = 0;
 i1 = _emscripten_webgl1_get_proc_address(i2) | 0;
 if (!i1) i1 = __webgl1_match_ext_proc_address_without_suffix(i2) | 0;
 _free(i2);
 return i1 | 0;
}

function _GetExtension(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i5 + 8 | 0;
 i3 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i3 >> 2] = i2;
 i2 = _strrchr(HEAP32[i3 >> 2] | 0, 46) | 0;
 HEAP32[i1 >> 2] = i2;
 if (HEAP32[i1 >> 2] | 0) if ((HEAP32[i1 >> 2] | 0) != (HEAP32[i3 >> 2] | 0)) {
  HEAP32[i4 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  i4 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i4 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function ___stdio_seek(i4, i2, i3, i5) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(___wasi_syscall_ret(___wasi_fd_seek(HEAP32[i4 + 60 >> 2] | 0, i2 | 0, i3 | 0, i5 & 255 | 0, i1 | 0) | 0) | 0)) {
  i2 = i1;
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  i2 = HEAP32[i2 >> 2] | 0;
 } else {
  HEAP32[i1 >> 2] = -1;
  HEAP32[i1 + 4 >> 2] = -1;
  i1 = -1;
  i2 = -1;
 }
 setTempRet0(i1 | 0);
 STACKTOP = i6;
 return i2 | 0;
}

function _TextFormat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i4 + 20 | 0;
 i5 = i4 + 16 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 >> 2] = 167680 + (HEAP32[44151] << 10);
 HEAP32[i4 >> 2] = i2;
 _vsprintf(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, i4) | 0;
 i4 = (HEAP32[44151] | 0) + 1 | 0;
 HEAP32[44151] = i4;
 HEAP32[44151] = (HEAP32[44151] | 0) >= 4 ? 0 : i4;
 STACKTOP = i3;
 return HEAP32[i5 >> 2] | 0;
}

function _SetMusicVolume(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 8 | 0;
 i6 = i4;
 HEAPF32[i6 >> 2] = f2;
 i4 = i1 + 16 | 0;
 f2 = Math_fround(HEAPF32[i6 >> 2]);
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 _SetAudioStreamVolume(i5, f2);
 STACKTOP = i3;
 return;
}

function _ma_post_error(i3, i1, i2, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i6 + 12 | 0;
 i8 = i6 + 8 | 0;
 i7 = i6 + 4 | 0;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i6 >> 2] = i4;
 i6 = _ma_context_post_error(0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 STACKTOP = i5;
 return i6 | 0;
}

function _twobyte_strstr(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i5 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0);
 i1 = i3 + 1 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 L1 : do if (!(i2 << 24 >> 24)) i1 = 0; else {
  i4 = i1;
  i1 = (HEAPU8[i3 >> 0] | 0) << 8 | i2 & 255;
  while (1) {
   i3 = i1 & 65535;
   if ((i3 | 0) == (i5 | 0)) break;
   i1 = i4 + 1 | 0;
   i2 = HEAP8[i1 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i1 = 0;
    break L1;
   } else {
    i4 = i1;
    i1 = i3 << 8 | i2 & 255;
   }
  }
  i1 = i4 + -1 | 0;
 } while (0);
 return i1 | 0;
}

function _strlen(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = 0;
 i4 = i2;
 L1 : do if (!(i4 & 3)) {
  i1 = i2;
  i3 = 5;
 } else {
  i1 = i4;
  while (1) {
   if (!(HEAP8[i2 >> 0] | 0)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i2;
   if (!(i1 & 3)) {
    i1 = i2;
    i3 = 5;
    break;
   }
  }
 } while (0);
 if ((i3 | 0) == 5) {
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) i1 = i1 + 4 | 0; else break;
  }
  if ((i2 & 255) << 24 >> 24) do i1 = i1 + 1 | 0; while ((HEAP8[i1 >> 0] | 0) != 0);
 }
 return i1 - i4 | 0;
}

function _strprbrk(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i6 + 8 | 0;
 i2 = i6 + 4 | 0;
 i3 = i6;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  i4 = _strpbrk(HEAP32[i5 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = i4;
  if (!(HEAP32[i5 >> 2] | 0)) break;
  i4 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i4 + 1;
  HEAP32[i3 >> 2] = i4;
 }
 STACKTOP = i6;
 return HEAP32[i3 >> 2] | 0;
}

function _rlPushMatrix() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if ((HEAP32[43911] | 0) >= 32) _TraceLog(5, 31995, i2);
 if ((HEAP32[7868] | 0) == 5888) {
  HEAP8[177200] = 1;
  HEAP32[43894] = 175648;
 }
 i1 = 163280 + (HEAP32[43911] << 6) | 0;
 i3 = HEAP32[43894] | 0;
 i4 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  i1 = i1 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 HEAP32[43911] = (HEAP32[43911] | 0) + 1;
 STACKTOP = i2;
 return;
}

function _ma_device_uninit_by_index__webaudio(i5, i3, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i5;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 if (HEAP32[i7 >> 2] | 0) {
  _emscripten_asm_const_iii(2, HEAP32[i1 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
  STACKTOP = i6;
  return;
 } else ___assert_fail(36359, 36381, 25005, 37906);
}

function _stbv_error(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] = HEAP32[i1 >> 2];
 if (!((HEAP32[i1 >> 2] | 0) != 1 ? (HEAP32[(HEAP32[i4 >> 2] | 0) + 96 >> 2] | 0) == 0 : 0)) {
  STACKTOP = i5;
  return 0;
 }
 HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return 0;
}

function _TrackAudioBuffer(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1;
 HEAP32[i3 >> 2] = i2;
 _ma_mutex_lock(176492);
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP32[44131] | 0)) HEAP32[44131] = i1; else {
  HEAP32[(HEAP32[44132] | 0) + 46564 >> 2] = i1;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 46568 >> 2] = HEAP32[44132];
 }
 HEAP32[44132] = HEAP32[i3 >> 2];
 _ma_mutex_unlock(176492);
 STACKTOP = i4;
 return;
}

function _EmscriptenKeyboardCallback(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 8 | 0;
 i3 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 if ((HEAP32[i6 >> 2] | 0) != 1) {
  STACKTOP = i5;
  return 0;
 }
 if (_strcmp((HEAP32[i3 >> 2] | 0) + 32 | 0, 35529) | 0) {
  STACKTOP = i5;
  return 0;
 }
 _emscripten_exit_pointerlock() | 0;
 STACKTOP = i5;
 return 0;
}

function _SetAudioBufferVolume(i1, f3) {
 i1 = i1 | 0;
 f3 = Math_fround(f3);
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i6 + 8 | 0;
 i4 = i6 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAPF32[i4 >> 2] = f3;
 if (HEAP32[i2 >> 2] | 0) {
  f3 = Math_fround(HEAPF32[i4 >> 2]);
  HEAPF32[(HEAP32[i2 >> 2] | 0) + 46528 >> 2] = f3;
  STACKTOP = i5;
  return;
 } else {
  _TraceLog(4, 49895, i6);
  STACKTOP = i5;
  return;
 }
}

function _ma_event_signal(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if (HEAP32[i1 >> 2] | 0) if (HEAP32[HEAP32[i1 >> 2] >> 2] | 0) {
  i2 = _ma_event_signal__posix(HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i3 >> 2] = i2;
  i3 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i3 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function ___shlim(i5, i1, i2) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = i5 + 112 | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 i3 = HEAP32[i5 + 8 >> 2] | 0;
 i4 = HEAP32[i5 + 4 >> 2] | 0;
 i6 = i3 - i4 | 0;
 i7 = ((i6 | 0) < 0) << 31 >> 31;
 i8 = i5 + 120 | 0;
 HEAP32[i8 >> 2] = i6;
 HEAP32[i8 + 4 >> 2] = i7;
 if (((i1 | 0) != 0 | (i2 | 0) != 0) & ((i7 | 0) > (i2 | 0) | (i7 | 0) == (i2 | 0) & i6 >>> 0 > i1 >>> 0)) HEAP32[i5 + 104 >> 2] = i4 + i1; else HEAP32[i5 + 104 >> 2] = i3;
 return;
}

function _ma_event_wait(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if (HEAP32[i1 >> 2] | 0) if (HEAP32[HEAP32[i1 >> 2] >> 2] | 0) {
  i2 = _ma_event_wait__posix(HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[i3 >> 2] = i2;
  i3 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i3 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _drmp3_bs_init(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i5 >> 2] = i2;
 HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i7 >> 2];
 HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = HEAP32[i5 >> 2] << 3;
 STACKTOP = i4;
 return;
}

function _strncmp(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 if (!i4) i1 = 0; else {
  i2 = HEAP8[i3 >> 0] | 0;
  L3 : do if (!(i2 << 24 >> 24)) i2 = 0; else while (1) {
   i4 = i4 + -1 | 0;
   i5 = HEAP8[i1 >> 0] | 0;
   if (!(i2 << 24 >> 24 == i5 << 24 >> 24 & ((i4 | 0) != 0 & i5 << 24 >> 24 != 0))) break L3;
   i3 = i3 + 1 | 0;
   i1 = i1 + 1 | 0;
   i2 = HEAP8[i3 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i2 = 0;
    break;
   }
  } while (0);
  i1 = (i2 & 255) - (HEAPU8[i1 >> 0] | 0) | 0;
 }
 return i1 | 0;
}

function _puts(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = HEAP32[7883] | 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) i4 = ___lockfile(i3) | 0; else i4 = 0;
 do if ((_fputs(i1, i3) | 0) < 0) i1 = -1; else {
  if ((HEAP8[i3 + 75 >> 0] | 0) != 10) {
   i2 = i3 + 20 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i3 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 10;
    i1 = 0;
    break;
   }
  }
  i1 = (___overflow(i3, 10) | 0) >> 31;
 } while (0);
 if (i4 | 0) ___unlockfile(i3);
 return i1 | 0;
}

function _stbi__get_chunk_header(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 8 | 0;
 HEAP32[i5 >> 2] = i2;
 i2 = _stbi__get32be(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = i2;
 i2 = _stbi__get32be(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 STACKTOP = i3;
 return;
}

function _ma_pcm_converter_config_init_new(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i2 = i1;
 i1 = i2;
 i4 = i1 + 124 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = i3;
 i4 = i1 + 124 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 STACKTOP = i5;
 return;
}

function _ma_format_converter_config_init_new(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i2 = i1;
 i1 = i2;
 i4 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = i3;
 i4 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 STACKTOP = i5;
 return;
}

function _ma_get_bytes_per_sample(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i2 + 24 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[3368];
 HEAP32[i4 + 4 >> 2] = HEAP32[3369];
 HEAP32[i4 + 8 >> 2] = HEAP32[3370];
 HEAP32[i4 + 12 >> 2] = HEAP32[3371];
 HEAP32[i4 + 16 >> 2] = HEAP32[3372];
 HEAP32[i4 + 20 >> 2] = HEAP32[3373];
 STACKTOP = i2;
 return HEAP32[i4 + (HEAP32[i3 >> 2] << 2) >> 2] | 0;
}

function _stbir__support_trapezoid(f2) {
 f2 = Math_fround(f2);
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i1 >> 2] = f2;
 if (Math_fround(HEAPF32[i1 >> 2]) <= Math_fround(1.0)) {
  f2 = Math_fround(Math_fround(Math_fround(HEAPF32[i1 >> 2]) / Math_fround(2.0)) + Math_fround(.5));
  STACKTOP = i3;
  return Math_fround(f2);
 } else ___assert_fail(56339, 54884, 780, 56350);
 return Math_fround(0.0);
}

function _ma_rb_get_subbuffer_size(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i3 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2];
  i3 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _PlayAudioBuffer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 if (HEAP32[i2 >> 2] | 0) {
  HEAP8[(HEAP32[i2 >> 2] | 0) + 46536 >> 0] = 1;
  HEAP8[(HEAP32[i2 >> 2] | 0) + 46537 >> 0] = 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 46548 >> 2] = 0;
  STACKTOP = i3;
  return;
 } else {
  _TraceLog(5, 49859, i4);
  STACKTOP = i3;
  return;
 }
}

function _rlViewport(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 i6 = i5;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i6 >> 2] = i1;
 _glViewport(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _ClearDroppedFiles() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 if ((HEAP32[44067] | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i2 >> 2] = 0;
 while (1) {
  i1 = HEAP32[44066] | 0;
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[44067] | 0)) break;
  _free(HEAP32[i1 + (HEAP32[i2 >> 2] << 2) >> 2] | 0);
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 _free(i1);
 HEAP32[44067] = 0;
 STACKTOP = i3;
 return;
}

function _ma_src_config_init_new(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i2 = i1;
 i1 = i2;
 i4 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = i3;
 i4 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 STACKTOP = i5;
 return;
}

function _ma_context_config_init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i2 = i1;
 i1 = i2;
 i4 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 i1 = i3;
 i4 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 STACKTOP = i5;
 return;
}

function _stbi__bit_reverse(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 if ((HEAP32[i1 >> 2] | 0) <= 16) {
  i4 = _stbi__bitreverse16(HEAP32[i4 >> 2] | 0) | 0;
  STACKTOP = i5;
  return i4 >> 16 - (HEAP32[i1 >> 2] | 0) | 0;
 } else ___assert_fail(54413, 53449, 3882, 54424);
 return 0;
}

function _stbi__compute_y_16(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i5 + 8 | 0;
 i6 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i5 >> 2] = i1;
 STACKTOP = i4;
 return ((HEAP32[i7 >> 2] | 0) * 77 | 0) + ((HEAP32[i6 >> 2] | 0) * 150 | 0) + ((HEAP32[i5 >> 2] | 0) * 29 | 0) >> 8 & 65535 | 0;
}

function _stbir__get_ring_buffer_entry(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i5 + 8 | 0;
 i6 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 >> 2] = i3;
 i5 = (HEAP32[i7 >> 2] | 0) + ((Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) << 2) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _UpdateGestures() {
 var d1 = 0.0;
 if (((HEAP32[44018] | 0) == 1 | (HEAP32[44018] | 0) == 2) & (HEAP32[44019] | 0) < 2) {
  HEAP32[44018] = 4;
  +_GetCurrentTime();
 }
 d1 = +_GetCurrentTime();
 if (d1 - +HEAPF64[21922] > 300.0 & (HEAP32[44018] | 0) == 8 & (HEAP32[44019] | 0) < 2) {
  HEAP32[44018] = 4;
  +_GetCurrentTime();
  HEAP8[177213] = 1;
 }
 if (!((HEAP32[44018] | 0) == 16 | (HEAP32[44018] | 0) == 64 | (HEAP32[44018] | 0) == 32 | (HEAP32[44018] | 0) == 128)) return;
 HEAP32[44018] = 0;
 return;
}

function _stbi__compute_y(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i5 + 8 | 0;
 i6 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i5 >> 2] = i1;
 STACKTOP = i4;
 return ((HEAP32[i7 >> 2] | 0) * 77 | 0) + ((HEAP32[i6 >> 2] | 0) * 150 | 0) + ((HEAP32[i5 >> 2] | 0) * 29 | 0) >> 8 & 255 | 0;
}

function _drmp3__on_seek_stdio(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i5 + 8 | 0;
 i6 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i5 = (_fseek(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0, (HEAP32[i5 >> 2] | 0) == 1 ? 1 : 0) | 0) == 0 & 1;
 STACKTOP = i4;
 return i5 | 0;
}

function _ma_event_uninit__posix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 32 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 + 28 | 0) | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 16 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 | 0) | 0;
 STACKTOP = i2;
 return;
}

function _check_scatter(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = i4 + 100 | 0;
 i2 = i1 + 60 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = 0;
 i3 = 0;
 do {
  i2 = 0;
  do {
   if ((HEAP32[i4 + 40 + (i3 * 20 | 0) + (i2 << 2) >> 2] | 0) == 10) {
    HEAP32[i4 + 100 + (i3 * 20 | 0) + (i2 << 2) >> 2] = 1;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 5);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 3);
 return (i1 | 0) > 4 | 0;
}

function _jar_xm_key_off(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 HEAP8[(HEAP32[i1 >> 2] | 0) + 50 >> 0] = 0;
 if (HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0) if (HEAP8[(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0) + 122 + 52 >> 0] & 1) {
  STACKTOP = i3;
  return;
 }
 _jar_xm_cut_note(HEAP32[i1 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _TextIsEqual(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i4 + 4 | 0;
 i5 = i4;
 i4 = i4 + 8 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP8[i4 >> 0] = 0;
 i2 = (_strcmp(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) == 0;
 HEAP8[i4 >> 0] = i2 ? 1 : 0;
 STACKTOP = i3;
 return HEAP8[i4 >> 0] & 1 | 0;
}

function _drmp3_uninit(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 6696 >> 2] | 0) == 12) _fclose(HEAP32[(HEAP32[i1 >> 2] | 0) + 6704 >> 2] | 0) | 0;
 _drmp3_free(HEAP32[(HEAP32[i1 >> 2] | 0) + 21152 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _stbtt_InitFont(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i5 + 8 | 0;
 i6 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 >> 2] = i3;
 i5 = _stbtt_InitFont_internal(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _store_int_263(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 L1 : do if (i3 | 0) switch (i4 | 0) {
 case -2:
  {
   HEAP8[i3 >> 0] = i1;
   break L1;
  }
 case -1:
  {
   HEAP16[i3 >> 1] = i1;
   break L1;
  }
 case 0:
  {
   HEAP32[i3 >> 2] = i1;
   break L1;
  }
 case 1:
  {
   HEAP32[i3 >> 2] = i1;
   break L1;
  }
 case 3:
  {
   i4 = i3;
   HEAP32[i4 >> 2] = i1;
   HEAP32[i4 + 4 >> 2] = i2;
   break L1;
  }
 default:
  break L1;
 } while (0);
 return;
}

function _sbrk(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = _emscripten_get_sbrk_ptr() | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = i2 + (i1 + 3 & -4) | 0;
 if ((i1 | 0) < 0) {
  i3 = ___errno_location() | 0;
  HEAP32[i3 >> 2] = 48;
  i3 = -1;
  return i3 | 0;
 }
 if (i1 >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap(i1 | 0) | 0)) {
  i3 = ___errno_location() | 0;
  HEAP32[i3 >> 2] = 48;
  i3 = -1;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = i1;
 i3 = i2;
 return i3 | 0;
}

function _stbir__get_total_horizontal_coefficients(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 152 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 i3 = Math_imul(i1, _stbir__get_coefficient_width(HEAP32[i3 + 80 >> 2] | 0, Math_fround(HEAPF32[i3 + 56 >> 2])) | 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _IsMouseButtonPressed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 i3 = i4 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP8[i3 >> 0] = 0;
 if ((HEAP8[177215 + (HEAP32[i2 >> 2] | 0) >> 0] | 0) != (HEAP8[177218 + (HEAP32[i2 >> 2] | 0) >> 0] | 0)) if ((HEAP8[177215 + (HEAP32[i2 >> 2] | 0) >> 0] | 0) == 1) HEAP8[i3 >> 0] = 1;
 STACKTOP = i4;
 return HEAP8[i3 >> 0] & 1 | 0;
}

function _stbir__get_total_vertical_coefficients(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 156 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 i3 = Math_imul(i1, _stbir__get_coefficient_width(HEAP32[i3 + 84 >> 2] | 0, Math_fround(HEAPF32[i3 + 60 >> 2])) | 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _drmp3__on_read_stdio(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i5 >> 2] = i1;
 i5 = _fread(HEAP32[i7 >> 2] | 0, 1, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _IsMouseButtonReleased(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 i3 = i4 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP8[i3 >> 0] = 0;
 if ((HEAP8[177215 + (HEAP32[i2 >> 2] | 0) >> 0] | 0) != (HEAP8[177218 + (HEAP32[i2 >> 2] | 0) >> 0] | 0)) if (!(HEAP8[177215 + (HEAP32[i2 >> 2] | 0) >> 0] | 0)) HEAP8[i3 >> 0] = 1;
 STACKTOP = i4;
 return HEAP8[i3 >> 0] & 1 | 0;
}

function _stbi__stdio_read(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i5 = _fread(HEAP32[i7 >> 2] | 0, 1, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _jar_xm_post_pattern_change(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 348 >> 0] | 0) < (HEAPU16[(HEAP32[i1 >> 2] | 0) + 4 + 42 >> 1] | 0)) {
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP8[i2 + 348 >> 0] = HEAP16[i2 + 4 + 44 >> 1];
 STACKTOP = i3;
 return;
}

function _drmp3_hdr_bitrate_kbps(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 i2 = HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 return HEAPU8[22944 + ((((i2 & 8 | 0) != 0 ^ 1 ^ 1) & 1) * 45 | 0) + (((i2 >> 1 & 3) - 1 | 0) * 15 | 0) + (HEAPU8[i3 + 2 >> 0] >> 4) >> 0] << 1 | 0;
}

function _drmp3_hdr_sample_rate_hz(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] | 0;
 return (HEAP32[31492 + ((HEAPU8[i2 + 2 >> 0] >> 2 & 3) << 2) >> 2] | 0) >>> (((i3 & 8 | 0) != 0 ^ 1) & 1) >>> (((i3 & 16 | 0) != 0 ^ 1) & 1) | 0;
}

function _arg_n_262(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  i3 = (HEAP32[i4 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 >> 2] = i3 + 4;
  if (i2 >>> 0 > 1) i2 = i2 + -1 | 0; else break;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _EmscriptenGamepadCallback(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i5 + 4 | 0;
 HEAP32[i5 + 8 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i4;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 1296 >> 2] | 0) if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 1300 >> 2] | 0) < 4) {
  STACKTOP = i5;
  return 0;
 }
 STACKTOP = i5;
 return 0;
}

function _printReel(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i5;
 i1 = 0;
 do {
  i2 = 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i3 + (i1 * 20 | 0) + (i2 << 2) >> 2];
   _printf(31880, i4) | 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 5);
  _puts(59254) | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 3);
 _puts(31825) | 0;
 STACKTOP = i5;
 return;
}

function _stbtt__sort_edges(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i4 >> 2] = i1;
 _stbtt__sort_edges_quicksort(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 _stbtt__sort_edges_ins_sort(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _stb_vorbis_stream_length_in_seconds(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, f4 = f0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 f4 = Math_fround((_stb_vorbis_stream_length_in_samples(HEAP32[i3 >> 2] | 0) | 0) >>> 0);
 f4 = Math_fround(f4 / Math_fround((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) >>> 0));
 STACKTOP = i2;
 return Math_fround(f4);
}

function _drmp3_hdr_frame_samples(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (((HEAPU8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] | 0) & 6 | 0) == 6) {
  i2 = 384;
  STACKTOP = i3;
  return i2 | 0;
 }
 i2 = 1152 >> (((HEAPU8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] | 0) & 14 | 0) == 2 & 1);
 STACKTOP = i3;
 return i2 | 0;
}

function _WindowSizeCallback(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i4 + 4 | 0;
 i5 = i4;
 HEAP32[i4 + 8 >> 2] = i3;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i5 >> 2] = i1;
 _SetupViewport(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 HEAP32[44040] = HEAP32[i6 >> 2];
 HEAP32[44041] = HEAP32[i5 >> 2];
 STACKTOP = i4;
 return;
}

function _IsMusicPlaying(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i1 + 16 | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i3 = _IsAudioStreamPlaying(i3) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _jar_xm_linear_frequency(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i3 >> 2] = f1;
 f1 = Math_fround(Math_fround(+Math_pow(2.0, +Math_fround(Math_fround(Math_fround(4608.0) - Math_fround(HEAPF32[i3 >> 2])) / Math_fround(768.0)))) * Math_fround(8363.0));
 STACKTOP = i2;
 return Math_fround(f1);
}

function _stbir__get_filter_pixel_margin(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAPF32[i4 >> 2] = f2;
 i4 = (_stbir__get_filter_pixel_width(HEAP32[i5 >> 2] | 0, Math_fround(HEAPF32[i4 >> 2])) | 0) / 2 | 0;
 STACKTOP = i3;
 return i4 | 0;
}

function ___towrite(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 74 | 0;
 i3 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i3 + 255 | i3;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 8)) {
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  i1 = HEAP32[i2 + 44 >> 2] | 0;
  HEAP32[i2 + 28 >> 2] = i1;
  HEAP32[i2 + 20 >> 2] = i1;
  HEAP32[i2 + 16 >> 2] = i1 + (HEAP32[i2 + 48 >> 2] | 0);
  i1 = 0;
 } else {
  HEAP32[i2 >> 2] = i1 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function _ma_context_uninit__webaudio(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) ___assert_fail(37253, 36381, 25375, 42802);
 if ((HEAP32[HEAP32[i1 >> 2] >> 2] | 0) == 12) {
  STACKTOP = i3;
  return 0;
 } else ___assert_fail(42830, 36381, 25376, 42802);
 return 0;
}

function _drmp3_decode_next_frame(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (HEAP32[i1 >> 2] | 0) {
  i2 = HEAP32[i1 >> 2] | 0;
  i2 = _drmp3_decode_next_frame_ex(i2 | 0, i2 + 6724 | 0, 0) | 0;
  STACKTOP = i3;
  return i2 | 0;
 } else ___assert_fail(48609, 48387, 2815, 48669);
 return 0;
}

function _InitAudioBufferPool() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) >= 16) break;
  i3 = _InitAudioBuffer(5, 2, 44100, 0, 0) | 0;
  HEAP32[167616 + (HEAP32[i1 >> 2] << 2) >> 2] = i3;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return;
}

function _stbtt__hheap_free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i3;
 return;
}

function _stbi__get16be(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = (_stbi__get8(HEAP32[i4 >> 2] | 0) | 0) & 255;
 HEAP32[i3 >> 2] = i1;
 i3 = HEAP32[i3 >> 2] << 8;
 i3 = i3 + ((_stbi__get8(HEAP32[i4 >> 2] | 0) | 0) & 255) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _ma_rb_uninit(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP8[(HEAP32[i1 >> 2] | 0) + 24 >> 0] & 1)) {
  STACKTOP = i3;
  return;
 }
 _ma_aligned_free(HEAP32[HEAP32[i1 >> 2] >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ma_calculate_buffer_size_in_frames_from_milliseconds(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 i4 = Math_imul(HEAP32[i5 >> 2] | 0, ((HEAP32[i4 >> 2] | 0) >>> 0) / 1e3 | 0) | 0;
 STACKTOP = i3;
 return i4 | 0;
}

function _stbiw__fopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i4 + 8 | 0;
 i5 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _fopen(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = i2;
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _OnLog(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 i6 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i6 + 4 | 0;
 HEAP32[i6 + 16 >> 2] = i3;
 HEAP32[i6 + 12 >> 2] = i4;
 HEAP32[i6 + 8 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 _TraceLog(5, HEAP32[i7 >> 2] | 0, i6);
 STACKTOP = i5;
 return;
}

function _drmp3_hdr_padding(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!((HEAPU8[(HEAP32[i1 >> 2] | 0) + 2 >> 0] | 0) & 2)) {
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i2 = ((HEAPU8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] | 0) & 6 | 0) == 6 ? 4 : 1;
 STACKTOP = i3;
 return i2 | 0;
}

function _strncat(i6, i3, i2) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i1 = i6 + (_strlen(i6) | 0) | 0;
 L1 : do if (i2) {
  i5 = i3;
  while (1) {
   i3 = HEAP8[i5 >> 0] | 0;
   if (!(i3 << 24 >> 24)) break L1;
   i2 = i2 + -1 | 0;
   i4 = i1 + 1 | 0;
   HEAP8[i1 >> 0] = i3;
   if (!i2) {
    i1 = i4;
    break;
   } else {
    i1 = i4;
    i5 = i5 + 1 | 0;
   }
  }
 } while (0);
 HEAP8[i1 >> 0] = 0;
 return i6 | 0;
}

function _stbv_crc32_update(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i4 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP8[i4 >> 0] = i1;
 STACKTOP = i3;
 return HEAP32[i5 >> 2] << 8 ^ HEAP32[166592 + (((HEAPU8[i4 >> 0] | 0) ^ (HEAP32[i5 >> 2] | 0) >>> 24) << 2) >> 2] | 0;
}

function _vsscanf(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 _memset(i5 | 0, 0, 144) | 0;
 HEAP32[i5 + 32 >> 2] = 15;
 HEAP32[i5 + 44 >> 2] = i3;
 HEAP32[i5 + 76 >> 2] = -1;
 HEAP32[i5 + 84 >> 2] = i3;
 i5 = _vfscanf(i5, i2, i1) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _stbi__get32be(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = _stbi__get16be(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 i3 = HEAP32[i3 >> 2] << 16;
 i3 = i3 + (_stbi__get16be(HEAP32[i4 >> 2] | 0) | 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _CharCallback(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 if ((HEAP32[44069] | 0) >= 16) {
  STACKTOP = i4;
  return;
 }
 HEAP32[165376 + (HEAP32[44069] << 2) >> 2] = HEAP32[i2 >> 2];
 HEAP32[44069] = (HEAP32[44069] | 0) + 1;
 STACKTOP = i4;
 return;
}

function _ma_mutex_unlock(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[HEAP32[i1 >> 2] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _ma_mutex_unlock__posix(HEAP32[i1 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ma_mutex_uninit(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[HEAP32[i1 >> 2] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _ma_mutex_uninit__posix(HEAP32[i1 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ma_event_uninit(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[HEAP32[i1 >> 2] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _ma_event_uninit__posix(HEAP32[i1 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function ___string_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i2 + 84 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = i3 + 256 | 0;
 i5 = _memchr(i6, 0, i7) | 0;
 i5 = (i5 | 0) == 0 ? i7 : i5 - i6 | 0;
 i3 = i5 >>> 0 < i3 >>> 0 ? i5 : i3;
 _memcpy(i1 | 0, i6 | 0, i3 | 0) | 0;
 HEAP32[i2 + 4 >> 2] = i6 + i3;
 i1 = i6 + i5 | 0;
 HEAP32[i2 + 8 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 return i3 | 0;
}

function _ErrorCallback(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i1;
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i4 + 4 >> 2] = i2;
 _TraceLog(4, 36284, i4);
 STACKTOP = i3;
 return;
}

function ___fmodeflags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = (_strchr(i1, 43) | 0) == 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i2 = i2 << 24 >> 24 | 0;
 i3 = i3 ? (i2 | 0) != 114 & 1 : 2;
 i4 = (_strchr(i1, 120) | 0) == 0;
 i3 = i4 ? i3 : i3 | 128;
 i1 = (_strchr(i1, 101) | 0) == 0;
 i1 = i1 ? i3 : i3 | 524288;
 i1 = (i2 | 0) == 114 ? i1 : i1 | 64;
 i1 = (i2 | 0) == 119 ? i1 | 512 : i1;
 return ((i2 | 0) == 97 ? i1 | 1024 : i1) | 0;
}

function _stbv_setup_free(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i1 >> 2] = i3;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 80 >> 2] | 0) {
  STACKTOP = i4;
  return;
 }
 _free(HEAP32[i1 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _rlVertex2f(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i3 + 4 | 0;
 i4 = i3;
 HEAPF32[i5 >> 2] = f1;
 HEAPF32[i4 >> 2] = f2;
 f1 = Math_fround(HEAPF32[i5 >> 2]);
 f2 = Math_fround(HEAPF32[i4 >> 2]);
 _rlVertex3f(f1, f2, Math_fround(HEAPF32[7869]));
 STACKTOP = i3;
 return;
}

function _ma_mutex_lock(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[HEAP32[i1 >> 2] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _ma_mutex_lock__posix(HEAP32[i1 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _stbtt__buf_skip(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 _stbtt__buf_seek(i2 | 0, (HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0);
 STACKTOP = i3;
 return;
}

function _stbv_get8_packet(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = _stbv_get8_packet_raw(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 1396 >> 2] = 0;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _memcmp(i1, i5, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 L1 : do if (!i2) i1 = 0; else {
  while (1) {
   i3 = HEAP8[i1 >> 0] | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (i3 << 24 >> 24 != i4 << 24 >> 24) break;
   i2 = i2 + -1 | 0;
   if (!i2) {
    i1 = 0;
    break L1;
   } else {
    i1 = i1 + 1 | 0;
    i5 = i5 + 1 | 0;
   }
  }
  i1 = (i3 & 255) - (i4 & 255) | 0;
 } while (0);
 return i1 | 0;
}

function _rlCheckBufferLimit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i2;
 i3 = i2 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP8[i3 >> 0] = 0;
 HEAP8[i3 >> 0] = ((HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0) >= 8192 ? 1 : 0;
 STACKTOP = i2;
 return HEAP8[i3 >> 0] & 1 | 0;
}

function _stb_vorbis_close(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _stbv_vorbis_deinit(HEAP32[i1 >> 2] | 0);
 i2 = HEAP32[i1 >> 2] | 0;
 _stbv_setup_free(i2 | 0, i2 | 0);
 STACKTOP = i3;
 return;
}

function _ttULONG(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 STACKTOP = i2;
 i3 = HEAP32[i4 >> 2] | 0;
 return (HEAPU8[HEAP32[i4 >> 2] >> 0] << 24) + (HEAPU8[i3 + 1 >> 0] << 16) + (HEAPU8[i3 + 2 >> 0] << 8) + (HEAPU8[i3 + 3 >> 0] | 0) | 0;
}

function _fwrite(i2, i5, i1, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i6 = 0;
 i4 = Math_imul(i1, i5) | 0;
 i1 = (i5 | 0) == 0 ? 0 : i1;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i6 = (___lockfile(i3) | 0) == 0;
  i2 = ___fwritex(i2, i4, i3) | 0;
  if (!i6) ___unlockfile(i3);
 } else i2 = ___fwritex(i2, i4, i3) | 0;
 if ((i2 | 0) != (i4 | 0)) i1 = (i2 >>> 0) / (i5 >>> 0) | 0;
 return i1 | 0;
}

function _GifEnd() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i2;
 if (HEAP32[44038] | 0) {
  _fputc(59, HEAP32[44038] | 0) | 0;
  _fclose(HEAP32[44038] | 0) | 0;
  _free(HEAP32[43877] | 0);
  HEAP32[44038] = 0;
  HEAP32[43877] = 0;
  HEAP8[i1 >> 0] = 1;
 } else HEAP8[i1 >> 0] = 0;
 STACKTOP = i2;
 return HEAP8[i1 >> 0] & 1 | 0;
}

function _stbi__png_test(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = _stbi__check_png_header(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 _stbi__rewind(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _stbir__min(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 STACKTOP = i3;
 i3 = HEAP32[i5 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 return ((i3 | 0) < (i4 | 0) ? i3 | 0 : i4 | 0) | 0;
}

function _stbir__get_decode_buffer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i3 = HEAP32[i3 >> 2] | 0;
 i3 = (HEAP32[i3 + 120 >> 2] | 0) + ((Math_imul(HEAP32[i3 + 144 >> 2] | 0, HEAP32[i3 + 64 >> 2] | 0) | 0) << 2) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _ma_device_config_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i5 = i4 + 160 | 0;
 HEAP32[i5 >> 2] = i2;
 _memset(i4 | 0, 0, 160) | 0;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 _memcpy(i1 | 0, i4 | 0, 160) | 0;
 STACKTOP = i3;
 return;
}

function _ma_context_uninit_backend_apis(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = _ma_context_uninit_backend_apis__nix(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _ma_rand_s32() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = HEAP32[7871];
 HEAP32[i2 >> 2] = (((HEAP32[i3 >> 2] | 0) * 48271 | 0) + 0 | 0) % 2147483647 | 0;
 HEAP32[7871] = HEAP32[i2 >> 2];
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _ma_context_init_backend_apis(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = _ma_context_init_backend_apis__nix(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _jar_xm_set_max_loop_count(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i4 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP8[i4 >> 0] = i2;
 HEAP8[(HEAP32[i5 >> 2] | 0) + 381 >> 0] = HEAP8[i4 >> 0] | 0;
 STACKTOP = i3;
 return;
}

function _UnloadTexture(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if ((HEAP32[i2 >> 2] | 0) >>> 0 <= 0) {
  STACKTOP = i3;
  return;
 }
 _rlDeleteTextures(HEAP32[i2 >> 2] | 0);
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 _TraceLog(3, 58273, i1);
 STACKTOP = i3;
 return;
}

function _stbi__rewind(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 168 >> 2] = HEAP32[i1 + 176 >> 2];
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 + 172 >> 2] = HEAP32[i3 + 180 >> 2];
 STACKTOP = i2;
 return;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 & 65535;
 i5 = i2 & 65535;
 i3 = Math_imul(i5, i6) | 0;
 i4 = i1 >>> 16;
 i1 = (i3 >>> 16) + (Math_imul(i5, i4) | 0) | 0;
 i5 = i2 >>> 16;
 i2 = Math_imul(i5, i6) | 0;
 return (setTempRet0((i1 >>> 16) + (Math_imul(i5, i4) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0), i1 + i2 << 16 | i3 & 65535 | 0) | 0;
}

function _stbi__start_file(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i4 >> 2] = i1;
 _stbi__start_callbacks(HEAP32[i5 >> 2] | 0, 31512, HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ma_thread_wait__posix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 FUNCTION_TABLE_iii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 8 >> 2] & 15](HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return;
}

function _copysign(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | i3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = i4;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _strcmp(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP8[i3 >> 0] | 0;
 i2 = HEAP8[i4 >> 0] | 0;
 if (!(i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i2 << 24 >> 24)) do {
  i3 = i3 + 1 | 0;
  i4 = i4 + 1 | 0;
  i1 = HEAP8[i3 >> 0] | 0;
  i2 = HEAP8[i4 >> 0] | 0;
 } while (!(i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i2 << 24 >> 24));
 return (i1 & 255) - (i2 & 255) | 0;
}

function _jar_xm_linear_period(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i3 >> 2] = f1;
 f1 = Math_fround(Math_fround(7680.0) - Math_fround(Math_fround(HEAPF32[i3 >> 2]) * Math_fround(64.0)));
 STACKTOP = i2;
 return Math_fround(f1);
}

function ___uflow(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(___toread(i2) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[i2 + 32 >> 2] & 15](i2, i1, 1) | 0) == 1) i1 = HEAPU8[i1 >> 0] | 0; else i1 = -1; else i1 = -1;
 STACKTOP = i3;
 return i1 | 0;
}

function _stbv_vorbis_alloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = _stbv_setup_malloc(HEAP32[i4 >> 2] | 0, 1512) | 0;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _rlLoadIdentity() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i3 = i2;
 i1 = HEAP32[43894] | 0;
 _MatrixIdentity(i3);
 i4 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  i1 = i1 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 STACKTOP = i2;
 return;
}

function _ma_mutex_unlock__posix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 24 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 | 0) | 0;
 STACKTOP = i2;
 return;
}

function _ma_mutex_uninit__posix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 16 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 | 0) | 0;
 STACKTOP = i2;
 return;
}

function _stbi__stdio_skip(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i4 >> 2] = i1;
 _fseek(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0, 1) | 0;
 STACKTOP = i3;
 return;
}

function _rlMatrixMode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 HEAP32[i2 >> 2] = i1;
 if ((HEAP32[i2 >> 2] | 0) == 5889) HEAP32[43894] = 175512; else if ((HEAP32[i2 >> 2] | 0) == 5888) HEAP32[43894] = 175580;
 HEAP32[7868] = HEAP32[i2 >> 2];
 STACKTOP = i3;
 return;
}

function _stbir__get_contributor(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 STACKTOP = i3;
 return (HEAP32[i5 >> 2] | 0) + (HEAP32[i4 >> 2] << 3) | 0;
}

function _ma_mutex_lock__posix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 140 + 20 >> 2] & 31]((HEAP32[i3 >> 2] | 0) + 4 | 0) | 0;
 STACKTOP = i2;
 return;
}

function _shl(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = i5 + 4 | 0;
 if (i1 >>> 0 > 31) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i4 >> 2] = i2;
  HEAP32[i5 >> 2] = 0;
  i3 = 0;
  i1 = i1 + -32 | 0;
 } else {
  i2 = HEAP32[i4 >> 2] | 0;
  i3 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i3 >>> (32 - i1 | 0) | i2 << i1;
 HEAP32[i5 >> 2] = i3 << i1;
 return;
}

function _memmove(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i4 | 0) < (i1 | 0) & (i1 | 0) < (i4 + i2 | 0)) {
  i3 = i1;
  i4 = i4 + i2 | 0;
  i1 = i1 + i2 | 0;
  while ((i2 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i4 = i4 - 1 | 0;
   i2 = i2 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  }
  i1 = i3;
 } else _memcpy(i1, i4, i2) | 0;
 return i1 | 0;
}

function _shr(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = i5 + 4 | 0;
 if (i1 >>> 0 > 31) {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i5 >> 2] = i2;
  HEAP32[i4 >> 2] = 0;
  i3 = 0;
  i1 = i1 + -32 | 0;
 } else {
  i2 = HEAP32[i5 >> 2] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
 }
 HEAP32[i5 >> 2] = i3 << 32 - i1 | i2 >>> i1;
 HEAP32[i4 >> 2] = i3 >>> i1;
 return;
}

function _stbv_square(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i3 >> 2] = f1;
 f1 = Math_fround(HEAPF32[i3 >> 2]);
 f1 = Math_fround(f1 * Math_fround(HEAPF32[i3 >> 2]));
 STACKTOP = i2;
 return Math_fround(f1);
}

function _SetAudioStreamVolume(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i4 >> 2] = f2;
 _SetAudioBufferVolume(HEAP32[i1 + 12 >> 2] | 0, Math_fround(HEAPF32[i4 >> 2]));
 STACKTOP = i3;
 return;
}

function _rand() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = 175432;
 i2 = ___muldi3(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, 1284865837, 1481765933) | 0;
 i2 = _i64Add(i2 | 0, getTempRet0() | 0, 1, 0) | 0;
 i1 = getTempRet0() | 0;
 i3 = 175432;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i3 + 4 >> 2] = i1;
 i1 = _bitshift64Lshr(i2 | 0, i1 | 0, 33) | 0;
 getTempRet0() | 0;
 return i1 | 0;
}

function _stbir__use_height_upsampling(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i3 = _stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 60 >> 2])) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _stbtt__cff_index_count(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 _stbtt__buf_seek(HEAP32[i3 >> 2] | 0, 0);
 i3 = _stbtt__buf_get(HEAP32[i3 >> 2] | 0, 2) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _stbir__use_width_upsampling(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i3 = _stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[i3 >> 2] | 0) + 56 >> 2])) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _ma_thread_wait(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _ma_thread_wait__posix(HEAP32[i1 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _calloc(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (!i3) i2 = 0; else {
  i2 = Math_imul(i1, i3) | 0;
  if ((i1 | i3) >>> 0 > 65535) i2 = ((i2 >>> 0) / (i3 >>> 0) | 0 | 0) == (i1 | 0) ? i2 : -1;
 }
 i1 = _malloc(i2) | 0;
 if (!i1) return i1 | 0;
 if (!(HEAP32[i1 + -4 >> 2] & 3)) return i1 | 0;
 _memset(i1 | 0, 0, i2 | 0) | 0;
 return i1 | 0;
}

function _CloseWindow() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (HEAP8[177221] & 1) {
  _GifEnd() | 0;
  HEAP8[177221] = 0;
 }
 _UnloadFontDefault();
 _rlglClose();
 _glfwDestroyWindow(HEAP32[44037] | 0);
 _glfwTerminate();
 _TraceLog(3, 36322, i1);
 STACKTOP = i1;
 return;
}

function _ma_pcm_rb_uninit(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _ma_rb_uninit(HEAP32[i1 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _rlglClose() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 _UnloadShaderDefault();
 _UnloadBuffersDefault();
 _glDeleteTextures(1, 175724);
 HEAP32[i2 >> 2] = HEAP32[43931];
 _TraceLog(3, 35406, i2);
 _free(HEAP32[43928] | 0);
 STACKTOP = i1;
 return;
}

function _ScrollCallback(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4;
 HEAP32[i4 + 16 >> 2] = i1;
 HEAPF64[i4 + 8 >> 3] = d2;
 HEAPF64[i5 >> 3] = d3;
 HEAP32[44068] = ~~+HEAPF64[i5 >> 3];
 STACKTOP = i4;
 return;
}

function _ttUSHORT(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0) << 8) + (HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] | 0) & 65535 | 0;
}

function _ttSHORT(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0) << 8) + (HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] | 0) & 65535 | 0;
}

function ___unlist_locked_file(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (HEAP32[i1 + 68 >> 2] | 0) {
  i2 = HEAP32[i1 + 132 >> 2] | 0;
  i1 = i1 + 128 | 0;
  if (i2 | 0) HEAP32[i2 + 128 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) i1 = (___pthread_self_124() | 0) + 220 | 0; else i1 = i1 + 132 | 0;
  HEAP32[i1 >> 2] = i2;
 }
 return;
}

function _fmt_x(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 if (!((i2 | 0) == 0 & (i3 | 0) == 0)) do {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = HEAPU8[30512 + (i2 & 15) >> 0] | 0 | i4;
  i2 = _bitshift64Lshr(i2 | 0, i3 | 0, 4) | 0;
  i3 = getTempRet0() | 0;
 } while (!((i2 | 0) == 0 & (i3 | 0) == 0));
 return i1 | 0;
}

function _stbir__use_upsampling(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i3 >> 2] = f1;
 i3 = Math_fround(HEAPF32[i3 >> 2]) > Math_fround(1.0) & 1;
 STACKTOP = i2;
 return i3 | 0;
}

function _getint(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if (!(_isdigit(HEAP8[HEAP32[i2 >> 2] >> 0] | 0) | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i3 = HEAP32[i2 >> 2] | 0;
   i1 = (i1 * 10 | 0) + -48 + (HEAP8[i3 >> 0] | 0) | 0;
   i3 = i3 + 1 | 0;
   HEAP32[i2 >> 2] = i3;
  } while ((_isdigit(HEAP8[i3 >> 0] | 0) | 0) != 0);
 }
 return i1 | 0;
}

function ___ftello(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i4 = (___lockfile(i3) | 0) == 0;
  i1 = ___ftello_unlocked(i3) | 0;
  i2 = getTempRet0() | 0;
  if (!i4) ___unlockfile(i3);
 } else {
  i1 = ___ftello_unlocked(i3) | 0;
  i2 = getTempRet0() | 0;
 }
 setTempRet0(i2 | 0);
 return i1 | 0;
}

function ___memrchr(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 L1 : do if (!i3) i1 = 0; else {
  i2 = i1 & 255;
  i1 = i3;
  while (1) {
   i1 = i1 + -1 | 0;
   if ((HEAP8[i4 + i1 >> 0] | 0) == i2 << 24 >> 24) break;
   if (!i1) {
    i1 = 0;
    break L1;
   }
  }
  i1 = i4 + i1 | 0;
 } while (0);
 return i1 | 0;
}

function _rewind(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i2 = (___lockfile(i1) | 0) == 0;
  ___fseeko_unlocked(i1, 0, 0, 0) | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -33;
  if (!i2) ___unlockfile(i1);
 } else {
  ___fseeko_unlocked(i1, 0, 0, 0) | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -33;
 }
 return;
}

function _ma_src__build_sinc_table__rectangular(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 _ma_src__build_sinc_table__sinc(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _rlDeleteTextures(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 HEAP32[i2 >> 2] = i1;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 <= 0) {
  STACKTOP = i3;
  return;
 }
 _glDeleteTextures(1, i2 | 0);
 STACKTOP = i3;
 return;
}

function _stbv_vorbis_validate(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i3 = (_memcmp(HEAP32[i3 >> 2] | 0, 48061, 6) | 0) == 0 & 1;
 STACKTOP = i2;
 return i3 | 0;
}

function _stbv_flush_packet(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 i1 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 >> 2] = i2;
 do {} while ((_stbv_get8_packet_raw(HEAP32[i1 >> 2] | 0) | 0) != -1);
 STACKTOP = i3;
 return;
}

function _rlNormal3f(f1, f2, f3) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i4 + 8 >> 2] = f1;
 HEAPF32[i4 + 4 >> 2] = f2;
 HEAPF32[i4 >> 2] = f3;
 STACKTOP = i4;
 return;
}

function _sprintf(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i5 >> 2] = i3;
 i5 = _vsprintf(i2, i1, i5) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _fprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i5 >> 2] = i3;
 i5 = _vfprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _sscanf(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i5 >> 2] = i3;
 i5 = _vsscanf(i2, i1, i5) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _ma_context_is_backend_asynchronous(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP8[(HEAP32[i3 >> 2] | 0) + 96 >> 0] & 1 | 0;
}

function _printf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i4 >> 2] = i2;
 i4 = _vfprintf(HEAP32[7883] | 0, i1, i4) | 0;
 STACKTOP = i3;
 return i4 | 0;
}

function ___fseeko(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) {
  i5 = (___lockfile(i4) | 0) == 0;
  i1 = ___fseeko_unlocked(i4, i1, i2, i3) | 0;
  if (!i5) ___unlockfile(i4);
 } else i1 = ___fseeko_unlocked(i4, i1, i2, i3) | 0;
 return i1 | 0;
}

function _jar_xm_get_number_of_channels(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP16[(HEAP32[i3 >> 2] | 0) + 4 + 46 >> 1] | 0;
}

function _jar_xm_cut_note(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 HEAPF32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = Math_fround(0.0);
 STACKTOP = i2;
 return;
}

function _UnloadWave(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (HEAP32[i1 + 16 >> 2] | 0) _free(HEAP32[i1 + 16 >> 2] | 0);
 _TraceLog(3, 50791, i3);
 STACKTOP = i2;
 return;
}

function _sn_write(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = i1 + 20 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i1 = i1 >>> 0 > i2 >>> 0 ? i2 : i1;
 _memcpy(i5 | 0, i3 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return i2 | 0;
}

function dynCall_viiiiiiiii(i10, i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 FUNCTION_TABLE_viiiiiiiii[i10 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0);
}

function _ma_aligned_free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 _ma_free(HEAP32[(HEAP32[i3 >> 2] | 0) + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _jar_xm_get_loop_count(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP8[(HEAP32[i3 >> 2] | 0) + 380 >> 0] | 0;
}

function _jar_xm_free_context(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 _free(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _stbi__stdio_eof(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i3 = _feof(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _drmp3dec_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 HEAP8[(HEAP32[i3 >> 2] | 0) + 6152 >> 0] = 0;
 STACKTOP = i2;
 return;
}

function _stbi__malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i3 = _malloc(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _ma_malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 i3 = _malloc(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _fmt_o(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if (!((i2 | 0) == 0 & (i3 | 0) == 0)) do {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i2 & 7 | 48;
  i2 = _bitshift64Lshr(i2 | 0, i3 | 0, 3) | 0;
  i3 = getTempRet0() | 0;
 } while (!((i2 | 0) == 0 & (i3 | 0) == 0));
 return i1 | 0;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i6 = i3;
 i3 = ___muldsi3(i5, i6) | 0;
 i1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul(i2, i6) | 0) + (Math_imul(i4, i5) | 0) + i1 | i1 & 0 | 0), i3 | 0 | 0) | 0;
}

function _stbir__support_zero(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i3 >> 2] = f1;
 STACKTOP = i2;
 return Math_fround(0.0);
}

function _stbir__support_two(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i3 >> 2] = f1;
 STACKTOP = i2;
 return Math_fround(2.0);
}

function _stbir__support_one(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[i3 >> 2] = f1;
 STACKTOP = i2;
 return Math_fround(1.0);
}

function _stbi__err(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 HEAP32[44152] = HEAP32[i3 >> 2];
 STACKTOP = i2;
 return 0;
}

function dynCall_viiiiiiii(i9, i1, i2, i3, i4, i5, i6, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 FUNCTION_TABLE_viiiiiiii[i9 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0);
}

function _drmp3_free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 _free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ma_context_uninit_backend_apis__nix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return 0;
}

function _UnloadShaderDefault() {
 _glUseProgram(0);
 _glDetachShader(HEAP32[44014] | 0, HEAP32[44016] | 0);
 _glDetachShader(HEAP32[44014] | 0, HEAP32[44017] | 0);
 _glDeleteShader(HEAP32[44016] | 0);
 _glDeleteShader(HEAP32[44017] | 0);
 _glDeleteProgram(HEAP32[44014] | 0);
 return;
}

function _ma_free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = STACKTOP = STACKTOP + 63 & -64;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 >> 2] = i1;
 _free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function dynCall_viffff(i6, i1, f2, f3, f4, f5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 FUNCTION_TABLE_viffff[i6 & 3](i1 | 0, Math_fround(f2), Math_fround(f3), Math_fround(f4), Math_fround(f5));
}

function _WindowIconifyCallback(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i3;
 return;
}

function _CursorEnterCallback(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i3;
 return;
}

function dynCall_viiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 FUNCTION_TABLE_viiiiiii[i8 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0);
}

function ___ofl_add(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = ___ofl_lock() | 0;
 HEAP32[i3 + 56 >> 2] = HEAP32[i2 >> 2];
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) HEAP32[i1 + 52 >> 2] = i3;
 HEAP32[i2 >> 2] = i3;
 ___ofl_unlock();
 return i3 | 0;
}

function dynCall_vffff(i5, f1, f2, f3, f4) {
 i5 = i5 | 0;
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 FUNCTION_TABLE_vffff[i5 & 3](Math_fround(f1), Math_fround(f2), Math_fround(f3), Math_fround(f4));
}

function _pntz(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _a_ctz_l_771((HEAP32[i2 >> 2] | 0) + -1 | 0) | 0;
 if (!i1) {
  i2 = _a_ctz_l_771(HEAP32[i2 + 4 >> 2] | 0) | 0;
  return ((i2 | 0) == 0 ? 0 : i2 + 32 | 0) | 0;
 } else return i1 | 0;
 return 0;
}

function _ftell(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = ___ftello(i1) | 0;
 i2 = getTempRet0() | 0;
 if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 2147483647) {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 61;
  i1 = -1;
 }
 return i1 | 0;
}

function _bitshift64Shl(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  setTempRet0(i2 << i1 | (i3 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1 | 0);
  return i3 << i1;
 }
 setTempRet0(i3 << i1 - 32 | 0);
 return 0;
}

function _GetCurrentTime() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 HEAPF64[i2 >> 3] = 0.0;
 STACKTOP = i1;
 return +(+HEAPF64[i2 >> 3]);
}

function dynCall_iidiiii(i7, i1, d2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iidiiii[i7 & 1](i1 | 0, +d2, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  setTempRet0(i2 >>> i1 | 0);
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 setTempRet0(0);
 return i2 >>> i1 - 32 | 0;
}

function dynCall_viiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 1](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function _emscripten_glVertexAttrib4f$legalf32(i1, f2, f3, f4, f5) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 _emscripten_glVertexAttrib4f(i1 | 0, +f2, +f3, +f4, +f5);
}

function dynCall_vifff(i5, i1, f2, f3, f4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 FUNCTION_TABLE_vifff[i5 & 3](i1 | 0, Math_fround(f2), Math_fround(f3), Math_fround(f4));
}

function _pop_arg_long_double(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d3 = 0.0, i4 = 0;
 i4 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
 d3 = +HEAPF64[i4 >> 3];
 HEAP32[i1 >> 2] = i4 + 8;
 HEAPF64[i2 >> 3] = d3;
 return;
}

function _SetMatrixProjection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = 175512;
 i2 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 return;
}

function _feof(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i2 = (___lockfile(i1) | 0) == 0;
  i1 = (HEAP32[i1 >> 2] | 0) >>> 4 & 1;
 } else i1 = (HEAP32[i1 >> 2] | 0) >>> 4 & 1;
 return i1 | 0;
}

function _SetMatrixModelview(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = 175580;
 i2 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 return;
}

function _emscripten_glUniform4f$legalf32(i1, f2, f3, f4, f5) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 _emscripten_glUniform4f(i1 | 0, +f2, +f3, +f4, +f5);
}

function _a_ctz_l_771(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!i2) i1 = 32; else if (!(i2 & 1)) {
  i1 = 0;
  while (1) {
   i1 = i1 + 1 | 0;
   if (!(i2 & 2)) i2 = i2 >>> 1; else break;
  }
 } else i1 = 0;
 return i1 | 0;
}

function _GetFontDefault(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = 176568;
 i3 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 return;
}

function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i2 - i4 | 0;
 i4 = (i4 | 0) - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (setTempRet0(i4 | 0), i1 - i3 >>> 0 | 0) | 0;
}

function stackAlloc(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + i2 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(i2 | 0);
 return i1 | 0;
}

function dynCall_iiiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiiii[i6 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function dynCall_viiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiiii[i6 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function b28(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 nullFunc_viiiiiiiii(28);
}

function _update_game(i1) {
 i1 = i1 | 0;
 switch (HEAP32[i1 + 12 >> 2] | 0) {
 case 2:
  {
   _bonus_update(i1);
   break;
  }
 case 1:
  {
   _game_update(i1);
   break;
  }
 default:
  {}
 }
 return;
}

function _emscripten_glVertexAttrib3f$legalf32(i1, f2, f3, f4) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 _emscripten_glVertexAttrib3f(i1 | 0, +f2, +f3, +f4);
}

function _emscripten_glClearColor$legalf32(f1, f2, f3, f4) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 _emscripten_glClearColor(+f1, +f2, +f3, +f4);
}

function _emscripten_glBlendColor$legalf32(f1, f2, f3, f4) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 _emscripten_glBlendColor(+f1, +f2, +f3, +f4);
}

function ___DOUBLE_BITS_628(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return i2 | 0;
}

function ___wasi_syscall_ret(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!(i1 << 16 >> 16)) i1 = 0; else {
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = i1 & 65535;
  i1 = -1;
 }
 return i1 | 0;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i1 + i3 >>> 0;
 return (setTempRet0(i2 + i4 + (i3 >>> 0 < i1 >>> 0 | 0) >>> 0 | 0), i3 | 0) | 0;
}

function ___DOUBLE_BITS(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return i2 | 0;
}

function _getRandomReel(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = 0;
 do {
  i3 = _rand() | 0;
  HEAP32[i2 + (i1 << 2) >> 2] = i3;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 5);
 return 1;
}

function _emscripten_glUniform3f$legalf32(i1, f2, f3, f4) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 _emscripten_glUniform3f(i1 | 0, +f2, +f3, +f4);
}

function dynCall_iiiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function _ClearBackground(i1) {
 i1 = i1 | 0;
 _rlClearColor(HEAP8[i1 >> 0] | 0, HEAP8[i1 + 1 >> 0] | 0, HEAP8[i1 + 2 >> 0] | 0, HEAP8[i1 + 3 >> 0] | 0);
 _rlClearScreenBuffers();
 return;
}

function dynCall_viff(i4, i1, f2, f3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 FUNCTION_TABLE_viff[i4 & 3](i1 | 0, Math_fround(f2), Math_fround(f3));
}

function b27(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 nullFunc_viiiiiiii(27);
}

function _main(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _srand(0);
 _InitWindow(1024, 768, 31784);
 _InitAudioDevice();
 _emscripten_set_main_loop(1, 0, 1);
 _CloseWindow();
 return 0;
}

function dynCall_viiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viiii[i5 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function dynCall_fff(i3, f1, f2) {
 i3 = i3 | 0;
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 return Math_fround(FUNCTION_TABLE_fff[i3 & 7](Math_fround(f1), Math_fround(f2)));
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (i1 >>> 0 > 4294963200) {
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = 0 - i1;
  i1 = -1;
 }
 return i1 | 0;
}

function _emscripten_glVertexAttrib2f$legalf32(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 _emscripten_glVertexAttrib2f(i1 | 0, +f2, +f3);
}

function dynCall_viif(i4, i1, i2, f3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 FUNCTION_TABLE_viif[i4 & 1](i1 | 0, i2 | 0, Math_fround(f3));
}

function b26(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 nullFunc_viiiiiii(26);
}

function b19(i1, f2, f3, f4, f5) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 nullFunc_viffff(19);
}

function dynCall_iiii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[i4 & 15](i1 | 0, i2 | 0, i3 | 0) | 0;
}

function _emscripten_glTexParameterf$legalf32(i1, i2, f3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 _emscripten_glTexParameterf(i1 | 0, i2 | 0, +f3);
}

function _rlglDraw() {
 if ((HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] | 0) <= 0) return;
 _UpdateBuffersDefault();
 _DrawBuffersDefault();
 return;
}

function _emscripten_glUniform2f$legalf32(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 _emscripten_glUniform2f(i1 | 0, +f2, +f3);
}

function dynCall_vff(i3, f1, f2) {
 i3 = i3 | 0;
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 FUNCTION_TABLE_vff[i3 & 3](Math_fround(f1), Math_fround(f2));
}

function _strchr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = ___strchrnul(i2, i1) | 0;
 return ((HEAP8[i2 >> 0] | 0) == (i1 & 255) << 24 >> 24 ? i2 : 0) | 0;
}

function _fputs(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = _strlen(i2) | 0;
 return ((_fwrite(i2, 1, i3, i1) | 0) != (i3 | 0)) << 31 >> 31 | 0;
}

function _strtol(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _strtox(i3, i2, i1, -2147483648, 0) | 0;
 getTempRet0() | 0;
 return i3 | 0;
}

function b4(i1, d2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 nullFunc_iidiiii(4);
 return 0;
}

function dynCall_viii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viii[i4 & 63](i1 | 0, i2 | 0, i3 | 0);
}

function b25(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 nullFunc_viiiiii(25);
}

function _strpbrk(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = i2 + (_strcspn(i2, i1) | 0) | 0;
 return ((HEAP8[i2 >> 0] | 0) == 0 ? 0 : i2) | 0;
}

function b12(f1, f2, f3, f4) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 nullFunc_vffff(12);
}

function _emscripten_glPolygonOffset$legalf32(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 _emscripten_glPolygonOffset(+f1, +f2);
}

function dynCall_vif(i3, i1, f2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 FUNCTION_TABLE_vif[i3 & 3](i1 | 0, Math_fround(f2));
}

function dynCall_vfi(i3, f1, i2) {
 i3 = i3 | 0;
 f1 = Math_fround(f1);
 i2 = i2 | 0;
 FUNCTION_TABLE_vfi[i3 & 1](Math_fround(f1), i2 | 0);
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function dynCall_vidd(i4, i1, d2, d3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 FUNCTION_TABLE_vidd[i4 & 3](i1 | 0, +d2, +d3);
}

function _emscripten_glVertexAttrib1f$legalf32(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 _emscripten_glVertexAttrib1f(i1 | 0, +f2);
}

function _emscripten_glSampleCoverage$legalf32(f1, i2) {
 f1 = Math_fround(f1);
 i2 = i2 | 0;
 _emscripten_glSampleCoverage(+f1, i2 | 0);
}

function _emscripten_glDepthRangef$legalf32(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 _emscripten_glDepthRangef(+f1, +f2);
}

function _out(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 if (!(HEAP32[i1 >> 2] & 32)) ___fwritex(i3, i2, i1) | 0;
 return;
}

function ___emscripten_stdout_seek(i3, i1, i2, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 setTempRet0(0);
 return 0;
}

function b8(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 nullFunc_iiiiii(8);
 return 0;
}

function b18(i1, f2, f3, f4) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 nullFunc_vifff(18);
}

function _fseek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___fseeko(i1, i2, ((i2 | 0) < 0) << 31 >> 31, i3) | 0;
}

function dynCall_iii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[i3 & 15](i1 | 0, i2 | 0) | 0;
}

function _rlDisableTexture() {
 if ((HEAP32[165328 + ((HEAP32[43930] | 0) * 48 | 0) >> 2] | 0) < 8192) return;
 _rlglDraw();
 return;
}

function dynCall_ff(i2, f1) {
 i2 = i2 | 0;
 f1 = Math_fround(f1);
 return Math_fround(FUNCTION_TABLE_ff[i2 & 7](Math_fround(f1)));
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 return (___wasi_fd_close(_dummy_268(HEAP32[i1 + 60 >> 2] | 0) | 0) | 0) & 65535 | 0;
}

function _emscripten_glUniform1f$legalf32(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 _emscripten_glUniform1f(i1 | 0, +f2);
}

function b24(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 nullFunc_viiiii(24);
}

function _vfprintf(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 return ___vfprintf_internal(i2, i3, i1, 1, 6) | 0;
}

function _srand(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = 175432;
 HEAP32[i2 >> 2] = i1 + -1;
 HEAP32[i2 + 4 >> 2] = 0;
 return;
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) i1 = 0; else i1 = _wcrtomb(i1, i2, 0) | 0;
 return i1 | 0;
}

function dynCall_vii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[i3 & 63](i1 | 0, i2 | 0);
}

function _vsprintf(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _vsnprintf(i3, 2147483647, i2, i1) | 0;
}

function _strncpy(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 ___stpncpy(i1, i3, i2) | 0;
 return i1 | 0;
}

function b7(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 nullFunc_iiiii(7);
 return 0;
}

function _strcat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _strcpy(i1 + (_strlen(i1) | 0) | 0, i2) | 0;
 return i1 | 0;
}

function _tolower(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (_isupper(i1) | 0) == 0;
 return (i2 ? i1 : i1 | 32) | 0;
}

function _strrchr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ___memrchr(i2, i1, (_strlen(i2) | 0) + 1 | 0) | 0;
}

function _mbsinit(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 1; else i1 = (HEAP32[i1 >> 2] | 0) == 0 & 1;
 return i1 | 0;
}

function _do_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return ___string_read(i2, i1, i3) | 0;
}

function dynCall_vf(i2, f1) {
 i2 = i2 | 0;
 f1 = Math_fround(f1);
 FUNCTION_TABLE_vf[i2 & 3](Math_fround(f1));
}

function _IsAudioStreamPlaying(i1) {
 i1 = i1 | 0;
 return _IsAudioBufferPlaying(HEAP32[i1 + 12 >> 2] | 0) | 0;
}

function _InitTimer() {
 var d1 = 0.0;
 _srand(_time(0) | 0);
 d1 = +_GetTime();
 HEAPF64[21924] = d1;
 return;
}

function b1(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 nullFunc_fff(1);
 return Math_fround(0);
}

function b23(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 nullFunc_viiii(23);
}

function b17(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 nullFunc_viff(17);
}

function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 31](i1 | 0) | 0;
}

function _llvm_round_f64(d1) {
 d1 = +d1;
 return d1 >= 0.0 ? +Math_floor(d1 + .5) : +Math_ceil(d1 - .5);
}

function _emscripten_glClearDepthf$legalf32(f1) {
 f1 = Math_fround(f1);
 _emscripten_glClearDepthf(+f1);
}

function _vprintf(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _vfprintf(HEAP32[7883] | 0, i2, i1) | 0;
}

function _ma_is_capture_supported__webaudio() {
 return (_emscripten_asm_const_ii(0, 0) | 0) != 0 | 0;
}

function _emscripten_glLineWidth$legalf32(f1) {
 f1 = Math_fround(f1);
 _emscripten_glLineWidth(+f1);
}

function _StopAudioStream(i1) {
 i1 = i1 | 0;
 _StopAudioBuffer(HEAP32[i1 + 12 >> 2] | 0);
 return;
}

function _PlayAudioStream(i1) {
 i1 = i1 | 0;
 _PlayAudioBuffer(HEAP32[i1 + 12 >> 2] | 0);
 return;
}

function b6(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 nullFunc_iiii(6);
 return 0;
}

function b21(i1, i2, f3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 nullFunc_viif(21);
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function _StopSound(i1) {
 i1 = i1 | 0;
 _StopAudioBuffer(HEAP32[i1 + 4 + 12 >> 2] | 0);
 return;
}

function _PlaySound(i1) {
 i1 = i1 | 0;
 _PlayAudioBuffer(HEAP32[i1 + 4 + 12 >> 2] | 0);
 return;
}

function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 31](i1 | 0);
}

function _strcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 ___stpcpy(i1, i2) | 0;
 return i1 | 0;
}

function b22(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 nullFunc_viii(22);
}

function b11(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 nullFunc_vff(11);
}

function b15(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 nullFunc_vidd(15);
}

function _copysignl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_copysign(d1, d2));
}

function b0(f1) {
 f1 = Math_fround(f1);
 nullFunc_ff(0);
 return Math_fround(0);
}

function _scalbnl(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_scalbn(d2, i1));
}

function _ldexp(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_scalbn(d2, i1));
}

function _UnloadImage(i1) {
 i1 = i1 | 0;
 _free(HEAP32[i1 >> 2] | 0);
 return;
}

function dynCall_i(i1) {
 i1 = i1 | 0;
 return FUNCTION_TABLE_i[i1 & 3]() | 0;
}

function b5(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 nullFunc_iii(5);
 return 0;
}

function b16(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 nullFunc_vif(16);
}

function b13(f1, i2) {
 f1 = Math_fround(f1);
 i2 = i2 | 0;
 nullFunc_vfi(13);
}

function _pthread_mutex_init(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function _pthread_cond_wait(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 0;
}

function _isupper(i1) {
 i1 = i1 | 0;
 return (i1 + -65 | 0) >>> 0 < 26 | 0;
}

function _isdigit(i1) {
 i1 = i1 | 0;
 return (i1 + -48 | 0) >>> 0 < 10 | 0;
}

function _main_loop() {
 _update_game(31296);
 _draw_game(31296);
 return;
}

function _ma_rand_f64() {
 return +(+(_ma_rand_s32() | 0) / 2147483647.0);
}

function _fmodl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_fmod(d1, d2));
}

function _SwapBuffers() {
 _glfwSwapBuffers(HEAP32[44037] | 0);
 return;
}

function b20(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 nullFunc_vii(20);
}

function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 7]();
}

function _emscripten_main_thread_process_queued_calls() {
 return;
}

function ___emscripten_stdout_close(i1) {
 i1 = i1 | 0;
 return 0;
}

function setEmtStackMax(i1) {
 i1 = i1 | 0;
 EMT_STACK_MAX = i1;
}

function _GetFrameTime() {
 return Math_fround(+HEAPF64[21925]);
}

function emtStackRestore(i1) {
 i1 = i1 | 0;
 EMTSTACKTOP = i1;
}

function _ma_rand_f32() {
 return Math_fround(+_ma_rand_f64());
}

function _pthread_mutex_destroy(i1) {
 i1 = i1 | 0;
 return 0;
}

function _rlClearScreenBuffers() {
 _glClear(16640);
 return;
}

function _pthread_mutex_unlock(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___pthread_self_490() {
 return _pthread_self() | 0;
}

function ___pthread_self_487() {
 return _pthread_self() | 0;
}

function ___pthread_self_124() {
 return _pthread_self() | 0;
}

function setAsyncState(i1) {
 i1 = i1 | 0;
 asyncState = i1;
}

function _pthread_cond_signal(i1) {
 i1 = i1 | 0;
 return 0;
}

function b3(i1) {
 i1 = i1 | 0;
 nullFunc_ii(3);
 return 0;
}

function b10(f1) {
 f1 = Math_fround(f1);
 nullFunc_vf(10);
}

function _pthread_mutex_lock(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___ofl_lock() {
 ___lock(176680);
 return 176688;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function _GetScreenHeight() {
 return HEAP32[44041] | 0;
}

function _dummy_268(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function ___ofl_unlock() {
 ___unlock(176680);
 return;
}

function _GetScreenWidth() {
 return HEAP32[44040] | 0;
}

function getEmtStackMax() {
 return EMT_STACK_MAX | 0;
}

function _ma_rand_u32() {
 return _ma_rand_s32() | 0;
}

function _emscripten_get_sbrk_ptr() {
 return 178256;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 1;
}

function emterpret(i1) {
 i1 = i1 | 0;
 assert(0);
}

function emtStackSave() {
 return EMTSTACKTOP | 0;
}

function b14(i1) {
 i1 = i1 | 0;
 nullFunc_vi(14);
}

function _GetTime() {
 return +(+_glfwGetTime());
}

function ___errno_location() {
 return 176612;
}

function stackSave() {
 return STACKTOP | 0;
}

function b2() {
 nullFunc_i(2);
 return 0;
}

function _pthread_self() {
 return 31544;
}

function _rlGetVersion() {
 return 4;
}

function b9() {
 nullFunc_v(9);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ff = [b0,_stbir__support_zero,_stbir__support_trapezoid,_stbir__support_one,_stbir__support_two,b0,b0,b0];
var FUNCTION_TABLE_fff = [b1,_stbir__filter_trapezoid,_stbir__filter_triangle,_stbir__filter_cubic,_stbir__filter_catmullrom,_stbir__filter_mitchell,b1,b1];
var FUNCTION_TABLE_i = [b2,_emscripten_glCreateProgram,_emscripten_glGetError,b2];
var FUNCTION_TABLE_ii = [b3,_stbi__stdio_eof,___emscripten_stdout_close,___stdio_close,_ma_context_uninit__webaudio,_ma_device_start__webaudio,_ma_device_stop__webaudio,_pthread_mutex_destroy,_pthread_mutex_lock,_pthread_mutex_unlock,_pthread_cond_destroy,_pthread_cond_signal,_pthread_attr_init,_pthread_attr_destroy,_ma_worker_thread,_emscripten_glCheckFramebufferStatus,_emscripten_glCreateShader,_emscripten_glGetString,_emscripten_glIsBuffer,_emscripten_glIsEnabled,_emscripten_glIsFramebuffer,_emscripten_glIsProgram,_emscripten_glIsRenderbuffer,_emscripten_glIsShader,_emscripten_glIsTexture,_emscripten_glIsQueryEXT,_emscripten_glIsVertexArrayOES,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_iidiiii = [b4,_fmt_fp];
var FUNCTION_TABLE_iii = [b5,_pthread_join,_pthread_mutex_init,_pthread_cond_init,_pthread_cond_wait,_stbv_point_compare,_stbv_uint32_compare,_rect_height_compare,_rect_original_order,_emscripten_glGetAttribLocation,_emscripten_glGetUniformLocation,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiii = [b6,_stbi__stdio_read,___stdio_write,_sn_write,_EmscriptenFullscreenChangeCallback,_EmscriptenKeyboardCallback,_EmscriptenMouseCallback,_EmscriptenTouchCallback,_EmscriptenGamepadCallback,_ma_context_is_device_id_equal__webaudio,_ma_context_enumerate_devices__webaudio,_ma_device_init__webaudio,_drmp3__on_read_stdio,_drmp3__on_seek_stdio,___stdio_read,_do_read];
var FUNCTION_TABLE_iiiii = [b7,___emscripten_stdout_seek,___stdio_seek,_ma_context__try_get_device_name_by_id__enum_callback,_ma_device__pcm_converter__on_read_from_buffer_capture,_ma_device__on_read_from_client,_ma_device__pcm_converter__on_read_from_buffer_playback,_ma_pcm_converter__pre_format_converter_on_read,_ma_pcm_converter__post_format_converter_on_read_deinterleaved,_ma_pcm_converter__post_format_converter_on_read,_ma_pcm_converter__src_on_read_deinterleaved,_ma_pcm_converter__channel_router_on_read_deinterleaved,_pthread_create,_ma_convert_frames__on_read,_OnAudioBufferDSPRead,b7];
var FUNCTION_TABLE_iiiiii = [b8,_ma_context_get_device_info__webaudio,_drmp3_read_src,b8];
var FUNCTION_TABLE_v = [b9,_main_loop,_emscripten_glFinish,_emscripten_glFlush,_emscripten_glReleaseShaderCompiler,b9,b9,b9];
var FUNCTION_TABLE_vf = [b10,_emscripten_glClearDepthf$legalf32,_emscripten_glLineWidth$legalf32,b10];
var FUNCTION_TABLE_vff = [b11,_emscripten_glDepthRangef$legalf32,_emscripten_glPolygonOffset$legalf32,b11];
var FUNCTION_TABLE_vffff = [b12,_emscripten_glBlendColor$legalf32,_emscripten_glClearColor$legalf32,b12];
var FUNCTION_TABLE_vfi = [b13,_emscripten_glSampleCoverage$legalf32];
var FUNCTION_TABLE_vi = [b14,_ma_device_uninit__webaudio,_emscripten_glActiveTexture,_emscripten_glBlendEquation,_emscripten_glClear,_emscripten_glClearStencil,_emscripten_glCompileShader,_emscripten_glCullFace,_emscripten_glDeleteProgram,_emscripten_glDeleteShader,_emscripten_glDepthFunc,_emscripten_glDepthMask,_emscripten_glDisable,_emscripten_glDisableVertexAttribArray,_emscripten_glEnable,_emscripten_glEnableVertexAttribArray,_emscripten_glFrontFace,_emscripten_glGenerateMipmap,_emscripten_glLinkProgram,_emscripten_glStencilMask,_emscripten_glUseProgram,_emscripten_glValidateProgram,_emscripten_glEndQueryEXT,_emscripten_glBindVertexArrayOES,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_vidd = [b15,_MouseCursorPosCallback,_ScrollCallback,b15];
var FUNCTION_TABLE_vif = [b16,_emscripten_glUniform1f$legalf32,_emscripten_glVertexAttrib1f$legalf32,b16];
var FUNCTION_TABLE_viff = [b17,_emscripten_glUniform2f$legalf32,_emscripten_glVertexAttrib2f$legalf32,b17];
var FUNCTION_TABLE_vifff = [b18,_emscripten_glUniform3f$legalf32,_emscripten_glVertexAttrib3f$legalf32,b18];
var FUNCTION_TABLE_viffff = [b19,_emscripten_glUniform4f$legalf32,_emscripten_glVertexAttrib4f$legalf32,b19];
var FUNCTION_TABLE_vii = [b20,_stbi__stdio_skip,_ErrorCallback,_CursorEnterCallback,_CharCallback,_WindowIconifyCallback,_pop_arg_long_double,_emscripten_glVertexAttribDivisorANGLE,_emscripten_glAttachShader,_emscripten_glBindBuffer,_emscripten_glBindFramebuffer,_emscripten_glBindRenderbuffer,_emscripten_glBindTexture,_emscripten_glBlendEquationSeparate,_emscripten_glBlendFunc,_emscripten_glDeleteBuffers,_emscripten_glDeleteFramebuffers,_emscripten_glDeleteRenderbuffers,_emscripten_glDeleteTextures,_emscripten_glDetachShader,_emscripten_glGenBuffers,_emscripten_glGenFramebuffers,_emscripten_glGenRenderbuffers,_emscripten_glGenTextures,_emscripten_glGetBooleanv,_emscripten_glGetFloatv,_emscripten_glGetIntegerv,_emscripten_glHint,_emscripten_glPixelStorei
,_emscripten_glStencilMaskSeparate,_emscripten_glUniform1i,_emscripten_glVertexAttrib1fv,_emscripten_glVertexAttrib2fv,_emscripten_glVertexAttrib3fv,_emscripten_glVertexAttrib4fv,_emscripten_glGenQueriesEXT,_emscripten_glDeleteQueriesEXT,_emscripten_glBeginQueryEXT,_emscripten_glQueryCounterEXT,_emscripten_glDeleteVertexArraysOES,_emscripten_glGenVertexArraysOES,_emscripten_glDrawBuffersWEBGL,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_viif = [b21,_emscripten_glTexParameterf$legalf32];
var FUNCTION_TABLE_viii = [b22,_WindowSizeCallback,_WindowDropCallback,_emscripten_glBindAttribLocation,_emscripten_glDrawArrays,_emscripten_glGetBufferParameteriv,_emscripten_glGetProgramiv,_emscripten_glGetRenderbufferParameteriv,_emscripten_glGetShaderiv,_emscripten_glGetTexParameterfv,_emscripten_glGetTexParameteriv,_emscripten_glGetUniformfv,_emscripten_glGetUniformiv,_emscripten_glGetVertexAttribfv,_emscripten_glGetVertexAttribiv,_emscripten_glGetVertexAttribPointerv,_emscripten_glStencilFunc,_emscripten_glStencilOp,_emscripten_glTexParameterfv,_emscripten_glTexParameteri,_emscripten_glTexParameteriv,_emscripten_glUniform1fv,_emscripten_glUniform1iv,_emscripten_glUniform2fv,_emscripten_glUniform2i,_emscripten_glUniform2iv,_emscripten_glUniform3fv,_emscripten_glUniform3iv,_emscripten_glUniform4fv
,_emscripten_glUniform4iv,_emscripten_glGetQueryivEXT,_emscripten_glGetQueryObjectivEXT,_emscripten_glGetQueryObjectuivEXT,_emscripten_glGetQueryObjecti64vEXT,_emscripten_glGetQueryObjectui64vEXT,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_viiii = [b23,_MouseButtonCallback,_OnLog,_OnSendAudioDataToDevice,_emscripten_glBlendFuncSeparate,_emscripten_glBufferData,_emscripten_glBufferSubData,_emscripten_glColorMask,_emscripten_glDrawElements,_emscripten_glFramebufferRenderbuffer,_emscripten_glGetAttachedShaders,_emscripten_glGetFramebufferAttachmentParameteriv,_emscripten_glGetProgramInfoLog,_emscripten_glGetShaderInfoLog,_emscripten_glGetShaderPrecisionFormat,_emscripten_glGetShaderSource,_emscripten_glRenderbufferStorage,_emscripten_glScissor,_emscripten_glShaderSource,_emscripten_glStencilFuncSeparate,_emscripten_glStencilOpSeparate,_emscripten_glUniform3i,_emscripten_glUniformMatrix2fv,_emscripten_glUniformMatrix3fv,_emscripten_glUniformMatrix4fv,_emscripten_glViewport,_emscripten_glDrawArraysInstancedANGLE,b23,b23
,b23,b23,b23];
var FUNCTION_TABLE_viiiii = [b24,_KeyCallback,_ma_pcm_interleave_u8,_ma_pcm_deinterleave_u8,_ma_pcm_interleave_s16,_ma_pcm_deinterleave_s16,_ma_pcm_interleave_s24,_ma_pcm_deinterleave_s24,_ma_pcm_interleave_s32,_ma_pcm_deinterleave_s32,_ma_pcm_interleave_f32,_ma_pcm_deinterleave_f32,_ma_pcm_u8_to_u8,_ma_pcm_u8_to_s16,_ma_pcm_u8_to_s24,_ma_pcm_u8_to_s32,_ma_pcm_u8_to_f32,_ma_pcm_s16_to_u8,_ma_pcm_s16_to_s16,_ma_pcm_s16_to_s24,_ma_pcm_s16_to_s32,_ma_pcm_s16_to_f32,_ma_pcm_s24_to_u8,_ma_pcm_s24_to_s16,_ma_pcm_s24_to_s24,_ma_pcm_s24_to_s32,_ma_pcm_s24_to_f32,_ma_pcm_s32_to_u8,_ma_pcm_s32_to_s16
,_ma_pcm_s32_to_s24,_ma_pcm_s32_to_s32,_ma_pcm_s32_to_f32,_ma_pcm_f32_to_u8,_ma_pcm_f32_to_s16,_ma_pcm_f32_to_s24,_ma_pcm_f32_to_s32,_ma_pcm_f32_to_f32,_emscripten_glFramebufferTexture2D,_emscripten_glShaderBinary,_emscripten_glUniform4i,_emscripten_glDrawElementsInstancedANGLE,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_viiiiii = [b25,_emscripten_glVertexAttribPointer];
var FUNCTION_TABLE_viiiiiii = [b26,_emscripten_glGetActiveAttrib,_emscripten_glGetActiveUniform,_emscripten_glReadPixels];
var FUNCTION_TABLE_viiiiiiii = [b27,_emscripten_glCompressedTexImage2D,_emscripten_glCopyTexImage2D,_emscripten_glCopyTexSubImage2D];
var FUNCTION_TABLE_viiiiiiiii = [b28,_emscripten_glCompressedTexSubImage2D,_emscripten_glTexImage2D,_emscripten_glTexSubImage2D];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_GetProcAddress: _emscripten_GetProcAddress, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _emscripten_main_thread_process_queued_calls: _emscripten_main_thread_process_queued_calls, _emscripten_replace_memory: _emscripten_replace_memory, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_round_f64: _llvm_round_f64, _ma_device_process_pcm_frames_capture__webaudio: _ma_device_process_pcm_frames_capture__webaudio, _ma_device_process_pcm_frames_playback__webaudio: _ma_device_process_pcm_frames_playback__webaudio, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _strstr: _strstr, dynCall_ff: dynCall_ff, dynCall_fff: dynCall_fff, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_v: dynCall_v, dynCall_vf: dynCall_vf, dynCall_vff: dynCall_vff, dynCall_vffff: dynCall_vffff, dynCall_vfi: dynCall_vfi, dynCall_vi: dynCall_vi, dynCall_vidd: dynCall_vidd, dynCall_vif: dynCall_vif, dynCall_viff: dynCall_viff, dynCall_vifff: dynCall_vifff, dynCall_viffff: dynCall_viffff, dynCall_vii: dynCall_vii, dynCall_viif: dynCall_viif, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, emtStackRestore: emtStackRestore, emtStackSave: emtStackSave, emterpret: emterpret, getEmtStackMax: getEmtStackMax, setAsyncState: setAsyncState, setEmtStackMax: setEmtStackMax, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

Module["asm"] = asm;
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments)
};

var ___muldi3 = Module["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___muldi3"].apply(null, arguments)
};

var ___udivdi3 = Module["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___udivdi3"].apply(null, arguments)
};

var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments)
};

var _bitshift64Shl = Module["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Shl"].apply(null, arguments)
};

var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_GetProcAddress"].apply(null, arguments)
};

var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_get_sbrk_ptr"].apply(null, arguments)
};

var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_main_thread_process_queued_calls"].apply(null, arguments)
};

var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_replace_memory"].apply(null, arguments)
};

var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments)
};

var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments)
};

var _i64Add = Module["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Add"].apply(null, arguments)
};

var _i64Subtract = Module["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Subtract"].apply(null, arguments)
};

var _llvm_round_f64 = Module["_llvm_round_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_round_f64"].apply(null, arguments)
};

var _ma_device_process_pcm_frames_capture__webaudio = Module["_ma_device_process_pcm_frames_capture__webaudio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ma_device_process_pcm_frames_capture__webaudio"].apply(null, arguments)
};

var _ma_device_process_pcm_frames_playback__webaudio = Module["_ma_device_process_pcm_frames_playback__webaudio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ma_device_process_pcm_frames_playback__webaudio"].apply(null, arguments)
};

var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments)
};

var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments)
};

var _memmove = Module["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memmove"].apply(null, arguments)
};

var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments)
};

var _strstr = Module["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strstr"].apply(null, arguments)
};

var emtStackRestore = Module["emtStackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackRestore"].apply(null, arguments)
};

var emtStackSave = Module["emtStackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackSave"].apply(null, arguments)
};

var emterpret = Module["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emterpret"].apply(null, arguments)
};

var getEmtStackMax = Module["getEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getEmtStackMax"].apply(null, arguments)
};

var setAsyncState = Module["setAsyncState"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setAsyncState"].apply(null, arguments)
};

var setEmtStackMax = Module["setEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setEmtStackMax"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

var dynCall_ff = Module["dynCall_ff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ff"].apply(null, arguments)
};

var dynCall_fff = Module["dynCall_fff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fff"].apply(null, arguments)
};

var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

var dynCall_vf = Module["dynCall_vf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vf"].apply(null, arguments)
};

var dynCall_vff = Module["dynCall_vff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vff"].apply(null, arguments)
};

var dynCall_vffff = Module["dynCall_vffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vffff"].apply(null, arguments)
};

var dynCall_vfi = Module["dynCall_vfi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vfi"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_vidd = Module["dynCall_vidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidd"].apply(null, arguments)
};

var dynCall_vif = Module["dynCall_vif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vif"].apply(null, arguments)
};

var dynCall_viff = Module["dynCall_viff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viff"].apply(null, arguments)
};

var dynCall_vifff = Module["dynCall_vifff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vifff"].apply(null, arguments)
};

var dynCall_viffff = Module["dynCall_viffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffff"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_viif = Module["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viif"].apply(null, arguments)
};

var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments)
};

var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiii"].apply(null, arguments)
};

var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments)
};
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
Module["calledRun"] = calledRun;



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  var initialEmtStackTop = Module['emtStackSave']();

  try {


    var ret = entryFunction(argc, argv);


    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as execution is asynchronously handed
    // off to a pthread.
    // if we are saving the stack, then do not call exit, we are not
    // really exiting now, just unwinding the JS stack
    if (!noExitRuntime) {
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['emtStackRestore'](initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}









